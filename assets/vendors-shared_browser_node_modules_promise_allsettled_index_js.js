(self["webpackChunkArise"] = self["webpackChunkArise"] || []).push([ [ "vendors-shared_browser_node_modules_promise_allsettled_index_js" ], {
    "../shared/browser/node_modules/array.prototype.map/implementation.js": (module, __unused_webpack_exports, __webpack_require__) => {
        "use strict";
        var ArraySpeciesCreate = __webpack_require__("../shared/browser/node_modules/es-abstract/2021/ArraySpeciesCreate.js");
        var Call = __webpack_require__("../shared/browser/node_modules/es-abstract/2021/Call.js");
        var CreateDataPropertyOrThrow = __webpack_require__("../shared/browser/node_modules/es-abstract/2021/CreateDataPropertyOrThrow.js");
        var Get = __webpack_require__("../shared/browser/node_modules/es-abstract/2021/Get.js");
        var HasProperty = __webpack_require__("../shared/browser/node_modules/es-abstract/2021/HasProperty.js");
        var IsCallable = __webpack_require__("../shared/browser/node_modules/es-abstract/2021/IsCallable.js");
        var ToUint32 = __webpack_require__("../shared/browser/node_modules/es-abstract/2021/ToUint32.js");
        var ToObject = __webpack_require__("../shared/browser/node_modules/es-abstract/2021/ToObject.js");
        var ToString = __webpack_require__("../shared/browser/node_modules/es-abstract/2021/ToString.js");
        var callBound = __webpack_require__("../shared/browser/node_modules/call-bind/callBound.js");
        var isString = __webpack_require__("../shared/browser/node_modules/is-string/index.js");
        var boxedString = Object("a");
        var splitString = "a" !== boxedString[0] || !(0 in boxedString);
        var strSplit = callBound("String.prototype.split");
        module.exports = function(callbackfn) {
            var O = ToObject(this);
            var self = splitString && isString(O) ? strSplit(O, "") : O;
            var len = ToUint32(self.length);
            if (!IsCallable(callbackfn)) throw new TypeError("Array.prototype.map callback must be a function");
            var T;
            if (arguments.length > 1) T = arguments[1];
            var A = ArraySpeciesCreate(O, len);
            var k = 0;
            while (k < len) {
                var Pk = ToString(k);
                var kPresent = HasProperty(O, Pk);
                if (kPresent) {
                    var kValue = Get(O, Pk);
                    var mappedValue = Call(callbackfn, T, [ kValue, k, O ]);
                    CreateDataPropertyOrThrow(A, Pk, mappedValue);
                }
                k += 1;
            }
            return A;
        };
    },
    "../shared/browser/node_modules/array.prototype.map/index.js": (module, __unused_webpack_exports, __webpack_require__) => {
        "use strict";
        var define = __webpack_require__("../shared/browser/node_modules/define-properties/index.js");
        var RequireObjectCoercible = __webpack_require__("../shared/browser/node_modules/es-abstract/2021/RequireObjectCoercible.js");
        var callBound = __webpack_require__("../shared/browser/node_modules/call-bind/callBound.js");
        var implementation = __webpack_require__("../shared/browser/node_modules/array.prototype.map/implementation.js");
        var getPolyfill = __webpack_require__("../shared/browser/node_modules/array.prototype.map/polyfill.js");
        var polyfill = getPolyfill();
        var shim = __webpack_require__("../shared/browser/node_modules/array.prototype.map/shim.js");
        var $slice = callBound("Array.prototype.slice");
        var boundMapShim = function(array, callbackfn) {
            RequireObjectCoercible(array);
            return polyfill.apply(array, $slice(arguments, 1));
        };
        define(boundMapShim, {
            getPolyfill,
            implementation,
            shim
        });
        module.exports = boundMapShim;
    },
    "../shared/browser/node_modules/array.prototype.map/polyfill.js": (module, __unused_webpack_exports, __webpack_require__) => {
        "use strict";
        var arrayMethodBoxesProperly = __webpack_require__("../shared/browser/node_modules/es-array-method-boxes-properly/index.js");
        var implementation = __webpack_require__("../shared/browser/node_modules/array.prototype.map/implementation.js");
        module.exports = function() {
            var method = Array.prototype.map;
            return arrayMethodBoxesProperly(method) ? method : implementation;
        };
    },
    "../shared/browser/node_modules/array.prototype.map/shim.js": (module, __unused_webpack_exports, __webpack_require__) => {
        "use strict";
        var define = __webpack_require__("../shared/browser/node_modules/define-properties/index.js");
        var getPolyfill = __webpack_require__("../shared/browser/node_modules/array.prototype.map/polyfill.js");
        module.exports = function() {
            var polyfill = getPolyfill();
            define(Array.prototype, {
                map: polyfill
            }, {
                map: function() {
                    return Array.prototype.map !== polyfill;
                }
            });
            return polyfill;
        };
    },
    "../shared/browser/node_modules/call-bind/callBound.js": (module, __unused_webpack_exports, __webpack_require__) => {
        "use strict";
        var GetIntrinsic = __webpack_require__("../shared/browser/node_modules/get-intrinsic/index.js");
        var callBind = __webpack_require__("../shared/browser/node_modules/call-bind/index.js");
        var $indexOf = callBind(GetIntrinsic("String.prototype.indexOf"));
        module.exports = function(name, allowMissing) {
            var intrinsic = GetIntrinsic(name, !!allowMissing);
            if ("function" === typeof intrinsic && $indexOf(name, ".prototype.") > -1) return callBind(intrinsic);
            return intrinsic;
        };
    },
    "../shared/browser/node_modules/call-bind/index.js": (module, __unused_webpack_exports, __webpack_require__) => {
        "use strict";
        var bind = __webpack_require__("../shared/browser/node_modules/function-bind/index.js");
        var GetIntrinsic = __webpack_require__("../shared/browser/node_modules/get-intrinsic/index.js");
        var $apply = GetIntrinsic("%Function.prototype.apply%");
        var $call = GetIntrinsic("%Function.prototype.call%");
        var $reflectApply = GetIntrinsic("%Reflect.apply%", true) || bind.call($call, $apply);
        var $gOPD = GetIntrinsic("%Object.getOwnPropertyDescriptor%", true);
        var $defineProperty = GetIntrinsic("%Object.defineProperty%", true);
        var $max = GetIntrinsic("%Math.max%");
        if ($defineProperty) try {
            $defineProperty({}, "a", {
                value: 1
            });
        } catch (e) {
            $defineProperty = null;
        }
        module.exports = function(originalFunction) {
            var func = $reflectApply(bind, $call, arguments);
            if ($gOPD && $defineProperty) {
                var desc = $gOPD(func, "length");
                if (desc.configurable) $defineProperty(func, "length", {
                    value: 1 + $max(0, originalFunction.length - (arguments.length - 1))
                });
            }
            return func;
        };
        var applyBind = function() {
            return $reflectApply(bind, $apply, arguments);
        };
        if ($defineProperty) $defineProperty(module.exports, "apply", {
            value: applyBind
        }); else module.exports.apply = applyBind;
    },
    "../shared/browser/node_modules/define-properties/index.js": (module, __unused_webpack_exports, __webpack_require__) => {
        "use strict";
        var keys = __webpack_require__("../shared/browser/node_modules/object-keys/index.js");
        var hasSymbols = "function" === typeof Symbol && "symbol" === typeof Symbol("foo");
        var toStr = Object.prototype.toString;
        var concat = Array.prototype.concat;
        var origDefineProperty = Object.defineProperty;
        var isFunction = function(fn) {
            return "function" === typeof fn && "[object Function]" === toStr.call(fn);
        };
        var hasPropertyDescriptors = __webpack_require__("../shared/browser/node_modules/has-property-descriptors/index.js")();
        var supportsDescriptors = origDefineProperty && hasPropertyDescriptors;
        var defineProperty = function(object, name, value, predicate) {
            if (name in object && (!isFunction(predicate) || !predicate())) return;
            if (supportsDescriptors) origDefineProperty(object, name, {
                configurable: true,
                enumerable: false,
                value,
                writable: true
            }); else object[name] = value;
        };
        var defineProperties = function(object, map) {
            var predicates = arguments.length > 2 ? arguments[2] : {};
            var props = keys(map);
            if (hasSymbols) props = concat.call(props, Object.getOwnPropertySymbols(map));
            for (var i = 0; i < props.length; i += 1) defineProperty(object, props[i], map[props[i]], predicates[props[i]]);
        };
        defineProperties.supportsDescriptors = !!supportsDescriptors;
        module.exports = defineProperties;
    },
    "../shared/browser/node_modules/es-array-method-boxes-properly/index.js": module => {
        module.exports = function(method) {
            var properlyBoxesNonStrict = true;
            var properlyBoxesStrict = true;
            var threwException = false;
            if ("function" === typeof method) {
                try {
                    method.call("f", (function(_, __, O) {
                        if ("object" !== typeof O) properlyBoxesNonStrict = false;
                    }));
                    method.call([ null ], (function() {
                        "use strict";
                        properlyBoxesStrict = "string" === typeof this;
                    }), "x");
                } catch (e) {
                    threwException = true;
                }
                return !threwException && properlyBoxesNonStrict && properlyBoxesStrict;
            }
            return false;
        };
    },
    "../shared/browser/node_modules/es-to-primitive/es2015.js": (module, __unused_webpack_exports, __webpack_require__) => {
        "use strict";
        var hasSymbols = "function" === typeof Symbol && "symbol" === typeof Symbol.iterator;
        var isPrimitive = __webpack_require__("../shared/browser/node_modules/es-to-primitive/helpers/isPrimitive.js");
        var isCallable = __webpack_require__("../shared/browser/node_modules/is-callable/index.js");
        var isDate = __webpack_require__("../shared/browser/node_modules/is-date-object/index.js");
        var isSymbol = __webpack_require__("../shared/browser/node_modules/is-symbol/index.js");
        var ordinaryToPrimitive = function(O, hint) {
            if ("undefined" === typeof O || null === O) throw new TypeError("Cannot call method on " + O);
            if ("string" !== typeof hint || "number" !== hint && "string" !== hint) throw new TypeError('hint must be "string" or "number"');
            var methodNames = "string" === hint ? [ "toString", "valueOf" ] : [ "valueOf", "toString" ];
            var method, result, i;
            for (i = 0; i < methodNames.length; ++i) {
                method = O[methodNames[i]];
                if (isCallable(method)) {
                    result = method.call(O);
                    if (isPrimitive(result)) return result;
                }
            }
            throw new TypeError("No default value");
        };
        var GetMethod = function(O, P) {
            var func = O[P];
            if (null !== func && "undefined" !== typeof func) {
                if (!isCallable(func)) throw new TypeError(func + " returned for property " + P + " of object " + O + " is not a function");
                return func;
            }
            return;
        };
        module.exports = function(input) {
            if (isPrimitive(input)) return input;
            var hint = "default";
            if (arguments.length > 1) if (arguments[1] === String) hint = "string"; else if (arguments[1] === Number) hint = "number";
            var exoticToPrim;
            if (hasSymbols) if (Symbol.toPrimitive) exoticToPrim = GetMethod(input, Symbol.toPrimitive); else if (isSymbol(input)) exoticToPrim = Symbol.prototype.valueOf;
            if ("undefined" !== typeof exoticToPrim) {
                var result = exoticToPrim.call(input, hint);
                if (isPrimitive(result)) return result;
                throw new TypeError("unable to convert exotic object to primitive");
            }
            if ("default" === hint && (isDate(input) || isSymbol(input))) hint = "string";
            return ordinaryToPrimitive(input, "default" === hint ? "number" : hint);
        };
    },
    "../shared/browser/node_modules/es-to-primitive/helpers/isPrimitive.js": module => {
        "use strict";
        module.exports = function(value) {
            return null === value || "function" !== typeof value && "object" !== typeof value;
        };
    },
    "../shared/browser/node_modules/function-bind/implementation.js": module => {
        "use strict";
        var ERROR_MESSAGE = "Function.prototype.bind called on incompatible ";
        var slice = Array.prototype.slice;
        var toStr = Object.prototype.toString;
        var funcType = "[object Function]";
        module.exports = function(that) {
            var target = this;
            if ("function" !== typeof target || toStr.call(target) !== funcType) throw new TypeError(ERROR_MESSAGE + target);
            var args = slice.call(arguments, 1);
            var bound;
            var binder = function() {
                if (this instanceof bound) {
                    var result = target.apply(this, args.concat(slice.call(arguments)));
                    if (Object(result) === result) return result;
                    return this;
                } else return target.apply(that, args.concat(slice.call(arguments)));
            };
            var boundLength = Math.max(0, target.length - args.length);
            var boundArgs = [];
            for (var i = 0; i < boundLength; i++) boundArgs.push("$" + i);
            bound = Function("binder", "return function (" + boundArgs.join(",") + "){ return binder.apply(this,arguments); }")(binder);
            if (target.prototype) {
                var Empty = function() {};
                Empty.prototype = target.prototype;
                bound.prototype = new Empty;
                Empty.prototype = null;
            }
            return bound;
        };
    },
    "../shared/browser/node_modules/function-bind/index.js": (module, __unused_webpack_exports, __webpack_require__) => {
        "use strict";
        var implementation = __webpack_require__("../shared/browser/node_modules/function-bind/implementation.js");
        module.exports = Function.prototype.bind || implementation;
    },
    "../shared/browser/node_modules/get-intrinsic/index.js": (module, __unused_webpack_exports, __webpack_require__) => {
        "use strict";
        var undefined;
        var $SyntaxError = SyntaxError;
        var $Function = Function;
        var $TypeError = TypeError;
        var getEvalledConstructor = function(expressionSyntax) {
            try {
                return $Function('"use strict"; return (' + expressionSyntax + ").constructor;")();
            } catch (e) {}
        };
        var $gOPD = Object.getOwnPropertyDescriptor;
        if ($gOPD) try {
            $gOPD({}, "");
        } catch (e) {
            $gOPD = null;
        }
        var throwTypeError = function() {
            throw new $TypeError;
        };
        var ThrowTypeError = $gOPD ? function() {
            try {
                arguments.callee;
                return throwTypeError;
            } catch (calleeThrows) {
                try {
                    return $gOPD(arguments, "callee").get;
                } catch (gOPDthrows) {
                    return throwTypeError;
                }
            }
        }() : throwTypeError;
        var hasSymbols = __webpack_require__("../shared/browser/node_modules/has-symbols/index.js")();
        var getProto = Object.getPrototypeOf || function(x) {
            return x.__proto__;
        };
        var needsEval = {};
        var TypedArray = "undefined" === typeof Uint8Array ? undefined : getProto(Uint8Array);
        var INTRINSICS = {
            "%AggregateError%": "undefined" === typeof AggregateError ? undefined : AggregateError,
            "%Array%": Array,
            "%ArrayBuffer%": "undefined" === typeof ArrayBuffer ? undefined : ArrayBuffer,
            "%ArrayIteratorPrototype%": hasSymbols ? getProto([][Symbol.iterator]()) : undefined,
            "%AsyncFromSyncIteratorPrototype%": undefined,
            "%AsyncFunction%": needsEval,
            "%AsyncGenerator%": needsEval,
            "%AsyncGeneratorFunction%": needsEval,
            "%AsyncIteratorPrototype%": needsEval,
            "%Atomics%": "undefined" === typeof Atomics ? undefined : Atomics,
            "%BigInt%": "undefined" === typeof BigInt ? undefined : BigInt,
            "%Boolean%": Boolean,
            "%DataView%": "undefined" === typeof DataView ? undefined : DataView,
            "%Date%": Date,
            "%decodeURI%": decodeURI,
            "%decodeURIComponent%": decodeURIComponent,
            "%encodeURI%": encodeURI,
            "%encodeURIComponent%": encodeURIComponent,
            "%Error%": Error,
            "%eval%": eval,
            "%EvalError%": EvalError,
            "%Float32Array%": "undefined" === typeof Float32Array ? undefined : Float32Array,
            "%Float64Array%": "undefined" === typeof Float64Array ? undefined : Float64Array,
            "%FinalizationRegistry%": "undefined" === typeof FinalizationRegistry ? undefined : FinalizationRegistry,
            "%Function%": $Function,
            "%GeneratorFunction%": needsEval,
            "%Int8Array%": "undefined" === typeof Int8Array ? undefined : Int8Array,
            "%Int16Array%": "undefined" === typeof Int16Array ? undefined : Int16Array,
            "%Int32Array%": "undefined" === typeof Int32Array ? undefined : Int32Array,
            "%isFinite%": isFinite,
            "%isNaN%": isNaN,
            "%IteratorPrototype%": hasSymbols ? getProto(getProto([][Symbol.iterator]())) : undefined,
            "%JSON%": "object" === typeof JSON ? JSON : undefined,
            "%Map%": "undefined" === typeof Map ? undefined : Map,
            "%MapIteratorPrototype%": "undefined" === typeof Map || !hasSymbols ? undefined : getProto((new Map)[Symbol.iterator]()),
            "%Math%": Math,
            "%Number%": Number,
            "%Object%": Object,
            "%parseFloat%": parseFloat,
            "%parseInt%": parseInt,
            "%Promise%": "undefined" === typeof Promise ? undefined : Promise,
            "%Proxy%": "undefined" === typeof Proxy ? undefined : Proxy,
            "%RangeError%": RangeError,
            "%ReferenceError%": ReferenceError,
            "%Reflect%": "undefined" === typeof Reflect ? undefined : Reflect,
            "%RegExp%": RegExp,
            "%Set%": "undefined" === typeof Set ? undefined : Set,
            "%SetIteratorPrototype%": "undefined" === typeof Set || !hasSymbols ? undefined : getProto((new Set)[Symbol.iterator]()),
            "%SharedArrayBuffer%": "undefined" === typeof SharedArrayBuffer ? undefined : SharedArrayBuffer,
            "%String%": String,
            "%StringIteratorPrototype%": hasSymbols ? getProto(""[Symbol.iterator]()) : undefined,
            "%Symbol%": hasSymbols ? Symbol : undefined,
            "%SyntaxError%": $SyntaxError,
            "%ThrowTypeError%": ThrowTypeError,
            "%TypedArray%": TypedArray,
            "%TypeError%": $TypeError,
            "%Uint8Array%": "undefined" === typeof Uint8Array ? undefined : Uint8Array,
            "%Uint8ClampedArray%": "undefined" === typeof Uint8ClampedArray ? undefined : Uint8ClampedArray,
            "%Uint16Array%": "undefined" === typeof Uint16Array ? undefined : Uint16Array,
            "%Uint32Array%": "undefined" === typeof Uint32Array ? undefined : Uint32Array,
            "%URIError%": URIError,
            "%WeakMap%": "undefined" === typeof WeakMap ? undefined : WeakMap,
            "%WeakRef%": "undefined" === typeof WeakRef ? undefined : WeakRef,
            "%WeakSet%": "undefined" === typeof WeakSet ? undefined : WeakSet
        };
        var doEval = function doEval(name) {
            var value;
            if ("%AsyncFunction%" === name) value = getEvalledConstructor("async function () {}"); else if ("%GeneratorFunction%" === name) value = getEvalledConstructor("function* () {}"); else if ("%AsyncGeneratorFunction%" === name) value = getEvalledConstructor("async function* () {}"); else if ("%AsyncGenerator%" === name) {
                var fn = doEval("%AsyncGeneratorFunction%");
                if (fn) value = fn.prototype;
            } else if ("%AsyncIteratorPrototype%" === name) {
                var gen = doEval("%AsyncGenerator%");
                if (gen) value = getProto(gen.prototype);
            }
            INTRINSICS[name] = value;
            return value;
        };
        var LEGACY_ALIASES = {
            "%ArrayBufferPrototype%": [ "ArrayBuffer", "prototype" ],
            "%ArrayPrototype%": [ "Array", "prototype" ],
            "%ArrayProto_entries%": [ "Array", "prototype", "entries" ],
            "%ArrayProto_forEach%": [ "Array", "prototype", "forEach" ],
            "%ArrayProto_keys%": [ "Array", "prototype", "keys" ],
            "%ArrayProto_values%": [ "Array", "prototype", "values" ],
            "%AsyncFunctionPrototype%": [ "AsyncFunction", "prototype" ],
            "%AsyncGenerator%": [ "AsyncGeneratorFunction", "prototype" ],
            "%AsyncGeneratorPrototype%": [ "AsyncGeneratorFunction", "prototype", "prototype" ],
            "%BooleanPrototype%": [ "Boolean", "prototype" ],
            "%DataViewPrototype%": [ "DataView", "prototype" ],
            "%DatePrototype%": [ "Date", "prototype" ],
            "%ErrorPrototype%": [ "Error", "prototype" ],
            "%EvalErrorPrototype%": [ "EvalError", "prototype" ],
            "%Float32ArrayPrototype%": [ "Float32Array", "prototype" ],
            "%Float64ArrayPrototype%": [ "Float64Array", "prototype" ],
            "%FunctionPrototype%": [ "Function", "prototype" ],
            "%Generator%": [ "GeneratorFunction", "prototype" ],
            "%GeneratorPrototype%": [ "GeneratorFunction", "prototype", "prototype" ],
            "%Int8ArrayPrototype%": [ "Int8Array", "prototype" ],
            "%Int16ArrayPrototype%": [ "Int16Array", "prototype" ],
            "%Int32ArrayPrototype%": [ "Int32Array", "prototype" ],
            "%JSONParse%": [ "JSON", "parse" ],
            "%JSONStringify%": [ "JSON", "stringify" ],
            "%MapPrototype%": [ "Map", "prototype" ],
            "%NumberPrototype%": [ "Number", "prototype" ],
            "%ObjectPrototype%": [ "Object", "prototype" ],
            "%ObjProto_toString%": [ "Object", "prototype", "toString" ],
            "%ObjProto_valueOf%": [ "Object", "prototype", "valueOf" ],
            "%PromisePrototype%": [ "Promise", "prototype" ],
            "%PromiseProto_then%": [ "Promise", "prototype", "then" ],
            "%Promise_all%": [ "Promise", "all" ],
            "%Promise_reject%": [ "Promise", "reject" ],
            "%Promise_resolve%": [ "Promise", "resolve" ],
            "%RangeErrorPrototype%": [ "RangeError", "prototype" ],
            "%ReferenceErrorPrototype%": [ "ReferenceError", "prototype" ],
            "%RegExpPrototype%": [ "RegExp", "prototype" ],
            "%SetPrototype%": [ "Set", "prototype" ],
            "%SharedArrayBufferPrototype%": [ "SharedArrayBuffer", "prototype" ],
            "%StringPrototype%": [ "String", "prototype" ],
            "%SymbolPrototype%": [ "Symbol", "prototype" ],
            "%SyntaxErrorPrototype%": [ "SyntaxError", "prototype" ],
            "%TypedArrayPrototype%": [ "TypedArray", "prototype" ],
            "%TypeErrorPrototype%": [ "TypeError", "prototype" ],
            "%Uint8ArrayPrototype%": [ "Uint8Array", "prototype" ],
            "%Uint8ClampedArrayPrototype%": [ "Uint8ClampedArray", "prototype" ],
            "%Uint16ArrayPrototype%": [ "Uint16Array", "prototype" ],
            "%Uint32ArrayPrototype%": [ "Uint32Array", "prototype" ],
            "%URIErrorPrototype%": [ "URIError", "prototype" ],
            "%WeakMapPrototype%": [ "WeakMap", "prototype" ],
            "%WeakSetPrototype%": [ "WeakSet", "prototype" ]
        };
        var bind = __webpack_require__("../shared/browser/node_modules/function-bind/index.js");
        var hasOwn = __webpack_require__("../shared/browser/node_modules/has/src/index.js");
        var $concat = bind.call(Function.call, Array.prototype.concat);
        var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
        var $replace = bind.call(Function.call, String.prototype.replace);
        var $strSlice = bind.call(Function.call, String.prototype.slice);
        var $exec = bind.call(Function.call, RegExp.prototype.exec);
        var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
        var reEscapeChar = /\\(\\)?/g;
        var stringToPath = function(string) {
            var first = $strSlice(string, 0, 1);
            var last = $strSlice(string, -1);
            if ("%" === first && "%" !== last) throw new $SyntaxError("invalid intrinsic syntax, expected closing `%`"); else if ("%" === last && "%" !== first) throw new $SyntaxError("invalid intrinsic syntax, expected opening `%`");
            var result = [];
            $replace(string, rePropName, (function(match, number, quote, subString) {
                result[result.length] = quote ? $replace(subString, reEscapeChar, "$1") : number || match;
            }));
            return result;
        };
        var getBaseIntrinsic = function(name, allowMissing) {
            var intrinsicName = name;
            var alias;
            if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
                alias = LEGACY_ALIASES[intrinsicName];
                intrinsicName = "%" + alias[0] + "%";
            }
            if (hasOwn(INTRINSICS, intrinsicName)) {
                var value = INTRINSICS[intrinsicName];
                if (value === needsEval) value = doEval(intrinsicName);
                if ("undefined" === typeof value && !allowMissing) throw new $TypeError("intrinsic " + name + " exists, but is not available. Please file an issue!");
                return {
                    alias,
                    name: intrinsicName,
                    value
                };
            }
            throw new $SyntaxError("intrinsic " + name + " does not exist!");
        };
        module.exports = function(name, allowMissing) {
            if ("string" !== typeof name || 0 === name.length) throw new $TypeError("intrinsic name must be a non-empty string");
            if (arguments.length > 1 && "boolean" !== typeof allowMissing) throw new $TypeError('"allowMissing" argument must be a boolean');
            if (null === $exec(/^%?[^%]*%?$/g, name)) throw new $SyntaxError("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
            var parts = stringToPath(name);
            var intrinsicBaseName = parts.length > 0 ? parts[0] : "";
            var intrinsic = getBaseIntrinsic("%" + intrinsicBaseName + "%", allowMissing);
            var intrinsicRealName = intrinsic.name;
            var value = intrinsic.value;
            var skipFurtherCaching = false;
            var alias = intrinsic.alias;
            if (alias) {
                intrinsicBaseName = alias[0];
                $spliceApply(parts, $concat([ 0, 1 ], alias));
            }
            for (var i = 1, isOwn = true; i < parts.length; i += 1) {
                var part = parts[i];
                var first = $strSlice(part, 0, 1);
                var last = $strSlice(part, -1);
                if (('"' === first || "'" === first || "`" === first || '"' === last || "'" === last || "`" === last) && first !== last) throw new $SyntaxError("property names with quotes must have matching quotes");
                if ("constructor" === part || !isOwn) skipFurtherCaching = true;
                intrinsicBaseName += "." + part;
                intrinsicRealName = "%" + intrinsicBaseName + "%";
                if (hasOwn(INTRINSICS, intrinsicRealName)) value = INTRINSICS[intrinsicRealName]; else if (null != value) {
                    if (!(part in value)) {
                        if (!allowMissing) throw new $TypeError("base intrinsic for " + name + " exists, but the property is not available.");
                        return;
                    }
                    if ($gOPD && i + 1 >= parts.length) {
                        var desc = $gOPD(value, part);
                        isOwn = !!desc;
                        if (isOwn && "get" in desc && !("originalValue" in desc.get)) value = desc.get; else value = value[part];
                    } else {
                        isOwn = hasOwn(value, part);
                        value = value[part];
                    }
                    if (isOwn && !skipFurtherCaching) INTRINSICS[intrinsicRealName] = value;
                }
            }
            return value;
        };
    },
    "../shared/browser/node_modules/has-property-descriptors/index.js": (module, __unused_webpack_exports, __webpack_require__) => {
        "use strict";
        var GetIntrinsic = __webpack_require__("../shared/browser/node_modules/get-intrinsic/index.js");
        var $defineProperty = GetIntrinsic("%Object.defineProperty%", true);
        var hasPropertyDescriptors = function() {
            if ($defineProperty) try {
                $defineProperty({}, "a", {
                    value: 1
                });
                return true;
            } catch (e) {
                return false;
            }
            return false;
        };
        hasPropertyDescriptors.hasArrayLengthDefineBug = function() {
            if (!hasPropertyDescriptors()) return null;
            try {
                return 1 !== $defineProperty([], "length", {
                    value: 1
                }).length;
            } catch (e) {
                return true;
            }
        };
        module.exports = hasPropertyDescriptors;
    },
    "../shared/browser/node_modules/has-symbols/index.js": (module, __unused_webpack_exports, __webpack_require__) => {
        "use strict";
        var origSymbol = "undefined" !== typeof Symbol && Symbol;
        var hasSymbolSham = __webpack_require__("../shared/browser/node_modules/has-symbols/shams.js");
        module.exports = function() {
            if ("function" !== typeof origSymbol) return false;
            if ("function" !== typeof Symbol) return false;
            if ("symbol" !== typeof origSymbol("foo")) return false;
            if ("symbol" !== typeof Symbol("bar")) return false;
            return hasSymbolSham();
        };
    },
    "../shared/browser/node_modules/has-symbols/shams.js": module => {
        "use strict";
        module.exports = function() {
            if ("function" !== typeof Symbol || "function" !== typeof Object.getOwnPropertySymbols) return false;
            if ("symbol" === typeof Symbol.iterator) return true;
            var obj = {};
            var sym = Symbol("test");
            var symObj = Object(sym);
            if ("string" === typeof sym) return false;
            if ("[object Symbol]" !== Object.prototype.toString.call(sym)) return false;
            if ("[object Symbol]" !== Object.prototype.toString.call(symObj)) return false;
            var symVal = 42;
            obj[sym] = symVal;
            for (sym in obj) return false;
            if ("function" === typeof Object.keys && 0 !== Object.keys(obj).length) return false;
            if ("function" === typeof Object.getOwnPropertyNames && 0 !== Object.getOwnPropertyNames(obj).length) return false;
            var syms = Object.getOwnPropertySymbols(obj);
            if (1 !== syms.length || syms[0] !== sym) return false;
            if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) return false;
            if ("function" === typeof Object.getOwnPropertyDescriptor) {
                var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
                if (descriptor.value !== symVal || true !== descriptor.enumerable) return false;
            }
            return true;
        };
    },
    "../shared/browser/node_modules/has-tostringtag/shams.js": (module, __unused_webpack_exports, __webpack_require__) => {
        "use strict";
        var hasSymbols = __webpack_require__("../shared/browser/node_modules/has-symbols/shams.js");
        module.exports = function() {
            return hasSymbols() && !!Symbol.toStringTag;
        };
    },
    "../shared/browser/node_modules/has/src/index.js": (module, __unused_webpack_exports, __webpack_require__) => {
        "use strict";
        var bind = __webpack_require__("../shared/browser/node_modules/function-bind/index.js");
        module.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);
    },
    "../shared/browser/node_modules/is-arguments/index.js": (module, __unused_webpack_exports, __webpack_require__) => {
        "use strict";
        var hasToStringTag = __webpack_require__("../shared/browser/node_modules/has-tostringtag/shams.js")();
        var callBound = __webpack_require__("../shared/browser/node_modules/call-bind/callBound.js");
        var $toString = callBound("Object.prototype.toString");
        var isStandardArguments = function(value) {
            if (hasToStringTag && value && "object" === typeof value && Symbol.toStringTag in value) return false;
            return "[object Arguments]" === $toString(value);
        };
        var isLegacyArguments = function(value) {
            if (isStandardArguments(value)) return true;
            return null !== value && "object" === typeof value && "number" === typeof value.length && value.length >= 0 && "[object Array]" !== $toString(value) && "[object Function]" === $toString(value.callee);
        };
        var supportsStandardArguments = function() {
            return isStandardArguments(arguments);
        }();
        isStandardArguments.isLegacyArguments = isLegacyArguments;
        module.exports = supportsStandardArguments ? isStandardArguments : isLegacyArguments;
    },
    "../shared/browser/node_modules/is-callable/index.js": module => {
        "use strict";
        var fnToStr = Function.prototype.toString;
        var reflectApply = "object" === typeof Reflect && null !== Reflect && Reflect.apply;
        var badArrayLike;
        var isCallableMarker;
        if ("function" === typeof reflectApply && "function" === typeof Object.defineProperty) try {
            badArrayLike = Object.defineProperty({}, "length", {
                get: function() {
                    throw isCallableMarker;
                }
            });
            isCallableMarker = {};
            reflectApply((function() {
                throw 42;
            }), null, badArrayLike);
        } catch (_) {
            if (_ !== isCallableMarker) reflectApply = null;
        } else reflectApply = null;
        var constructorRegex = /^\s*class\b/;
        var isES6ClassFn = function(value) {
            try {
                var fnStr = fnToStr.call(value);
                return constructorRegex.test(fnStr);
            } catch (e) {
                return false;
            }
        };
        var tryFunctionObject = function(value) {
            try {
                if (isES6ClassFn(value)) return false;
                fnToStr.call(value);
                return true;
            } catch (e) {
                return false;
            }
        };
        var toStr = Object.prototype.toString;
        var fnClass = "[object Function]";
        var genClass = "[object GeneratorFunction]";
        var hasToStringTag = "function" === typeof Symbol && !!Symbol.toStringTag;
        var documentDotAll = "object" === typeof document && "undefined" === typeof document.all && void 0 !== document.all ? document.all : {};
        module.exports = reflectApply ? function(value) {
            if (value === documentDotAll) return true;
            if (!value) return false;
            if ("function" !== typeof value && "object" !== typeof value) return false;
            if ("function" === typeof value && !value.prototype) return true;
            try {
                reflectApply(value, null, badArrayLike);
            } catch (e) {
                if (e !== isCallableMarker) return false;
            }
            return !isES6ClassFn(value);
        } : function(value) {
            if (value === documentDotAll) return true;
            if (!value) return false;
            if ("function" !== typeof value && "object" !== typeof value) return false;
            if ("function" === typeof value && !value.prototype) return true;
            if (hasToStringTag) return tryFunctionObject(value);
            if (isES6ClassFn(value)) return false;
            var strClass = toStr.call(value);
            return strClass === fnClass || strClass === genClass;
        };
    },
    "../shared/browser/node_modules/is-date-object/index.js": (module, __unused_webpack_exports, __webpack_require__) => {
        "use strict";
        var getDay = Date.prototype.getDay;
        var tryDateObject = function(value) {
            try {
                getDay.call(value);
                return true;
            } catch (e) {
                return false;
            }
        };
        var toStr = Object.prototype.toString;
        var dateClass = "[object Date]";
        var hasToStringTag = __webpack_require__("../shared/browser/node_modules/has-tostringtag/shams.js")();
        module.exports = function(value) {
            if ("object" !== typeof value || null === value) return false;
            return hasToStringTag ? tryDateObject(value) : toStr.call(value) === dateClass;
        };
    },
    "../shared/browser/node_modules/is-map/index.js": module => {
        "use strict";
        var $Map = "function" === typeof Map && Map.prototype ? Map : null;
        var $Set = "function" === typeof Set && Set.prototype ? Set : null;
        var exported;
        if (!$Map) exported = function(x) {
            return false;
        };
        var $mapHas = $Map ? Map.prototype.has : null;
        var $setHas = $Set ? Set.prototype.has : null;
        if (!exported && !$mapHas) exported = function(x) {
            return false;
        };
        module.exports = exported || function(x) {
            if (!x || "object" !== typeof x) return false;
            try {
                $mapHas.call(x);
                if ($setHas) try {
                    $setHas.call(x);
                } catch (e) {
                    return true;
                }
                return x instanceof $Map;
            } catch (e) {}
            return false;
        };
    },
    "../shared/browser/node_modules/is-regex/index.js": (module, __unused_webpack_exports, __webpack_require__) => {
        "use strict";
        var callBound = __webpack_require__("../shared/browser/node_modules/call-bind/callBound.js");
        var hasToStringTag = __webpack_require__("../shared/browser/node_modules/has-tostringtag/shams.js")();
        var has;
        var $exec;
        var isRegexMarker;
        var badStringifier;
        if (hasToStringTag) {
            has = callBound("Object.prototype.hasOwnProperty");
            $exec = callBound("RegExp.prototype.exec");
            isRegexMarker = {};
            var throwRegexMarker = function() {
                throw isRegexMarker;
            };
            badStringifier = {
                toString: throwRegexMarker,
                valueOf: throwRegexMarker
            };
            if ("symbol" === typeof Symbol.toPrimitive) badStringifier[Symbol.toPrimitive] = throwRegexMarker;
        }
        var $toString = callBound("Object.prototype.toString");
        var gOPD = Object.getOwnPropertyDescriptor;
        var regexClass = "[object RegExp]";
        module.exports = hasToStringTag ? function(value) {
            if (!value || "object" !== typeof value) return false;
            var descriptor = gOPD(value, "lastIndex");
            var hasLastIndexDataProperty = descriptor && has(descriptor, "value");
            if (!hasLastIndexDataProperty) return false;
            try {
                $exec(value, badStringifier);
            } catch (e) {
                return e === isRegexMarker;
            }
        } : function(value) {
            if (!value || "object" !== typeof value && "function" !== typeof value) return false;
            return $toString(value) === regexClass;
        };
    },
    "../shared/browser/node_modules/is-set/index.js": module => {
        "use strict";
        var $Map = "function" === typeof Map && Map.prototype ? Map : null;
        var $Set = "function" === typeof Set && Set.prototype ? Set : null;
        var exported;
        if (!$Set) exported = function(x) {
            return false;
        };
        var $mapHas = $Map ? Map.prototype.has : null;
        var $setHas = $Set ? Set.prototype.has : null;
        if (!exported && !$setHas) exported = function(x) {
            return false;
        };
        module.exports = exported || function(x) {
            if (!x || "object" !== typeof x) return false;
            try {
                $setHas.call(x);
                if ($mapHas) try {
                    $mapHas.call(x);
                } catch (e) {
                    return true;
                }
                return x instanceof $Set;
            } catch (e) {}
            return false;
        };
    },
    "../shared/browser/node_modules/is-string/index.js": (module, __unused_webpack_exports, __webpack_require__) => {
        "use strict";
        var strValue = String.prototype.valueOf;
        var tryStringObject = function(value) {
            try {
                strValue.call(value);
                return true;
            } catch (e) {
                return false;
            }
        };
        var toStr = Object.prototype.toString;
        var strClass = "[object String]";
        var hasToStringTag = __webpack_require__("../shared/browser/node_modules/has-tostringtag/shams.js")();
        module.exports = function(value) {
            if ("string" === typeof value) return true;
            if ("object" !== typeof value) return false;
            return hasToStringTag ? tryStringObject(value) : toStr.call(value) === strClass;
        };
    },
    "../shared/browser/node_modules/is-symbol/index.js": (module, __unused_webpack_exports, __webpack_require__) => {
        "use strict";
        var toStr = Object.prototype.toString;
        var hasSymbols = __webpack_require__("../shared/browser/node_modules/has-symbols/index.js")();
        if (hasSymbols) {
            var symToStr = Symbol.prototype.toString;
            var symStringRegex = /^Symbol\(.*\)$/;
            var isSymbolObject = function(value) {
                if ("symbol" !== typeof value.valueOf()) return false;
                return symStringRegex.test(symToStr.call(value));
            };
            module.exports = function(value) {
                if ("symbol" === typeof value) return true;
                if ("[object Symbol]" !== toStr.call(value)) return false;
                try {
                    return isSymbolObject(value);
                } catch (e) {
                    return false;
                }
            };
        } else module.exports = function(value) {
            return false && 0;
        };
    },
    "../shared/browser/node_modules/isarray/index.js": module => {
        var toString = {}.toString;
        module.exports = Array.isArray || function(arr) {
            return "[object Array]" == toString.call(arr);
        };
    },
    "../shared/browser/node_modules/iterate-iterator/index.js": module => {
        "use strict";
        var $TypeError = TypeError;
        module.exports = function(iterator) {
            if (!iterator || "function" !== typeof iterator.next) throw new $TypeError("iterator must be an object with a `next` method");
            if (arguments.length > 1) {
                var callback = arguments[1];
                if ("function" !== typeof callback) throw new $TypeError("`callback`, if provided, must be a function");
            }
            var values = callback || [];
            var result;
            while ((result = iterator.next()) && !result.done) if (callback) callback(result.value); else values.push(result.value);
            if (!callback) return values;
        };
    },
    "../shared/browser/node_modules/object-inspect/index.js": (module, __unused_webpack_exports, __webpack_require__) => {
        var hasMap = "function" === typeof Map && Map.prototype;
        var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, "size") : null;
        var mapSize = hasMap && mapSizeDescriptor && "function" === typeof mapSizeDescriptor.get ? mapSizeDescriptor.get : null;
        var mapForEach = hasMap && Map.prototype.forEach;
        var hasSet = "function" === typeof Set && Set.prototype;
        var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, "size") : null;
        var setSize = hasSet && setSizeDescriptor && "function" === typeof setSizeDescriptor.get ? setSizeDescriptor.get : null;
        var setForEach = hasSet && Set.prototype.forEach;
        var hasWeakMap = "function" === typeof WeakMap && WeakMap.prototype;
        var weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;
        var hasWeakSet = "function" === typeof WeakSet && WeakSet.prototype;
        var weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;
        var hasWeakRef = "function" === typeof WeakRef && WeakRef.prototype;
        var weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null;
        var booleanValueOf = Boolean.prototype.valueOf;
        var objectToString = Object.prototype.toString;
        var functionToString = Function.prototype.toString;
        var $match = String.prototype.match;
        var $slice = String.prototype.slice;
        var $replace = String.prototype.replace;
        var $toUpperCase = String.prototype.toUpperCase;
        var $toLowerCase = String.prototype.toLowerCase;
        var $test = RegExp.prototype.test;
        var $concat = Array.prototype.concat;
        var $join = Array.prototype.join;
        var $arrSlice = Array.prototype.slice;
        var $floor = Math.floor;
        var bigIntValueOf = "function" === typeof BigInt ? BigInt.prototype.valueOf : null;
        var gOPS = Object.getOwnPropertySymbols;
        var symToString = "function" === typeof Symbol && "symbol" === typeof Symbol.iterator ? Symbol.prototype.toString : null;
        var hasShammedSymbols = "function" === typeof Symbol && "object" === typeof Symbol.iterator;
        var toStringTag = "function" === typeof Symbol && Symbol.toStringTag && (typeof Symbol.toStringTag === hasShammedSymbols ? "object" : "symbol") ? Symbol.toStringTag : null;
        var isEnumerable = Object.prototype.propertyIsEnumerable;
        var gPO = ("function" === typeof Reflect ? Reflect.getPrototypeOf : Object.getPrototypeOf) || ([].__proto__ === Array.prototype ? function(O) {
            return O.__proto__;
        } : null);
        function addNumericSeparator(num, str) {
            if (num === 1 / 0 || num === -1 / 0 || num !== num || num && num > -1e3 && num < 1e3 || $test.call(/e/, str)) return str;
            var sepRegex = /[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;
            if ("number" === typeof num) {
                var int = num < 0 ? -$floor(-num) : $floor(num);
                if (int !== num) {
                    var intStr = String(int);
                    var dec = $slice.call(str, intStr.length + 1);
                    return $replace.call(intStr, sepRegex, "$&_") + "." + $replace.call($replace.call(dec, /([0-9]{3})/g, "$&_"), /_$/, "");
                }
            }
            return $replace.call(str, sepRegex, "$&_");
        }
        var utilInspect = __webpack_require__("?22e6");
        var inspectCustom = utilInspect.custom;
        var inspectSymbol = isSymbol(inspectCustom) ? inspectCustom : null;
        module.exports = function inspect_(obj, options, depth, seen) {
            var opts = options || {};
            if (has(opts, "quoteStyle") && "single" !== opts.quoteStyle && "double" !== opts.quoteStyle) throw new TypeError('option "quoteStyle" must be "single" or "double"');
            if (has(opts, "maxStringLength") && ("number" === typeof opts.maxStringLength ? opts.maxStringLength < 0 && opts.maxStringLength !== 1 / 0 : null !== opts.maxStringLength)) throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');
            var customInspect = has(opts, "customInspect") ? opts.customInspect : true;
            if ("boolean" !== typeof customInspect && "symbol" !== customInspect) throw new TypeError("option \"customInspect\", if provided, must be `true`, `false`, or `'symbol'`");
            if (has(opts, "indent") && null !== opts.indent && "\t" !== opts.indent && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)) throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');
            if (has(opts, "numericSeparator") && "boolean" !== typeof opts.numericSeparator) throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');
            var numericSeparator = opts.numericSeparator;
            if ("undefined" === typeof obj) return "undefined";
            if (null === obj) return "null";
            if ("boolean" === typeof obj) return obj ? "true" : "false";
            if ("string" === typeof obj) return inspectString(obj, opts);
            if ("number" === typeof obj) {
                if (0 === obj) return 1 / 0 / obj > 0 ? "0" : "-0";
                var str = String(obj);
                return numericSeparator ? addNumericSeparator(obj, str) : str;
            }
            if ("bigint" === typeof obj) {
                var bigIntStr = String(obj) + "n";
                return numericSeparator ? addNumericSeparator(obj, bigIntStr) : bigIntStr;
            }
            var maxDepth = "undefined" === typeof opts.depth ? 5 : opts.depth;
            if ("undefined" === typeof depth) depth = 0;
            if (depth >= maxDepth && maxDepth > 0 && "object" === typeof obj) return isArray(obj) ? "[Array]" : "[Object]";
            var indent = getIndent(opts, depth);
            if ("undefined" === typeof seen) seen = []; else if (indexOf(seen, obj) >= 0) return "[Circular]";
            function inspect(value, from, noIndent) {
                if (from) {
                    seen = $arrSlice.call(seen);
                    seen.push(from);
                }
                if (noIndent) {
                    var newOpts = {
                        depth: opts.depth
                    };
                    if (has(opts, "quoteStyle")) newOpts.quoteStyle = opts.quoteStyle;
                    return inspect_(value, newOpts, depth + 1, seen);
                }
                return inspect_(value, opts, depth + 1, seen);
            }
            if ("function" === typeof obj && !isRegExp(obj)) {
                var name = nameOf(obj);
                var keys = arrObjKeys(obj, inspect);
                return "[Function" + (name ? ": " + name : " (anonymous)") + "]" + (keys.length > 0 ? " { " + $join.call(keys, ", ") + " }" : "");
            }
            if (isSymbol(obj)) {
                var symString = hasShammedSymbols ? $replace.call(String(obj), /^(Symbol\(.*\))_[^)]*$/, "$1") : symToString.call(obj);
                return "object" === typeof obj && !hasShammedSymbols ? markBoxed(symString) : symString;
            }
            if (isElement(obj)) {
                var s = "<" + $toLowerCase.call(String(obj.nodeName));
                var attrs = obj.attributes || [];
                for (var i = 0; i < attrs.length; i++) s += " " + attrs[i].name + "=" + wrapQuotes(quote(attrs[i].value), "double", opts);
                s += ">";
                if (obj.childNodes && obj.childNodes.length) s += "...";
                s += "</" + $toLowerCase.call(String(obj.nodeName)) + ">";
                return s;
            }
            if (isArray(obj)) {
                if (0 === obj.length) return "[]";
                var xs = arrObjKeys(obj, inspect);
                if (indent && !singleLineValues(xs)) return "[" + indentedJoin(xs, indent) + "]";
                return "[ " + $join.call(xs, ", ") + " ]";
            }
            if (isError(obj)) {
                var parts = arrObjKeys(obj, inspect);
                if (!("cause" in Error.prototype) && "cause" in obj && !isEnumerable.call(obj, "cause")) return "{ [" + String(obj) + "] " + $join.call($concat.call("[cause]: " + inspect(obj.cause), parts), ", ") + " }";
                if (0 === parts.length) return "[" + String(obj) + "]";
                return "{ [" + String(obj) + "] " + $join.call(parts, ", ") + " }";
            }
            if ("object" === typeof obj && customInspect) if (inspectSymbol && "function" === typeof obj[inspectSymbol] && utilInspect) return utilInspect(obj, {
                depth: maxDepth - depth
            }); else if ("symbol" !== customInspect && "function" === typeof obj.inspect) return obj.inspect();
            if (isMap(obj)) {
                var mapParts = [];
                mapForEach.call(obj, (function(value, key) {
                    mapParts.push(inspect(key, obj, true) + " => " + inspect(value, obj));
                }));
                return collectionOf("Map", mapSize.call(obj), mapParts, indent);
            }
            if (isSet(obj)) {
                var setParts = [];
                setForEach.call(obj, (function(value) {
                    setParts.push(inspect(value, obj));
                }));
                return collectionOf("Set", setSize.call(obj), setParts, indent);
            }
            if (isWeakMap(obj)) return weakCollectionOf("WeakMap");
            if (isWeakSet(obj)) return weakCollectionOf("WeakSet");
            if (isWeakRef(obj)) return weakCollectionOf("WeakRef");
            if (isNumber(obj)) return markBoxed(inspect(Number(obj)));
            if (isBigInt(obj)) return markBoxed(inspect(bigIntValueOf.call(obj)));
            if (isBoolean(obj)) return markBoxed(booleanValueOf.call(obj));
            if (isString(obj)) return markBoxed(inspect(String(obj)));
            if (!isDate(obj) && !isRegExp(obj)) {
                var ys = arrObjKeys(obj, inspect);
                var isPlainObject = gPO ? gPO(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object;
                var protoTag = obj instanceof Object ? "" : "null prototype";
                var stringTag = !isPlainObject && toStringTag && Object(obj) === obj && toStringTag in obj ? $slice.call(toStr(obj), 8, -1) : protoTag ? "Object" : "";
                var constructorTag = isPlainObject || "function" !== typeof obj.constructor ? "" : obj.constructor.name ? obj.constructor.name + " " : "";
                var tag = constructorTag + (stringTag || protoTag ? "[" + $join.call($concat.call([], stringTag || [], protoTag || []), ": ") + "] " : "");
                if (0 === ys.length) return tag + "{}";
                if (indent) return tag + "{" + indentedJoin(ys, indent) + "}";
                return tag + "{ " + $join.call(ys, ", ") + " }";
            }
            return String(obj);
        };
        function wrapQuotes(s, defaultStyle, opts) {
            var quoteChar = "double" === (opts.quoteStyle || defaultStyle) ? '"' : "'";
            return quoteChar + s + quoteChar;
        }
        function quote(s) {
            return $replace.call(String(s), /"/g, "&quot;");
        }
        function isArray(obj) {
            return "[object Array]" === toStr(obj) && (!toStringTag || !("object" === typeof obj && toStringTag in obj));
        }
        function isDate(obj) {
            return "[object Date]" === toStr(obj) && (!toStringTag || !("object" === typeof obj && toStringTag in obj));
        }
        function isRegExp(obj) {
            return "[object RegExp]" === toStr(obj) && (!toStringTag || !("object" === typeof obj && toStringTag in obj));
        }
        function isError(obj) {
            return "[object Error]" === toStr(obj) && (!toStringTag || !("object" === typeof obj && toStringTag in obj));
        }
        function isString(obj) {
            return "[object String]" === toStr(obj) && (!toStringTag || !("object" === typeof obj && toStringTag in obj));
        }
        function isNumber(obj) {
            return "[object Number]" === toStr(obj) && (!toStringTag || !("object" === typeof obj && toStringTag in obj));
        }
        function isBoolean(obj) {
            return "[object Boolean]" === toStr(obj) && (!toStringTag || !("object" === typeof obj && toStringTag in obj));
        }
        function isSymbol(obj) {
            if (hasShammedSymbols) return obj && "object" === typeof obj && obj instanceof Symbol;
            if ("symbol" === typeof obj) return true;
            if (!obj || "object" !== typeof obj || !symToString) return false;
            try {
                symToString.call(obj);
                return true;
            } catch (e) {}
            return false;
        }
        function isBigInt(obj) {
            if (!obj || "object" !== typeof obj || !bigIntValueOf) return false;
            try {
                bigIntValueOf.call(obj);
                return true;
            } catch (e) {}
            return false;
        }
        var hasOwn = Object.prototype.hasOwnProperty || function(key) {
            return key in this;
        };
        function has(obj, key) {
            return hasOwn.call(obj, key);
        }
        function toStr(obj) {
            return objectToString.call(obj);
        }
        function nameOf(f) {
            if (f.name) return f.name;
            var m = $match.call(functionToString.call(f), /^function\s*([\w$]+)/);
            if (m) return m[1];
            return null;
        }
        function indexOf(xs, x) {
            if (xs.indexOf) return xs.indexOf(x);
            for (var i = 0, l = xs.length; i < l; i++) if (xs[i] === x) return i;
            return -1;
        }
        function isMap(x) {
            if (!mapSize || !x || "object" !== typeof x) return false;
            try {
                mapSize.call(x);
                try {
                    setSize.call(x);
                } catch (s) {
                    return true;
                }
                return x instanceof Map;
            } catch (e) {}
            return false;
        }
        function isWeakMap(x) {
            if (!weakMapHas || !x || "object" !== typeof x) return false;
            try {
                weakMapHas.call(x, weakMapHas);
                try {
                    weakSetHas.call(x, weakSetHas);
                } catch (s) {
                    return true;
                }
                return x instanceof WeakMap;
            } catch (e) {}
            return false;
        }
        function isWeakRef(x) {
            if (!weakRefDeref || !x || "object" !== typeof x) return false;
            try {
                weakRefDeref.call(x);
                return true;
            } catch (e) {}
            return false;
        }
        function isSet(x) {
            if (!setSize || !x || "object" !== typeof x) return false;
            try {
                setSize.call(x);
                try {
                    mapSize.call(x);
                } catch (m) {
                    return true;
                }
                return x instanceof Set;
            } catch (e) {}
            return false;
        }
        function isWeakSet(x) {
            if (!weakSetHas || !x || "object" !== typeof x) return false;
            try {
                weakSetHas.call(x, weakSetHas);
                try {
                    weakMapHas.call(x, weakMapHas);
                } catch (s) {
                    return true;
                }
                return x instanceof WeakSet;
            } catch (e) {}
            return false;
        }
        function isElement(x) {
            if (!x || "object" !== typeof x) return false;
            if ("undefined" !== typeof HTMLElement && x instanceof HTMLElement) return true;
            return "string" === typeof x.nodeName && "function" === typeof x.getAttribute;
        }
        function inspectString(str, opts) {
            if (str.length > opts.maxStringLength) {
                var remaining = str.length - opts.maxStringLength;
                var trailer = "... " + remaining + " more character" + (remaining > 1 ? "s" : "");
                return inspectString($slice.call(str, 0, opts.maxStringLength), opts) + trailer;
            }
            var s = $replace.call($replace.call(str, /(['\\])/g, "\\$1"), /[\x00-\x1f]/g, lowbyte);
            return wrapQuotes(s, "single", opts);
        }
        function lowbyte(c) {
            var n = c.charCodeAt(0);
            var x = {
                8: "b",
                9: "t",
                10: "n",
                12: "f",
                13: "r"
            }[n];
            if (x) return "\\" + x;
            return "\\x" + (n < 16 ? "0" : "") + $toUpperCase.call(n.toString(16));
        }
        function markBoxed(str) {
            return "Object(" + str + ")";
        }
        function weakCollectionOf(type) {
            return type + " { ? }";
        }
        function collectionOf(type, size, entries, indent) {
            var joinedEntries = indent ? indentedJoin(entries, indent) : $join.call(entries, ", ");
            return type + " (" + size + ") {" + joinedEntries + "}";
        }
        function singleLineValues(xs) {
            for (var i = 0; i < xs.length; i++) if (indexOf(xs[i], "\n") >= 0) return false;
            return true;
        }
        function getIndent(opts, depth) {
            var baseIndent;
            if ("\t" === opts.indent) baseIndent = "\t"; else if ("number" === typeof opts.indent && opts.indent > 0) baseIndent = $join.call(Array(opts.indent + 1), " "); else return null;
            return {
                base: baseIndent,
                prev: $join.call(Array(depth + 1), baseIndent)
            };
        }
        function indentedJoin(xs, indent) {
            if (0 === xs.length) return "";
            var lineJoiner = "\n" + indent.prev + indent.base;
            return lineJoiner + $join.call(xs, "," + lineJoiner) + "\n" + indent.prev;
        }
        function arrObjKeys(obj, inspect) {
            var isArr = isArray(obj);
            var xs = [];
            if (isArr) {
                xs.length = obj.length;
                for (var i = 0; i < obj.length; i++) xs[i] = has(obj, i) ? inspect(obj[i], obj) : "";
            }
            var syms = "function" === typeof gOPS ? gOPS(obj) : [];
            var symMap;
            if (hasShammedSymbols) {
                symMap = {};
                for (var k = 0; k < syms.length; k++) symMap["$" + syms[k]] = syms[k];
            }
            for (var key in obj) {
                if (!has(obj, key)) continue;
                if (isArr && String(Number(key)) === key && key < obj.length) continue;
                if (hasShammedSymbols && symMap["$" + key] instanceof Symbol) continue; else if ($test.call(/[^\w$]/, key)) xs.push(inspect(key, obj) + ": " + inspect(obj[key], obj)); else xs.push(key + ": " + inspect(obj[key], obj));
            }
            if ("function" === typeof gOPS) for (var j = 0; j < syms.length; j++) if (isEnumerable.call(obj, syms[j])) xs.push("[" + inspect(syms[j]) + "]: " + inspect(obj[syms[j]], obj));
            return xs;
        }
    },
    "../shared/browser/node_modules/object-keys/implementation.js": (module, __unused_webpack_exports, __webpack_require__) => {
        "use strict";
        var keysShim;
        if (!Object.keys) {
            var has = Object.prototype.hasOwnProperty;
            var toStr = Object.prototype.toString;
            var isArgs = __webpack_require__("../shared/browser/node_modules/object-keys/isArguments.js");
            var isEnumerable = Object.prototype.propertyIsEnumerable;
            var hasDontEnumBug = !isEnumerable.call({
                toString: null
            }, "toString");
            var hasProtoEnumBug = isEnumerable.call((function() {}), "prototype");
            var dontEnums = [ "toString", "toLocaleString", "valueOf", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "constructor" ];
            var equalsConstructorPrototype = function(o) {
                var ctor = o.constructor;
                return ctor && ctor.prototype === o;
            };
            var excludedKeys = {
                $applicationCache: true,
                $console: true,
                $external: true,
                $frame: true,
                $frameElement: true,
                $frames: true,
                $innerHeight: true,
                $innerWidth: true,
                $onmozfullscreenchange: true,
                $onmozfullscreenerror: true,
                $outerHeight: true,
                $outerWidth: true,
                $pageXOffset: true,
                $pageYOffset: true,
                $parent: true,
                $scrollLeft: true,
                $scrollTop: true,
                $scrollX: true,
                $scrollY: true,
                $self: true,
                $webkitIndexedDB: true,
                $webkitStorageInfo: true,
                $window: true
            };
            var hasAutomationEqualityBug = function() {
                if ("undefined" === typeof window) return false;
                for (var k in window) try {
                    if (!excludedKeys["$" + k] && has.call(window, k) && null !== window[k] && "object" === typeof window[k]) try {
                        equalsConstructorPrototype(window[k]);
                    } catch (e) {
                        return true;
                    }
                } catch (e) {
                    return true;
                }
                return false;
            }();
            var equalsConstructorPrototypeIfNotBuggy = function(o) {
                if ("undefined" === typeof window || !hasAutomationEqualityBug) return equalsConstructorPrototype(o);
                try {
                    return equalsConstructorPrototype(o);
                } catch (e) {
                    return false;
                }
            };
            keysShim = function(object) {
                var isObject = null !== object && "object" === typeof object;
                var isFunction = "[object Function]" === toStr.call(object);
                var isArguments = isArgs(object);
                var isString = isObject && "[object String]" === toStr.call(object);
                var theKeys = [];
                if (!isObject && !isFunction && !isArguments) throw new TypeError("Object.keys called on a non-object");
                var skipProto = hasProtoEnumBug && isFunction;
                if (isString && object.length > 0 && !has.call(object, 0)) for (var i = 0; i < object.length; ++i) theKeys.push(String(i));
                if (isArguments && object.length > 0) for (var j = 0; j < object.length; ++j) theKeys.push(String(j)); else for (var name in object) if (!(skipProto && "prototype" === name) && has.call(object, name)) theKeys.push(String(name));
                if (hasDontEnumBug) {
                    var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);
                    for (var k = 0; k < dontEnums.length; ++k) if (!(skipConstructor && "constructor" === dontEnums[k]) && has.call(object, dontEnums[k])) theKeys.push(dontEnums[k]);
                }
                return theKeys;
            };
        }
        module.exports = keysShim;
    },
    "../shared/browser/node_modules/object-keys/index.js": (module, __unused_webpack_exports, __webpack_require__) => {
        "use strict";
        var slice = Array.prototype.slice;
        var isArgs = __webpack_require__("../shared/browser/node_modules/object-keys/isArguments.js");
        var origKeys = Object.keys;
        var keysShim = origKeys ? function(o) {
            return origKeys(o);
        } : __webpack_require__("../shared/browser/node_modules/object-keys/implementation.js");
        var originalKeys = Object.keys;
        keysShim.shim = function() {
            if (Object.keys) {
                var keysWorksWithArguments = function() {
                    var args = Object.keys(arguments);
                    return args && args.length === arguments.length;
                }(1, 2);
                if (!keysWorksWithArguments) Object.keys = function(object) {
                    if (isArgs(object)) return originalKeys(slice.call(object));
                    return originalKeys(object);
                };
            } else Object.keys = keysShim;
            return Object.keys || keysShim;
        };
        module.exports = keysShim;
    },
    "../shared/browser/node_modules/object-keys/isArguments.js": module => {
        "use strict";
        var toStr = Object.prototype.toString;
        module.exports = function(value) {
            var str = toStr.call(value);
            var isArgs = "[object Arguments]" === str;
            if (!isArgs) isArgs = "[object Array]" !== str && null !== value && "object" === typeof value && "number" === typeof value.length && value.length >= 0 && "[object Function]" === toStr.call(value.callee);
            return isArgs;
        };
    },
    "../shared/browser/node_modules/promise.allsettled/implementation.js": (module, __unused_webpack_exports, __webpack_require__) => {
        "use strict";
        var requirePromise = __webpack_require__("../shared/browser/node_modules/promise.allsettled/requirePromise.js");
        requirePromise();
        var PromiseResolve = __webpack_require__("../shared/browser/node_modules/es-abstract/2020/PromiseResolve.js");
        var Type = __webpack_require__("../shared/browser/node_modules/es-abstract/2020/Type.js");
        var iterate = __webpack_require__("../shared/browser/node_modules/iterate-value/index.js");
        var map = __webpack_require__("../shared/browser/node_modules/array.prototype.map/index.js");
        var GetIntrinsic = __webpack_require__("../shared/browser/node_modules/get-intrinsic/index.js");
        var callBind = __webpack_require__("../shared/browser/node_modules/call-bind/index.js");
        var all = callBind(GetIntrinsic("%Promise.all%"));
        var reject = callBind(GetIntrinsic("%Promise.reject%"));
        module.exports = function(iterable) {
            var C = this;
            if ("Object" !== Type(C)) throw new TypeError("`this` value must be an object");
            var values = iterate(iterable);
            return all(C, map(values, (function(item) {
                var onFulfill = function(value) {
                    return {
                        status: "fulfilled",
                        value
                    };
                };
                var onReject = function(reason) {
                    return {
                        status: "rejected",
                        reason
                    };
                };
                var itemPromise = PromiseResolve(C, item);
                try {
                    return itemPromise.then(onFulfill, onReject);
                } catch (e) {
                    return reject(C, e);
                }
            })));
        };
    },
    "../shared/browser/node_modules/promise.allsettled/index.js": (module, __unused_webpack_exports, __webpack_require__) => {
        "use strict";
        var callBind = __webpack_require__("../shared/browser/node_modules/call-bind/index.js");
        var define = __webpack_require__("../shared/browser/node_modules/define-properties/index.js");
        var requirePromise = __webpack_require__("../shared/browser/node_modules/promise.allsettled/requirePromise.js");
        var implementation = __webpack_require__("../shared/browser/node_modules/promise.allsettled/implementation.js");
        var getPolyfill = __webpack_require__("../shared/browser/node_modules/promise.allsettled/polyfill.js");
        var shim = __webpack_require__("../shared/browser/node_modules/promise.allsettled/shim.js");
        requirePromise();
        var bound = callBind(getPolyfill());
        var rebindable = function(iterable) {
            return bound("undefined" === typeof this ? Promise : this, iterable);
        };
        define(rebindable, {
            getPolyfill,
            implementation,
            shim
        });
        module.exports = rebindable;
    },
    "../shared/browser/node_modules/promise.allsettled/polyfill.js": (module, __unused_webpack_exports, __webpack_require__) => {
        "use strict";
        var requirePromise = __webpack_require__("../shared/browser/node_modules/promise.allsettled/requirePromise.js");
        var implementation = __webpack_require__("../shared/browser/node_modules/promise.allsettled/implementation.js");
        module.exports = function() {
            requirePromise();
            return "function" === typeof Promise.allSettled ? Promise.allSettled : implementation;
        };
    },
    "../shared/browser/node_modules/promise.allsettled/requirePromise.js": module => {
        "use strict";
        module.exports = function() {
            if ("function" !== typeof Promise) throw new TypeError("`Promise.allSettled` requires a global `Promise` be available.");
        };
    },
    "../shared/browser/node_modules/promise.allsettled/shim.js": (module, __unused_webpack_exports, __webpack_require__) => {
        "use strict";
        var requirePromise = __webpack_require__("../shared/browser/node_modules/promise.allsettled/requirePromise.js");
        var getPolyfill = __webpack_require__("../shared/browser/node_modules/promise.allsettled/polyfill.js");
        var define = __webpack_require__("../shared/browser/node_modules/define-properties/index.js");
        module.exports = function() {
            requirePromise();
            var polyfill = getPolyfill();
            define(Promise, {
                allSettled: polyfill
            }, {
                allSettled: function() {
                    return Promise.allSettled !== polyfill;
                }
            });
            return polyfill;
        };
    },
    "../shared/browser/node_modules/es-abstract/2020/PromiseResolve.js": (module, __unused_webpack_exports, __webpack_require__) => {
        "use strict";
        var GetIntrinsic = __webpack_require__("../shared/browser/node_modules/get-intrinsic/index.js");
        var callBind = __webpack_require__("../shared/browser/node_modules/call-bind/index.js");
        var $resolve = GetIntrinsic("%Promise.resolve%", true);
        var $PromiseResolve = $resolve && callBind($resolve);
        module.exports = function(C, x) {
            if (!$PromiseResolve) throw new SyntaxError("This environment does not support Promises.");
            return $PromiseResolve(C, x);
        };
    },
    "../shared/browser/node_modules/es-abstract/2020/Type.js": (module, __unused_webpack_exports, __webpack_require__) => {
        "use strict";
        var ES5Type = __webpack_require__("../shared/browser/node_modules/es-abstract/5/Type.js");
        module.exports = function(x) {
            if ("symbol" === typeof x) return "Symbol";
            if ("bigint" === typeof x) return "BigInt";
            return ES5Type(x);
        };
    },
    "../shared/browser/node_modules/es-abstract/2021/ArrayCreate.js": (module, __unused_webpack_exports, __webpack_require__) => {
        "use strict";
        var GetIntrinsic = __webpack_require__("../shared/browser/node_modules/get-intrinsic/index.js");
        var $ArrayPrototype = GetIntrinsic("%Array.prototype%");
        var $RangeError = GetIntrinsic("%RangeError%");
        var $SyntaxError = GetIntrinsic("%SyntaxError%");
        var $TypeError = GetIntrinsic("%TypeError%");
        var IsIntegralNumber = __webpack_require__("../shared/browser/node_modules/es-abstract/2021/IsIntegralNumber.js");
        var MAX_ARRAY_LENGTH = Math.pow(2, 32) - 1;
        var $setProto = GetIntrinsic("%Object.setPrototypeOf%", true) || ([].__proto__ !== $ArrayPrototype ? null : function(O, proto) {
            O.__proto__ = proto;
            return O;
        });
        module.exports = function(length) {
            if (!IsIntegralNumber(length) || length < 0) throw new $TypeError("Assertion failed: `length` must be an integer Number >= 0");
            if (length > MAX_ARRAY_LENGTH) throw new $RangeError("length is greater than (2**32 - 1)");
            var proto = arguments.length > 1 ? arguments[1] : $ArrayPrototype;
            var A = [];
            if (proto !== $ArrayPrototype) {
                if (!$setProto) throw new $SyntaxError("ArrayCreate: a `proto` argument that is not `Array.prototype` is not supported in an environment that does not support setting the [[Prototype]]");
                $setProto(A, proto);
            }
            if (0 !== length) A.length = length;
            return A;
        };
    },
    "../shared/browser/node_modules/es-abstract/2021/ArraySpeciesCreate.js": (module, __unused_webpack_exports, __webpack_require__) => {
        "use strict";
        var GetIntrinsic = __webpack_require__("../shared/browser/node_modules/get-intrinsic/index.js");
        var $species = GetIntrinsic("%Symbol.species%", true);
        var $TypeError = GetIntrinsic("%TypeError%");
        var ArrayCreate = __webpack_require__("../shared/browser/node_modules/es-abstract/2021/ArrayCreate.js");
        var Get = __webpack_require__("../shared/browser/node_modules/es-abstract/2021/Get.js");
        var IsArray = __webpack_require__("../shared/browser/node_modules/es-abstract/2021/IsArray.js");
        var IsConstructor = __webpack_require__("../shared/browser/node_modules/es-abstract/2021/IsConstructor.js");
        var IsIntegralNumber = __webpack_require__("../shared/browser/node_modules/es-abstract/2021/IsIntegralNumber.js");
        var Type = __webpack_require__("../shared/browser/node_modules/es-abstract/2021/Type.js");
        module.exports = function(originalArray, length) {
            if (!IsIntegralNumber(length) || length < 0) throw new $TypeError("Assertion failed: length must be an integer >= 0");
            var isArray = IsArray(originalArray);
            if (!isArray) return ArrayCreate(length);
            var C = Get(originalArray, "constructor");
            if ($species && "Object" === Type(C)) {
                C = Get(C, $species);
                if (null === C) C = void 0;
            }
            if ("undefined" === typeof C) return ArrayCreate(length);
            if (!IsConstructor(C)) throw new $TypeError("C must be a constructor");
            return new C(length);
        };
    },
    "../shared/browser/node_modules/es-abstract/2021/Call.js": (module, __unused_webpack_exports, __webpack_require__) => {
        "use strict";
        var GetIntrinsic = __webpack_require__("../shared/browser/node_modules/get-intrinsic/index.js");
        var callBound = __webpack_require__("../shared/browser/node_modules/call-bind/callBound.js");
        var $TypeError = GetIntrinsic("%TypeError%");
        var IsArray = __webpack_require__("../shared/browser/node_modules/es-abstract/2021/IsArray.js");
        var $apply = GetIntrinsic("%Reflect.apply%", true) || callBound("%Function.prototype.apply%");
        module.exports = function(F, V) {
            var argumentsList = arguments.length > 2 ? arguments[2] : [];
            if (!IsArray(argumentsList)) throw new $TypeError("Assertion failed: optional `argumentsList`, if provided, must be a List");
            return $apply(F, V, argumentsList);
        };
    },
    "../shared/browser/node_modules/es-abstract/2021/CreateDataProperty.js": (module, __unused_webpack_exports, __webpack_require__) => {
        "use strict";
        var GetIntrinsic = __webpack_require__("../shared/browser/node_modules/get-intrinsic/index.js");
        var $TypeError = GetIntrinsic("%TypeError%");
        var DefineOwnProperty = __webpack_require__("../shared/browser/node_modules/es-abstract/helpers/DefineOwnProperty.js");
        var FromPropertyDescriptor = __webpack_require__("../shared/browser/node_modules/es-abstract/2021/FromPropertyDescriptor.js");
        var OrdinaryGetOwnProperty = __webpack_require__("../shared/browser/node_modules/es-abstract/2021/OrdinaryGetOwnProperty.js");
        var IsDataDescriptor = __webpack_require__("../shared/browser/node_modules/es-abstract/2021/IsDataDescriptor.js");
        var IsExtensible = __webpack_require__("../shared/browser/node_modules/es-abstract/2021/IsExtensible.js");
        var IsPropertyKey = __webpack_require__("../shared/browser/node_modules/es-abstract/2021/IsPropertyKey.js");
        var SameValue = __webpack_require__("../shared/browser/node_modules/es-abstract/2021/SameValue.js");
        var Type = __webpack_require__("../shared/browser/node_modules/es-abstract/2021/Type.js");
        module.exports = function(O, P, V) {
            if ("Object" !== Type(O)) throw new $TypeError("Assertion failed: Type(O) is not Object");
            if (!IsPropertyKey(P)) throw new $TypeError("Assertion failed: IsPropertyKey(P) is not true");
            var oldDesc = OrdinaryGetOwnProperty(O, P);
            var extensible = !oldDesc || IsExtensible(O);
            var nonConfigurable = oldDesc && !oldDesc["[[Configurable]]"];
            if (nonConfigurable || !extensible) return false;
            return DefineOwnProperty(IsDataDescriptor, SameValue, FromPropertyDescriptor, O, P, {
                "[[Configurable]]": true,
                "[[Enumerable]]": true,
                "[[Value]]": V,
                "[[Writable]]": true
            });
        };
    },
    "../shared/browser/node_modules/es-abstract/2021/CreateDataPropertyOrThrow.js": (module, __unused_webpack_exports, __webpack_require__) => {
        "use strict";
        var GetIntrinsic = __webpack_require__("../shared/browser/node_modules/get-intrinsic/index.js");
        var $TypeError = GetIntrinsic("%TypeError%");
        var CreateDataProperty = __webpack_require__("../shared/browser/node_modules/es-abstract/2021/CreateDataProperty.js");
        var IsPropertyKey = __webpack_require__("../shared/browser/node_modules/es-abstract/2021/IsPropertyKey.js");
        var Type = __webpack_require__("../shared/browser/node_modules/es-abstract/2021/Type.js");
        module.exports = function(O, P, V) {
            if ("Object" !== Type(O)) throw new $TypeError("Assertion failed: Type(O) is not Object");
            if (!IsPropertyKey(P)) throw new $TypeError("Assertion failed: IsPropertyKey(P) is not true");
            var success = CreateDataProperty(O, P, V);
            if (!success) throw new $TypeError("unable to create data property");
            return success;
        };
    },
    "../shared/browser/node_modules/es-abstract/2021/DefinePropertyOrThrow.js": (module, __unused_webpack_exports, __webpack_require__) => {
        "use strict";
        var GetIntrinsic = __webpack_require__("../shared/browser/node_modules/get-intrinsic/index.js");
        var $TypeError = GetIntrinsic("%TypeError%");
        var isPropertyDescriptor = __webpack_require__("../shared/browser/node_modules/es-abstract/helpers/isPropertyDescriptor.js");
        var DefineOwnProperty = __webpack_require__("../shared/browser/node_modules/es-abstract/helpers/DefineOwnProperty.js");
        var FromPropertyDescriptor = __webpack_require__("../shared/browser/node_modules/es-abstract/2021/FromPropertyDescriptor.js");
        var IsAccessorDescriptor = __webpack_require__("../shared/browser/node_modules/es-abstract/2021/IsAccessorDescriptor.js");
        var IsDataDescriptor = __webpack_require__("../shared/browser/node_modules/es-abstract/2021/IsDataDescriptor.js");
        var IsPropertyKey = __webpack_require__("../shared/browser/node_modules/es-abstract/2021/IsPropertyKey.js");
        var SameValue = __webpack_require__("../shared/browser/node_modules/es-abstract/2021/SameValue.js");
        var ToPropertyDescriptor = __webpack_require__("../shared/browser/node_modules/es-abstract/2021/ToPropertyDescriptor.js");
        var Type = __webpack_require__("../shared/browser/node_modules/es-abstract/2021/Type.js");
        module.exports = function(O, P, desc) {
            if ("Object" !== Type(O)) throw new $TypeError("Assertion failed: Type(O) is not Object");
            if (!IsPropertyKey(P)) throw new $TypeError("Assertion failed: IsPropertyKey(P) is not true");
            var Desc = isPropertyDescriptor({
                Type,
                IsDataDescriptor,
                IsAccessorDescriptor
            }, desc) ? desc : ToPropertyDescriptor(desc);
            if (!isPropertyDescriptor({
                Type,
                IsDataDescriptor,
                IsAccessorDescriptor
            }, Desc)) throw new $TypeError("Assertion failed: Desc is not a valid Property Descriptor");
            return DefineOwnProperty(IsDataDescriptor, SameValue, FromPropertyDescriptor, O, P, Desc);
        };
    },
    "../shared/browser/node_modules/es-abstract/2021/FromPropertyDescriptor.js": (module, __unused_webpack_exports, __webpack_require__) => {
        "use strict";
        var assertRecord = __webpack_require__("../shared/browser/node_modules/es-abstract/helpers/assertRecord.js");
        var fromPropertyDescriptor = __webpack_require__("../shared/browser/node_modules/es-abstract/helpers/fromPropertyDescriptor.js");
        var Type = __webpack_require__("../shared/browser/node_modules/es-abstract/2021/Type.js");
        module.exports = function(Desc) {
            if ("undefined" !== typeof Desc) assertRecord(Type, "Property Descriptor", "Desc", Desc);
            return fromPropertyDescriptor(Desc);
        };
    },
    "../shared/browser/node_modules/es-abstract/2021/Get.js": (module, __unused_webpack_exports, __webpack_require__) => {
        "use strict";
        var GetIntrinsic = __webpack_require__("../shared/browser/node_modules/get-intrinsic/index.js");
        var $TypeError = GetIntrinsic("%TypeError%");
        var inspect = __webpack_require__("../shared/browser/node_modules/object-inspect/index.js");
        var IsPropertyKey = __webpack_require__("../shared/browser/node_modules/es-abstract/2021/IsPropertyKey.js");
        var Type = __webpack_require__("../shared/browser/node_modules/es-abstract/2021/Type.js");
        module.exports = function(O, P) {
            if ("Object" !== Type(O)) throw new $TypeError("Assertion failed: Type(O) is not Object");
            if (!IsPropertyKey(P)) throw new $TypeError("Assertion failed: IsPropertyKey(P) is not true, got " + inspect(P));
            return O[P];
        };
    },
    "../shared/browser/node_modules/es-abstract/2021/HasProperty.js": (module, __unused_webpack_exports, __webpack_require__) => {
        "use strict";
        var GetIntrinsic = __webpack_require__("../shared/browser/node_modules/get-intrinsic/index.js");
        var $TypeError = GetIntrinsic("%TypeError%");
        var IsPropertyKey = __webpack_require__("../shared/browser/node_modules/es-abstract/2021/IsPropertyKey.js");
        var Type = __webpack_require__("../shared/browser/node_modules/es-abstract/2021/Type.js");
        module.exports = function(O, P) {
            if ("Object" !== Type(O)) throw new $TypeError("Assertion failed: `O` must be an Object");
            if (!IsPropertyKey(P)) throw new $TypeError("Assertion failed: `P` must be a Property Key");
            return P in O;
        };
    },
    "../shared/browser/node_modules/es-abstract/2021/IsAccessorDescriptor.js": (module, __unused_webpack_exports, __webpack_require__) => {
        "use strict";
        var has = __webpack_require__("../shared/browser/node_modules/has/src/index.js");
        var assertRecord = __webpack_require__("../shared/browser/node_modules/es-abstract/helpers/assertRecord.js");
        var Type = __webpack_require__("../shared/browser/node_modules/es-abstract/2021/Type.js");
        module.exports = function(Desc) {
            if ("undefined" === typeof Desc) return false;
            assertRecord(Type, "Property Descriptor", "Desc", Desc);
            if (!has(Desc, "[[Get]]") && !has(Desc, "[[Set]]")) return false;
            return true;
        };
    },
    "../shared/browser/node_modules/es-abstract/2021/IsArray.js": (module, __unused_webpack_exports, __webpack_require__) => {
        "use strict";
        module.exports = __webpack_require__("../shared/browser/node_modules/es-abstract/helpers/IsArray.js");
    },
    "../shared/browser/node_modules/es-abstract/2021/IsCallable.js": (module, __unused_webpack_exports, __webpack_require__) => {
        "use strict";
        module.exports = __webpack_require__("../shared/browser/node_modules/is-callable/index.js");
    },
    "../shared/browser/node_modules/es-abstract/2021/IsConstructor.js": (module, __unused_webpack_exports, __webpack_require__) => {
        "use strict";
        var GetIntrinsic = __webpack_require__("../shared/browser/node_modules/es-abstract/GetIntrinsic.js");
        var $construct = GetIntrinsic("%Reflect.construct%", true);
        var DefinePropertyOrThrow = __webpack_require__("../shared/browser/node_modules/es-abstract/2021/DefinePropertyOrThrow.js");
        try {
            DefinePropertyOrThrow({}, "", {
                "[[Get]]": function() {}
            });
        } catch (e) {
            DefinePropertyOrThrow = null;
        }
        if (DefinePropertyOrThrow && $construct) {
            var isConstructorMarker = {};
            var badArrayLike = {};
            DefinePropertyOrThrow(badArrayLike, "length", {
                "[[Get]]": function() {
                    throw isConstructorMarker;
                },
                "[[Enumerable]]": true
            });
            module.exports = function(argument) {
                try {
                    $construct(argument, badArrayLike);
                } catch (err) {
                    return err === isConstructorMarker;
                }
            };
        } else module.exports = function(argument) {
            return "function" === typeof argument && !!argument.prototype;
        };
    },
    "../shared/browser/node_modules/es-abstract/2021/IsDataDescriptor.js": (module, __unused_webpack_exports, __webpack_require__) => {
        "use strict";
        var has = __webpack_require__("../shared/browser/node_modules/has/src/index.js");
        var assertRecord = __webpack_require__("../shared/browser/node_modules/es-abstract/helpers/assertRecord.js");
        var Type = __webpack_require__("../shared/browser/node_modules/es-abstract/2021/Type.js");
        module.exports = function(Desc) {
            if ("undefined" === typeof Desc) return false;
            assertRecord(Type, "Property Descriptor", "Desc", Desc);
            if (!has(Desc, "[[Value]]") && !has(Desc, "[[Writable]]")) return false;
            return true;
        };
    },
    "../shared/browser/node_modules/es-abstract/2021/IsExtensible.js": (module, __unused_webpack_exports, __webpack_require__) => {
        "use strict";
        var GetIntrinsic = __webpack_require__("../shared/browser/node_modules/get-intrinsic/index.js");
        var $preventExtensions = GetIntrinsic("%Object.preventExtensions%", true);
        var $isExtensible = GetIntrinsic("%Object.isExtensible%", true);
        var isPrimitive = __webpack_require__("../shared/browser/node_modules/es-abstract/helpers/isPrimitive.js");
        module.exports = $preventExtensions ? function(obj) {
            return !isPrimitive(obj) && $isExtensible(obj);
        } : function(obj) {
            return !isPrimitive(obj);
        };
    },
    "../shared/browser/node_modules/es-abstract/2021/IsIntegralNumber.js": (module, __unused_webpack_exports, __webpack_require__) => {
        "use strict";
        var abs = __webpack_require__("../shared/browser/node_modules/es-abstract/2021/abs.js");
        var floor = __webpack_require__("../shared/browser/node_modules/es-abstract/2021/floor.js");
        var Type = __webpack_require__("../shared/browser/node_modules/es-abstract/2021/Type.js");
        var $isNaN = __webpack_require__("../shared/browser/node_modules/es-abstract/helpers/isNaN.js");
        var $isFinite = __webpack_require__("../shared/browser/node_modules/es-abstract/helpers/isFinite.js");
        module.exports = function(argument) {
            if ("Number" !== Type(argument) || $isNaN(argument) || !$isFinite(argument)) return false;
            var absValue = abs(argument);
            return floor(absValue) === absValue;
        };
    },
    "../shared/browser/node_modules/es-abstract/2021/IsPropertyKey.js": module => {
        "use strict";
        module.exports = function(argument) {
            return "string" === typeof argument || "symbol" === typeof argument;
        };
    },
    "../shared/browser/node_modules/es-abstract/2021/IsRegExp.js": (module, __unused_webpack_exports, __webpack_require__) => {
        "use strict";
        var GetIntrinsic = __webpack_require__("../shared/browser/node_modules/get-intrinsic/index.js");
        var $match = GetIntrinsic("%Symbol.match%", true);
        var hasRegExpMatcher = __webpack_require__("../shared/browser/node_modules/is-regex/index.js");
        var ToBoolean = __webpack_require__("../shared/browser/node_modules/es-abstract/2021/ToBoolean.js");
        module.exports = function(argument) {
            if (!argument || "object" !== typeof argument) return false;
            if ($match) {
                var isRegExp = argument[$match];
                if ("undefined" !== typeof isRegExp) return ToBoolean(isRegExp);
            }
            return hasRegExpMatcher(argument);
        };
    },
    "../shared/browser/node_modules/es-abstract/2021/OrdinaryGetOwnProperty.js": (module, __unused_webpack_exports, __webpack_require__) => {
        "use strict";
        var GetIntrinsic = __webpack_require__("../shared/browser/node_modules/get-intrinsic/index.js");
        var $gOPD = __webpack_require__("../shared/browser/node_modules/es-abstract/helpers/getOwnPropertyDescriptor.js");
        var $TypeError = GetIntrinsic("%TypeError%");
        var callBound = __webpack_require__("../shared/browser/node_modules/call-bind/callBound.js");
        var $isEnumerable = callBound("Object.prototype.propertyIsEnumerable");
        var has = __webpack_require__("../shared/browser/node_modules/has/src/index.js");
        var IsArray = __webpack_require__("../shared/browser/node_modules/es-abstract/2021/IsArray.js");
        var IsPropertyKey = __webpack_require__("../shared/browser/node_modules/es-abstract/2021/IsPropertyKey.js");
        var IsRegExp = __webpack_require__("../shared/browser/node_modules/es-abstract/2021/IsRegExp.js");
        var ToPropertyDescriptor = __webpack_require__("../shared/browser/node_modules/es-abstract/2021/ToPropertyDescriptor.js");
        var Type = __webpack_require__("../shared/browser/node_modules/es-abstract/2021/Type.js");
        module.exports = function(O, P) {
            if ("Object" !== Type(O)) throw new $TypeError("Assertion failed: O must be an Object");
            if (!IsPropertyKey(P)) throw new $TypeError("Assertion failed: P must be a Property Key");
            if (!has(O, P)) return;
            if (!$gOPD) {
                var arrayLength = IsArray(O) && "length" === P;
                var regexLastIndex = IsRegExp(O) && "lastIndex" === P;
                return {
                    "[[Configurable]]": !(arrayLength || regexLastIndex),
                    "[[Enumerable]]": $isEnumerable(O, P),
                    "[[Value]]": O[P],
                    "[[Writable]]": true
                };
            }
            return ToPropertyDescriptor($gOPD(O, P));
        };
    },
    "../shared/browser/node_modules/es-abstract/2021/RequireObjectCoercible.js": (module, __unused_webpack_exports, __webpack_require__) => {
        "use strict";
        module.exports = __webpack_require__("../shared/browser/node_modules/es-abstract/5/CheckObjectCoercible.js");
    },
    "../shared/browser/node_modules/es-abstract/2021/SameValue.js": (module, __unused_webpack_exports, __webpack_require__) => {
        "use strict";
        var $isNaN = __webpack_require__("../shared/browser/node_modules/es-abstract/helpers/isNaN.js");
        module.exports = function(x, y) {
            if (x === y) {
                if (0 === x) return 1 / x === 1 / y;
                return true;
            }
            return $isNaN(x) && $isNaN(y);
        };
    },
    "../shared/browser/node_modules/es-abstract/2021/ToBoolean.js": module => {
        "use strict";
        module.exports = function(value) {
            return !!value;
        };
    },
    "../shared/browser/node_modules/es-abstract/2021/ToNumber.js": (module, __unused_webpack_exports, __webpack_require__) => {
        "use strict";
        var GetIntrinsic = __webpack_require__("../shared/browser/node_modules/get-intrinsic/index.js");
        var $TypeError = GetIntrinsic("%TypeError%");
        var $Number = GetIntrinsic("%Number%");
        var $RegExp = GetIntrinsic("%RegExp%");
        var $parseInteger = GetIntrinsic("%parseInt%");
        var callBound = __webpack_require__("../shared/browser/node_modules/call-bind/callBound.js");
        var regexTester = __webpack_require__("../shared/browser/node_modules/es-abstract/helpers/regexTester.js");
        var isPrimitive = __webpack_require__("../shared/browser/node_modules/es-abstract/helpers/isPrimitive.js");
        var $strSlice = callBound("String.prototype.slice");
        var isBinary = regexTester(/^0b[01]+$/i);
        var isOctal = regexTester(/^0o[0-7]+$/i);
        var isInvalidHexLiteral = regexTester(/^[-+]0x[0-9a-f]+$/i);
        var nonWS = [ "", "​", "￾" ].join("");
        var nonWSregex = new $RegExp("[" + nonWS + "]", "g");
        var hasNonWS = regexTester(nonWSregex);
        var ws = [ "\t\n\v\f\r   ᠎    ", "         　\u2028", "\u2029\ufeff" ].join("");
        var trimRegex = new RegExp("(^[" + ws + "]+)|([" + ws + "]+$)", "g");
        var $replace = callBound("String.prototype.replace");
        var $trim = function(value) {
            return $replace(value, trimRegex, "");
        };
        var ToPrimitive = __webpack_require__("../shared/browser/node_modules/es-abstract/2021/ToPrimitive.js");
        module.exports = function ToNumber(argument) {
            var value = isPrimitive(argument) ? argument : ToPrimitive(argument, $Number);
            if ("symbol" === typeof value) throw new $TypeError("Cannot convert a Symbol value to a number");
            if ("bigint" === typeof value) throw new $TypeError("Conversion from 'BigInt' to 'number' is not allowed.");
            if ("string" === typeof value) {
                if (isBinary(value)) return ToNumber($parseInteger($strSlice(value, 2), 2)); else if (isOctal(value)) return ToNumber($parseInteger($strSlice(value, 2), 8)); else if (hasNonWS(value) || isInvalidHexLiteral(value)) return NaN;
                var trimmed = $trim(value);
                if (trimmed !== value) return ToNumber(trimmed);
            }
            return $Number(value);
        };
    },
    "../shared/browser/node_modules/es-abstract/2021/ToObject.js": (module, __unused_webpack_exports, __webpack_require__) => {
        "use strict";
        var GetIntrinsic = __webpack_require__("../shared/browser/node_modules/get-intrinsic/index.js");
        var $Object = GetIntrinsic("%Object%");
        var RequireObjectCoercible = __webpack_require__("../shared/browser/node_modules/es-abstract/2021/RequireObjectCoercible.js");
        module.exports = function(value) {
            RequireObjectCoercible(value);
            return $Object(value);
        };
    },
    "../shared/browser/node_modules/es-abstract/2021/ToPrimitive.js": (module, __unused_webpack_exports, __webpack_require__) => {
        "use strict";
        var toPrimitive = __webpack_require__("../shared/browser/node_modules/es-to-primitive/es2015.js");
        module.exports = function(input) {
            if (arguments.length > 1) return toPrimitive(input, arguments[1]);
            return toPrimitive(input);
        };
    },
    "../shared/browser/node_modules/es-abstract/2021/ToPropertyDescriptor.js": (module, __unused_webpack_exports, __webpack_require__) => {
        "use strict";
        var has = __webpack_require__("../shared/browser/node_modules/has/src/index.js");
        var GetIntrinsic = __webpack_require__("../shared/browser/node_modules/get-intrinsic/index.js");
        var $TypeError = GetIntrinsic("%TypeError%");
        var Type = __webpack_require__("../shared/browser/node_modules/es-abstract/2021/Type.js");
        var ToBoolean = __webpack_require__("../shared/browser/node_modules/es-abstract/2021/ToBoolean.js");
        var IsCallable = __webpack_require__("../shared/browser/node_modules/es-abstract/2021/IsCallable.js");
        module.exports = function(Obj) {
            if ("Object" !== Type(Obj)) throw new $TypeError("ToPropertyDescriptor requires an object");
            var desc = {};
            if (has(Obj, "enumerable")) desc["[[Enumerable]]"] = ToBoolean(Obj.enumerable);
            if (has(Obj, "configurable")) desc["[[Configurable]]"] = ToBoolean(Obj.configurable);
            if (has(Obj, "value")) desc["[[Value]]"] = Obj.value;
            if (has(Obj, "writable")) desc["[[Writable]]"] = ToBoolean(Obj.writable);
            if (has(Obj, "get")) {
                var getter = Obj.get;
                if ("undefined" !== typeof getter && !IsCallable(getter)) throw new $TypeError("getter must be a function");
                desc["[[Get]]"] = getter;
            }
            if (has(Obj, "set")) {
                var setter = Obj.set;
                if ("undefined" !== typeof setter && !IsCallable(setter)) throw new $TypeError("setter must be a function");
                desc["[[Set]]"] = setter;
            }
            if ((has(desc, "[[Get]]") || has(desc, "[[Set]]")) && (has(desc, "[[Value]]") || has(desc, "[[Writable]]"))) throw new $TypeError("Invalid property descriptor. Cannot both specify accessors and a value or writable attribute");
            return desc;
        };
    },
    "../shared/browser/node_modules/es-abstract/2021/ToString.js": (module, __unused_webpack_exports, __webpack_require__) => {
        "use strict";
        var GetIntrinsic = __webpack_require__("../shared/browser/node_modules/get-intrinsic/index.js");
        var $String = GetIntrinsic("%String%");
        var $TypeError = GetIntrinsic("%TypeError%");
        module.exports = function(argument) {
            if ("symbol" === typeof argument) throw new $TypeError("Cannot convert a Symbol value to a string");
            return $String(argument);
        };
    },
    "../shared/browser/node_modules/es-abstract/2021/ToUint32.js": (module, __unused_webpack_exports, __webpack_require__) => {
        "use strict";
        var ToNumber = __webpack_require__("../shared/browser/node_modules/es-abstract/2021/ToNumber.js");
        module.exports = function(x) {
            return ToNumber(x) >>> 0;
        };
    },
    "../shared/browser/node_modules/es-abstract/2021/Type.js": (module, __unused_webpack_exports, __webpack_require__) => {
        "use strict";
        var ES5Type = __webpack_require__("../shared/browser/node_modules/es-abstract/5/Type.js");
        module.exports = function(x) {
            if ("symbol" === typeof x) return "Symbol";
            if ("bigint" === typeof x) return "BigInt";
            return ES5Type(x);
        };
    },
    "../shared/browser/node_modules/es-abstract/2021/abs.js": (module, __unused_webpack_exports, __webpack_require__) => {
        "use strict";
        var GetIntrinsic = __webpack_require__("../shared/browser/node_modules/get-intrinsic/index.js");
        var $abs = GetIntrinsic("%Math.abs%");
        module.exports = function(x) {
            return $abs(x);
        };
    },
    "../shared/browser/node_modules/es-abstract/2021/floor.js": module => {
        "use strict";
        var $floor = Math.floor;
        module.exports = function(x) {
            return $floor(x);
        };
    },
    "../shared/browser/node_modules/es-abstract/5/CheckObjectCoercible.js": (module, __unused_webpack_exports, __webpack_require__) => {
        "use strict";
        var GetIntrinsic = __webpack_require__("../shared/browser/node_modules/get-intrinsic/index.js");
        var $TypeError = GetIntrinsic("%TypeError%");
        module.exports = function(value, optMessage) {
            if (null == value) throw new $TypeError(optMessage || "Cannot call method on " + value);
            return value;
        };
    },
    "../shared/browser/node_modules/es-abstract/5/Type.js": module => {
        "use strict";
        module.exports = function(x) {
            if (null === x) return "Null";
            if ("undefined" === typeof x) return "Undefined";
            if ("function" === typeof x || "object" === typeof x) return "Object";
            if ("number" === typeof x) return "Number";
            if ("boolean" === typeof x) return "Boolean";
            if ("string" === typeof x) return "String";
        };
    },
    "../shared/browser/node_modules/es-abstract/GetIntrinsic.js": (module, __unused_webpack_exports, __webpack_require__) => {
        "use strict";
        module.exports = __webpack_require__("../shared/browser/node_modules/get-intrinsic/index.js");
    },
    "../shared/browser/node_modules/es-abstract/helpers/DefineOwnProperty.js": (module, __unused_webpack_exports, __webpack_require__) => {
        "use strict";
        var hasPropertyDescriptors = __webpack_require__("../shared/browser/node_modules/has-property-descriptors/index.js");
        var GetIntrinsic = __webpack_require__("../shared/browser/node_modules/get-intrinsic/index.js");
        var $defineProperty = hasPropertyDescriptors() && GetIntrinsic("%Object.defineProperty%", true);
        var hasArrayLengthDefineBug = hasPropertyDescriptors.hasArrayLengthDefineBug();
        var isArray = hasArrayLengthDefineBug && __webpack_require__("../shared/browser/node_modules/es-abstract/helpers/IsArray.js");
        var callBound = __webpack_require__("../shared/browser/node_modules/call-bind/callBound.js");
        var $isEnumerable = callBound("Object.prototype.propertyIsEnumerable");
        module.exports = function(IsDataDescriptor, SameValue, FromPropertyDescriptor, O, P, desc) {
            if (!$defineProperty) {
                if (!IsDataDescriptor(desc)) return false;
                if (!desc["[[Configurable]]"] || !desc["[[Writable]]"]) return false;
                if (P in O && $isEnumerable(O, P) !== !!desc["[[Enumerable]]"]) return false;
                var V = desc["[[Value]]"];
                O[P] = V;
                return SameValue(O[P], V);
            }
            if (hasArrayLengthDefineBug && "length" === P && "[[Value]]" in desc && isArray(O) && O.length !== desc["[[Value]]"]) {
                O.length = desc["[[Value]]"];
                return O.length === desc["[[Value]]"];
            }
            $defineProperty(O, P, FromPropertyDescriptor(desc));
            return true;
        };
    },
    "../shared/browser/node_modules/es-abstract/helpers/IsArray.js": (module, __unused_webpack_exports, __webpack_require__) => {
        "use strict";
        var GetIntrinsic = __webpack_require__("../shared/browser/node_modules/get-intrinsic/index.js");
        var $Array = GetIntrinsic("%Array%");
        var toStr = !$Array.isArray && __webpack_require__("../shared/browser/node_modules/call-bind/callBound.js")("Object.prototype.toString");
        module.exports = $Array.isArray || function(argument) {
            return "[object Array]" === toStr(argument);
        };
    },
    "../shared/browser/node_modules/es-abstract/helpers/assertRecord.js": (module, __unused_webpack_exports, __webpack_require__) => {
        "use strict";
        var GetIntrinsic = __webpack_require__("../shared/browser/node_modules/get-intrinsic/index.js");
        var $TypeError = GetIntrinsic("%TypeError%");
        var $SyntaxError = GetIntrinsic("%SyntaxError%");
        var has = __webpack_require__("../shared/browser/node_modules/has/src/index.js");
        var isMatchRecord = __webpack_require__("../shared/browser/node_modules/es-abstract/helpers/isMatchRecord.js");
        var predicates = {
            "Property Descriptor": function(Desc) {
                var allowed = {
                    "[[Configurable]]": true,
                    "[[Enumerable]]": true,
                    "[[Get]]": true,
                    "[[Set]]": true,
                    "[[Value]]": true,
                    "[[Writable]]": true
                };
                for (var key in Desc) if (has(Desc, key) && !allowed[key]) return false;
                var isData = has(Desc, "[[Value]]");
                var IsAccessor = has(Desc, "[[Get]]") || has(Desc, "[[Set]]");
                if (isData && IsAccessor) throw new $TypeError("Property Descriptors may not be both accessor and data descriptors");
                return true;
            },
            "Match Record": isMatchRecord
        };
        module.exports = function(Type, recordType, argumentName, value) {
            var predicate = predicates[recordType];
            if ("function" !== typeof predicate) throw new $SyntaxError("unknown record type: " + recordType);
            if ("Object" !== Type(value) || !predicate(value)) throw new $TypeError(argumentName + " must be a " + recordType);
        };
    },
    "../shared/browser/node_modules/es-abstract/helpers/fromPropertyDescriptor.js": module => {
        "use strict";
        module.exports = function(Desc) {
            if ("undefined" === typeof Desc) return Desc;
            var obj = {};
            if ("[[Value]]" in Desc) obj.value = Desc["[[Value]]"];
            if ("[[Writable]]" in Desc) obj.writable = !!Desc["[[Writable]]"];
            if ("[[Get]]" in Desc) obj.get = Desc["[[Get]]"];
            if ("[[Set]]" in Desc) obj.set = Desc["[[Set]]"];
            if ("[[Enumerable]]" in Desc) obj.enumerable = !!Desc["[[Enumerable]]"];
            if ("[[Configurable]]" in Desc) obj.configurable = !!Desc["[[Configurable]]"];
            return obj;
        };
    },
    "../shared/browser/node_modules/es-abstract/helpers/getOwnPropertyDescriptor.js": (module, __unused_webpack_exports, __webpack_require__) => {
        "use strict";
        var GetIntrinsic = __webpack_require__("../shared/browser/node_modules/get-intrinsic/index.js");
        var $gOPD = GetIntrinsic("%Object.getOwnPropertyDescriptor%", true);
        if ($gOPD) try {
            $gOPD([], "length");
        } catch (e) {
            $gOPD = null;
        }
        module.exports = $gOPD;
    },
    "../shared/browser/node_modules/es-abstract/helpers/isFinite.js": module => {
        "use strict";
        var $isNaN = Number.isNaN || function(a) {
            return a !== a;
        };
        module.exports = Number.isFinite || function(x) {
            return "number" === typeof x && !$isNaN(x) && x !== 1 / 0 && x !== -1 / 0;
        };
    },
    "../shared/browser/node_modules/es-abstract/helpers/isMatchRecord.js": (module, __unused_webpack_exports, __webpack_require__) => {
        "use strict";
        var has = __webpack_require__("../shared/browser/node_modules/has/src/index.js");
        module.exports = function(record) {
            return has(record, "[[StartIndex]]") && has(record, "[[EndIndex]]") && record["[[StartIndex]]"] >= 0 && record["[[EndIndex]]"] >= record["[[StartIndex]]"] && String(parseInt(record["[[StartIndex]]"], 10)) === String(record["[[StartIndex]]"]) && String(parseInt(record["[[EndIndex]]"], 10)) === String(record["[[EndIndex]]"]);
        };
    },
    "../shared/browser/node_modules/es-abstract/helpers/isNaN.js": module => {
        "use strict";
        module.exports = Number.isNaN || function(a) {
            return a !== a;
        };
    },
    "../shared/browser/node_modules/es-abstract/helpers/isPrimitive.js": module => {
        "use strict";
        module.exports = function(value) {
            return null === value || "function" !== typeof value && "object" !== typeof value;
        };
    },
    "../shared/browser/node_modules/es-abstract/helpers/isPropertyDescriptor.js": (module, __unused_webpack_exports, __webpack_require__) => {
        "use strict";
        var GetIntrinsic = __webpack_require__("../shared/browser/node_modules/get-intrinsic/index.js");
        var has = __webpack_require__("../shared/browser/node_modules/has/src/index.js");
        var $TypeError = GetIntrinsic("%TypeError%");
        module.exports = function(ES, Desc) {
            if ("Object" !== ES.Type(Desc)) return false;
            var allowed = {
                "[[Configurable]]": true,
                "[[Enumerable]]": true,
                "[[Get]]": true,
                "[[Set]]": true,
                "[[Value]]": true,
                "[[Writable]]": true
            };
            for (var key in Desc) if (has(Desc, key) && !allowed[key]) return false;
            if (ES.IsDataDescriptor(Desc) && ES.IsAccessorDescriptor(Desc)) throw new $TypeError("Property Descriptors may not be both accessor and data descriptors");
            return true;
        };
    },
    "../shared/browser/node_modules/es-abstract/helpers/regexTester.js": (module, __unused_webpack_exports, __webpack_require__) => {
        "use strict";
        var callBound = __webpack_require__("../shared/browser/node_modules/call-bind/callBound.js");
        var $exec = callBound("RegExp.prototype.exec");
        module.exports = function(regex) {
            return function(s) {
                return null !== $exec(regex, s);
            };
        };
    },
    "../shared/browser/node_modules/es-get-iterator/index.js": (module, __unused_webpack_exports, __webpack_require__) => {
        "use strict";
        var isArguments = __webpack_require__("../shared/browser/node_modules/is-arguments/index.js");
        if (__webpack_require__("../shared/browser/node_modules/has-symbols/index.js")() || __webpack_require__("../shared/browser/node_modules/has-symbols/shams.js")()) {
            var $iterator = Symbol.iterator;
            module.exports = function(iterable) {
                if (null != iterable && "undefined" !== typeof iterable[$iterator]) return iterable[$iterator]();
                if (isArguments(iterable)) return Array.prototype[$iterator].call(iterable);
            };
        } else {
            var isArray = __webpack_require__("../shared/browser/node_modules/isarray/index.js");
            var isString = __webpack_require__("../shared/browser/node_modules/is-string/index.js");
            var GetIntrinsic = __webpack_require__("../shared/browser/node_modules/get-intrinsic/index.js");
            var $Map = GetIntrinsic("%Map%", true);
            var $Set = GetIntrinsic("%Set%", true);
            var callBound = __webpack_require__("../shared/browser/node_modules/call-bind/callBound.js");
            var $arrayPush = callBound("Array.prototype.push");
            var $charCodeAt = callBound("String.prototype.charCodeAt");
            var $stringSlice = callBound("String.prototype.slice");
            var advanceStringIndex = function(S, index) {
                var length = S.length;
                if (index + 1 >= length) return index + 1;
                var first = $charCodeAt(S, index);
                if (first < 55296 || first > 56319) return index + 1;
                var second = $charCodeAt(S, index + 1);
                if (second < 56320 || second > 57343) return index + 1;
                return index + 2;
            };
            var getArrayIterator = function(arraylike) {
                var i = 0;
                return {
                    next: function() {
                        var done = i >= arraylike.length;
                        var value;
                        if (!done) {
                            value = arraylike[i];
                            i += 1;
                        }
                        return {
                            done,
                            value
                        };
                    }
                };
            };
            var getNonCollectionIterator = function(iterable, noPrimordialCollections) {
                if (isArray(iterable) || isArguments(iterable)) return getArrayIterator(iterable);
                if (isString(iterable)) {
                    var i = 0;
                    return {
                        next: function() {
                            var nextIndex = advanceStringIndex(iterable, i);
                            var value = $stringSlice(iterable, i, nextIndex);
                            i = nextIndex;
                            return {
                                done: nextIndex > iterable.length,
                                value
                            };
                        }
                    };
                }
                if (noPrimordialCollections && "undefined" !== typeof iterable["_es6-shim iterator_"]) return iterable["_es6-shim iterator_"]();
            };
            if (!$Map && !$Set) module.exports = function(iterable) {
                if (null != iterable) return getNonCollectionIterator(iterable, true);
            }; else {
                var isMap = __webpack_require__("../shared/browser/node_modules/is-map/index.js");
                var isSet = __webpack_require__("../shared/browser/node_modules/is-set/index.js");
                var $mapForEach = callBound("Map.prototype.forEach", true);
                var $setForEach = callBound("Set.prototype.forEach", true);
                if ("undefined" === typeof process || !process.versions || !process.versions.node) {
                    var $mapIterator = callBound("Map.prototype.iterator", true);
                    var $setIterator = callBound("Set.prototype.iterator", true);
                    var getStopIterationIterator = function(iterator) {
                        var done = false;
                        return {
                            next: function() {
                                try {
                                    return {
                                        done,
                                        value: done ? void 0 : iterator.next()
                                    };
                                } catch (e) {
                                    done = true;
                                    return {
                                        done: true,
                                        value: void 0
                                    };
                                }
                            }
                        };
                    };
                }
                var $mapAtAtIterator = callBound("Map.prototype.@@iterator", true) || callBound("Map.prototype._es6-shim iterator_", true);
                var $setAtAtIterator = callBound("Set.prototype.@@iterator", true) || callBound("Set.prototype._es6-shim iterator_", true);
                var getCollectionIterator = function(iterable) {
                    if (isMap(iterable)) {
                        if ($mapIterator) return getStopIterationIterator($mapIterator(iterable));
                        if ($mapAtAtIterator) return $mapAtAtIterator(iterable);
                        if ($mapForEach) {
                            var entries = [];
                            $mapForEach(iterable, (function(v, k) {
                                $arrayPush(entries, [ k, v ]);
                            }));
                            return getArrayIterator(entries);
                        }
                    }
                    if (isSet(iterable)) {
                        if ($setIterator) return getStopIterationIterator($setIterator(iterable));
                        if ($setAtAtIterator) return $setAtAtIterator(iterable);
                        if ($setForEach) {
                            var values = [];
                            $setForEach(iterable, (function(v) {
                                $arrayPush(values, v);
                            }));
                            return getArrayIterator(values);
                        }
                    }
                };
                module.exports = function(iterable) {
                    return getCollectionIterator(iterable) || getNonCollectionIterator(iterable);
                };
            }
        }
    },
    "../shared/browser/node_modules/iterate-value/index.js": (module, __unused_webpack_exports, __webpack_require__) => {
        "use strict";
        var getIterator = __webpack_require__("../shared/browser/node_modules/es-get-iterator/index.js");
        var $TypeError = TypeError;
        var iterate = __webpack_require__("../shared/browser/node_modules/iterate-iterator/index.js");
        module.exports = function(iterable) {
            var iterator = getIterator(iterable);
            if (!iterator) throw new $TypeError("non-iterable value provided");
            if (arguments.length > 1) return iterate(iterator, arguments[1]);
            return iterate(iterator);
        };
    }
} ]);