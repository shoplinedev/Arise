"use strict";

(self["webpackChunkArise"] = self["webpackChunkArise"] || []).push([ [ "order-tracking" ], {
    "./src/assets/stage/order-tracking/index.js": (__unused_webpack_module, __unused_webpack___webpack_exports__, __webpack_require__) => {
        var sectionsLoad = __webpack_require__("../shared/browser/utils/sectionsLoad/index.js");
        __webpack_require__("../shared/browser/node_modules/core-js/modules/es.array.find.js");
        __webpack_require__("../shared/browser/node_modules/core-js/modules/es.array.includes.js");
        __webpack_require__("../shared/browser/node_modules/core-js/modules/es.string.includes.js");
        __webpack_require__("../shared/browser/node_modules/core-js/modules/es.object.to-string.js");
        __webpack_require__("../shared/browser/node_modules/core-js/modules/es.promise.js");
        __webpack_require__("../shared/browser/node_modules/core-js/modules/es.function.name.js");
        __webpack_require__("../shared/browser/node_modules/core-js/modules/es.object.define-property.js");
        __webpack_require__("../shared/browser/node_modules/core-js/modules/es.object.keys.js");
        __webpack_require__("../shared/browser/node_modules/core-js/modules/es.symbol.js");
        __webpack_require__("../shared/browser/node_modules/core-js/modules/es.array.filter.js");
        __webpack_require__("../shared/browser/node_modules/core-js/modules/es.object.get-own-property-descriptor.js");
        __webpack_require__("../shared/browser/node_modules/core-js/modules/es.array.for-each.js");
        __webpack_require__("../shared/browser/node_modules/core-js/modules/web.dom-collections.for-each.js");
        __webpack_require__("../shared/browser/node_modules/core-js/modules/es.object.get-own-property-descriptors.js");
        __webpack_require__("../shared/browser/node_modules/core-js/modules/es.object.define-properties.js");
        __webpack_require__("../shared/browser/node_modules/regenerator-runtime/runtime.js");
        var get_env = __webpack_require__("../shared/browser/utils/get-env.js");
        __webpack_require__("../shared/browser/node_modules/core-js/modules/es.array.reduce.js");
        __webpack_require__("../shared/browser/node_modules/core-js/modules/es.array.iterator.js");
        __webpack_require__("../shared/browser/node_modules/core-js/modules/es.string.iterator.js");
        __webpack_require__("../shared/browser/node_modules/core-js/modules/web.dom-collections.iterator.js");
        __webpack_require__("../shared/browser/node_modules/core-js/modules/web.timers.js");
        var utils_form = __webpack_require__("../shared/browser/utils/form/index.js");
        var form_form = __webpack_require__("../shared/browser/utils/form/form.js");
        var i18n = __webpack_require__("../shared/browser/utils/i18n.js");
        __webpack_require__("../shared/browser/node_modules/core-js/modules/es.array.map.js");
        __webpack_require__("../shared/browser/node_modules/core-js/modules/es.array.concat.js");
        __webpack_require__("../shared/browser/node_modules/core-js/modules/es.array.index-of.js");
        __webpack_require__("../shared/browser/node_modules/core-js/modules/es.symbol.description.js");
        __webpack_require__("../shared/browser/node_modules/core-js/modules/es.symbol.iterator.js");
        __webpack_require__("../shared/browser/node_modules/core-js/modules/es.string.trim.js");
        __webpack_require__("../shared/browser/node_modules/core-js/modules/es.regexp.constructor.js");
        __webpack_require__("../shared/browser/node_modules/core-js/modules/es.regexp.exec.js");
        __webpack_require__("../shared/browser/node_modules/core-js/modules/es.regexp.to-string.js");
        __webpack_require__("../shared/browser/node_modules/core-js/modules/es.string.replace.js");
        __webpack_require__("../shared/browser/node_modules/core-js/modules/es.array.is-array.js");
        __webpack_require__("../shared/browser/node_modules/core-js/modules/es.array.slice.js");
        __webpack_require__("../shared/browser/node_modules/core-js/modules/es.array.from.js");
        function _slicedToArray(arr, i) {
            return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
        }
        function _nonIterableRest() {
            throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        function _unsupportedIterableToArray(o, minLen) {
            if (!o) return;
            if ("string" === typeof o) return _arrayLikeToArray(o, minLen);
            var n = Object.prototype.toString.call(o).slice(8, -1);
            if ("Object" === n && o.constructor) n = o.constructor.name;
            if ("Map" === n || "Set" === n) return Array.from(o);
            if ("Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
        }
        function _arrayLikeToArray(arr, len) {
            if (null == len || len > arr.length) len = arr.length;
            for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
            return arr2;
        }
        function _iterableToArrayLimit(arr, i) {
            var _i = arr && ("undefined" !== typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]);
            if (null == _i) return;
            var _arr = [];
            var _n = true;
            var _d = false;
            var _s, _e;
            try {
                for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);
                    if (i && _arr.length === i) break;
                }
            } catch (err) {
                _d = true;
                _e = err;
            } finally {
                try {
                    if (!_n && null != _i["return"]) _i["return"]();
                } finally {
                    if (_d) throw _e;
                }
            }
            return _arr;
        }
        function _arrayWithHoles(arr) {
            if (Array.isArray(arr)) return arr;
        }
        var allCountries = [ [ "Afghanistan (‫افغانستان‬‎)", "af", "93" ], [ "Albania (Shqipëri)", "al", "355" ], [ "Algeria (‫الجزائر‬‎)", "dz", "213" ], [ "American Samoa", "as", "1", 5, [ "684" ] ], [ "Andorra", "ad", "376" ], [ "Angola", "ao", "244" ], [ "Anguilla", "ai", "1", 6, [ "264" ] ], [ "Antigua and Barbuda", "ag", "1", 7, [ "268" ] ], [ "Argentina", "ar", "54" ], [ "Armenia (Հայաստան)", "am", "374" ], [ "Aruba", "aw", "297" ], [ "Australia", "au", "61", 0 ], [ "Austria (Österreich)", "at", "43" ], [ "Azerbaijan (Azərbaycan)", "az", "994" ], [ "Bahamas", "bs", "1", 8, [ "242" ] ], [ "Bahrain (‫البحرين‬‎)", "bh", "973" ], [ "Bangladesh (বাংলাদেশ)", "bd", "880" ], [ "Barbados", "bb", "1", 9, [ "246" ] ], [ "Belarus (Беларусь)", "by", "375" ], [ "Belgium (België)", "be", "32" ], [ "Belize", "bz", "501" ], [ "Benin (Bénin)", "bj", "229" ], [ "Bermuda", "bm", "1", 10, [ "441" ] ], [ "Bhutan (འབྲུག)", "bt", "975" ], [ "Bolivia", "bo", "591" ], [ "Bosnia and Herzegovina (Босна и Херцеговина)", "ba", "387" ], [ "Botswana", "bw", "267" ], [ "Brazil (Brasil)", "br", "55" ], [ "British Indian Ocean Territory", "io", "246" ], [ "British Virgin Islands", "vg", "1", 11, [ "284" ] ], [ "Brunei", "bn", "673" ], [ "Bulgaria (България)", "bg", "359" ], [ "Burkina Faso", "bf", "226" ], [ "Burundi (Uburundi)", "bi", "257" ], [ "Cambodia (កម្ពុជា)", "kh", "855" ], [ "Cameroon (Cameroun)", "cm", "237" ], [ "Canada", "ca", "1", 1, [ "204", "226", "236", "249", "250", "289", "306", "343", "365", "387", "403", "416", "418", "431", "437", "438", "450", "506", "514", "519", "548", "579", "581", "587", "604", "613", "639", "647", "672", "705", "709", "742", "778", "780", "782", "807", "819", "825", "867", "873", "902", "905" ] ], [ "Cape Verde (Kabu Verdi)", "cv", "238" ], [ "Caribbean Netherlands", "bq", "599", 1, [ "3", "4", "7" ] ], [ "Cayman Islands", "ky", "1", 12, [ "345" ] ], [ "Central African Republic (République centrafricaine)", "cf", "236" ], [ "Chad (Tchad)", "td", "235" ], [ "Chile", "cl", "56" ], [ "China (中国)", "cn", "86" ], [ "Christmas Island", "cx", "61", 2, [ "89164" ] ], [ "Cocos (Keeling) Islands", "cc", "61", 1, [ "89162" ] ], [ "Colombia", "co", "57" ], [ "Comoros (‫جزر القمر‬‎)", "km", "269" ], [ "Congo (DRC) (Jamhuri ya Kidemokrasia ya Kongo)", "cd", "243" ], [ "Congo (Republic) (Congo-Brazzaville)", "cg", "242" ], [ "Cook Islands", "ck", "682" ], [ "Costa Rica", "cr", "506" ], [ "Côte d’Ivoire", "ci", "225" ], [ "Croatia (Hrvatska)", "hr", "385" ], [ "Cuba", "cu", "53" ], [ "Curaçao", "cw", "599", 0 ], [ "Cyprus (Κύπρος)", "cy", "357" ], [ "Czech Republic (Česká republika)", "cz", "420" ], [ "Denmark (Danmark)", "dk", "45" ], [ "Djibouti", "dj", "253" ], [ "Dominica", "dm", "1", 13, [ "767" ] ], [ "Dominican Republic (República Dominicana)", "do", "1", 2, [ "809", "829", "849" ] ], [ "Ecuador", "ec", "593" ], [ "Egypt (‫مصر‬‎)", "eg", "20" ], [ "El Salvador", "sv", "503" ], [ "Equatorial Guinea (Guinea Ecuatorial)", "gq", "240" ], [ "Eritrea", "er", "291" ], [ "Estonia (Eesti)", "ee", "372" ], [ "Ethiopia", "et", "251" ], [ "Falkland Islands (Islas Malvinas)", "fk", "500" ], [ "Faroe Islands (Føroyar)", "fo", "298" ], [ "Fiji", "fj", "679" ], [ "Finland (Suomi)", "fi", "358", 0 ], [ "France", "fr", "33" ], [ "French Guiana (Guyane française)", "gf", "594" ], [ "French Polynesia (Polynésie française)", "pf", "689" ], [ "Gabon", "ga", "241" ], [ "Gambia", "gm", "220" ], [ "Georgia (საქართველო)", "ge", "995" ], [ "Germany (Deutschland)", "de", "49" ], [ "Ghana (Gaana)", "gh", "233" ], [ "Gibraltar", "gi", "350" ], [ "Greece (Ελλάδα)", "gr", "30" ], [ "Greenland (Kalaallit Nunaat)", "gl", "299" ], [ "Grenada", "gd", "1", 14, [ "473" ] ], [ "Guadeloupe", "gp", "590", 0 ], [ "Guam", "gu", "1", 15, [ "671" ] ], [ "Guatemala", "gt", "502" ], [ "Guernsey", "gg", "44", 1, [ "1481", "7781", "7839", "7911" ] ], [ "Guinea (Guinée)", "gn", "224" ], [ "Guinea-Bissau (Guiné Bissau)", "gw", "245" ], [ "Guyana", "gy", "592" ], [ "Haiti", "ht", "509" ], [ "Honduras", "hn", "504" ], [ "Hong Kong (香港)", "hk", "852" ], [ "Hungary (Magyarország)", "hu", "36" ], [ "Iceland (Ísland)", "is", "354" ], [ "India (भारत)", "in", "91" ], [ "Indonesia", "id", "62" ], [ "Iran (‫ایران‬‎)", "ir", "98" ], [ "Iraq (‫العراق‬‎)", "iq", "964" ], [ "Ireland", "ie", "353" ], [ "Isle of Man", "im", "44", 2, [ "1624", "74576", "7524", "7924", "7624" ] ], [ "Israel (‫ישראל‬‎)", "il", "972" ], [ "Italy (Italia)", "it", "39", 0 ], [ "Jamaica", "jm", "1", 4, [ "876", "658" ] ], [ "Japan (日本)", "jp", "81" ], [ "Jersey", "je", "44", 3, [ "1534", "7509", "7700", "7797", "7829", "7937" ] ], [ "Jordan (‫الأردن‬‎)", "jo", "962" ], [ "Kazakhstan (Казахстан)", "kz", "7", 1, [ "33", "7" ] ], [ "Kenya", "ke", "254" ], [ "Kiribati", "ki", "686" ], [ "Kosovo", "xk", "383" ], [ "Kuwait (‫الكويت‬‎)", "kw", "965" ], [ "Kyrgyzstan (Кыргызстан)", "kg", "996" ], [ "Laos (ລາວ)", "la", "856" ], [ "Latvia (Latvija)", "lv", "371" ], [ "Lebanon (‫لبنان‬‎)", "lb", "961" ], [ "Lesotho", "ls", "266" ], [ "Liberia", "lr", "231" ], [ "Libya (‫ليبيا‬‎)", "ly", "218" ], [ "Liechtenstein", "li", "423" ], [ "Lithuania (Lietuva)", "lt", "370" ], [ "Luxembourg", "lu", "352" ], [ "Macau (澳門)", "mo", "853" ], [ "Macedonia (FYROM) (Македонија)", "mk", "389" ], [ "Madagascar (Madagasikara)", "mg", "261" ], [ "Malawi", "mw", "265" ], [ "Malaysia", "my", "60" ], [ "Maldives", "mv", "960" ], [ "Mali", "ml", "223" ], [ "Malta", "mt", "356" ], [ "Marshall Islands", "mh", "692" ], [ "Martinique", "mq", "596" ], [ "Mauritania (‫موريتانيا‬‎)", "mr", "222" ], [ "Mauritius (Moris)", "mu", "230" ], [ "Mayotte", "yt", "262", 1, [ "269", "639" ] ], [ "Mexico (México)", "mx", "52" ], [ "Micronesia", "fm", "691" ], [ "Moldova (Republica Moldova)", "md", "373" ], [ "Monaco", "mc", "377" ], [ "Mongolia (Монгол)", "mn", "976" ], [ "Montenegro (Crna Gora)", "me", "382" ], [ "Montserrat", "ms", "1", 16, [ "664" ] ], [ "Morocco (‫المغرب‬‎)", "ma", "212", 0 ], [ "Mozambique (Moçambique)", "mz", "258" ], [ "Myanmar (Burma) (မြန်မာ)", "mm", "95" ], [ "Namibia (Namibië)", "na", "264" ], [ "Nauru", "nr", "674" ], [ "Nepal (नेपाल)", "np", "977" ], [ "Netherlands (Nederland)", "nl", "31" ], [ "New Caledonia (Nouvelle-Calédonie)", "nc", "687" ], [ "New Zealand", "nz", "64" ], [ "Nicaragua", "ni", "505" ], [ "Niger (Nijar)", "ne", "227" ], [ "Nigeria", "ng", "234" ], [ "Niue", "nu", "683" ], [ "Norfolk Island", "nf", "672" ], [ "North Korea (조선 민주주의 인민 공화국)", "kp", "850" ], [ "Northern Mariana Islands", "mp", "1", 17, [ "670" ] ], [ "Norway (Norge)", "no", "47", 0 ], [ "Oman (‫عُمان‬‎)", "om", "968" ], [ "Pakistan (‫پاکستان‬‎)", "pk", "92" ], [ "Palau", "pw", "680" ], [ "Palestine (‫فلسطين‬‎)", "ps", "970" ], [ "Panama (Panamá)", "pa", "507" ], [ "Papua New Guinea", "pg", "675" ], [ "Paraguay", "py", "595" ], [ "Peru (Perú)", "pe", "51" ], [ "Philippines", "ph", "63" ], [ "Poland (Polska)", "pl", "48" ], [ "Portugal", "pt", "351" ], [ "Puerto Rico", "pr", "1", 3, [ "787", "939" ] ], [ "Qatar (‫قطر‬‎)", "qa", "974" ], [ "Réunion (La Réunion)", "re", "262", 0 ], [ "Romania (România)", "ro", "40" ], [ "Russia (Россия)", "ru", "7", 0 ], [ "Rwanda", "rw", "250" ], [ "Saint Barthélemy", "bl", "590", 1 ], [ "Saint Helena", "sh", "290" ], [ "Saint Kitts and Nevis", "kn", "1", 18, [ "869" ] ], [ "Saint Lucia", "lc", "1", 19, [ "758" ] ], [ "Saint Martin (Saint-Martin (partie française))", "mf", "590", 2 ], [ "Saint Pierre and Miquelon (Saint-Pierre-et-Miquelon)", "pm", "508" ], [ "Saint Vincent and the Grenadines", "vc", "1", 20, [ "784" ] ], [ "Samoa", "ws", "685" ], [ "San Marino", "sm", "378" ], [ "São Tomé and Príncipe (São Tomé e Príncipe)", "st", "239" ], [ "Saudi Arabia (‫المملكة العربية السعودية‬‎)", "sa", "966" ], [ "Senegal (Sénégal)", "sn", "221" ], [ "Serbia (Србија)", "rs", "381" ], [ "Seychelles", "sc", "248" ], [ "Sierra Leone", "sl", "232" ], [ "Singapore", "sg", "65" ], [ "Sint Maarten", "sx", "1", 21, [ "721" ] ], [ "Slovakia (Slovensko)", "sk", "421" ], [ "Slovenia (Slovenija)", "si", "386" ], [ "Solomon Islands", "sb", "677" ], [ "Somalia (Soomaaliya)", "so", "252" ], [ "South Africa", "za", "27" ], [ "South Korea (대한민국)", "kr", "82" ], [ "South Sudan (‫جنوب السودان‬‎)", "ss", "211" ], [ "Spain (España)", "es", "34" ], [ "Sri Lanka (ශ්‍රී ලංකාව)", "lk", "94" ], [ "Sudan (‫السودان‬‎)", "sd", "249" ], [ "Suriname", "sr", "597" ], [ "Svalbard and Jan Mayen", "sj", "47", 1, [ "79" ] ], [ "Swaziland", "sz", "268" ], [ "Sweden (Sverige)", "se", "46" ], [ "Switzerland (Schweiz)", "ch", "41" ], [ "Syria (‫سوريا‬‎)", "sy", "963" ], [ "Taiwan (台灣)", "tw", "886" ], [ "Tajikistan", "tj", "992" ], [ "Tanzania", "tz", "255" ], [ "Thailand (ไทย)", "th", "66" ], [ "Timor-Leste", "tl", "670" ], [ "Togo", "tg", "228" ], [ "Tokelau", "tk", "690" ], [ "Tonga", "to", "676" ], [ "Trinidad and Tobago", "tt", "1", 22, [ "868" ] ], [ "Tunisia (‫تونس‬‎)", "tn", "216" ], [ "Turkey (Türkiye)", "tr", "90" ], [ "Turkmenistan", "tm", "993" ], [ "Turks and Caicos Islands", "tc", "1", 23, [ "649" ] ], [ "Tuvalu", "tv", "688" ], [ "U.S. Virgin Islands", "vi", "1", 24, [ "340" ] ], [ "Uganda", "ug", "256" ], [ "Ukraine (Україна)", "ua", "380" ], [ "United Arab Emirates (‫الإمارات العربية المتحدة‬‎)", "ae", "971" ], [ "United Kingdom", "gb", "44", 0 ], [ "United States", "us", "1", 0 ], [ "Uruguay", "uy", "598" ], [ "Uzbekistan (Oʻzbekiston)", "uz", "998" ], [ "Vanuatu", "vu", "678" ], [ "Vatican City (Città del Vaticano)", "va", "39", 1, [ "06698" ] ], [ "Venezuela", "ve", "58" ], [ "Vietnam (Việt Nam)", "vn", "84" ], [ "Wallis and Futuna (Wallis-et-Futuna)", "wf", "681" ], [ "Western Sahara (‫الصحراء الغربية‬‎)", "eh", "212", 1, [ "5288", "5289" ] ], [ "Yemen (‫اليمن‬‎)", "ye", "967" ], [ "Zambia", "zm", "260" ], [ "Zimbabwe", "zw", "263" ], [ "Åland Islands", "ax", "358", 1, [ "18" ] ] ];
        var countries = allCountries.map((function(_ref) {
            var _ref2 = _slicedToArray(_ref, 5), name = _ref2[0], iso2 = _ref2[1], dialCode = _ref2[2], priority = _ref2[3], areaCodes = _ref2[4];
            return {
                name: name.replace(/\s*\([^()]+?\)$/, ""),
                iso2,
                dialCode,
                priority: priority || 0,
                areaCodes: areaCodes || null
            };
        }));
        var countriesCodeMap = countries.reduce((function(res, _ref3) {
            var iso2 = _ref3.iso2, dialCode = _ref3.dialCode;
            res[iso2] = "+".concat(dialCode);
            return res;
        }), {});
        countries.reduce((function(res, _ref4) {
            var iso2 = _ref4.iso2, dialCode = _ref4.dialCode;
            res[dialCode] = iso2;
            return res;
        }), {});
        var EMAIL_PATTERN = /^([\w-.+]+)@([\w-.]+)\.([\w-.]+)$/;
        var PHONE_PATTERN = {
            "+86": /^1[3-9]\d{9}$/,
            "+886": /^0?9\d{8}$/,
            "+852": /^(5|6|7|9)\d{7}$/
        };
        var pattern_CODE_PHONE_PATTERN = /^(\w+(\+\d+))-(.*)$/;
        var INTERNATIONAL_PHONE_PATTERN = /^(00|\+)[1-9]{1}([0-9]){9,16}$/;
        __webpack_require__("../shared/browser/node_modules/core-js/modules/es.number.constructor.js");
        var LANGUAGE_MAP = {
            emailError: "customer.general.email_error_hint",
            phoneError: "customer.general.phone_error_message"
        };
        var DEFAULT_LANGUAGE = "en";
        var formatPhone = function(phone) {
            var result = {};
            if (phone) {
                var exec = pattern_CODE_PHONE_PATTERN.exec(phone);
                if (exec) {
                    result.phone = "".concat(exec[2]).concat(exec[3]).replace("+", "00");
                    result._code = exec[1].slice(0, -exec[2].length);
                }
            }
            return result;
        };
        var phoneNumberValidator = function(value) {
            return new Promise((function(resolve, reject) {
                if (pattern_CODE_PHONE_PATTERN.test(value)) {
                    var $2 = RegExp.$2, $3 = RegExp.$3;
                    if (INTERNATIONAL_PHONE_PATTERN.test("".concat($2).concat($3)) && (!PHONE_PATTERN[$2] || PHONE_PATTERN[$2].test($3))) resolve();
                }
                reject(LANGUAGE_MAP.phoneError);
            }));
        };
        var emailValidator = function(value) {
            return new Promise((function(resolve, reject) {
                EMAIL_PATTERN.test(value) && value.length <= 50 ? resolve() : reject(LANGUAGE_MAP.emailError);
            }));
        };
        var usernameValidator = function(value) {
            if (pattern_CODE_PHONE_PATTERN.test(value) && RegExp.$3) return phoneNumberValidator(value);
            return emailValidator(value);
        };
        var UDB_RESPONSE_LANGUAGE_ERROR_CODES = [ -1, -4, -5, -13, -999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1024, 1035, 2001, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2016, 3001, 3002, 3003, 3004, 3005, 3006, 3007, 3008, 3009, 3010, 3014, 3019, 2014 ];
        var keyMaps = {
            "-1": "2",
            "-13": "3",
            "-4": "4",
            "-5": "5",
            "-999": "6"
        };
        var getUdbResponseLanguageErrorKey = function(rescode) {
            if (UDB_RESPONSE_LANGUAGE_ERROR_CODES.indexOf(Number(rescode)) > -1) return "customer.general.error_message_".concat(keyMaps[rescode] || rescode);
            return;
        };
        function getUdbErrorMessage(res) {
            var errorKey = getUdbResponseLanguageErrorKey(res.rescode);
            return errorKey ? (0, i18n.t)(errorKey) : res.message || (0, i18n.t)("general.order_tracking.form_error");
        }
        function getLanguage() {
            return window && window.SL_State && window.SL_State.get("request.cookie.lang") || DEFAULT_LANGUAGE;
        }
        __webpack_require__("../shared/browser/node_modules/core-js/modules/es.array.join.js");
        var CODE_SELECT_CLASS = "form-item__codeSelect";
        const getCodeSelect = function(defaultIso2) {
            var optionStr = countries.map((function(_ref) {
                var name = _ref.name, iso2 = _ref.iso2, dialCode = _ref.dialCode;
                return '\n      <option value="'.concat(iso2, '" label="').concat(name, "(+").concat(dialCode, ')" ').concat(iso2 === defaultIso2 ? 'selected="selected"' : "", ">").concat(name, "(+").concat(dialCode, ")</option>\n    ");
            })).join("");
            return '\n    <div class="code-select__container">\n      <div class="code-select__value-wrapper">\n        <span class="code-select__value">'.concat(countriesCodeMap[defaultIso2], '</span>\n        <svg width="10" height="6" viewBox="0 0 10 6" fill="none" xmlns="http://www.w3.org/2000/svg">\n          <path d="M1.5 1.5L5 5L8.5 1.5" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>\n        </svg>\n      </div>\n      <select class="form-item__select ').concat(CODE_SELECT_CLASS, '" autocomplete="off">\n        ').concat(optionStr, "\n      </select>\n    </div>\n  ");
        };
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
        }
        function _defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }
        function _createClass(Constructor, protoProps, staticProps) {
            if (protoProps) _defineProperties(Constructor.prototype, protoProps);
            if (staticProps) _defineProperties(Constructor, staticProps);
            return Constructor;
        }
        var DEFAULT_PHONE_CODE = "cn+86";
        var DEFAULT_PHONE_ISO2 = "cn";
        var CODE_SELECT_CONTAINER_CLASS = "code-select__container";
        var username_CODE_SELECT_CLASS = "form-item__codeSelect";
        var Username = function() {
            function Username(_ref) {
                var form = _ref.form, formId = _ref.formId, value = _ref.value, iso2 = _ref.iso2;
                _classCallCheck(this, Username);
                this.form = form;
                this.formId = formId;
                this.$username = __SL_$__("#".concat(formId, ' [sl-form-item-name="username"] .sl-input'));
                this.$input = this.$username.find(".sl-input__inpEle");
                var originValue = value || "";
                if (iso2) {
                    this.iso2 = iso2;
                    if (/^\d+$/.test(value)) this.createCodeSelect();
                } else {
                    var countryCodeOriginal = window && window.SL_State && window.SL_State.get("customer_address.countryCode");
                    var countryCode = countryCodeOriginal && countryCodeOriginal.toLowerCase();
                    this.iso2 = iso2 || countryCode;
                }
                var code = countriesCodeMap[this.iso2];
                if (code) this.code = "".concat(this.iso2).concat(code); else {
                    this.iso2 = DEFAULT_PHONE_ISO2;
                    this.code = DEFAULT_PHONE_CODE;
                }
                this.value = this.changeValue(this.code, originValue);
                this.inputValue = originValue;
                this.init();
            }
            _createClass(Username, [ {
                key: "init",
                value: function() {
                    this.bindEvents();
                }
            }, {
                key: "install",
                value: function() {
                    var _this = this;
                    return {
                        rules: [ {
                            validator: function(value) {
                                var val = _this.changeValue(_this.code, value);
                                return usernameValidator(val)["catch"]((function(err) {
                                    return Promise.reject((0, i18n.t)(err));
                                }));
                            }
                        } ]
                    };
                }
            }, {
                key: "changeValue",
                value: function(code, inputValue) {
                    var value = inputValue && inputValue.trim();
                    var val = /^\d+$/.test(value) ? "".concat(code, "-").concat(value) : value;
                    this.code = code;
                    this.value = val;
                    this.inputValue = value;
                    return val;
                }
            }, {
                key: "changeCodeValue",
                value: function(iso2) {
                    var $codeValue = this.$username.find(".code-select__value");
                    var $select = this.$username.find(".".concat(username_CODE_SELECT_CLASS));
                    $codeValue.text(countriesCodeMap[iso2]);
                    if ($select.val() !== iso2) $select.val(iso2);
                }
            }, {
                key: "getValue",
                value: function() {
                    var $select = this.$username.find(".".concat(username_CODE_SELECT_CLASS));
                    return {
                        username: this.inputValue || this.$input && this.$input.val() || "",
                        code: this.code,
                        iso2: this.iso2 || $select.val() || ""
                    };
                }
            }, {
                key: "getFormValue",
                value: function() {
                    var value = this.value || this.changeValue(this.code, this.$input && this.$input.val());
                    if (pattern_CODE_PHONE_PATTERN.test(value)) {
                        var val = formatPhone(value);
                        return {
                            username: val.phone,
                            _code: val._code
                        };
                    }
                    return {
                        username: value
                    };
                }
            }, {
                key: "createCodeSelect",
                value: function() {
                    var selectElementStr = getCodeSelect(this.iso2);
                    this.$username.append(selectElementStr);
                    var $container = this.$username.find(".".concat(CODE_SELECT_CONTAINER_CLASS));
                    var $select = $container.find(".".concat(username_CODE_SELECT_CLASS));
                    $select && $select.val(this.iso2);
                    this.bindSelectCodeEvent($select);
                    return $container;
                }
            }, {
                key: "bindEvents",
                value: function() {
                    var _this2 = this;
                    var $container = this.$username.find(".".concat(CODE_SELECT_CONTAINER_CLASS));
                    var $select = $container.find(".".concat(username_CODE_SELECT_CLASS));
                    var selectElementHasMounted = $select && $select.length > 0;
                    this.$input.off("input");
                    this.$input.on("input", (function(e) {
                        var val = _this2.changeValue(_this2.code, e.target.value);
                        var phoneInputMode = !(!pattern_CODE_PHONE_PATTERN.test(val || "") || !RegExp.$3);
                        if (phoneInputMode) {
                            if (!selectElementHasMounted) {
                                $container = _this2.createCodeSelect();
                                selectElementHasMounted = true;
                                return;
                            }
                            $container && $container.show();
                        }
                        if (!phoneInputMode && selectElementHasMounted) $container && $container.hide();
                    }));
                }
            }, {
                key: "bindSelectCodeEvent",
                value: function($select) {
                    var _this3 = this;
                    $select.on("change", (function() {
                        var iso2 = $select.val();
                        var val = countriesCodeMap[iso2];
                        _this3.iso2 = iso2;
                        _this3.code = "".concat(iso2).concat(val);
                        _this3.changeCodeValue(iso2);
                        _this3.changeValue(_this3.code, _this3.inputValue);
                        if (_this3.inputValue) {
                            _this3.form.validateFields("username");
                            _this3.form.setLocalsValue("username", _this3.$input.val());
                        }
                    }));
                    $select.on("input", (function(e) {
                        return e.stopPropagation();
                    }));
                }
            } ]);
            return Username;
        }();
        const username = Username;
        function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
            try {
                var info = gen[key](arg);
                var value = info.value;
            } catch (error) {
                reject(error);
                return;
            }
            if (info.done) resolve(value); else Promise.resolve(value).then(_next, _throw);
        }
        function _asyncToGenerator(fn) {
            return function() {
                var self = this, args = arguments;
                return new Promise((function(resolve, reject) {
                    var gen = fn.apply(self, args);
                    function _next(value) {
                        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
                    }
                    function _throw(err) {
                        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
                    }
                    _next(void 0);
                }));
            };
        }
        function verifycode_classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
        }
        function verifycode_defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }
        function verifycode_createClass(Constructor, protoProps, staticProps) {
            if (protoProps) verifycode_defineProperties(Constructor.prototype, protoProps);
            if (staticProps) verifycode_defineProperties(Constructor, staticProps);
            return Constructor;
        }
        var BUTTON_LOADING_CLASS = "btn--loading";
        var Verifycode = function() {
            function Verifycode(_ref) {
                var form = _ref.form, formId = _ref.formId, value = _ref.value, on = _ref.on, immediate = _ref.immediate, watch = _ref.watch;
                verifycode_classCallCheck(this, Verifycode);
                this.countDown = 60;
                this.countDownTimeout = null;
                this.watch = watch;
                this.form = form;
                this.formId = formId;
                this.on = on;
                this.$item = __SL_$__("#".concat(formId, ' [sl-form-item-name="verifycode"] .sl-input'));
                this.$input = this.$item.find(".sl-input__inpEle");
                this.$send = this.$item.find(".order-tracking__send-btn");
                var originValue = value || this.$input && this.$input.val();
                this.value = originValue;
                this.inputValue = originValue;
                this.immediate = immediate;
                this.dependFormItemName = null;
                this.init();
            }
            verifycode_createClass(Verifycode, [ {
                key: "$$watch",
                value: function(_ref2) {
                    var name = _ref2.name, value = _ref2.value;
                    this.changeSendButtonStatus(name, value);
                }
            }, {
                key: "changeSendButtonStatus",
                value: function(name, value) {
                    if (this.countDownTimeout) return;
                    if (void 0 === value) return;
                    var $send = this.$send;
                    if (value) {
                        this.dependFormItemName = name;
                        this.form.validateFields([ name ]).then((function(res) {
                            if (res.pass) $send.removeAttr("disabled"); else $send.attr("disabled", true);
                        }))["catch"]((function() {
                            $send.attr("disabled", true);
                        }));
                    } else $send.attr("disabled", true);
                }
            }, {
                key: "init",
                value: function() {
                    this.bindSendCodeEvent();
                }
            }, {
                key: "getValue",
                value: function() {
                    return {
                        verifycode: this.inputValue || this.$input.val() || ""
                    };
                }
            }, {
                key: "getFormValue",
                value: function() {
                    var value = this.inputValue || this.$input.val() || "";
                    this.value = value;
                    return {
                        verifycode: value
                    };
                }
            }, {
                key: "setCountDown",
                value: function() {
                    var _this = this;
                    if (this.countDown > 0) {
                        this.$send.attr("disabled", true);
                        this.$send.text("".concat((0, i18n.t)("customer.general.resend"), "(").concat(this.countDown, ")"));
                        this.countDown -= 1;
                        this.countDownTimeout = window.setTimeout((function() {
                            _this.setCountDown();
                        }), 1e3);
                    } else this.clearCountDown();
                }
            }, {
                key: "clearCountDown",
                value: function() {
                    this.$send.removeAttr("disabled");
                    this.$send.html("".concat((0, i18n.t)("customer.general.send"), "<div class='btn-loading__spinner'></div>"));
                    window.clearTimeout(this.countDownTimeout);
                    this.countDownTimeout = null;
                    this.countDown = 60;
                }
            }, {
                key: "bindSendCodeEvent",
                value: function() {
                    var _this2 = this;
                    var $send = this.$send;
                    var loading = false;
                    $send.off("click").on("click", function() {
                        var _ref3 = _asyncToGenerator(regeneratorRuntime.mark((function _callee(e) {
                            return regeneratorRuntime.wrap((function(_context) {
                                while (1) switch (_context.prev = _context.next) {
                                  case 0:
                                    e.preventDefault();
                                    if (!loading) {
                                        _context.next = 3;
                                        break;
                                    }
                                    return _context.abrupt("return", false);

                                  case 3:
                                    _this2.clearCountDown();
                                    _context.prev = 4;
                                    loading = true;
                                    __SL_$__(e.target).addClass(BUTTON_LOADING_CLASS);
                                    _context.next = 9;
                                    return _this2.on && _this2.on.send();

                                  case 9:
                                    _this2.form.removeErrList([ _this2.dependFormItemName || "verifycode" ]);
                                    _this2.setCountDown();
                                    _context.next = 17;
                                    break;

                                  case 13:
                                    _context.prev = 13;
                                    _context.t0 = _context["catch"](4);
                                    _this2.clearCountDown();
                                    if (_context.t0 && (_context.t0.rescode || _context.t0.message)) _this2.form.setErrMsgIntoDom([ {
                                        name: _this2.dependFormItemName || "verifycode",
                                        messages: [ getUdbErrorMessage(_context.t0) ]
                                    } ]);

                                  case 17:
                                    loading = false;
                                    __SL_$__(e.target).removeClass(BUTTON_LOADING_CLASS);

                                  case 19:
                                  case "end":
                                    return _context.stop();
                                }
                            }), _callee, null, [ [ 4, 13 ] ]);
                        })));
                        return function(_x) {
                            return _ref3.apply(this, arguments);
                        };
                    }());
                    if (this.immediate) this.triggerSendCode();
                    if (this.watch && this.watch.length) {
                        var val = this.form.getFieldValue(this.watch[0]);
                        if (val) this.changeSendButtonStatus(this.watch[0], val); else this.$send.attr("disabled", true);
                    }
                }
            }, {
                key: "triggerSendCode",
                value: function() {
                    var $send = this.$send;
                    $send.removeAttr("disabled");
                    $send.trigger("click");
                }
            }, {
                key: "reset",
                value: function() {
                    this.clearCountDown();
                }
            } ]);
            return Verifycode;
        }();
        const verifycode = Verifycode;
        function _typeof(obj) {
            "@babel/helpers - typeof";
            if ("function" === typeof Symbol && "symbol" === typeof Symbol.iterator) _typeof = function(obj) {
                return typeof obj;
            }; else _typeof = function(obj) {
                return obj && "function" === typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
            return _typeof(obj);
        }
        function install_ownKeys(object, enumerableOnly) {
            var keys = Object.keys(object);
            if (Object.getOwnPropertySymbols) {
                var symbols = Object.getOwnPropertySymbols(object);
                if (enumerableOnly) symbols = symbols.filter((function(sym) {
                    return Object.getOwnPropertyDescriptor(object, sym).enumerable;
                }));
                keys.push.apply(keys, symbols);
            }
            return keys;
        }
        function install_objectSpread(target) {
            for (var i = 1; i < arguments.length; i++) {
                var source = null != arguments[i] ? arguments[i] : {};
                if (i % 2) install_ownKeys(Object(source), true).forEach((function(key) {
                    install_defineProperty(target, key, source[key]);
                })); else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); else install_ownKeys(Object(source)).forEach((function(key) {
                    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
                }));
            }
            return target;
        }
        function install_defineProperty(obj, key, value) {
            if (key in obj) Object.defineProperty(obj, key, {
                value,
                enumerable: true,
                configurable: true,
                writable: true
            }); else obj[key] = value;
            return obj;
        }
        function _objectWithoutProperties(source, excluded) {
            if (null == source) return {};
            var target = _objectWithoutPropertiesLoose(source, excluded);
            var key, i;
            if (Object.getOwnPropertySymbols) {
                var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
                for (i = 0; i < sourceSymbolKeys.length; i++) {
                    key = sourceSymbolKeys[i];
                    if (excluded.indexOf(key) >= 0) continue;
                    if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
                    target[key] = source[key];
                }
            }
            return target;
        }
        function _objectWithoutPropertiesLoose(source, excluded) {
            if (null == source) return {};
            var target = {};
            var sourceKeys = Object.keys(source);
            var key, i;
            for (i = 0; i < sourceKeys.length; i++) {
                key = sourceKeys[i];
                if (excluded.indexOf(key) >= 0) continue;
                target[key] = source[key];
            }
            return target;
        }
        var map = {
            username,
            verifycode
        };
        const install = function(formInstance, fields) {
            var defaultFormValue = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
            var formItems = {};
            var initFields = fields.map((function(_ref) {
                var type = _ref.type, name = _ref.name, value = _ref.value, dependencies = _ref.dependencies, _ref$rules = _ref.rules, rules = void 0 === _ref$rules ? [] : _ref$rules, _ref$on = _ref.on, on = void 0 === _ref$on ? {} : _ref$on, args = _objectWithoutProperties(_ref, [ "type", "name", "value", "dependencies", "rules", "on" ]);
                var Constructor = map[type];
                var dependenciesValue = dependencies && dependencies.reduce((function(values, key) {
                    values[key] = defaultFormValue[key];
                    return values;
                }), {});
                if (Constructor) {
                    var instance = new Constructor(install_objectSpread(install_objectSpread({
                        name,
                        form: formInstance,
                        formId: formInstance.fid,
                        value,
                        on
                    }, args), dependenciesValue));
                    if (defaultFormValue[name]) __SL_$__(formInstance.el).find("input[name=".concat(name, "]")).val(defaultFormValue[name]);
                    var _ref2 = instance && instance.install && instance.install() || {}, _ref2$rules = _ref2.rules, defaultRules = void 0 === _ref2$rules ? [] : _ref2$rules;
                    formItems[name] = instance;
                    return {
                        name,
                        value,
                        rules: rules.concat(defaultRules)
                    };
                }
                return {
                    name,
                    value,
                    rules
                };
            }));
            initFields.forEach((function(_ref3) {
                var name = _ref3.name, value = _ref3.value, rules = _ref3.rules;
                formInstance.setRule(rules, name);
                if (value) formInstance.setLocalsValue(name, value);
            }));
            formInstance.on("valuesChange", (function(_ref4) {
                var changedValue = _ref4.changedValue;
                var keys = Object.keys(changedValue);
                var key = keys && keys[0];
                var subscriptField = fields.filter((function(item) {
                    return item && item.watch && item.watch.includes(key);
                })) || [];
                subscriptField && subscriptField.forEach((function(field) {
                    var currentInstance = formItems[field && field.type];
                    var $$watch = currentInstance && currentInstance.$$watch;
                    if ("function" === typeof $$watch) $$watch && $$watch.call(currentInstance, {
                        name: key,
                        value: changedValue[key]
                    }); else if ("object" === _typeof($$watch)) $$watch && $$watch[key] && $$watch[key].call(currentInstance, changedValue[key]);
                }));
            }));
            return formItems;
        };
        var toast = __webpack_require__("../shared/browser/components/hbs/shared/components/toast/index.js");
        function form_ownKeys(object, enumerableOnly) {
            var keys = Object.keys(object);
            if (Object.getOwnPropertySymbols) {
                var symbols = Object.getOwnPropertySymbols(object);
                if (enumerableOnly) symbols = symbols.filter((function(sym) {
                    return Object.getOwnPropertyDescriptor(object, sym).enumerable;
                }));
                keys.push.apply(keys, symbols);
            }
            return keys;
        }
        function form_objectSpread(target) {
            for (var i = 1; i < arguments.length; i++) {
                var source = null != arguments[i] ? arguments[i] : {};
                if (i % 2) form_ownKeys(Object(source), true).forEach((function(key) {
                    form_defineProperty(target, key, source[key]);
                })); else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); else form_ownKeys(Object(source)).forEach((function(key) {
                    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
                }));
            }
            return target;
        }
        function form_defineProperty(obj, key, value) {
            if (key in obj) Object.defineProperty(obj, key, {
                value,
                enumerable: true,
                configurable: true,
                writable: true
            }); else obj[key] = value;
            return obj;
        }
        function form_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
            try {
                var info = gen[key](arg);
                var value = info.value;
            } catch (error) {
                reject(error);
                return;
            }
            if (info.done) resolve(value); else Promise.resolve(value).then(_next, _throw);
        }
        function form_asyncToGenerator(fn) {
            return function() {
                var self = this, args = arguments;
                return new Promise((function(resolve, reject) {
                    var gen = fn.apply(self, args);
                    function _next(value) {
                        form_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
                    }
                    function _throw(err) {
                        form_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
                    }
                    _next(void 0);
                }));
            };
        }
        function form_classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
        }
        function form_defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }
        function form_createClass(Constructor, protoProps, staticProps) {
            if (protoProps) form_defineProperties(Constructor.prototype, protoProps);
            if (staticProps) form_defineProperties(Constructor, staticProps);
            return Constructor;
        }
        var form_BUTTON_LOADING_CLASS = "btn--loading";
        var PageOrderTrackingForm = function() {
            function PageOrderTrackingForm(_ref) {
                var id = _ref.id, fields = _ref.fields, _ref$formValue = _ref.formValue, formValue = void 0 === _ref$formValue ? {} : _ref$formValue, onSubmit = _ref.onSubmit, onValidate = _ref.onValidate;
                form_classCallCheck(this, PageOrderTrackingForm);
                this.formId = id;
                this.fields = fields;
                this.formInstance = null;
                this.onSubmit = onSubmit;
                this.onValidate = onValidate;
                this.formItemInstances = {};
                this.defaultFormValue = formValue;
                this.init();
            }
            form_createClass(PageOrderTrackingForm, [ {
                key: "init",
                value: function() {
                    this.formInstance = this.initForm();
                    this.setFormFields(this.fields);
                    this.bindEvents();
                }
            }, {
                key: "initForm",
                value: function() {
                    var formInstance = utils_form["default"].takeForm(this.formId);
                    formInstance.init({
                        validateTriggerAfterValidationFailed: form_form.ValidateTrigger.MANUAL
                    });
                    return formInstance;
                }
            }, {
                key: "setFormFields",
                value: function(fields) {
                    this.formItemInstances = install(this.formInstance, fields, this.defaultFormValue);
                }
            }, {
                key: "bindEvents",
                value: function() {
                    this.bindFormSubmit();
                }
            }, {
                key: "bindFormSubmit",
                value: function() {
                    var _this = this;
                    var isLoading = false;
                    var $submitBtn = __SL_$__("#".concat(this.formId, " .submit-button"));
                    $submitBtn.off("click");
                    $submitBtn.on("click", function() {
                        var _ref2 = form_asyncToGenerator(regeneratorRuntime.mark((function _callee(e) {
                            var data, lastField;
                            return regeneratorRuntime.wrap((function(_context) {
                                while (1) switch (_context.prev = _context.next) {
                                  case 0:
                                    if (!isLoading) {
                                        _context.next = 2;
                                        break;
                                    }
                                    return _context.abrupt("return");

                                  case 2:
                                    if (window && window.navigator && window.navigator.onLine) {
                                        _context.next = 5;
                                        break;
                                    }
                                    toast["default"].init({
                                        content: (0, i18n.t)("customer.general.network_error_message")
                                    });
                                    return _context.abrupt("return");

                                  case 5:
                                    e.preventDefault();
                                    _context.prev = 6;
                                    _context.next = 9;
                                    return _this.validateForm();

                                  case 9:
                                    data = _this.getFormValue();
                                    isLoading = true;
                                    __SL_$__(e.target).addClass(form_BUTTON_LOADING_CLASS);
                                    _context.next = 14;
                                    return _this.onSubmit && _this.onSubmit(data);

                                  case 14:
                                    _context.next = 20;
                                    break;

                                  case 16:
                                    _context.prev = 16;
                                    _context.t0 = _context["catch"](6);
                                    lastField = _this.fields[_this.fields.length - 1];
                                    if (lastField.name && _this.formInstance.setErrMsgIntoDom) _this.formInstance.setErrMsgIntoDom([ {
                                        name: lastField.name,
                                        messages: [ getUdbErrorMessage(_context.t0) ]
                                    } ]);

                                  case 20:
                                    isLoading = false;
                                    __SL_$__(e.target).removeClass(form_BUTTON_LOADING_CLASS);

                                  case 22:
                                  case "end":
                                    return _context.stop();
                                }
                            }), _callee, null, [ [ 6, 16 ] ]);
                        })));
                        return function(_x) {
                            return _ref2.apply(this, arguments);
                        };
                    }());
                }
            }, {
                key: "getValue",
                value: function() {
                    var _this2 = this;
                    var fieldsValue = this.formInstance.getFieldsValue();
                    return Object.keys(fieldsValue).reduce((function(values, key) {
                        var itemValue = _this2.formItemInstances[key] && _this2.formItemInstances[key].getValue();
                        if (itemValue) return form_objectSpread(form_objectSpread({}, values), itemValue);
                        return form_objectSpread(form_objectSpread({}, values), {}, form_defineProperty({}, key, fieldsValue[key]));
                    }), {});
                }
            }, {
                key: "getFormValue",
                value: function() {
                    var fieldsValue = this.formInstance.getFieldsValue();
                    return fieldsValue;
                }
            }, {
                key: "validateForm",
                value: function() {
                    var _validateForm = form_asyncToGenerator(regeneratorRuntime.mark((function _callee2() {
                        var _this3 = this;
                        var validateFields, res, failRes, lastField;
                        return regeneratorRuntime.wrap((function(_context2) {
                            while (1) switch (_context2.prev = _context2.next) {
                              case 0:
                                validateFields = [];
                                this.fields.forEach((function(item) {
                                    validateFields.push(_this3.formInstance.validateFields(item.name));
                                }));
                                if ("function" === typeof this.onValidate) validateFields.push(this.onValidate());
                                _context2.next = 5;
                                return Promise.all(validateFields);

                              case 5:
                                res = _context2.sent;
                                failRes = res.filter((function(item) {
                                    return !item.pass;
                                }));
                                if (!(failRes.length > 0)) {
                                    _context2.next = 11;
                                    break;
                                }
                                lastField = failRes[failRes.length - 1].errFields[0];
                                if (!(lastField && lastField.name)) {
                                    _context2.next = 11;
                                    break;
                                }
                                throw new Error(lastField.messages);

                              case 11:
                                return _context2.abrupt("return", true);

                              case 12:
                              case "end":
                                return _context2.stop();
                            }
                        }), _callee2, this);
                    })));
                    function validateForm() {
                        return _validateForm.apply(this, arguments);
                    }
                    return validateForm;
                }()
            }, {
                key: "bindInputActive",
                value: function() {
                    __SL_$__(this.formInstance.el).find(".placeholder").one("transitionend", (function(e) {
                        __SL_$__(e.target).addClass("active");
                        setTimeout((function() {
                            return __SL_$__(e.target).removeClass("active");
                        }), 100);
                    }));
                }
            }, {
                key: "destroy",
                value: function() {
                    var _this4 = this;
                    Object.keys(this.formItemInstances).forEach((function(instance) {
                        _this4.formItemInstances[instance] && _this4.formItemInstances[instance].reset && _this4.formItemInstances[instance].reset();
                    }));
                    this.formItemInstances = {};
                    this.formInstance && this.formInstance.resetErrStatus();
                    this.formInstance && this.formInstance.destroy();
                    this.formInstance = null;
                }
            } ]);
            return PageOrderTrackingForm;
        }();
        const orderTracking_form = PageOrderTrackingForm;
        function getFormFields_objectWithoutProperties(source, excluded) {
            if (null == source) return {};
            var target = getFormFields_objectWithoutPropertiesLoose(source, excluded);
            var key, i;
            if (Object.getOwnPropertySymbols) {
                var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
                for (i = 0; i < sourceSymbolKeys.length; i++) {
                    key = sourceSymbolKeys[i];
                    if (excluded.indexOf(key) >= 0) continue;
                    if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
                    target[key] = source[key];
                }
            }
            return target;
        }
        function getFormFields_objectWithoutPropertiesLoose(source, excluded) {
            if (null == source) return {};
            var target = {};
            var sourceKeys = Object.keys(source);
            var key, i;
            for (i = 0; i < sourceKeys.length; i++) {
                key = sourceKeys[i];
                if (excluded.indexOf(key) >= 0) continue;
                target[key] = source[key];
            }
            return target;
        }
        function getFormFields_ownKeys(object, enumerableOnly) {
            var keys = Object.keys(object);
            if (Object.getOwnPropertySymbols) {
                var symbols = Object.getOwnPropertySymbols(object);
                if (enumerableOnly) symbols = symbols.filter((function(sym) {
                    return Object.getOwnPropertyDescriptor(object, sym).enumerable;
                }));
                keys.push.apply(keys, symbols);
            }
            return keys;
        }
        function getFormFields_objectSpread(target) {
            for (var i = 1; i < arguments.length; i++) {
                var source = null != arguments[i] ? arguments[i] : {};
                if (i % 2) getFormFields_ownKeys(Object(source), true).forEach((function(key) {
                    getFormFields_defineProperty(target, key, source[key]);
                })); else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); else getFormFields_ownKeys(Object(source)).forEach((function(key) {
                    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
                }));
            }
            return target;
        }
        function getFormFields_defineProperty(obj, key, value) {
            if (key in obj) Object.defineProperty(obj, key, {
                value,
                enumerable: true,
                configurable: true,
                writable: true
            }); else obj[key] = value;
            return obj;
        }
        var formFields = {
            email: function() {
                var config = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                return getFormFields_objectSpread({
                    name: "email",
                    type: "email",
                    value: "",
                    rules: [ {
                        message: (0, i18n.t)("customer.general.email_empty_hint"),
                        required: true
                    }, {
                        message: (0, i18n.t)("customer.general.email_error_hint"),
                        validator: function(value) {
                            return emailValidator(value);
                        }
                    } ]
                }, config);
            },
            phone: function() {
                var config = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                return getFormFields_objectSpread({
                    name: "phone",
                    type: "phone",
                    value: "",
                    dependencies: [ "iso2" ],
                    rules: [ {
                        message: (0, i18n.t)("customer.general.phone_empty_message"),
                        required: true
                    } ]
                }, config);
            },
            username: function() {
                var config = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                return getFormFields_objectSpread({
                    name: "username",
                    type: "username",
                    value: "",
                    dependencies: [ "iso2" ],
                    rules: [ {
                        message: (0, i18n.t)("customer.general.username_empty_hint"),
                        required: true
                    } ]
                }, config);
            },
            verifycode: function() {
                var configs = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                return getFormFields_objectSpread({
                    name: "verifycode",
                    type: "verifycode",
                    value: "",
                    rules: [ {
                        message: (0, i18n.t)("customer.general.enter_verification_code"),
                        required: true
                    } ]
                }, configs);
            },
            orderId: function() {
                var configs = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                return getFormFields_objectSpread({
                    name: "orderId",
                    type: "orderId",
                    value: "",
                    rules: [ {
                        message: (0, i18n.t)("general.order_tracking.orderId_error"),
                        required: true
                    } ]
                }, configs);
            }
        };
        var getFormFieldsHelper = function() {
            var types = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];
            return types.filter((function(type) {
                return !!type;
            })).map((function(item) {
                if ("string" === typeof item) return formFields[item] && formFields[item]();
                var type = item.type, args = getFormFields_objectWithoutProperties(item, [ "type" ]);
                return formFields[type](args);
            }));
        };
        const getFormFields = getFormFieldsHelper;
        var modal = __webpack_require__("../shared/browser/components/hbs/shared/components/modal/index.js");
        function loadScript_defineProperty(obj, key, value) {
            if (key in obj) Object.defineProperty(obj, key, {
                value,
                enumerable: true,
                configurable: true,
                writable: true
            }); else obj[key] = value;
            return obj;
        }
        var loadScript = function loadScript(url) {
            if (loadScript.instance && loadScript.instance[url]) return loadScript.instance[url];
            var scriptRequest = new Promise((function(resolve, reject) {
                var scriptElement = document.createElement("script");
                scriptElement.src = url;
                scriptElement.type = "text/javascript";
                scriptElement.async = true;
                scriptElement.crossOrigin = "anonymous";
                scriptElement.onload = function() {
                    return resolve();
                };
                scriptElement.onerror = function(err) {
                    if (loadScript.instance && loadScript.instance[url]) delete loadScript.instance[url];
                    reject(err);
                };
                document.body.appendChild(scriptElement);
            }));
            if (!loadScript.instance) loadScript.instance = loadScript_defineProperty({}, url, scriptRequest); else loadScript.instance[url] = scriptRequest;
            return scriptRequest;
        };
        loadScript.instance = {};
        var config = {
            SDK_URL_OSS: "r2cdn.myshopline.cn/static/rs/acuf/prod/latest/bundle.iife.js",
            SDK_URL_S3: "https://r2cdn.myshopline.com/static/rs/acuf/prod/latest/bundle.iife.js",
            IS_MAINLAND: false,
            APP_ENV: (0, get_env["default"])().APP_ENV || "product",
            APP_CODE: "m3tdgo"
        };
        var CAPTCHA_CONTROL_URL = config.IS_MAINLAND ? config.SDK_URL_OSS : config.SDK_URL_S3;
        var captchaInstance = null;
        var loadArmorCaptcha = function(_ref) {
            var _ref$wrapId = _ref.wrapId, wrapId = void 0 === _ref$wrapId ? "content" : _ref$wrapId, lang = _ref.lang, onSuccess = _ref.onSuccess, onFail = _ref.onFail, onClose = _ref.onClose;
            if (captchaInstance) return Promise.resolve(captchaInstance);
            return loadScript(CAPTCHA_CONTROL_URL).then((function() {
                var _window = window, ArmorCaptcha = _window.ArmorCaptcha;
                captchaInstance = new ArmorCaptcha({
                    wrapId,
                    lang,
                    onSuccess,
                    onFail,
                    onClose,
                    origin: window.location.origin,
                    appCode: config.APP_CODE,
                    captchaScene: "user"
                });
                return captchaInstance;
            }));
        };
        function captcha_modal_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
            try {
                var info = gen[key](arg);
                var value = info.value;
            } catch (error) {
                reject(error);
                return;
            }
            if (info.done) resolve(value); else Promise.resolve(value).then(_next, _throw);
        }
        function captcha_modal_asyncToGenerator(fn) {
            return function() {
                var self = this, args = arguments;
                return new Promise((function(resolve, reject) {
                    var gen = fn.apply(self, args);
                    function _next(value) {
                        captcha_modal_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
                    }
                    function _throw(err) {
                        captcha_modal_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
                    }
                    _next(void 0);
                }));
            };
        }
        var cacheModal = null;
        var cacheArmorCaptcha = null;
        var lang = null;
        var contentId = "captcha-content";
        var openCaptchaModal = function() {
            var _ref2 = captcha_modal_asyncToGenerator(regeneratorRuntime.mark((function _callee(_ref) {
                var _onSuccess;
                return regeneratorRuntime.wrap((function(_context) {
                    while (1) switch (_context.prev = _context.next) {
                      case 0:
                        _onSuccess = _ref.onSuccess;
                        if (!cacheModal) {
                            _context.next = 6;
                            break;
                        }
                        cacheModal.show();
                        cacheArmorCaptcha && cacheArmorCaptcha.reset();
                        if (lang !== getLanguage()) cacheArmorCaptcha.changeLanguage(getLanguage());
                        return _context.abrupt("return");

                      case 6:
                        cacheModal = new modal.ModalWithHtml({
                            zIndex: 1e3,
                            containerClassName: "captcha-modal-container",
                            closable: false,
                            maskClosable: true,
                            bodyClassName: "captcha-modal-body",
                            content: '<div id="'.concat(contentId, '" class="captcha-content"></div>'),
                            destroyedOnClosed: false
                        });
                        cacheModal.show();
                        __SL_$__("#".concat(cacheModal.modalId)).find(".mp-modal__mask").addClass("captcha-transparent");
                        __SL_$__("#".concat(cacheModal.modalId)).on("click", ".captcha-modal-container", (function(e) {
                            var $target = __SL_$__(e.target).parents(".captcha-content");
                            if ($target.length < 1) cacheModal.hide();
                        }));
                        lang = getLanguage();
                        _context.next = 13;
                        return loadArmorCaptcha({
                            wrapId: contentId,
                            lang,
                            onSuccess: function(token) {
                                cacheModal.hide();
                                _onSuccess && _onSuccess(token);
                            }
                        });

                      case 13:
                        cacheArmorCaptcha = _context.sent;

                      case 14:
                      case "end":
                        return _context.stop();
                    }
                }), _callee);
            })));
            return function(_x) {
                return _ref2.apply(this, arguments);
            };
        }();
        var captchaToken = null;
        var isFunction = function(fn) {
            return "function" === typeof fn;
        };
        var CAPTCHA_CODE = [ "2019", "2020", "3018", "3021", "1015" ];
        var wrapArmorCaptcha = function() {
            var _ref4 = captcha_modal_asyncToGenerator(regeneratorRuntime.mark((function _callee3(_ref3) {
                var beforeSendCode, onSendCode, onCaptchaVerifySuccess;
                return regeneratorRuntime.wrap((function(_context3) {
                    while (1) switch (_context3.prev = _context3.next) {
                      case 0:
                        beforeSendCode = _ref3.beforeSendCode, onSendCode = _ref3.onSendCode, onCaptchaVerifySuccess = _ref3.onCaptchaVerifySuccess;
                        if (captchaToken) {
                            _context3.next = 6;
                            break;
                        }
                        _context3.t0 = isFunction(beforeSendCode);
                        if (!_context3.t0) {
                            _context3.next = 6;
                            break;
                        }
                        _context3.next = 6;
                        return beforeSendCode();

                      case 6:
                        _context3.prev = 6;
                        _context3.t1 = isFunction(onSendCode);
                        if (!_context3.t1) {
                            _context3.next = 11;
                            break;
                        }
                        _context3.next = 11;
                        return onSendCode(captchaToken);

                      case 11:
                        captchaToken = null;
                        _context3.next = 21;
                        break;

                      case 14:
                        _context3.prev = 14;
                        _context3.t2 = _context3["catch"](6);
                        captchaToken = null;
                        if (!CAPTCHA_CODE.includes(_context3.t2.rescode)) {
                            _context3.next = 20;
                            break;
                        }
                        openCaptchaModal({
                            onSuccess: function() {
                                var _onSuccess2 = captcha_modal_asyncToGenerator(regeneratorRuntime.mark((function _callee2(token) {
                                    return regeneratorRuntime.wrap((function(_context2) {
                                        while (1) switch (_context2.prev = _context2.next) {
                                          case 0:
                                            captchaToken = token;
                                            _context2.t0 = isFunction(onCaptchaVerifySuccess);
                                            if (!_context2.t0) {
                                                _context2.next = 5;
                                                break;
                                            }
                                            _context2.next = 5;
                                            return onCaptchaVerifySuccess(token);

                                          case 5:
                                          case "end":
                                            return _context2.stop();
                                        }
                                    }), _callee2);
                                })));
                                function onSuccess(_x3) {
                                    return _onSuccess2.apply(this, arguments);
                                }
                                return onSuccess;
                            }()
                        });
                        return _context3.abrupt("return", Promise.reject(false));

                      case 20:
                        return _context3.abrupt("return", Promise.reject(_context3.t2));

                      case 21:
                      case "end":
                        return _context3.stop();
                    }
                }), _callee3, null, [ [ 6, 14 ] ]);
            })));
            return function(_x2) {
                return _ref4.apply(this, arguments);
            };
        }();
        var getCaptchaToken = function() {
            return captchaToken;
        };
        const captcha_modal = openCaptchaModal;
        var DF_ENV = {
            develop: "dev",
            staging: "test",
            preview: "pre",
            product: "pro"
        };
        var riskControl_config = {
            DF_SDK_URL_OSS: "https://r2cdn.myshopline.cn/static/rs/adff/prod/latest/bundle.iife.js",
            DF_SDK_URL_S3: "https://r2cdn.myshopline.com/static/rs/adff/prod/latest/bundle.iife.js",
            IS_MAINLAND: false,
            APP_ENV: (0, get_env["default"])().APP_ENV || "product",
            DF_APP_CODE: "m3tdgo",
            PUBLICKEY: "MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFOkIm2U9Gn1fMq3cA5RUB9dG7LTIjt8lC3udJL75EzuclO2/GhHLVnVIbXnaBhBkCvYqDmwWJDyzWh2Uaor1VFeAtOuFAmqFWFc/JXS1MosLusO8HSHT1qUWLmkefU+BCf77rVPD7kBdXgWds2pLhB0sijpP6QdaFZNiVcTuetQIDAQAB"
        };
        var RISK_CONTROL_URL = riskControl_config.IS_MAINLAND ? riskControl_config.DF_SDK_URL_OSS : riskControl_config.DF_SDK_URL_S3;
        var riskHumanToken = {
            codeBtnToken: null,
            orderBtnToken: null
        };
        var dfInstance = null;
        var initRiskHumanToken = function() {
            var checker = window.DeviceFingerprint.mmc({
                env: DF_ENV[riskControl_config.APP_ENV || "prd"],
                publicKey: riskControl_config.PUBLICKEY,
                timeout: 500
            });
            checker.listen("JsendCode", (function(token) {
                riskHumanToken.codeBtnToken = token;
            }));
            checker.listen("JorderView", (function(token) {
                riskHumanToken.orderBtnToken = token;
            }));
        };
        var loadRiskControl = function() {
            if (dfInstance) return Promise.resolve(dfInstance);
            return loadScript(RISK_CONTROL_URL).then((function() {
                dfInstance = window.DeviceFingerprint && window.DeviceFingerprint({
                    env: DF_ENV[riskControl_config.APP_ENV || "prd"],
                    appCode: riskControl_config.DF_APP_CODE
                });
                initRiskHumanToken();
                return dfInstance;
            }));
        };
        var getRiskHumanToken = function() {
            return new Promise((function(resolve) {
                setTimeout((function() {
                    resolve(riskHumanToken);
                }), 600);
            }));
        };
        var getRiskControlToken = function() {
            return loadRiskControl().then((function(df) {
                return df && df.getToken();
            }));
        };
        var request = __webpack_require__("../shared/browser/utils/request.js");
        function request_ownKeys(object, enumerableOnly) {
            var keys = Object.keys(object);
            if (Object.getOwnPropertySymbols) {
                var symbols = Object.getOwnPropertySymbols(object);
                if (enumerableOnly) symbols = symbols.filter((function(sym) {
                    return Object.getOwnPropertyDescriptor(object, sym).enumerable;
                }));
                keys.push.apply(keys, symbols);
            }
            return keys;
        }
        function request_objectSpread(target) {
            for (var i = 1; i < arguments.length; i++) {
                var source = null != arguments[i] ? arguments[i] : {};
                if (i % 2) request_ownKeys(Object(source), true).forEach((function(key) {
                    request_defineProperty(target, key, source[key]);
                })); else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); else request_ownKeys(Object(source)).forEach((function(key) {
                    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
                }));
            }
            return target;
        }
        function request_defineProperty(obj, key, value) {
            if (key in obj) Object.defineProperty(obj, key, {
                value,
                enumerable: true,
                configurable: true,
                writable: true
            }); else obj[key] = value;
            return obj;
        }
        var udbRequest = {
            get: function(url) {
                var options = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                return (0, request["default"])(request_objectSpread({
                    method: "GET",
                    baseURL: "/leproxy",
                    url
                }, options));
            }
        };
        var request_request = request["default"];
        var initUdbLogin = function(params) {
            return udbRequest.get("/udb/lgn/login/init.do", {
                params
            });
        };
        var sendEmailCode = function(params) {
            return udbRequest.get("/udb/lgn/login/sendEmail.do", {
                params
            });
        };
        var verifyEmailLogin = function(params) {
            return udbRequest.get("/udb/lgn/login/verifyEmail.do", {
                params
            });
        };
        var checkOrder = function(data) {
            return request_request.post("/site/check/order/query", data);
        };
        function orderTracking_ownKeys(object, enumerableOnly) {
            var keys = Object.keys(object);
            if (Object.getOwnPropertySymbols) {
                var symbols = Object.getOwnPropertySymbols(object);
                if (enumerableOnly) symbols = symbols.filter((function(sym) {
                    return Object.getOwnPropertyDescriptor(object, sym).enumerable;
                }));
                keys.push.apply(keys, symbols);
            }
            return keys;
        }
        function orderTracking_objectSpread(target) {
            for (var i = 1; i < arguments.length; i++) {
                var source = null != arguments[i] ? arguments[i] : {};
                if (i % 2) orderTracking_ownKeys(Object(source), true).forEach((function(key) {
                    orderTracking_defineProperty(target, key, source[key]);
                })); else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); else orderTracking_ownKeys(Object(source)).forEach((function(key) {
                    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
                }));
            }
            return target;
        }
        function orderTracking_defineProperty(obj, key, value) {
            if (key in obj) Object.defineProperty(obj, key, {
                value,
                enumerable: true,
                configurable: true,
                writable: true
            }); else obj[key] = value;
            return obj;
        }
        function orderTracking_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
            try {
                var info = gen[key](arg);
                var value = info.value;
            } catch (error) {
                reject(error);
                return;
            }
            if (info.done) resolve(value); else Promise.resolve(value).then(_next, _throw);
        }
        function orderTracking_asyncToGenerator(fn) {
            return function() {
                var self = this, args = arguments;
                return new Promise((function(resolve, reject) {
                    var gen = fn.apply(self, args);
                    function _next(value) {
                        orderTracking_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
                    }
                    function _throw(err) {
                        orderTracking_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
                    }
                    _next(void 0);
                }));
            };
        }
        function orderTracking_classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
        }
        function orderTracking_defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }
        function orderTracking_createClass(Constructor, protoProps, staticProps) {
            if (protoProps) orderTracking_defineProperties(Constructor.prototype, protoProps);
            if (staticProps) orderTracking_defineProperties(Constructor, staticProps);
            return Constructor;
        }
        var appidJson = {
            develop: 1163336839,
            staging: 1163336839,
            preview: 1165600903,
            product: 1165600903
        };
        var OrderTrackingForm = function() {
            function OrderTrackingForm(dom) {
                orderTracking_classCallCheck(this, OrderTrackingForm);
                this.formDom = dom;
                this.isHistoryOrder = false;
                this.verify = true;
                this.formId = "JorderTrackingForm";
                this.initChangeForm();
            }
            orderTracking_createClass(OrderTrackingForm, [ {
                key: "init",
                value: function() {
                    var _this = this;
                    this.orderTrackingFormInstance && this.orderTrackingFormInstance.destroy();
                    this.orderTrackingFormInstance = new orderTracking_form({
                        id: this.formId,
                        fields: this.getFieldConfigs(),
                        onSubmit: function() {
                            var _onSubmit = orderTracking_asyncToGenerator(regeneratorRuntime.mark((function _callee(data) {
                                return regeneratorRuntime.wrap((function(_context) {
                                    while (1) switch (_context.prev = _context.next) {
                                      case 0:
                                        if (!_this.isHistoryOrder) {
                                            _context.next = 5;
                                            break;
                                        }
                                        _context.next = 3;
                                        return _this.onHistoryOrderSubmit(data);

                                      case 3:
                                        _context.next = 7;
                                        break;

                                      case 5:
                                        _context.next = 7;
                                        return _this.onViewSubmit(data);

                                      case 7:
                                      case "end":
                                        return _context.stop();
                                    }
                                }), _callee);
                            })));
                            function onSubmit(_x) {
                                return _onSubmit.apply(this, arguments);
                            }
                            return onSubmit;
                        }()
                    });
                }
            }, {
                key: "initChangeForm",
                value: function() {
                    var _initChangeForm = orderTracking_asyncToGenerator(regeneratorRuntime.mark((function _callee2() {
                        var _this2 = this;
                        return regeneratorRuntime.wrap((function(_context2) {
                            while (1) switch (_context2.prev = _context2.next) {
                              case 0:
                                _context2.next = 2;
                                return getRiskControlToken();

                              case 2:
                                this.dfptoken = _context2.sent;
                                this.formDom.find(".order-tracking__change-form-btn").click((function() {
                                    if (_this2.isHistoryOrder) {
                                        _this2.formDom.find(".JfindOrder").show();
                                        _this2.formDom.find(".JhistoryOrder").hide();
                                    } else {
                                        _this2.formDom.find(".JfindOrder").hide();
                                        _this2.formDom.find(".JhistoryOrder").show();
                                    }
                                    _this2.isHistoryOrder = !_this2.isHistoryOrder;
                                    _this2.init();
                                }));
                                this.init();

                              case 5:
                              case "end":
                                return _context2.stop();
                            }
                        }), _callee2, this);
                    })));
                    function initChangeForm() {
                        return _initChangeForm.apply(this, arguments);
                    }
                    return initChangeForm;
                }()
            }, {
                key: "getFieldConfigs",
                value: function() {
                    var _this3 = this;
                    var fieldTypes = this.isHistoryOrder ? [ "email", {
                        type: "verifycode",
                        on: {
                            send: function() {
                                return _this3.sendVerifyCode();
                            }
                        },
                        watch: [ "email" ]
                    } ] : [ "username", "orderId" ];
                    return getFormFields(fieldTypes);
                }
            }, {
                key: "onViewSubmit",
                value: function() {
                    var _onViewSubmit = orderTracking_asyncToGenerator(regeneratorRuntime.mark((function _callee3(data) {
                        var tokenObj, newData, itemValue, res;
                        return regeneratorRuntime.wrap((function(_context3) {
                            while (1) switch (_context3.prev = _context3.next) {
                              case 0:
                                _context3.prev = 0;
                                _context3.next = 3;
                                return getRiskHumanToken();

                              case 3:
                                tokenObj = _context3.sent;
                                newData = orderTracking_objectSpread(orderTracking_objectSpread({}, data), {}, {
                                    dfpToken: this.dfptoken,
                                    msToken: tokenObj.orderBtnToken
                                });
                                newData.email = null;
                                newData.phone = null;
                                if (data.username.includes("@")) newData.email = data.username; else {
                                    itemValue = this.orderTrackingFormInstance.formItemInstances.username.getFormValue();
                                    newData.phone = itemValue.username;
                                }
                                _context3.next = 10;
                                return checkOrder(newData);

                              case 10:
                                res = _context3.sent;
                                if (res.data && res.data.riskCheck) this.orderCaptcha(data);
                                if (res.data && res.data.orderUrl) window.location.href = res.data.orderUrl;
                                _context3.next = 18;
                                break;

                              case 15:
                                _context3.prev = 15;
                                _context3.t0 = _context3["catch"](0);
                                if ("SLE1101" === _context3.t0.code) this.onError({
                                    message: (0, i18n.t)("general.order_tracking.risk_black_user")
                                }); else if ("SLE1102" === _context3.t0.code) this.onError({
                                    message: (0, i18n.t)("general.order_tracking.risk_interception")
                                }); else if ("SLE1103" === _context3.t0.code) this.onError({
                                    message: (0, i18n.t)("general.order_tracking.query_illegal")
                                }); else this.onError(_context3.t0);

                              case 18:
                              case "end":
                                return _context3.stop();
                            }
                        }), _callee3, this, [ [ 0, 15 ] ]);
                    })));
                    function onViewSubmit(_x2) {
                        return _onViewSubmit.apply(this, arguments);
                    }
                    return onViewSubmit;
                }()
            }, {
                key: "onHistoryOrderSubmit",
                value: function() {
                    var _onHistoryOrderSubmit = orderTracking_asyncToGenerator(regeneratorRuntime.mark((function _callee4(data) {
                        var loginRes, res;
                        return regeneratorRuntime.wrap((function(_context4) {
                            while (1) switch (_context4.prev = _context4.next) {
                              case 0:
                                _context4.prev = 0;
                                if (this.stoken) {
                                    _context4.next = 6;
                                    break;
                                }
                                _context4.next = 4;
                                return this.initUdbLoginFun();

                              case 4:
                                loginRes = _context4.sent;
                                if (loginRes && loginRes.stoken) this.stoken = loginRes.stoken;

                              case 6:
                                _context4.next = 8;
                                return verifyEmailLogin({
                                    appid: appidJson[(0, get_env["default"])().APP_ENV || "product"],
                                    code: data.verifycode,
                                    stoken: this.stoken,
                                    acct: data.email,
                                    captcha: getCaptchaToken()
                                });

                              case 8:
                                res = _context4.sent;
                                if ("0" === res.rescode) window.location.href = "/user/orders";
                                _context4.next = 15;
                                break;

                              case 12:
                                _context4.prev = 12;
                                _context4.t0 = _context4["catch"](0);
                                this.onError(_context4.t0);

                              case 15:
                              case "end":
                                return _context4.stop();
                            }
                        }), _callee4, this, [ [ 0, 12 ] ]);
                    })));
                    function onHistoryOrderSubmit(_x3) {
                        return _onHistoryOrderSubmit.apply(this, arguments);
                    }
                    return onHistoryOrderSubmit;
                }()
            }, {
                key: "orderCaptcha",
                value: function() {
                    var _orderCaptcha = orderTracking_asyncToGenerator(regeneratorRuntime.mark((function _callee6(data) {
                        var _this4 = this;
                        return regeneratorRuntime.wrap((function(_context6) {
                            while (1) switch (_context6.prev = _context6.next) {
                              case 0:
                                captcha_modal({
                                    onSuccess: function() {
                                        var _onSuccess = orderTracking_asyncToGenerator(regeneratorRuntime.mark((function _callee5(token) {
                                            var newData;
                                            return regeneratorRuntime.wrap((function(_context5) {
                                                while (1) switch (_context5.prev = _context5.next) {
                                                  case 0:
                                                    newData = orderTracking_objectSpread(orderTracking_objectSpread({}, data), {}, {
                                                        token
                                                    });
                                                    _this4.onViewSubmit(newData);

                                                  case 2:
                                                  case "end":
                                                    return _context5.stop();
                                                }
                                            }), _callee5);
                                        })));
                                        function onSuccess(_x5) {
                                            return _onSuccess.apply(this, arguments);
                                        }
                                        return onSuccess;
                                    }()
                                });

                              case 1:
                              case "end":
                                return _context6.stop();
                            }
                        }), _callee6);
                    })));
                    function orderCaptcha(_x4) {
                        return _orderCaptcha.apply(this, arguments);
                    }
                    return orderCaptcha;
                }()
            }, {
                key: "initUdbLoginFun",
                value: function() {
                    return initUdbLogin({
                        appid: appidJson[(0, get_env["default"])().APP_ENV || "product"],
                        subappid: window.Shopline.storeId,
                        type: "email",
                        dfptoken: this.dfptoken,
                        lang: window.SL_State.get("request.locale")
                    });
                }
            }, {
                key: "sendVerifyCode",
                value: function() {
                    var _sendVerifyCode = orderTracking_asyncToGenerator(regeneratorRuntime.mark((function _callee10() {
                        var _this5 = this;
                        return regeneratorRuntime.wrap((function(_context10) {
                            while (1) switch (_context10.prev = _context10.next) {
                              case 0:
                                _context10.prev = 0;
                                _context10.next = 3;
                                return wrapArmorCaptcha({
                                    beforeSendCode: function() {
                                        var _beforeSendCode = orderTracking_asyncToGenerator(regeneratorRuntime.mark((function _callee7() {
                                            var res, loginRes;
                                            return regeneratorRuntime.wrap((function(_context7) {
                                                while (1) switch (_context7.prev = _context7.next) {
                                                  case 0:
                                                    _context7.next = 2;
                                                    return _this5.orderTrackingFormInstance.formInstance.validateFields([ "email" ]);

                                                  case 2:
                                                    res = _context7.sent;
                                                    if (!res.pass) {
                                                        _context7.next = 11;
                                                        break;
                                                    }
                                                    _context7.next = 6;
                                                    return _this5.initUdbLoginFun();

                                                  case 6:
                                                    loginRes = _context7.sent;
                                                    if (loginRes && loginRes.stoken) _this5.stoken = loginRes.stoken;
                                                    if (!("0" !== loginRes.rescode)) {
                                                        _context7.next = 10;
                                                        break;
                                                    }
                                                    return _context7.abrupt("return", Promise.reject(loginRes));

                                                  case 10:
                                                    return _context7.abrupt("return", Promise.resolve());

                                                  case 11:
                                                    return _context7.abrupt("return", Promise.reject());

                                                  case 12:
                                                  case "end":
                                                    return _context7.stop();
                                                }
                                            }), _callee7);
                                        })));
                                        function beforeSendCode() {
                                            return _beforeSendCode.apply(this, arguments);
                                        }
                                        return beforeSendCode;
                                    }(),
                                    onSendCode: function() {
                                        var _onSendCode = orderTracking_asyncToGenerator(regeneratorRuntime.mark((function _callee8(captchaToken) {
                                            var formValue, acct, tokenObj, res;
                                            return regeneratorRuntime.wrap((function(_context8) {
                                                while (1) switch (_context8.prev = _context8.next) {
                                                  case 0:
                                                    formValue = _this5.orderTrackingFormInstance && _this5.orderTrackingFormInstance.getFormValue();
                                                    acct = formValue.email;
                                                    _context8.next = 4;
                                                    return getRiskHumanToken();

                                                  case 4:
                                                    tokenObj = _context8.sent;
                                                    _context8.next = 7;
                                                    return sendEmailCode({
                                                        appid: appidJson[(0, get_env["default"])().APP_ENV || "product"],
                                                        acct,
                                                        stoken: _this5.stoken,
                                                        captcha: captchaToken,
                                                        mtoken: tokenObj.codeBtnToken
                                                    })["catch"]((function(err) {
                                                        if (err && err.stoken) _this5.stoken = err.stoken;
                                                        return err;
                                                    }));

                                                  case 7:
                                                    res = _context8.sent;
                                                    if (res && res.stoken) _this5.stoken = res.stoken;
                                                    if (!("0" !== res.rescode)) {
                                                        _context8.next = 11;
                                                        break;
                                                    }
                                                    return _context8.abrupt("return", Promise.reject(res));

                                                  case 11:
                                                    return _context8.abrupt("return", Promise.resolve());

                                                  case 12:
                                                  case "end":
                                                    return _context8.stop();
                                                }
                                            }), _callee8);
                                        })));
                                        function onSendCode(_x6) {
                                            return _onSendCode.apply(this, arguments);
                                        }
                                        return onSendCode;
                                    }(),
                                    onCaptchaVerifySuccess: function() {
                                        var _onCaptchaVerifySuccess = orderTracking_asyncToGenerator(regeneratorRuntime.mark((function _callee9() {
                                            return regeneratorRuntime.wrap((function(_context9) {
                                                while (1) switch (_context9.prev = _context9.next) {
                                                  case 0:
                                                    _this5.orderTrackingFormInstance.formItemInstances.verifycode.triggerSendCode();

                                                  case 1:
                                                  case "end":
                                                    return _context9.stop();
                                                }
                                            }), _callee9);
                                        })));
                                        function onCaptchaVerifySuccess() {
                                            return _onCaptchaVerifySuccess.apply(this, arguments);
                                        }
                                        return onCaptchaVerifySuccess;
                                    }()
                                });

                              case 3:
                                _context10.next = 10;
                                break;

                              case 5:
                                _context10.prev = 5;
                                _context10.t0 = _context10["catch"](0);
                                _context10.t0 && this.onError(_context10.t0);
                                if (!_context10.t0) {
                                    _context10.next = 10;
                                    break;
                                }
                                return _context10.abrupt("return", Promise.reject());

                              case 10:
                              case "end":
                                return _context10.stop();
                            }
                        }), _callee10, this, [ [ 0, 5 ] ]);
                    })));
                    function sendVerifyCode() {
                        return _sendVerifyCode.apply(this, arguments);
                    }
                    return sendVerifyCode;
                }()
            }, {
                key: "onError",
                value: function(e) {
                    var fields = this.getFieldConfigs();
                    var lastField = fields[fields.length - 1];
                    if (lastField && lastField.name) this.orderTrackingFormInstance && this.orderTrackingFormInstance.formInstance.setErrMsgIntoDom([ {
                        name: lastField.name,
                        messages: [ getUdbErrorMessage(e) ]
                    } ]);
                }
            }, {
                key: "onUnload",
                value: function() {
                    this.orderTrackingFormInstance.destroy();
                }
            } ]);
            return OrderTrackingForm;
        }();
        const orderTracking = OrderTrackingForm;
        (0, sectionsLoad.registrySectionConstructor)("order-tracking", orderTracking);
    }
}, __webpack_require__ => {
    var __webpack_exec__ = moduleId => __webpack_require__(__webpack_require__.s = moduleId);
    __webpack_require__.O(0, [ "vendor" ], (() => __webpack_exec__("./src/assets/stage/order-tracking/index.js")));
    __webpack_require__.O();
} ]);