"use strict";

(self["webpackChunkArise"] = self["webpackChunkArise"] || []).push([ [ "video" ], {
    "./src/assets/stage/video/index.js": (__unused_webpack_module, __unused_webpack___webpack_exports__, __webpack_require__) => {
        var _yy_sl_theme_shared_utils_sectionsLoad__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../shared/browser/utils/sectionsLoad/index.js");
        var _utils_video__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/assets/stage/video/utils/video.js");
        (0, _yy_sl_theme_shared_utils_sectionsLoad__WEBPACK_IMPORTED_MODULE_0__.registrySectionConstructor)(_utils_video__WEBPACK_IMPORTED_MODULE_1__["default"].type, _utils_video__WEBPACK_IMPORTED_MODULE_1__["default"]);
    },
    "./src/assets/stage/video/utils/video.js": (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
        __webpack_require__.d(__webpack_exports__, {
            default: () => Video
        });
        __webpack_require__("./node_modules/core-js/modules/es.array.find.js");
        __webpack_require__("./node_modules/core-js/modules/es.function.bind.js");
        __webpack_require__("./node_modules/core-js/modules/es.regexp.exec.js");
        __webpack_require__("./node_modules/core-js/modules/es.string.split.js");
        __webpack_require__("./node_modules/core-js/modules/es.object.define-property.js");
        __webpack_require__("./node_modules/core-js/modules/es.object.to-string.js");
        __webpack_require__("./node_modules/core-js/modules/es.promise.js");
        __webpack_require__("./node_modules/core-js/modules/web.timers.js");
        __webpack_require__("./node_modules/core-js/modules/es.object.set-prototype-of.js");
        __webpack_require__("./node_modules/core-js/modules/es.object.get-prototype-of.js");
        __webpack_require__("./node_modules/core-js/modules/es.reflect.construct.js");
        __webpack_require__("./node_modules/core-js/modules/es.object.create.js");
        __webpack_require__("./node_modules/core-js/modules/es.object.keys.js");
        __webpack_require__("./node_modules/core-js/modules/es.symbol.js");
        __webpack_require__("./node_modules/core-js/modules/es.array.filter.js");
        __webpack_require__("./node_modules/core-js/modules/es.object.get-own-property-descriptor.js");
        __webpack_require__("./node_modules/core-js/modules/es.array.for-each.js");
        __webpack_require__("./node_modules/core-js/modules/web.dom-collections.for-each.js");
        __webpack_require__("./node_modules/core-js/modules/es.object.get-own-property-descriptors.js");
        __webpack_require__("./node_modules/core-js/modules/es.object.define-properties.js");
        __webpack_require__("./node_modules/core-js/modules/es.symbol.description.js");
        __webpack_require__("./node_modules/core-js/modules/es.symbol.iterator.js");
        __webpack_require__("./node_modules/core-js/modules/es.array.iterator.js");
        __webpack_require__("./node_modules/core-js/modules/es.string.iterator.js");
        __webpack_require__("./node_modules/core-js/modules/web.dom-collections.iterator.js");
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
        }
        var Player = function Player() {
            _classCallCheck(this, Player);
        };
        __webpack_require__("./node_modules/core-js/modules/es.object.assign.js");
        var libraries = {
            youtubeSdk: {
                tagId: "youtube-sdk",
                src: "https://www.youtube.com/iframe_api",
                type: "script"
            },
            vimeo: {
                tagId: "vimeo-api",
                src: "https://player.vimeo.com/api/player.js",
                type: "script"
            }
        };
        var LibraryLoader_status = {
            requested: "requested",
            loaded: "loaded"
        };
        function createScriptTag(library, callback) {
            var tag = document.createElement("script");
            tag.src = library.src;
            tag.addEventListener("load", (function() {
                Object.assign(library, {
                    status: LibraryLoader_status.loaded
                });
                callback();
            }));
            return tag;
        }
        function load(libraryName, _callback) {
            var library = libraries[libraryName];
            if (!library) return;
            if (library.status === LibraryLoader_status.requested) return;
            var callback = _callback || function() {};
            if (library.status === LibraryLoader_status.loaded) {
                callback();
                return;
            }
            library.status = LibraryLoader_status.requested;
            var tag = createScriptTag(library, callback);
            tag.id = library.tagId;
            library.element = tag;
            var firstScriptTag = document.getElementsByTagName(library.type)[0];
            firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
        }
        function allLoad() {
            var p1 = new Promise((function(r) {
                return load("youtubeSdk", r);
            }));
            var p2 = new Promise((function(r) {
                return load("vimeo", r);
            }));
            return Promise.all([ p1, p2 ]);
        }
        var LibraryLoader = {
            load,
            allLoad
        };
        const video_LibraryLoader = LibraryLoader;
        var playerState = {
            ended: "ENDED",
            playing: "PLAYING",
            paused: "PAUSED",
            buffering: "BUFFERING"
        };
        const state = playerState;
        function YoutubeReadyWatcher_classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
        }
        function _defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }
        function _createClass(Constructor, protoProps, staticProps) {
            if (protoProps) _defineProperties(Constructor.prototype, protoProps);
            if (staticProps) _defineProperties(Constructor, staticProps);
            return Constructor;
        }
        function _defineProperty(obj, key, value) {
            if (key in obj) Object.defineProperty(obj, key, {
                value,
                enumerable: true,
                configurable: true,
                writable: true
            }); else obj[key] = value;
            return obj;
        }
        var YoutubeReadyWatcher = function() {
            function YoutubeReadyWatcher() {
                YoutubeReadyWatcher_classCallCheck(this, YoutubeReadyWatcher);
                _defineProperty(this, "ready", false);
                var _ = this;
                var prevOnYouTubeIframeAPIReady = window.onYouTubeIframeAPIReady;
                window.onYouTubeIframeAPIReady = function() {
                    window.SL_EventBus.emit("stage:youTubeReady");
                    _.ready = true;
                    if ("function" === typeof prevOnYouTubeIframeAPIReady) prevOnYouTubeIframeAPIReady();
                };
            }
            _createClass(YoutubeReadyWatcher, [ {
                key: "$ready",
                value: function() {
                    this.ready = true;
                }
            } ], [ {
                key: "getInstance",
                value: function() {
                    if (!YoutubeReadyWatcher.instance) YoutubeReadyWatcher.instance = new YoutubeReadyWatcher;
                    return YoutubeReadyWatcher.instance;
                }
            } ]);
            return YoutubeReadyWatcher;
        }();
        _defineProperty(YoutubeReadyWatcher, "instance", null);
        const video_YoutubeReadyWatcher = YoutubeReadyWatcher;
        function _typeof(obj) {
            "@babel/helpers - typeof";
            if ("function" === typeof Symbol && "symbol" === typeof Symbol.iterator) _typeof = function(obj) {
                return typeof obj;
            }; else _typeof = function(obj) {
                return obj && "function" === typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
            return _typeof(obj);
        }
        function ownKeys(object, enumerableOnly) {
            var keys = Object.keys(object);
            if (Object.getOwnPropertySymbols) {
                var symbols = Object.getOwnPropertySymbols(object);
                if (enumerableOnly) symbols = symbols.filter((function(sym) {
                    return Object.getOwnPropertyDescriptor(object, sym).enumerable;
                }));
                keys.push.apply(keys, symbols);
            }
            return keys;
        }
        function _objectSpread(target) {
            for (var i = 1; i < arguments.length; i++) {
                var source = null != arguments[i] ? arguments[i] : {};
                if (i % 2) ownKeys(Object(source), true).forEach((function(key) {
                    YouTube_defineProperty(target, key, source[key]);
                })); else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); else ownKeys(Object(source)).forEach((function(key) {
                    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
                }));
            }
            return target;
        }
        function YouTube_defineProperty(obj, key, value) {
            if (key in obj) Object.defineProperty(obj, key, {
                value,
                enumerable: true,
                configurable: true,
                writable: true
            }); else obj[key] = value;
            return obj;
        }
        function YouTube_classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
        }
        function YouTube_defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }
        function YouTube_createClass(Constructor, protoProps, staticProps) {
            if (protoProps) YouTube_defineProperties(Constructor.prototype, protoProps);
            if (staticProps) YouTube_defineProperties(Constructor, staticProps);
            return Constructor;
        }
        function _inherits(subClass, superClass) {
            if ("function" !== typeof superClass && null !== superClass) throw new TypeError("Super expression must either be null or a function");
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) _setPrototypeOf(subClass, superClass);
        }
        function _setPrototypeOf(o, p) {
            _setPrototypeOf = Object.setPrototypeOf || function(o, p) {
                o.__proto__ = p;
                return o;
            };
            return _setPrototypeOf(o, p);
        }
        function _createSuper(Derived) {
            var hasNativeReflectConstruct = _isNativeReflectConstruct();
            return function() {
                var result, Super = _getPrototypeOf(Derived);
                if (hasNativeReflectConstruct) {
                    var NewTarget = _getPrototypeOf(this).constructor;
                    result = Reflect.construct(Super, arguments, NewTarget);
                } else result = Super.apply(this, arguments);
                return _possibleConstructorReturn(this, result);
            };
        }
        function _possibleConstructorReturn(self, call) {
            if (call && ("object" === _typeof(call) || "function" === typeof call)) return call;
            return _assertThisInitialized(self);
        }
        function _assertThisInitialized(self) {
            if (void 0 === self) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return self;
        }
        function _isNativeReflectConstruct() {
            if ("undefined" === typeof Reflect || !Reflect.construct) return false;
            if (Reflect.construct.sham) return false;
            if ("function" === typeof Proxy) return true;
            try {
                Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], (function() {})));
                return true;
            } catch (e) {
                return false;
            }
        }
        function _getPrototypeOf(o) {
            _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
            };
            return _getPrototypeOf(o);
        }
        var ytReadyWatcher = video_YoutubeReadyWatcher.getInstance();
        var videoOptions = {
            ratio: 16 / 9,
            scrollAnimationDuration: 400,
            playerVars: {
                autohide: 0,
                autoplay: void 0,
                cc_load_policy: 0,
                controls: 1,
                fs: 0,
                iv_load_policy: 3,
                modestbranding: 1,
                playsinline: 1,
                rel: 0,
                loop: false
            },
            events: {
                onReady: function(event) {
                    console.log(event);
                },
                onStateChange: function(event) {
                    console.log("change", event);
                },
                onError: function(event) {
                    console.log("onError", event);
                }
            }
        };
        var YouTube = function(_Player) {
            _inherits(YouTube, _Player);
            var _super = _createSuper(YouTube);
            function YouTube(containerId) {
                var _this;
                var options = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                YouTube_classCallCheck(this, YouTube);
                _this = _super.call(this);
                _this.player = null;
                _this.loopTimer = null;
                _this.readyPromise = null;
                _this.containerId = containerId;
                _this.options = _objectSpread(_objectSpread({}, videoOptions), options);
                _this.options.playerVars.loop = options.loop;
                _this.rewriteEvent();
                if (window.YT && window.YT.Player) ytReadyWatcher.$ready();
                if (ytReadyWatcher.ready) _this.init(); else {
                    video_LibraryLoader.load("youtubeSdk");
                    window.SL_EventBus.on("stage:youTubeReady", _this.init.bind(_assertThisInitialized(_this)));
                }
                return _this;
            }
            YouTube_createClass(YouTube, [ {
                key: "init",
                value: function() {
                    new window.YT.Player(this.containerId, this.options);
                }
            }, {
                key: "playVideo",
                value: function() {
                    var _this2 = this;
                    if (this.readyPromise) this.readyPromise.then((function() {
                        var _this2$player;
                        null === (_this2$player = _this2.player) || void 0 === _this2$player ? void 0 : _this2$player.playVideo();
                    }));
                }
            }, {
                key: "mute",
                value: function() {
                    var _this$player;
                    null === (_this$player = this.player) || void 0 === _this$player ? void 0 : _this$player.mute();
                }
            }, {
                key: "unMute",
                value: function() {
                    var _this$player2;
                    null === (_this$player2 = this.player) || void 0 === _this$player2 ? void 0 : _this$player2.unMute();
                }
            }, {
                key: "destroy",
                value: function() {
                    var _this$player3;
                    null === (_this$player3 = this.player) || void 0 === _this$player3 ? void 0 : _this$player3.destroy();
                    this.readyPromise = null;
                }
            }, {
                key: "rewriteEvent",
                value: function() {
                    var _this3 = this;
                    var self = this;
                    var _this$options$events = this.options.events, onReady = _this$options$events.onReady, onStateChange = _this$options$events.onStateChange;
                    this.readyPromise = new Promise((function(r) {
                        _this3.options.events.onReady = function(event) {
                            r();
                            _this3.player = event.target;
                            if (onReady) onReady(event);
                        };
                    }));
                    this.options.events.onStateChange = function(event) {
                        var status = "";
                        switch (event.data) {
                          case 1:
                            status = state.playing;
                            break;

                          case 2:
                            status = state.paused;
                            break;

                          case 3:
                            status = state.buffering;
                            break;

                          default:
                            status = state.ended;
                        }
                        if (status === state.playing && _this3.options.playerVars.loop) {
                            clearTimeout(_this3.loopTimer);
                            var finalSecond = event.target.getDuration() - 1;
                            if (finalSecond > 2) {
                                var loopTheVideo = function loopTheVideo() {
                                    if (event.target.getCurrentTime() > finalSecond) event.target.seekTo(0);
                                    self.loopTimer = setTimeout(loopTheVideo, 500);
                                };
                                loopTheVideo();
                            }
                        }
                        if (status === state.paused && _this3.loopTimer) clearTimeout(_this3.loopTimer);
                        if (onStateChange) onStateChange(event);
                    };
                }
            } ]);
            return YouTube;
        }(Player);
        var LibraryLoader_libraries = {
            youtubeSdk: {
                tagId: "youtube-sdk",
                src: "https://www.youtube.com/iframe_api",
                type: "script"
            },
            vimeo: {
                tagId: "vimeo-api",
                src: "https://player.vimeo.com/api/player.js",
                type: "script"
            }
        };
        var utils_LibraryLoader_status = {
            requested: "requested",
            loaded: "loaded"
        };
        function LibraryLoader_createScriptTag(library, callback) {
            var tag = document.createElement("script");
            tag.src = library.src;
            tag.addEventListener("load", (function() {
                Object.assign(library, {
                    status: utils_LibraryLoader_status.loaded
                });
                callback();
            }));
            return tag;
        }
        function LibraryLoader_load(libraryName, _callback) {
            var library = LibraryLoader_libraries[libraryName];
            if (!library) return;
            if (library.status === utils_LibraryLoader_status.requested) return;
            var callback = _callback || function() {};
            if (library.status === utils_LibraryLoader_status.loaded) {
                callback();
                return;
            }
            library.status = utils_LibraryLoader_status.requested;
            var tag = LibraryLoader_createScriptTag(library, callback);
            tag.id = library.tagId;
            library.element = tag;
            var firstScriptTag = document.getElementsByTagName(library.type)[0];
            firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
        }
        var LibraryLoader_LibraryLoader = {
            load: LibraryLoader_load
        };
        const utils_LibraryLoader = LibraryLoader_LibraryLoader;
        function VimeoPlayer_typeof(obj) {
            "@babel/helpers - typeof";
            if ("function" === typeof Symbol && "symbol" === typeof Symbol.iterator) VimeoPlayer_typeof = function(obj) {
                return typeof obj;
            }; else VimeoPlayer_typeof = function(obj) {
                return obj && "function" === typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
            return VimeoPlayer_typeof(obj);
        }
        function VimeoPlayer_ownKeys(object, enumerableOnly) {
            var keys = Object.keys(object);
            if (Object.getOwnPropertySymbols) {
                var symbols = Object.getOwnPropertySymbols(object);
                if (enumerableOnly) symbols = symbols.filter((function(sym) {
                    return Object.getOwnPropertyDescriptor(object, sym).enumerable;
                }));
                keys.push.apply(keys, symbols);
            }
            return keys;
        }
        function VimeoPlayer_objectSpread(target) {
            for (var i = 1; i < arguments.length; i++) {
                var source = null != arguments[i] ? arguments[i] : {};
                if (i % 2) VimeoPlayer_ownKeys(Object(source), true).forEach((function(key) {
                    VimeoPlayer_defineProperty(target, key, source[key]);
                })); else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); else VimeoPlayer_ownKeys(Object(source)).forEach((function(key) {
                    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
                }));
            }
            return target;
        }
        function VimeoPlayer_defineProperty(obj, key, value) {
            if (key in obj) Object.defineProperty(obj, key, {
                value,
                enumerable: true,
                configurable: true,
                writable: true
            }); else obj[key] = value;
            return obj;
        }
        function VimeoPlayer_classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
        }
        function VimeoPlayer_defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }
        function VimeoPlayer_createClass(Constructor, protoProps, staticProps) {
            if (protoProps) VimeoPlayer_defineProperties(Constructor.prototype, protoProps);
            if (staticProps) VimeoPlayer_defineProperties(Constructor, staticProps);
            return Constructor;
        }
        function VimeoPlayer_inherits(subClass, superClass) {
            if ("function" !== typeof superClass && null !== superClass) throw new TypeError("Super expression must either be null or a function");
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) VimeoPlayer_setPrototypeOf(subClass, superClass);
        }
        function VimeoPlayer_setPrototypeOf(o, p) {
            VimeoPlayer_setPrototypeOf = Object.setPrototypeOf || function(o, p) {
                o.__proto__ = p;
                return o;
            };
            return VimeoPlayer_setPrototypeOf(o, p);
        }
        function VimeoPlayer_createSuper(Derived) {
            var hasNativeReflectConstruct = VimeoPlayer_isNativeReflectConstruct();
            return function() {
                var result, Super = VimeoPlayer_getPrototypeOf(Derived);
                if (hasNativeReflectConstruct) {
                    var NewTarget = VimeoPlayer_getPrototypeOf(this).constructor;
                    result = Reflect.construct(Super, arguments, NewTarget);
                } else result = Super.apply(this, arguments);
                return VimeoPlayer_possibleConstructorReturn(this, result);
            };
        }
        function VimeoPlayer_possibleConstructorReturn(self, call) {
            if (call && ("object" === VimeoPlayer_typeof(call) || "function" === typeof call)) return call;
            return VimeoPlayer_assertThisInitialized(self);
        }
        function VimeoPlayer_assertThisInitialized(self) {
            if (void 0 === self) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return self;
        }
        function VimeoPlayer_isNativeReflectConstruct() {
            if ("undefined" === typeof Reflect || !Reflect.construct) return false;
            if (Reflect.construct.sham) return false;
            if ("function" === typeof Proxy) return true;
            try {
                Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], (function() {})));
                return true;
            } catch (e) {
                return false;
            }
        }
        function VimeoPlayer_getPrototypeOf(o) {
            VimeoPlayer_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
            };
            return VimeoPlayer_getPrototypeOf(o);
        }
        var vimeoReady = false;
        var defaults = {
            byline: false,
            controls: true,
            loop: false,
            muted: true,
            playsinline: true,
            portrait: false,
            responsive: true,
            transparent: false,
            title: "vedio",
            autoplay: false
        };
        var VimeoPlayer = function(_Player) {
            VimeoPlayer_inherits(VimeoPlayer, _Player);
            var _super = VimeoPlayer_createSuper(VimeoPlayer);
            function VimeoPlayer(containerId, options) {
                var _this;
                VimeoPlayer_classCallCheck(this, VimeoPlayer);
                _this = _super.call(this);
                _this.el = __SL_$__(containerId).get(0);
                _this.options = VimeoPlayer_objectSpread(VimeoPlayer_objectSpread(VimeoPlayer_objectSpread({}, defaults), options), {}, {
                    id: options.videoId
                });
                if (vimeoReady) _this.init(); else {
                    utils_LibraryLoader.load("vimeo", window.vimeoApiReady);
                    window.SL_EventBus.on("stage:vimeoReady", _this.init.bind(VimeoPlayer_assertThisInitialized(_this)));
                }
                return _this;
            }
            VimeoPlayer_createClass(VimeoPlayer, [ {
                key: "init",
                value: function() {
                    vimeoReady = true;
                    console.log(this.options);
                    this.player = new window.Vimeo.Player(this.el, this.options);
                    this.player.ready().then(this.playerReady.bind(this));
                }
            }, {
                key: "playVideo",
                value: function() {
                    this.player.play();
                }
            }, {
                key: "mute",
                value: function() {
                    this.player.setMuted(true);
                }
            }, {
                key: "unMute",
                value: function() {
                    this.player.setMuted(false);
                }
            }, {
                key: "destroy",
                value: function() {
                    this.player.destroy();
                }
            }, {
                key: "playerReady",
                value: function() {
                    this.options.events.onReady();
                }
            } ]);
            return VimeoPlayer;
        }(Player);
        function initWhenVisible(options) {
            var threshold = options.threshold ? options.threshold : 0;
            var observer = new IntersectionObserver((function(entries, _observer) {
                entries.forEach((function(entry) {
                    if (entry.isIntersecting) if ("function" === typeof options.callback) {
                        options.callback();
                        _observer.unobserve(entry.target);
                    }
                }));
            }), {
                rootMargin: "0px 0px ".concat(threshold, "px 0px")
            });
            observer.observe(options.element[0]);
        }
        function video_classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
        }
        function video_defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }
        function video_createClass(Constructor, protoProps, staticProps) {
            if (protoProps) video_defineProperties(Constructor.prototype, protoProps);
            if (staticProps) video_defineProperties(Constructor, staticProps);
            return Constructor;
        }
        function video_defineProperty(obj, key, value) {
            if (key in obj) Object.defineProperty(obj, key, {
                value,
                enumerable: true,
                configurable: true,
                writable: true
            }); else obj[key] = value;
            return obj;
        }
        window.vimeoApiReady = function() {
            window.SL_EventBus.emit("stage:vimeoReady");
        };
        var selectors = {
            playVideoBtn: ".video-overlay__button",
            videoData: ".video-data"
        };
        var classes = {
            playing: "video--playing"
        };
        var Video = function() {
            function Video(container) {
                var options = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                video_classCallCheck(this, Video);
                video_defineProperty(this, "container", null);
                video_defineProperty(this, "sectionId", "");
                video_defineProperty(this, "config", {
                    id: ""
                });
                video_defineProperty(this, "settings", {});
                this.container = container;
                this.options = options;
                this.sectionId = container.data("id");
                try {
                    this.settings = JSON.parse(container.find("#Video-data-".concat(this.sectionId)).text());
                } catch (err) {}
                this.initEvent();
                initWhenVisible({
                    element: container,
                    callback: this.init.bind(this),
                    threshold: 500
                });
            }
            video_createClass(Video, [ {
                key: "init",
                value: function() {
                    var _dataDiv$data;
                    var video = this.container;
                    var settings = this.settings;
                    this.config = {
                        id: video.attr("id"),
                        videoKey: "Video-".concat(video.data("id")),
                        videoId: video.data("id")
                    };
                    var dataDiv = this.container.find(selectors.videoData);
                    var type = dataDiv.data("type");
                    var videoId = dataDiv.data("video-id");
                    var aspectRatios = (null === (_dataDiv$data = dataDiv.data("aspect-ratio")) || void 0 === _dataDiv$data ? void 0 : _dataDiv$data.split(":")) || [ 16, 9 ];
                    var events = {
                        onReady: this.onVideoPlayerReady.bind(this)
                    };
                    switch (type) {
                      case "youtube":
                        this.initYoutubeVideo(dataDiv.attr("id"), {
                            videoId,
                            ratio: aspectRatios[0] / aspectRatios[1],
                            autoplay: settings.autoplay ? 1 : 0,
                            muted: !!settings.quiet,
                            loop: settings.loop,
                            events
                        });
                        break;

                      case "vimeo":
                        this.initVimeoVideo(dataDiv.attr("id"), {
                            videoId,
                            ratio: aspectRatios[0] / aspectRatios[1],
                            autoplay: !!settings.autoplay,
                            muted: !!settings.quiet,
                            loop: settings.loop,
                            events
                        });
                    }
                }
            }, {
                key: "initYoutubeVideo",
                value: function(videoId, options) {
                    this.player = new YouTube(videoId, options);
                }
            }, {
                key: "initVimeoVideo",
                value: function(videoId, options) {
                    this.player = new VimeoPlayer("#".concat(videoId), options);
                }
            }, {
                key: "initEvent",
                value: function() {
                    var _this = this;
                    this.container.find(selectors.playVideoBtn).on("click", (function() {
                        var _this$options, _this$options$clickCa;
                        _this.startVideoOnClick();
                        null === (_this$options = _this.options) || void 0 === _this$options ? void 0 : null === (_this$options$clickCa = _this$options.clickCallback) || void 0 === _this$options$clickCa ? void 0 : _this$options$clickCa.call(_this$options);
                    }));
                }
            }, {
                key: "onVideoPlayerReady",
                value: function() {
                    if (this.settings.autoplay) {
                        this.player.playVideo();
                        if (this.settings.quiet) this.player.mute(); else {
                            this.player.unMute();
                            this.player.playVideo();
                        }
                    }
                }
            }, {
                key: "initAutoplay",
                value: function() {}
            }, {
                key: "startVideoOnClick",
                value: function() {
                    this.container.addClass(classes.playing);
                    var player = this.player;
                    player.playVideo();
                }
            }, {
                key: "onUnload",
                value: function() {
                    var _this$player, _this$player$destroy;
                    null === (_this$player = this.player) || void 0 === _this$player ? void 0 : null === (_this$player$destroy = _this$player.destroy) || void 0 === _this$player$destroy ? void 0 : _this$player$destroy.call(_this$player);
                }
            } ]);
            return Video;
        }();
        video_defineProperty(Video, "type", "video");
    }
}, __webpack_require__ => {
    var __webpack_exec__ = moduleId => __webpack_require__(__webpack_require__.s = moduleId);
    __webpack_require__.O(0, [ "vendor" ], (() => __webpack_exec__("./src/assets/stage/video/index.js")));
    __webpack_require__.O();
} ]);