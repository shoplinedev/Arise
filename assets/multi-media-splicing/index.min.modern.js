(() => {
    var __webpack_modules__ = {
        "./node_modules/@funnyecho/hamon/dist/index.js": function(__unused_webpack_module, exports) {
            "use strict";
            var __extends = this && this.__extends || function() {
                var extendStatics = function(d, b) {
                    extendStatics = Object.setPrototypeOf || {
                        __proto__: []
                    } instanceof Array && function(d, b) {
                        d.__proto__ = b;
                    } || function(d, b) {
                        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
                    };
                    return extendStatics(d, b);
                };
                return function(d, b) {
                    extendStatics(d, b);
                    function __() {
                        this.constructor = d;
                    }
                    d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __);
                };
            }();
            var __read = this && this.__read || function(o, n) {
                var m = "function" === typeof Symbol && o[Symbol.iterator];
                if (!m) return o;
                var r, e, i = m.call(o), ar = [];
                try {
                    while ((void 0 === n || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
                } catch (error) {
                    e = {
                        error
                    };
                } finally {
                    try {
                        if (r && !r.done && (m = i["return"])) m.call(i);
                    } finally {
                        if (e) throw e.error;
                    }
                }
                return ar;
            };
            var __spread = this && this.__spread || function() {
                for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
                return ar;
            };
            var __values = this && this.__values || function(o) {
                var s = "function" === typeof Symbol && Symbol.iterator, m = s && o[s], i = 0;
                if (m) return m.call(o);
                if (o && "number" === typeof o.length) return {
                    next: function() {
                        if (o && i >= o.length) o = void 0;
                        return {
                            value: o && o[i++],
                            done: !o
                        };
                    }
                };
                throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            function once(fn) {
                var called = false;
                return function() {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) args[_i] = arguments[_i];
                    if (called) return;
                    called = true;
                    fn.apply(void 0, __spread(args));
                };
            }
            function invokeSeriesNext(observer, args, list) {
                var onComplete;
                if ("function" === typeof observer.onComplete) onComplete = observer.onComplete; else onComplete = function(err, result) {};
                if (!list.length) {
                    if (observer.shouldWaterfall) onComplete(null, args[0]); else onComplete(null, void 0);
                    return;
                }
                var tap = list.shift();
                var downstreamTaps = list;
                var downstreamArgs = Array.from(args);
                var nextArgs = __spread(args, [ function(err, result) {
                    if (null != err) {
                        onComplete(err);
                        return;
                    }
                    if (void 0 !== result && true === observer.shouldBail) {
                        onComplete(null, result);
                        return;
                    }
                    if (void 0 !== result && true === observer.shouldWaterfall) downstreamArgs[0] = result;
                    invokeSeriesNext(observer, downstreamArgs, downstreamTaps);
                } ]);
                tap.fn.apply(tap, __spread(nextArgs));
            }
            function invokeParallel(observer, args, list) {
                var e_1, _a;
                var onComplete;
                if ("function" === typeof observer.onComplete) onComplete = observer.onComplete; else onComplete = function(err, result) {};
                if (!list.length) {
                    onComplete(null, void 0);
                    return;
                }
                var parallelSize = list.length;
                var nextArgs = __spread(args, [ function(err, result) {
                    if (null != err) {
                        onComplete(err);
                        return;
                    }
                    if (void 0 !== result && true === observer.shouldBail) {
                        onComplete(null, result);
                        return;
                    }
                    --parallelSize;
                    if (parallelSize <= 0) {
                        onComplete(null, args[0]);
                        return;
                    }
                } ]);
                try {
                    for (var list_1 = __values(list), list_1_1 = list_1.next(); !list_1_1.done; list_1_1 = list_1.next()) {
                        var option = list_1_1.value;
                        option.fn.apply(option, __spread(nextArgs));
                    }
                } catch (e_1_1) {
                    e_1 = {
                        error: e_1_1
                    };
                } finally {
                    try {
                        if (list_1_1 && !list_1_1.done && (_a = list_1.return)) _a.call(list_1);
                    } finally {
                        if (e_1) throw e_1.error;
                    }
                }
            }
            function invokeSynchronously(observer, args, list) {
                var e_2, _a;
                if (!list.length) if (observer.shouldWaterfall) return args[0]; else return;
                var downstreamArgs = Array.from(args);
                try {
                    for (var list_2 = __values(list), list_2_1 = list_2.next(); !list_2_1.done; list_2_1 = list_2.next()) {
                        var option = list_2_1.value;
                        var fn = option.fn;
                        var result = fn.apply(void 0, __spread(downstreamArgs));
                        if (void 0 !== result && true === observer.shouldBail) return result;
                        if (void 0 !== result && true === observer.shouldWaterfall) downstreamArgs[0] = result;
                    }
                } catch (e_2_1) {
                    e_2 = {
                        error: e_2_1
                    };
                } finally {
                    try {
                        if (list_2_1 && !list_2_1.done && (_a = list_2.return)) _a.call(list_2);
                    } finally {
                        if (e_2) throw e_2.error;
                    }
                }
                if (observer.shouldWaterfall) return downstreamArgs[0]; else return;
            }
            var Hook = function() {
                function Hook(bucketHashcode) {
                    this.tapIdSeed = 0;
                    this.presetTapBucket = new Set;
                    this.tapBuckets = new Map;
                    this.tapOptionsCache = new Map;
                    this.bucketHashcode = bucketHashcode;
                }
                Hook.prototype.exhaust = function() {
                    this.presetTapBucket.clear();
                    this.tapBuckets.clear();
                    this.tapOptionsCache.clear();
                };
                Hook.prototype.destroy = function() {
                    this.exhaust();
                };
                Hook.prototype.insertSyncTap = function(fn, bucket) {
                    return this.tapping(fn, bucket);
                };
                Hook.prototype.insertAsyncTap = function(fn, bucket) {
                    function asyncTapFn() {
                        var args = [];
                        for (var _i = 0; _i < arguments.length; _i++) args[_i] = arguments[_i];
                        var invokeCb = args[args.length - 1];
                        try {
                            fn.apply(void 0, __spread(args));
                        } catch (e) {
                            invokeCb(e);
                        }
                    }
                    return this.tapping(asyncTapFn, bucket);
                };
                Hook.prototype.insertPromiseTap = function(fn, bucket) {
                    function promiseTapFn() {
                        var args = [];
                        for (var _i = 0; _i < arguments.length; _i++) args[_i] = arguments[_i];
                        var invokeCb = args.pop();
                        var invokeArgs = args;
                        try {
                            Promise.resolve(fn.apply(void 0, __spread(invokeArgs))).then((function(tapResult) {
                                invokeCb(null, tapResult);
                            }), (function(e) {
                                invokeCb(e);
                            }));
                        } catch (e) {
                            invokeCb(e);
                        }
                    }
                    return this.tapping(promiseTapFn, bucket);
                };
                Hook.prototype.invokeSeries = function(args, observer) {
                    if (!observer) observer = {};
                    if ("function" === typeof observer.onComplete) observer.onComplete = once(observer.onComplete);
                    invokeSeriesNext(observer, args, Array.from(this.getBucketTaps(args)));
                };
                Hook.prototype.invokeParallel = function(args, observer) {
                    if (!observer) observer = {};
                    if ("function" === typeof observer.onComplete) observer.onComplete = once(observer.onComplete);
                    invokeParallel(observer, args, Array.from(this.getBucketTaps(args)));
                };
                Hook.prototype.invokeSynchronously = function(args, observer) {
                    if (!observer) observer = {};
                    return invokeSynchronously(observer, args, Array.from(this.getBucketTaps(args)));
                };
                Hook.prototype.getBucketTaps = function(args) {
                    var e_3, _a;
                    var presetTaps = Array.from(this.presetTapBucket);
                    var bucketTaps = [];
                    if ("function" === typeof this.bucketHashcode) {
                        var bucket = this.bucketHashcode.apply(this, __spread(args));
                        if (this.tapBuckets.has(bucket)) bucketTaps = Array.from(this.tapBuckets.get(bucket));
                    }
                    var selectedTapIds = new Set(__spread(presetTaps, bucketTaps));
                    var selectedTapOptions = new Set;
                    try {
                        for (var selectedTapIds_1 = __values(selectedTapIds), selectedTapIds_1_1 = selectedTapIds_1.next(); !selectedTapIds_1_1.done; selectedTapIds_1_1 = selectedTapIds_1.next()) {
                            var tapId = selectedTapIds_1_1.value;
                            selectedTapOptions.add(this.tapOptionsCache.get(tapId));
                        }
                    } catch (e_3_1) {
                        e_3 = {
                            error: e_3_1
                        };
                    } finally {
                        try {
                            if (selectedTapIds_1_1 && !selectedTapIds_1_1.done && (_a = selectedTapIds_1.return)) _a.call(selectedTapIds_1);
                        } finally {
                            if (e_3) throw e_3.error;
                        }
                    }
                    return selectedTapOptions;
                };
                Hook.prototype.tapping = function(fn, bucketHash) {
                    var _this = this;
                    var tapBucket = this.presetTapBucket;
                    if (bucketHash) {
                        if (!this.tapBuckets.has(bucketHash)) this.tapBuckets.set(bucketHash, new Set);
                        tapBucket = this.tapBuckets.get(bucketHash);
                    }
                    var tapId = this.generateTapId();
                    var options = {
                        fn,
                        bucket: bucketHash
                    };
                    this.tapOptionsCache.set(tapId, options);
                    tapBucket.add(tapId);
                    return function() {
                        _this.popoutTap(tapId);
                    };
                };
                Hook.prototype.popoutTap = function(tapId) {
                    var options = this.tapOptionsCache.get(tapId);
                    if (!options) return;
                    var bucketHash = options.bucket;
                    if (!bucketHash) this.presetTapBucket.delete(tapId); else if (this.tapBuckets.has(bucketHash)) this.tapBuckets.get(bucketHash).delete(tapId);
                    this.tapOptionsCache.delete(tapId);
                };
                Hook.prototype.generateTapId = function() {
                    return "tap:" + ++this.tapIdSeed + "?" + Date.now();
                };
                return Hook;
            }();
            exports.Hook = Hook;
            var SyncTapHook = function(_super) {
                __extends(SyncTapHook, _super);
                function SyncTapHook() {
                    return null !== _super && _super.apply(this, arguments) || this;
                }
                SyncTapHook.prototype.tap = function(fn, bucket) {
                    return this.insertSyncTap(fn, bucket);
                };
                return SyncTapHook;
            }(Hook);
            exports.SyncTapHook = SyncTapHook;
            var AsyncTapHook = function(_super) {
                __extends(AsyncTapHook, _super);
                function AsyncTapHook() {
                    return null !== _super && _super.apply(this, arguments) || this;
                }
                AsyncTapHook.prototype.tapAsync = function(fn, bucket) {
                    return this.insertAsyncTap(fn, bucket);
                };
                AsyncTapHook.prototype.tapPromise = function(fn, bucket) {
                    return this.insertPromiseTap(fn, bucket);
                };
                return AsyncTapHook;
            }(Hook);
            exports.AsyncTapHook = AsyncTapHook;
            var SyncHook = function(_super) {
                __extends(SyncHook, _super);
                function SyncHook() {
                    return null !== _super && _super.apply(this, arguments) || this;
                }
                SyncHook.prototype.call = function() {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) args[_i] = arguments[_i];
                    this.invokeSynchronously(args);
                };
                return SyncHook;
            }(SyncTapHook);
            exports.SyncHook = SyncHook;
            var SyncBailHook = function(_super) {
                __extends(SyncBailHook, _super);
                function SyncBailHook() {
                    return null !== _super && _super.apply(this, arguments) || this;
                }
                SyncBailHook.prototype.call = function() {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) args[_i] = arguments[_i];
                    return this.invokeSynchronously(args, {
                        shouldBail: true
                    });
                };
                return SyncBailHook;
            }(SyncTapHook);
            exports.SyncBailHook = SyncBailHook;
            var SyncWaterfallHook = function(_super) {
                __extends(SyncWaterfallHook, _super);
                function SyncWaterfallHook() {
                    return null !== _super && _super.apply(this, arguments) || this;
                }
                SyncWaterfallHook.prototype.call = function() {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) args[_i] = arguments[_i];
                    return this.invokeSynchronously(args, {
                        shouldWaterfall: true
                    });
                };
                return SyncWaterfallHook;
            }(SyncTapHook);
            exports.SyncWaterfallHook = SyncWaterfallHook;
            var AsyncParallelHook = function(_super) {
                __extends(AsyncParallelHook, _super);
                function AsyncParallelHook() {
                    return null !== _super && _super.apply(this, arguments) || this;
                }
                AsyncParallelHook.prototype.callAsync = function() {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) args[_i] = arguments[_i];
                    var asyncCb = args.pop();
                    this.invokeParallel(args, {
                        onComplete: function(err) {
                            if (null != err) asyncCb(err); else asyncCb();
                        }
                    });
                };
                AsyncParallelHook.prototype.callPromise = function() {
                    var _this = this;
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) args[_i] = arguments[_i];
                    return new Promise((function(resolve, reject) {
                        _this.invokeParallel(args, {
                            onComplete: function(err) {
                                if (null != err) reject(err); else resolve();
                            }
                        });
                    }));
                };
                return AsyncParallelHook;
            }(AsyncTapHook);
            exports.AsyncParallelHook = AsyncParallelHook;
            var AsyncParallelBailHook = function(_super) {
                __extends(AsyncParallelBailHook, _super);
                function AsyncParallelBailHook() {
                    return null !== _super && _super.apply(this, arguments) || this;
                }
                AsyncParallelBailHook.prototype.callAsync = function() {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) args[_i] = arguments[_i];
                    var asyncCb = args.pop();
                    this.invokeParallel(args, {
                        shouldBail: true,
                        onComplete: asyncCb
                    });
                };
                AsyncParallelBailHook.prototype.callPromise = function() {
                    var _this = this;
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) args[_i] = arguments[_i];
                    return new Promise((function(resolve, reject) {
                        _this.invokeParallel(args, {
                            shouldBail: true,
                            onComplete: function(err, result) {
                                if (null != err) reject(err); else resolve(result);
                            }
                        });
                    }));
                };
                return AsyncParallelBailHook;
            }(AsyncTapHook);
            exports.AsyncParallelBailHook = AsyncParallelBailHook;
            var AsyncSeriesHook = function(_super) {
                __extends(AsyncSeriesHook, _super);
                function AsyncSeriesHook() {
                    return null !== _super && _super.apply(this, arguments) || this;
                }
                AsyncSeriesHook.prototype.callAsync = function() {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) args[_i] = arguments[_i];
                    var asyncCb = args.pop();
                    this.invokeSeries(args, {
                        onComplete: function(err) {
                            if (null != err) asyncCb(err); else asyncCb();
                        }
                    });
                };
                AsyncSeriesHook.prototype.callPromise = function() {
                    var _this = this;
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) args[_i] = arguments[_i];
                    return new Promise((function(resolve, reject) {
                        _this.invokeSeries(args, {
                            onComplete: function(err) {
                                if (null != err) reject(err); else resolve();
                            }
                        });
                    }));
                };
                return AsyncSeriesHook;
            }(AsyncTapHook);
            exports.AsyncSeriesHook = AsyncSeriesHook;
            var AsyncSeriesBailHook = function(_super) {
                __extends(AsyncSeriesBailHook, _super);
                function AsyncSeriesBailHook() {
                    return null !== _super && _super.apply(this, arguments) || this;
                }
                AsyncSeriesBailHook.prototype.callAsync = function() {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) args[_i] = arguments[_i];
                    var asyncCb = args.pop();
                    this.invokeSeries(args, {
                        shouldBail: true,
                        onComplete: asyncCb
                    });
                };
                AsyncSeriesBailHook.prototype.callPromise = function() {
                    var _this = this;
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) args[_i] = arguments[_i];
                    return new Promise((function(resolve, reject) {
                        _this.invokeSeries(args, {
                            shouldBail: true,
                            onComplete: function(err, result) {
                                if (null != err) reject(err); else resolve(result);
                            }
                        });
                    }));
                };
                return AsyncSeriesBailHook;
            }(AsyncTapHook);
            exports.AsyncSeriesBailHook = AsyncSeriesBailHook;
            var AsyncSeriesWaterfallHook = function(_super) {
                __extends(AsyncSeriesWaterfallHook, _super);
                function AsyncSeriesWaterfallHook() {
                    return null !== _super && _super.apply(this, arguments) || this;
                }
                AsyncSeriesWaterfallHook.prototype.callAsync = function() {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) args[_i] = arguments[_i];
                    var asyncCb = args.pop();
                    this.invokeSeries(args, {
                        shouldWaterfall: true,
                        onComplete: asyncCb
                    });
                };
                AsyncSeriesWaterfallHook.prototype.callPromise = function() {
                    var _this = this;
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) args[_i] = arguments[_i];
                    return new Promise((function(resolve, reject) {
                        _this.invokeSeries(args, {
                            shouldWaterfall: true,
                            onComplete: function(err, result) {
                                if (null != err) reject(err); else resolve(result);
                            }
                        });
                    }));
                };
                return AsyncSeriesWaterfallHook;
            }(AsyncTapHook);
            exports.AsyncSeriesWaterfallHook = AsyncSeriesWaterfallHook;
            exports["default"] = {
                SyncHook,
                SyncBailHook,
                SyncWaterfallHook,
                AsyncSeriesHook,
                AsyncSeriesBailHook,
                AsyncSeriesWaterfallHook,
                AsyncParallelHook,
                AsyncParallelBailHook
            };
        },
        "./node_modules/axios/index.js": (module, __unused_webpack_exports, __webpack_require__) => {
            module.exports = __webpack_require__("./node_modules/axios/lib/axios.js");
        },
        "./node_modules/axios/lib/adapters/xhr.js": (module, __unused_webpack_exports, __webpack_require__) => {
            "use strict";
            var utils = __webpack_require__("./node_modules/axios/lib/utils.js");
            var settle = __webpack_require__("./node_modules/axios/lib/core/settle.js");
            var cookies = __webpack_require__("./node_modules/axios/lib/helpers/cookies.js");
            var buildURL = __webpack_require__("./node_modules/axios/lib/helpers/buildURL.js");
            var buildFullPath = __webpack_require__("./node_modules/axios/lib/core/buildFullPath.js");
            var parseHeaders = __webpack_require__("./node_modules/axios/lib/helpers/parseHeaders.js");
            var isURLSameOrigin = __webpack_require__("./node_modules/axios/lib/helpers/isURLSameOrigin.js");
            var createError = __webpack_require__("./node_modules/axios/lib/core/createError.js");
            module.exports = function(config) {
                return new Promise((function(resolve, reject) {
                    var requestData = config.data;
                    var requestHeaders = config.headers;
                    var responseType = config.responseType;
                    if (utils.isFormData(requestData)) delete requestHeaders["Content-Type"];
                    var request = new XMLHttpRequest;
                    if (config.auth) {
                        var username = config.auth.username || "";
                        var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : "";
                        requestHeaders.Authorization = "Basic " + btoa(username + ":" + password);
                    }
                    var fullPath = buildFullPath(config.baseURL, config.url);
                    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);
                    request.timeout = config.timeout;
                    function onloadend() {
                        if (!request) return;
                        var responseHeaders = "getAllResponseHeaders" in request ? parseHeaders(request.getAllResponseHeaders()) : null;
                        var responseData = !responseType || "text" === responseType || "json" === responseType ? request.responseText : request.response;
                        var response = {
                            data: responseData,
                            status: request.status,
                            statusText: request.statusText,
                            headers: responseHeaders,
                            config,
                            request
                        };
                        settle(resolve, reject, response);
                        request = null;
                    }
                    if ("onloadend" in request) request.onloadend = onloadend; else request.onreadystatechange = function() {
                        if (!request || 4 !== request.readyState) return;
                        if (0 === request.status && !(request.responseURL && 0 === request.responseURL.indexOf("file:"))) return;
                        setTimeout(onloadend);
                    };
                    request.onabort = function() {
                        if (!request) return;
                        reject(createError("Request aborted", config, "ECONNABORTED", request));
                        request = null;
                    };
                    request.onerror = function() {
                        reject(createError("Network Error", config, null, request));
                        request = null;
                    };
                    request.ontimeout = function() {
                        var timeoutErrorMessage = "timeout of " + config.timeout + "ms exceeded";
                        if (config.timeoutErrorMessage) timeoutErrorMessage = config.timeoutErrorMessage;
                        reject(createError(timeoutErrorMessage, config, config.transitional && config.transitional.clarifyTimeoutError ? "ETIMEDOUT" : "ECONNABORTED", request));
                        request = null;
                    };
                    if (utils.isStandardBrowserEnv()) {
                        var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : void 0;
                        if (xsrfValue) requestHeaders[config.xsrfHeaderName] = xsrfValue;
                    }
                    if ("setRequestHeader" in request) utils.forEach(requestHeaders, (function(val, key) {
                        if ("undefined" === typeof requestData && "content-type" === key.toLowerCase()) delete requestHeaders[key]; else request.setRequestHeader(key, val);
                    }));
                    if (!utils.isUndefined(config.withCredentials)) request.withCredentials = !!config.withCredentials;
                    if (responseType && "json" !== responseType) request.responseType = config.responseType;
                    if ("function" === typeof config.onDownloadProgress) request.addEventListener("progress", config.onDownloadProgress);
                    if ("function" === typeof config.onUploadProgress && request.upload) request.upload.addEventListener("progress", config.onUploadProgress);
                    if (config.cancelToken) config.cancelToken.promise.then((function(cancel) {
                        if (!request) return;
                        request.abort();
                        reject(cancel);
                        request = null;
                    }));
                    if (!requestData) requestData = null;
                    request.send(requestData);
                }));
            };
        },
        "./node_modules/axios/lib/axios.js": (module, __unused_webpack_exports, __webpack_require__) => {
            "use strict";
            var utils = __webpack_require__("./node_modules/axios/lib/utils.js");
            var bind = __webpack_require__("./node_modules/axios/lib/helpers/bind.js");
            var Axios = __webpack_require__("./node_modules/axios/lib/core/Axios.js");
            var mergeConfig = __webpack_require__("./node_modules/axios/lib/core/mergeConfig.js");
            var defaults = __webpack_require__("./node_modules/axios/lib/defaults.js");
            function createInstance(defaultConfig) {
                var context = new Axios(defaultConfig);
                var instance = bind(Axios.prototype.request, context);
                utils.extend(instance, Axios.prototype, context);
                utils.extend(instance, context);
                return instance;
            }
            var axios = createInstance(defaults);
            axios.Axios = Axios;
            axios.create = function(instanceConfig) {
                return createInstance(mergeConfig(axios.defaults, instanceConfig));
            };
            axios.Cancel = __webpack_require__("./node_modules/axios/lib/cancel/Cancel.js");
            axios.CancelToken = __webpack_require__("./node_modules/axios/lib/cancel/CancelToken.js");
            axios.isCancel = __webpack_require__("./node_modules/axios/lib/cancel/isCancel.js");
            axios.all = function(promises) {
                return Promise.all(promises);
            };
            axios.spread = __webpack_require__("./node_modules/axios/lib/helpers/spread.js");
            axios.isAxiosError = __webpack_require__("./node_modules/axios/lib/helpers/isAxiosError.js");
            module.exports = axios;
            module.exports["default"] = axios;
        },
        "./node_modules/axios/lib/cancel/Cancel.js": module => {
            "use strict";
            function Cancel(message) {
                this.message = message;
            }
            Cancel.prototype.toString = function() {
                return "Cancel" + (this.message ? ": " + this.message : "");
            };
            Cancel.prototype.__CANCEL__ = true;
            module.exports = Cancel;
        },
        "./node_modules/axios/lib/cancel/CancelToken.js": (module, __unused_webpack_exports, __webpack_require__) => {
            "use strict";
            var Cancel = __webpack_require__("./node_modules/axios/lib/cancel/Cancel.js");
            function CancelToken(executor) {
                if ("function" !== typeof executor) throw new TypeError("executor must be a function.");
                var resolvePromise;
                this.promise = new Promise((function(resolve) {
                    resolvePromise = resolve;
                }));
                var token = this;
                executor((function(message) {
                    if (token.reason) return;
                    token.reason = new Cancel(message);
                    resolvePromise(token.reason);
                }));
            }
            CancelToken.prototype.throwIfRequested = function() {
                if (this.reason) throw this.reason;
            };
            CancelToken.source = function() {
                var cancel;
                var token = new CancelToken((function(c) {
                    cancel = c;
                }));
                return {
                    token,
                    cancel
                };
            };
            module.exports = CancelToken;
        },
        "./node_modules/axios/lib/cancel/isCancel.js": module => {
            "use strict";
            module.exports = function(value) {
                return !!(value && value.__CANCEL__);
            };
        },
        "./node_modules/axios/lib/core/Axios.js": (module, __unused_webpack_exports, __webpack_require__) => {
            "use strict";
            var utils = __webpack_require__("./node_modules/axios/lib/utils.js");
            var buildURL = __webpack_require__("./node_modules/axios/lib/helpers/buildURL.js");
            var InterceptorManager = __webpack_require__("./node_modules/axios/lib/core/InterceptorManager.js");
            var dispatchRequest = __webpack_require__("./node_modules/axios/lib/core/dispatchRequest.js");
            var mergeConfig = __webpack_require__("./node_modules/axios/lib/core/mergeConfig.js");
            var validator = __webpack_require__("./node_modules/axios/lib/helpers/validator.js");
            var validators = validator.validators;
            function Axios(instanceConfig) {
                this.defaults = instanceConfig;
                this.interceptors = {
                    request: new InterceptorManager,
                    response: new InterceptorManager
                };
            }
            Axios.prototype.request = function(config) {
                if ("string" === typeof config) {
                    config = arguments[1] || {};
                    config.url = arguments[0];
                } else config = config || {};
                config = mergeConfig(this.defaults, config);
                if (config.method) config.method = config.method.toLowerCase(); else if (this.defaults.method) config.method = this.defaults.method.toLowerCase(); else config.method = "get";
                var transitional = config.transitional;
                if (void 0 !== transitional) validator.assertOptions(transitional, {
                    silentJSONParsing: validators.transitional(validators.boolean, "1.0.0"),
                    forcedJSONParsing: validators.transitional(validators.boolean, "1.0.0"),
                    clarifyTimeoutError: validators.transitional(validators.boolean, "1.0.0")
                }, false);
                var requestInterceptorChain = [];
                var synchronousRequestInterceptors = true;
                this.interceptors.request.forEach((function(interceptor) {
                    if ("function" === typeof interceptor.runWhen && false === interceptor.runWhen(config)) return;
                    synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
                    requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
                }));
                var responseInterceptorChain = [];
                this.interceptors.response.forEach((function(interceptor) {
                    responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
                }));
                var promise;
                if (!synchronousRequestInterceptors) {
                    var chain = [ dispatchRequest, void 0 ];
                    Array.prototype.unshift.apply(chain, requestInterceptorChain);
                    chain = chain.concat(responseInterceptorChain);
                    promise = Promise.resolve(config);
                    while (chain.length) promise = promise.then(chain.shift(), chain.shift());
                    return promise;
                }
                var newConfig = config;
                while (requestInterceptorChain.length) {
                    var onFulfilled = requestInterceptorChain.shift();
                    var onRejected = requestInterceptorChain.shift();
                    try {
                        newConfig = onFulfilled(newConfig);
                    } catch (error) {
                        onRejected(error);
                        break;
                    }
                }
                try {
                    promise = dispatchRequest(newConfig);
                } catch (error) {
                    return Promise.reject(error);
                }
                while (responseInterceptorChain.length) promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
                return promise;
            };
            Axios.prototype.getUri = function(config) {
                config = mergeConfig(this.defaults, config);
                return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, "");
            };
            utils.forEach([ "delete", "get", "head", "options" ], (function(method) {
                Axios.prototype[method] = function(url, config) {
                    return this.request(mergeConfig(config || {}, {
                        method,
                        url,
                        data: (config || {}).data
                    }));
                };
            }));
            utils.forEach([ "post", "put", "patch" ], (function(method) {
                Axios.prototype[method] = function(url, data, config) {
                    return this.request(mergeConfig(config || {}, {
                        method,
                        url,
                        data
                    }));
                };
            }));
            module.exports = Axios;
        },
        "./node_modules/axios/lib/core/InterceptorManager.js": (module, __unused_webpack_exports, __webpack_require__) => {
            "use strict";
            var utils = __webpack_require__("./node_modules/axios/lib/utils.js");
            function InterceptorManager() {
                this.handlers = [];
            }
            InterceptorManager.prototype.use = function(fulfilled, rejected, options) {
                this.handlers.push({
                    fulfilled,
                    rejected,
                    synchronous: options ? options.synchronous : false,
                    runWhen: options ? options.runWhen : null
                });
                return this.handlers.length - 1;
            };
            InterceptorManager.prototype.eject = function(id) {
                if (this.handlers[id]) this.handlers[id] = null;
            };
            InterceptorManager.prototype.forEach = function(fn) {
                utils.forEach(this.handlers, (function(h) {
                    if (null !== h) fn(h);
                }));
            };
            module.exports = InterceptorManager;
        },
        "./node_modules/axios/lib/core/buildFullPath.js": (module, __unused_webpack_exports, __webpack_require__) => {
            "use strict";
            var isAbsoluteURL = __webpack_require__("./node_modules/axios/lib/helpers/isAbsoluteURL.js");
            var combineURLs = __webpack_require__("./node_modules/axios/lib/helpers/combineURLs.js");
            module.exports = function(baseURL, requestedURL) {
                if (baseURL && !isAbsoluteURL(requestedURL)) return combineURLs(baseURL, requestedURL);
                return requestedURL;
            };
        },
        "./node_modules/axios/lib/core/createError.js": (module, __unused_webpack_exports, __webpack_require__) => {
            "use strict";
            var enhanceError = __webpack_require__("./node_modules/axios/lib/core/enhanceError.js");
            module.exports = function(message, config, code, request, response) {
                var error = new Error(message);
                return enhanceError(error, config, code, request, response);
            };
        },
        "./node_modules/axios/lib/core/dispatchRequest.js": (module, __unused_webpack_exports, __webpack_require__) => {
            "use strict";
            var utils = __webpack_require__("./node_modules/axios/lib/utils.js");
            var transformData = __webpack_require__("./node_modules/axios/lib/core/transformData.js");
            var isCancel = __webpack_require__("./node_modules/axios/lib/cancel/isCancel.js");
            var defaults = __webpack_require__("./node_modules/axios/lib/defaults.js");
            function throwIfCancellationRequested(config) {
                if (config.cancelToken) config.cancelToken.throwIfRequested();
            }
            module.exports = function(config) {
                throwIfCancellationRequested(config);
                config.headers = config.headers || {};
                config.data = transformData.call(config, config.data, config.headers, config.transformRequest);
                config.headers = utils.merge(config.headers.common || {}, config.headers[config.method] || {}, config.headers);
                utils.forEach([ "delete", "get", "head", "post", "put", "patch", "common" ], (function(method) {
                    delete config.headers[method];
                }));
                var adapter = config.adapter || defaults.adapter;
                return adapter(config).then((function(response) {
                    throwIfCancellationRequested(config);
                    response.data = transformData.call(config, response.data, response.headers, config.transformResponse);
                    return response;
                }), (function(reason) {
                    if (!isCancel(reason)) {
                        throwIfCancellationRequested(config);
                        if (reason && reason.response) reason.response.data = transformData.call(config, reason.response.data, reason.response.headers, config.transformResponse);
                    }
                    return Promise.reject(reason);
                }));
            };
        },
        "./node_modules/axios/lib/core/enhanceError.js": module => {
            "use strict";
            module.exports = function(error, config, code, request, response) {
                error.config = config;
                if (code) error.code = code;
                error.request = request;
                error.response = response;
                error.isAxiosError = true;
                error.toJSON = function() {
                    return {
                        message: this.message,
                        name: this.name,
                        description: this.description,
                        number: this.number,
                        fileName: this.fileName,
                        lineNumber: this.lineNumber,
                        columnNumber: this.columnNumber,
                        stack: this.stack,
                        config: this.config,
                        code: this.code
                    };
                };
                return error;
            };
        },
        "./node_modules/axios/lib/core/mergeConfig.js": (module, __unused_webpack_exports, __webpack_require__) => {
            "use strict";
            var utils = __webpack_require__("./node_modules/axios/lib/utils.js");
            module.exports = function(config1, config2) {
                config2 = config2 || {};
                var config = {};
                var valueFromConfig2Keys = [ "url", "method", "data" ];
                var mergeDeepPropertiesKeys = [ "headers", "auth", "proxy", "params" ];
                var defaultToConfig2Keys = [ "baseURL", "transformRequest", "transformResponse", "paramsSerializer", "timeout", "timeoutMessage", "withCredentials", "adapter", "responseType", "xsrfCookieName", "xsrfHeaderName", "onUploadProgress", "onDownloadProgress", "decompress", "maxContentLength", "maxBodyLength", "maxRedirects", "transport", "httpAgent", "httpsAgent", "cancelToken", "socketPath", "responseEncoding" ];
                var directMergeKeys = [ "validateStatus" ];
                function getMergedValue(target, source) {
                    if (utils.isPlainObject(target) && utils.isPlainObject(source)) return utils.merge(target, source); else if (utils.isPlainObject(source)) return utils.merge({}, source); else if (utils.isArray(source)) return source.slice();
                    return source;
                }
                function mergeDeepProperties(prop) {
                    if (!utils.isUndefined(config2[prop])) config[prop] = getMergedValue(config1[prop], config2[prop]); else if (!utils.isUndefined(config1[prop])) config[prop] = getMergedValue(void 0, config1[prop]);
                }
                utils.forEach(valueFromConfig2Keys, (function(prop) {
                    if (!utils.isUndefined(config2[prop])) config[prop] = getMergedValue(void 0, config2[prop]);
                }));
                utils.forEach(mergeDeepPropertiesKeys, mergeDeepProperties);
                utils.forEach(defaultToConfig2Keys, (function(prop) {
                    if (!utils.isUndefined(config2[prop])) config[prop] = getMergedValue(void 0, config2[prop]); else if (!utils.isUndefined(config1[prop])) config[prop] = getMergedValue(void 0, config1[prop]);
                }));
                utils.forEach(directMergeKeys, (function(prop) {
                    if (prop in config2) config[prop] = getMergedValue(config1[prop], config2[prop]); else if (prop in config1) config[prop] = getMergedValue(void 0, config1[prop]);
                }));
                var axiosKeys = valueFromConfig2Keys.concat(mergeDeepPropertiesKeys).concat(defaultToConfig2Keys).concat(directMergeKeys);
                var otherKeys = Object.keys(config1).concat(Object.keys(config2)).filter((function(key) {
                    return -1 === axiosKeys.indexOf(key);
                }));
                utils.forEach(otherKeys, mergeDeepProperties);
                return config;
            };
        },
        "./node_modules/axios/lib/core/settle.js": (module, __unused_webpack_exports, __webpack_require__) => {
            "use strict";
            var createError = __webpack_require__("./node_modules/axios/lib/core/createError.js");
            module.exports = function(resolve, reject, response) {
                var validateStatus = response.config.validateStatus;
                if (!response.status || !validateStatus || validateStatus(response.status)) resolve(response); else reject(createError("Request failed with status code " + response.status, response.config, null, response.request, response));
            };
        },
        "./node_modules/axios/lib/core/transformData.js": (module, __unused_webpack_exports, __webpack_require__) => {
            "use strict";
            var utils = __webpack_require__("./node_modules/axios/lib/utils.js");
            var defaults = __webpack_require__("./node_modules/axios/lib/defaults.js");
            module.exports = function(data, headers, fns) {
                var context = this || defaults;
                utils.forEach(fns, (function(fn) {
                    data = fn.call(context, data, headers);
                }));
                return data;
            };
        },
        "./node_modules/axios/lib/defaults.js": (module, __unused_webpack_exports, __webpack_require__) => {
            "use strict";
            var utils = __webpack_require__("./node_modules/axios/lib/utils.js");
            var normalizeHeaderName = __webpack_require__("./node_modules/axios/lib/helpers/normalizeHeaderName.js");
            var enhanceError = __webpack_require__("./node_modules/axios/lib/core/enhanceError.js");
            var DEFAULT_CONTENT_TYPE = {
                "Content-Type": "application/x-www-form-urlencoded"
            };
            function setContentTypeIfUnset(headers, value) {
                if (!utils.isUndefined(headers) && utils.isUndefined(headers["Content-Type"])) headers["Content-Type"] = value;
            }
            function getDefaultAdapter() {
                var adapter;
                if ("undefined" !== typeof XMLHttpRequest) adapter = __webpack_require__("./node_modules/axios/lib/adapters/xhr.js"); else if ("undefined" !== typeof process && "[object process]" === Object.prototype.toString.call(process)) adapter = __webpack_require__("./node_modules/axios/lib/adapters/xhr.js");
                return adapter;
            }
            function stringifySafely(rawValue, parser, encoder) {
                if (utils.isString(rawValue)) try {
                    (parser || JSON.parse)(rawValue);
                    return utils.trim(rawValue);
                } catch (e) {
                    if ("SyntaxError" !== e.name) throw e;
                }
                return (encoder || JSON.stringify)(rawValue);
            }
            var defaults = {
                transitional: {
                    silentJSONParsing: true,
                    forcedJSONParsing: true,
                    clarifyTimeoutError: false
                },
                adapter: getDefaultAdapter(),
                transformRequest: [ function(data, headers) {
                    normalizeHeaderName(headers, "Accept");
                    normalizeHeaderName(headers, "Content-Type");
                    if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) return data;
                    if (utils.isArrayBufferView(data)) return data.buffer;
                    if (utils.isURLSearchParams(data)) {
                        setContentTypeIfUnset(headers, "application/x-www-form-urlencoded;charset=utf-8");
                        return data.toString();
                    }
                    if (utils.isObject(data) || headers && "application/json" === headers["Content-Type"]) {
                        setContentTypeIfUnset(headers, "application/json");
                        return stringifySafely(data);
                    }
                    return data;
                } ],
                transformResponse: [ function(data) {
                    var transitional = this.transitional;
                    var silentJSONParsing = transitional && transitional.silentJSONParsing;
                    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
                    var strictJSONParsing = !silentJSONParsing && "json" === this.responseType;
                    if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) try {
                        return JSON.parse(data);
                    } catch (e) {
                        if (strictJSONParsing) {
                            if ("SyntaxError" === e.name) throw enhanceError(e, this, "E_JSON_PARSE");
                            throw e;
                        }
                    }
                    return data;
                } ],
                timeout: 0,
                xsrfCookieName: "XSRF-TOKEN",
                xsrfHeaderName: "X-XSRF-TOKEN",
                maxContentLength: -1,
                maxBodyLength: -1,
                validateStatus: function(status) {
                    return status >= 200 && status < 300;
                }
            };
            defaults.headers = {
                common: {
                    Accept: "application/json, text/plain, */*"
                }
            };
            utils.forEach([ "delete", "get", "head" ], (function(method) {
                defaults.headers[method] = {};
            }));
            utils.forEach([ "post", "put", "patch" ], (function(method) {
                defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
            }));
            module.exports = defaults;
        },
        "./node_modules/axios/lib/helpers/bind.js": module => {
            "use strict";
            module.exports = function(fn, thisArg) {
                return function() {
                    var args = new Array(arguments.length);
                    for (var i = 0; i < args.length; i++) args[i] = arguments[i];
                    return fn.apply(thisArg, args);
                };
            };
        },
        "./node_modules/axios/lib/helpers/buildURL.js": (module, __unused_webpack_exports, __webpack_require__) => {
            "use strict";
            var utils = __webpack_require__("./node_modules/axios/lib/utils.js");
            function encode(val) {
                return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
            }
            module.exports = function(url, params, paramsSerializer) {
                if (!params) return url;
                var serializedParams;
                if (paramsSerializer) serializedParams = paramsSerializer(params); else if (utils.isURLSearchParams(params)) serializedParams = params.toString(); else {
                    var parts = [];
                    utils.forEach(params, (function(val, key) {
                        if (null === val || "undefined" === typeof val) return;
                        if (utils.isArray(val)) key += "[]"; else val = [ val ];
                        utils.forEach(val, (function(v) {
                            if (utils.isDate(v)) v = v.toISOString(); else if (utils.isObject(v)) v = JSON.stringify(v);
                            parts.push(encode(key) + "=" + encode(v));
                        }));
                    }));
                    serializedParams = parts.join("&");
                }
                if (serializedParams) {
                    var hashmarkIndex = url.indexOf("#");
                    if (-1 !== hashmarkIndex) url = url.slice(0, hashmarkIndex);
                    url += (-1 === url.indexOf("?") ? "?" : "&") + serializedParams;
                }
                return url;
            };
        },
        "./node_modules/axios/lib/helpers/combineURLs.js": module => {
            "use strict";
            module.exports = function(baseURL, relativeURL) {
                return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
            };
        },
        "./node_modules/axios/lib/helpers/cookies.js": (module, __unused_webpack_exports, __webpack_require__) => {
            "use strict";
            var utils = __webpack_require__("./node_modules/axios/lib/utils.js");
            module.exports = utils.isStandardBrowserEnv() ? function() {
                return {
                    write: function(name, value, expires, path, domain, secure) {
                        var cookie = [];
                        cookie.push(name + "=" + encodeURIComponent(value));
                        if (utils.isNumber(expires)) cookie.push("expires=" + new Date(expires).toGMTString());
                        if (utils.isString(path)) cookie.push("path=" + path);
                        if (utils.isString(domain)) cookie.push("domain=" + domain);
                        if (true === secure) cookie.push("secure");
                        document.cookie = cookie.join("; ");
                    },
                    read: function(name) {
                        var match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
                        return match ? decodeURIComponent(match[3]) : null;
                    },
                    remove: function(name) {
                        this.write(name, "", Date.now() - 864e5);
                    }
                };
            }() : function() {
                return {
                    write: function() {},
                    read: function() {
                        return null;
                    },
                    remove: function() {}
                };
            }();
        },
        "./node_modules/axios/lib/helpers/isAbsoluteURL.js": module => {
            "use strict";
            module.exports = function(url) {
                return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
            };
        },
        "./node_modules/axios/lib/helpers/isAxiosError.js": module => {
            "use strict";
            module.exports = function(payload) {
                return "object" === typeof payload && true === payload.isAxiosError;
            };
        },
        "./node_modules/axios/lib/helpers/isURLSameOrigin.js": (module, __unused_webpack_exports, __webpack_require__) => {
            "use strict";
            var utils = __webpack_require__("./node_modules/axios/lib/utils.js");
            module.exports = utils.isStandardBrowserEnv() ? function() {
                var msie = /(msie|trident)/i.test(navigator.userAgent);
                var urlParsingNode = document.createElement("a");
                var originURL;
                function resolveURL(url) {
                    var href = url;
                    if (msie) {
                        urlParsingNode.setAttribute("href", href);
                        href = urlParsingNode.href;
                    }
                    urlParsingNode.setAttribute("href", href);
                    return {
                        href: urlParsingNode.href,
                        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
                        host: urlParsingNode.host,
                        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
                        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
                        hostname: urlParsingNode.hostname,
                        port: urlParsingNode.port,
                        pathname: "/" === urlParsingNode.pathname.charAt(0) ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
                    };
                }
                originURL = resolveURL(window.location.href);
                return function(requestURL) {
                    var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
                    return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
                };
            }() : function() {
                return function() {
                    return true;
                };
            }();
        },
        "./node_modules/axios/lib/helpers/normalizeHeaderName.js": (module, __unused_webpack_exports, __webpack_require__) => {
            "use strict";
            var utils = __webpack_require__("./node_modules/axios/lib/utils.js");
            module.exports = function(headers, normalizedName) {
                utils.forEach(headers, (function(value, name) {
                    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
                        headers[normalizedName] = value;
                        delete headers[name];
                    }
                }));
            };
        },
        "./node_modules/axios/lib/helpers/parseHeaders.js": (module, __unused_webpack_exports, __webpack_require__) => {
            "use strict";
            var utils = __webpack_require__("./node_modules/axios/lib/utils.js");
            var ignoreDuplicateOf = [ "age", "authorization", "content-length", "content-type", "etag", "expires", "from", "host", "if-modified-since", "if-unmodified-since", "last-modified", "location", "max-forwards", "proxy-authorization", "referer", "retry-after", "user-agent" ];
            module.exports = function(headers) {
                var parsed = {};
                var key;
                var val;
                var i;
                if (!headers) return parsed;
                utils.forEach(headers.split("\n"), (function(line) {
                    i = line.indexOf(":");
                    key = utils.trim(line.substr(0, i)).toLowerCase();
                    val = utils.trim(line.substr(i + 1));
                    if (key) {
                        if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) return;
                        if ("set-cookie" === key) parsed[key] = (parsed[key] ? parsed[key] : []).concat([ val ]); else parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
                    }
                }));
                return parsed;
            };
        },
        "./node_modules/axios/lib/helpers/spread.js": module => {
            "use strict";
            module.exports = function(callback) {
                return function(arr) {
                    return callback.apply(null, arr);
                };
            };
        },
        "./node_modules/axios/lib/helpers/validator.js": (module, __unused_webpack_exports, __webpack_require__) => {
            "use strict";
            var pkg = __webpack_require__("./node_modules/axios/package.json");
            var validators = {};
            [ "object", "boolean", "number", "function", "string", "symbol" ].forEach((function(type, i) {
                validators[type] = function(thing) {
                    return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
                };
            }));
            var deprecatedWarnings = {};
            var currentVerArr = pkg.version.split(".");
            function isOlderVersion(version, thanVersion) {
                var pkgVersionArr = thanVersion ? thanVersion.split(".") : currentVerArr;
                var destVer = version.split(".");
                for (var i = 0; i < 3; i++) if (pkgVersionArr[i] > destVer[i]) return true; else if (pkgVersionArr[i] < destVer[i]) return false;
                return false;
            }
            validators.transitional = function(validator, version, message) {
                var isDeprecated = version && isOlderVersion(version);
                function formatMessage(opt, desc) {
                    return "[Axios v" + pkg.version + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
                }
                return function(value, opt, opts) {
                    if (false === validator) throw new Error(formatMessage(opt, " has been removed in " + version));
                    if (isDeprecated && !deprecatedWarnings[opt]) {
                        deprecatedWarnings[opt] = true;
                        console.warn(formatMessage(opt, " has been deprecated since v" + version + " and will be removed in the near future"));
                    }
                    return validator ? validator(value, opt, opts) : true;
                };
            };
            function assertOptions(options, schema, allowUnknown) {
                if ("object" !== typeof options) throw new TypeError("options must be an object");
                var keys = Object.keys(options);
                var i = keys.length;
                while (i-- > 0) {
                    var opt = keys[i];
                    var validator = schema[opt];
                    if (validator) {
                        var value = options[opt];
                        var result = void 0 === value || validator(value, opt, options);
                        if (true !== result) throw new TypeError("option " + opt + " must be " + result);
                        continue;
                    }
                    if (true !== allowUnknown) throw Error("Unknown option " + opt);
                }
            }
            module.exports = {
                isOlderVersion,
                assertOptions,
                validators
            };
        },
        "./node_modules/axios/lib/utils.js": (module, __unused_webpack_exports, __webpack_require__) => {
            "use strict";
            var bind = __webpack_require__("./node_modules/axios/lib/helpers/bind.js");
            var toString = Object.prototype.toString;
            function isArray(val) {
                return "[object Array]" === toString.call(val);
            }
            function isUndefined(val) {
                return "undefined" === typeof val;
            }
            function isBuffer(val) {
                return null !== val && !isUndefined(val) && null !== val.constructor && !isUndefined(val.constructor) && "function" === typeof val.constructor.isBuffer && val.constructor.isBuffer(val);
            }
            function isArrayBuffer(val) {
                return "[object ArrayBuffer]" === toString.call(val);
            }
            function isFormData(val) {
                return "undefined" !== typeof FormData && val instanceof FormData;
            }
            function isArrayBufferView(val) {
                var result;
                if ("undefined" !== typeof ArrayBuffer && ArrayBuffer.isView) result = ArrayBuffer.isView(val); else result = val && val.buffer && val.buffer instanceof ArrayBuffer;
                return result;
            }
            function isString(val) {
                return "string" === typeof val;
            }
            function isNumber(val) {
                return "number" === typeof val;
            }
            function isObject(val) {
                return null !== val && "object" === typeof val;
            }
            function isPlainObject(val) {
                if ("[object Object]" !== toString.call(val)) return false;
                var prototype = Object.getPrototypeOf(val);
                return null === prototype || prototype === Object.prototype;
            }
            function isDate(val) {
                return "[object Date]" === toString.call(val);
            }
            function isFile(val) {
                return "[object File]" === toString.call(val);
            }
            function isBlob(val) {
                return "[object Blob]" === toString.call(val);
            }
            function isFunction(val) {
                return "[object Function]" === toString.call(val);
            }
            function isStream(val) {
                return isObject(val) && isFunction(val.pipe);
            }
            function isURLSearchParams(val) {
                return "undefined" !== typeof URLSearchParams && val instanceof URLSearchParams;
            }
            function trim(str) {
                return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, "");
            }
            function isStandardBrowserEnv() {
                if ("undefined" !== typeof navigator && ("ReactNative" === navigator.product || "NativeScript" === navigator.product || "NS" === navigator.product)) return false;
                return "undefined" !== typeof window && "undefined" !== typeof document;
            }
            function forEach(obj, fn) {
                if (null === obj || "undefined" === typeof obj) return;
                if ("object" !== typeof obj) obj = [ obj ];
                if (isArray(obj)) for (var i = 0, l = obj.length; i < l; i++) fn.call(null, obj[i], i, obj); else for (var key in obj) if (Object.prototype.hasOwnProperty.call(obj, key)) fn.call(null, obj[key], key, obj);
            }
            function merge() {
                var result = {};
                function assignValue(val, key) {
                    if (isPlainObject(result[key]) && isPlainObject(val)) result[key] = merge(result[key], val); else if (isPlainObject(val)) result[key] = merge({}, val); else if (isArray(val)) result[key] = val.slice(); else result[key] = val;
                }
                for (var i = 0, l = arguments.length; i < l; i++) forEach(arguments[i], assignValue);
                return result;
            }
            function extend(a, b, thisArg) {
                forEach(b, (function(val, key) {
                    if (thisArg && "function" === typeof val) a[key] = bind(val, thisArg); else a[key] = val;
                }));
                return a;
            }
            function stripBOM(content) {
                if (65279 === content.charCodeAt(0)) content = content.slice(1);
                return content;
            }
            module.exports = {
                isArray,
                isArrayBuffer,
                isBuffer,
                isFormData,
                isArrayBufferView,
                isString,
                isNumber,
                isObject,
                isPlainObject,
                isUndefined,
                isDate,
                isFile,
                isBlob,
                isFunction,
                isStream,
                isURLSearchParams,
                isStandardBrowserEnv,
                forEach,
                merge,
                extend,
                trim,
                stripBOM
            };
        },
        "./node_modules/events/events.js": module => {
            "use strict";
            var R = "object" === typeof Reflect ? Reflect : null;
            var ReflectApply = R && "function" === typeof R.apply ? R.apply : function(target, receiver, args) {
                return Function.prototype.apply.call(target, receiver, args);
            };
            var ReflectOwnKeys;
            if (R && "function" === typeof R.ownKeys) ReflectOwnKeys = R.ownKeys; else if (Object.getOwnPropertySymbols) ReflectOwnKeys = function(target) {
                return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
            }; else ReflectOwnKeys = function(target) {
                return Object.getOwnPropertyNames(target);
            };
            function ProcessEmitWarning(warning) {
                if (console && console.warn) console.warn(warning);
            }
            var NumberIsNaN = Number.isNaN || function(value) {
                return value !== value;
            };
            function EventEmitter() {
                EventEmitter.init.call(this);
            }
            module.exports = EventEmitter;
            module.exports.once = once;
            EventEmitter.EventEmitter = EventEmitter;
            EventEmitter.prototype._events = void 0;
            EventEmitter.prototype._eventsCount = 0;
            EventEmitter.prototype._maxListeners = void 0;
            var defaultMaxListeners = 10;
            function checkListener(listener) {
                if ("function" !== typeof listener) throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
            }
            Object.defineProperty(EventEmitter, "defaultMaxListeners", {
                enumerable: true,
                get: function() {
                    return defaultMaxListeners;
                },
                set: function(arg) {
                    if ("number" !== typeof arg || arg < 0 || NumberIsNaN(arg)) throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + ".");
                    defaultMaxListeners = arg;
                }
            });
            EventEmitter.init = function() {
                if (void 0 === this._events || this._events === Object.getPrototypeOf(this)._events) {
                    this._events = Object.create(null);
                    this._eventsCount = 0;
                }
                this._maxListeners = this._maxListeners || void 0;
            };
            EventEmitter.prototype.setMaxListeners = function(n) {
                if ("number" !== typeof n || n < 0 || NumberIsNaN(n)) throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + ".");
                this._maxListeners = n;
                return this;
            };
            function _getMaxListeners(that) {
                if (void 0 === that._maxListeners) return EventEmitter.defaultMaxListeners;
                return that._maxListeners;
            }
            EventEmitter.prototype.getMaxListeners = function() {
                return _getMaxListeners(this);
            };
            EventEmitter.prototype.emit = function(type) {
                var args = [];
                for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
                var doError = "error" === type;
                var events = this._events;
                if (void 0 !== events) doError = doError && void 0 === events.error; else if (!doError) return false;
                if (doError) {
                    var er;
                    if (args.length > 0) er = args[0];
                    if (er instanceof Error) throw er;
                    var err = new Error("Unhandled error." + (er ? " (" + er.message + ")" : ""));
                    err.context = er;
                    throw err;
                }
                var handler = events[type];
                if (void 0 === handler) return false;
                if ("function" === typeof handler) ReflectApply(handler, this, args); else {
                    var len = handler.length;
                    var listeners = arrayClone(handler, len);
                    for (i = 0; i < len; ++i) ReflectApply(listeners[i], this, args);
                }
                return true;
            };
            function _addListener(target, type, listener, prepend) {
                var m;
                var events;
                var existing;
                checkListener(listener);
                events = target._events;
                if (void 0 === events) {
                    events = target._events = Object.create(null);
                    target._eventsCount = 0;
                } else {
                    if (void 0 !== events.newListener) {
                        target.emit("newListener", type, listener.listener ? listener.listener : listener);
                        events = target._events;
                    }
                    existing = events[type];
                }
                if (void 0 === existing) {
                    existing = events[type] = listener;
                    ++target._eventsCount;
                } else {
                    if ("function" === typeof existing) existing = events[type] = prepend ? [ listener, existing ] : [ existing, listener ]; else if (prepend) existing.unshift(listener); else existing.push(listener);
                    m = _getMaxListeners(target);
                    if (m > 0 && existing.length > m && !existing.warned) {
                        existing.warned = true;
                        var w = new Error("Possible EventEmitter memory leak detected. " + existing.length + " " + String(type) + " listeners " + "added. Use emitter.setMaxListeners() to " + "increase limit");
                        w.name = "MaxListenersExceededWarning";
                        w.emitter = target;
                        w.type = type;
                        w.count = existing.length;
                        ProcessEmitWarning(w);
                    }
                }
                return target;
            }
            EventEmitter.prototype.addListener = function(type, listener) {
                return _addListener(this, type, listener, false);
            };
            EventEmitter.prototype.on = EventEmitter.prototype.addListener;
            EventEmitter.prototype.prependListener = function(type, listener) {
                return _addListener(this, type, listener, true);
            };
            function onceWrapper() {
                if (!this.fired) {
                    this.target.removeListener(this.type, this.wrapFn);
                    this.fired = true;
                    if (0 === arguments.length) return this.listener.call(this.target);
                    return this.listener.apply(this.target, arguments);
                }
            }
            function _onceWrap(target, type, listener) {
                var state = {
                    fired: false,
                    wrapFn: void 0,
                    target,
                    type,
                    listener
                };
                var wrapped = onceWrapper.bind(state);
                wrapped.listener = listener;
                state.wrapFn = wrapped;
                return wrapped;
            }
            EventEmitter.prototype.once = function(type, listener) {
                checkListener(listener);
                this.on(type, _onceWrap(this, type, listener));
                return this;
            };
            EventEmitter.prototype.prependOnceListener = function(type, listener) {
                checkListener(listener);
                this.prependListener(type, _onceWrap(this, type, listener));
                return this;
            };
            EventEmitter.prototype.removeListener = function(type, listener) {
                var list, events, position, i, originalListener;
                checkListener(listener);
                events = this._events;
                if (void 0 === events) return this;
                list = events[type];
                if (void 0 === list) return this;
                if (list === listener || list.listener === listener) if (0 === --this._eventsCount) this._events = Object.create(null); else {
                    delete events[type];
                    if (events.removeListener) this.emit("removeListener", type, list.listener || listener);
                } else if ("function" !== typeof list) {
                    position = -1;
                    for (i = list.length - 1; i >= 0; i--) if (list[i] === listener || list[i].listener === listener) {
                        originalListener = list[i].listener;
                        position = i;
                        break;
                    }
                    if (position < 0) return this;
                    if (0 === position) list.shift(); else spliceOne(list, position);
                    if (1 === list.length) events[type] = list[0];
                    if (void 0 !== events.removeListener) this.emit("removeListener", type, originalListener || listener);
                }
                return this;
            };
            EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
            EventEmitter.prototype.removeAllListeners = function(type) {
                var listeners, events, i;
                events = this._events;
                if (void 0 === events) return this;
                if (void 0 === events.removeListener) {
                    if (0 === arguments.length) {
                        this._events = Object.create(null);
                        this._eventsCount = 0;
                    } else if (void 0 !== events[type]) if (0 === --this._eventsCount) this._events = Object.create(null); else delete events[type];
                    return this;
                }
                if (0 === arguments.length) {
                    var keys = Object.keys(events);
                    var key;
                    for (i = 0; i < keys.length; ++i) {
                        key = keys[i];
                        if ("removeListener" === key) continue;
                        this.removeAllListeners(key);
                    }
                    this.removeAllListeners("removeListener");
                    this._events = Object.create(null);
                    this._eventsCount = 0;
                    return this;
                }
                listeners = events[type];
                if ("function" === typeof listeners) this.removeListener(type, listeners); else if (void 0 !== listeners) for (i = listeners.length - 1; i >= 0; i--) this.removeListener(type, listeners[i]);
                return this;
            };
            function _listeners(target, type, unwrap) {
                var events = target._events;
                if (void 0 === events) return [];
                var evlistener = events[type];
                if (void 0 === evlistener) return [];
                if ("function" === typeof evlistener) return unwrap ? [ evlistener.listener || evlistener ] : [ evlistener ];
                return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
            }
            EventEmitter.prototype.listeners = function(type) {
                return _listeners(this, type, true);
            };
            EventEmitter.prototype.rawListeners = function(type) {
                return _listeners(this, type, false);
            };
            EventEmitter.listenerCount = function(emitter, type) {
                if ("function" === typeof emitter.listenerCount) return emitter.listenerCount(type); else return listenerCount.call(emitter, type);
            };
            EventEmitter.prototype.listenerCount = listenerCount;
            function listenerCount(type) {
                var events = this._events;
                if (void 0 !== events) {
                    var evlistener = events[type];
                    if ("function" === typeof evlistener) return 1; else if (void 0 !== evlistener) return evlistener.length;
                }
                return 0;
            }
            EventEmitter.prototype.eventNames = function() {
                return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
            };
            function arrayClone(arr, n) {
                var copy = new Array(n);
                for (var i = 0; i < n; ++i) copy[i] = arr[i];
                return copy;
            }
            function spliceOne(list, index) {
                for (;index + 1 < list.length; index++) list[index] = list[index + 1];
                list.pop();
            }
            function unwrapListeners(arr) {
                var ret = new Array(arr.length);
                for (var i = 0; i < ret.length; ++i) ret[i] = arr[i].listener || arr[i];
                return ret;
            }
            function once(emitter, name) {
                return new Promise((function(resolve, reject) {
                    function errorListener(err) {
                        emitter.removeListener(name, resolver);
                        reject(err);
                    }
                    function resolver() {
                        if ("function" === typeof emitter.removeListener) emitter.removeListener("error", errorListener);
                        resolve([].slice.call(arguments));
                    }
                    eventTargetAgnosticAddListener(emitter, name, resolver, {
                        once: true
                    });
                    if ("error" !== name) addErrorHandlerIfEventEmitter(emitter, errorListener, {
                        once: true
                    });
                }));
            }
            function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
                if ("function" === typeof emitter.on) eventTargetAgnosticAddListener(emitter, "error", handler, flags);
            }
            function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
                if ("function" === typeof emitter.on) if (flags.once) emitter.once(name, listener); else emitter.on(name, listener); else if ("function" === typeof emitter.addEventListener) emitter.addEventListener(name, (function wrapListener(arg) {
                    if (flags.once) emitter.removeEventListener(name, wrapListener);
                    listener(arg);
                })); else throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
            }
        },
        "./node_modules/lodash/_baseGetTag.js": module => {
            var objectProto = Object.prototype;
            var nativeObjectToString = objectProto.toString;
            function objectToString(value) {
                return nativeObjectToString.call(value);
            }
            module.exports = objectToString;
        },
        "./node_modules/lodash/_getPrototype.js": (module, __unused_webpack_exports, __webpack_require__) => {
            var overArg = __webpack_require__("./node_modules/lodash/_overArg.js");
            var getPrototype = overArg(Object.getPrototypeOf, Object);
            module.exports = getPrototype;
        },
        "./node_modules/lodash/_overArg.js": module => {
            function overArg(func, transform) {
                return function(arg) {
                    return func(transform(arg));
                };
            }
            module.exports = overArg;
        },
        "./node_modules/lodash/isObjectLike.js": module => {
            function isObjectLike(value) {
                return null != value && "object" == typeof value;
            }
            module.exports = isObjectLike;
        },
        "./node_modules/lodash/isPlainObject.js": (module, __unused_webpack_exports, __webpack_require__) => {
            var baseGetTag = __webpack_require__("./node_modules/lodash/_baseGetTag.js"), getPrototype = __webpack_require__("./node_modules/lodash/_getPrototype.js"), isObjectLike = __webpack_require__("./node_modules/lodash/isObjectLike.js");
            var objectTag = "[object Object]";
            var funcProto = Function.prototype, objectProto = Object.prototype;
            var funcToString = funcProto.toString;
            var hasOwnProperty = objectProto.hasOwnProperty;
            var objectCtorString = funcToString.call(Object);
            function isPlainObject(value) {
                if (!isObjectLike(value) || baseGetTag(value) != objectTag) return false;
                var proto = getPrototype(value);
                if (null === proto) return true;
                var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
                return "function" == typeof Ctor && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
            }
            module.exports = isPlainObject;
        },
        "./node_modules/querystring/decode.js": module => {
            "use strict";
            function hasOwnProperty(obj, prop) {
                return Object.prototype.hasOwnProperty.call(obj, prop);
            }
            module.exports = function(qs, sep, eq, options) {
                sep = sep || "&";
                eq = eq || "=";
                var obj = {};
                if ("string" !== typeof qs || 0 === qs.length) return obj;
                var regexp = /\+/g;
                qs = qs.split(sep);
                var maxKeys = 1e3;
                if (options && "number" === typeof options.maxKeys) maxKeys = options.maxKeys;
                var len = qs.length;
                if (maxKeys > 0 && len > maxKeys) len = maxKeys;
                for (var i = 0; i < len; ++i) {
                    var kstr, vstr, k, v, x = qs[i].replace(regexp, "%20"), idx = x.indexOf(eq);
                    if (idx >= 0) {
                        kstr = x.substr(0, idx);
                        vstr = x.substr(idx + 1);
                    } else {
                        kstr = x;
                        vstr = "";
                    }
                    k = decodeURIComponent(kstr);
                    v = decodeURIComponent(vstr);
                    if (!hasOwnProperty(obj, k)) obj[k] = v; else if (Array.isArray(obj[k])) obj[k].push(v); else obj[k] = [ obj[k], v ];
                }
                return obj;
            };
        },
        "./node_modules/querystring/encode.js": module => {
            "use strict";
            var stringifyPrimitive = function(v) {
                switch (typeof v) {
                  case "string":
                    return v;

                  case "boolean":
                    return v ? "true" : "false";

                  case "number":
                    return isFinite(v) ? v : "";

                  default:
                    return "";
                }
            };
            module.exports = function(obj, sep, eq, name) {
                sep = sep || "&";
                eq = eq || "=";
                if (null === obj) obj = void 0;
                if ("object" === typeof obj) return Object.keys(obj).map((function(k) {
                    var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
                    if (Array.isArray(obj[k])) return obj[k].map((function(v) {
                        return ks + encodeURIComponent(stringifyPrimitive(v));
                    })).join(sep); else return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
                })).join(sep);
                if (!name) return "";
                return encodeURIComponent(stringifyPrimitive(name)) + eq + encodeURIComponent(stringifyPrimitive(obj));
            };
        },
        "./node_modules/querystring/index.js": (__unused_webpack_module, exports, __webpack_require__) => {
            "use strict";
            exports.decode = exports.parse = __webpack_require__("./node_modules/querystring/decode.js");
            exports.encode = exports.stringify = __webpack_require__("./node_modules/querystring/encode.js");
        },
        "./node_modules/scroll-lock/dist/scroll-lock.js": function(module) {
            (function(root, factory) {
                if (true) module.exports = factory();
            })(0, (function() {
                return function(modules) {
                    var installedModules = {};
                    function __nested_webpack_require_607__(moduleId) {
                        if (installedModules[moduleId]) return installedModules[moduleId].exports;
                        var module = installedModules[moduleId] = {
                            i: moduleId,
                            l: false,
                            exports: {}
                        };
                        modules[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_607__);
                        module.l = true;
                        return module.exports;
                    }
                    __nested_webpack_require_607__.m = modules;
                    __nested_webpack_require_607__.c = installedModules;
                    __nested_webpack_require_607__.d = function(exports, name, getter) {
                        if (!__nested_webpack_require_607__.o(exports, name)) Object.defineProperty(exports, name, {
                            enumerable: true,
                            get: getter
                        });
                    };
                    __nested_webpack_require_607__.r = function(exports) {
                        if ("undefined" !== typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports, Symbol.toStringTag, {
                            value: "Module"
                        });
                        Object.defineProperty(exports, "__esModule", {
                            value: true
                        });
                    };
                    __nested_webpack_require_607__.t = function(value, mode) {
                        if (1 & mode) value = __nested_webpack_require_607__(value);
                        if (8 & mode) return value;
                        if (4 & mode && "object" === typeof value && value && value.__esModule) return value;
                        var ns = Object.create(null);
                        __nested_webpack_require_607__.r(ns);
                        Object.defineProperty(ns, "default", {
                            enumerable: true,
                            value
                        });
                        if (2 & mode && "string" != typeof value) for (var key in value) __nested_webpack_require_607__.d(ns, key, function(key) {
                            return value[key];
                        }.bind(null, key));
                        return ns;
                    };
                    __nested_webpack_require_607__.n = function(module) {
                        var getter = module && module.__esModule ? function() {
                            return module["default"];
                        } : function() {
                            return module;
                        };
                        __nested_webpack_require_607__.d(getter, "a", getter);
                        return getter;
                    };
                    __nested_webpack_require_607__.o = function(object, property) {
                        return Object.prototype.hasOwnProperty.call(object, property);
                    };
                    __nested_webpack_require_607__.p = "";
                    return __nested_webpack_require_607__(__nested_webpack_require_607__.s = 0);
                }([ function(module, __webpack_exports__, __nested_webpack_require_5303__) {
                    "use strict";
                    __nested_webpack_require_5303__.r(__webpack_exports__);
                    var argumentAsArray = function(argument) {
                        return Array.isArray(argument) ? argument : [ argument ];
                    };
                    var isElement = function(target) {
                        return target instanceof Node;
                    };
                    var isElementList = function(nodeList) {
                        return nodeList instanceof NodeList;
                    };
                    var eachNode = function(nodeList, callback) {
                        if (nodeList && callback) {
                            nodeList = isElementList(nodeList) ? nodeList : [ nodeList ];
                            for (var i = 0; i < nodeList.length; i++) if (true === callback(nodeList[i], i, nodeList.length)) break;
                        }
                    };
                    var throwError = function(message) {
                        return console.error("[scroll-lock] ".concat(message));
                    };
                    var arrayAsSelector = function(array) {
                        if (Array.isArray(array)) {
                            var selector = array.join(", ");
                            return selector;
                        }
                    };
                    var nodeListAsArray = function(nodeList) {
                        var nodes = [];
                        eachNode(nodeList, (function(node) {
                            return nodes.push(node);
                        }));
                        return nodes;
                    };
                    var findParentBySelector = function($el, selector) {
                        var self = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : true;
                        var $root = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : document;
                        if (self && -1 !== nodeListAsArray($root.querySelectorAll(selector)).indexOf($el)) return $el;
                        while (($el = $el.parentElement) && -1 === nodeListAsArray($root.querySelectorAll(selector)).indexOf($el)) ;
                        return $el;
                    };
                    var elementHasSelector = function($el, selector) {
                        var $root = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : document;
                        var has = -1 !== nodeListAsArray($root.querySelectorAll(selector)).indexOf($el);
                        return has;
                    };
                    var elementHasOverflowHidden = function($el) {
                        if ($el) {
                            var computedStyle = getComputedStyle($el);
                            var overflowIsHidden = "hidden" === computedStyle.overflow;
                            return overflowIsHidden;
                        }
                    };
                    var elementScrollTopOnStart = function($el) {
                        if ($el) {
                            if (elementHasOverflowHidden($el)) return true;
                            var scrollTop = $el.scrollTop;
                            return scrollTop <= 0;
                        }
                    };
                    var elementScrollTopOnEnd = function($el) {
                        if ($el) {
                            if (elementHasOverflowHidden($el)) return true;
                            var scrollTop = $el.scrollTop;
                            var scrollHeight = $el.scrollHeight;
                            var scrollTopWithHeight = scrollTop + $el.offsetHeight;
                            return scrollTopWithHeight >= scrollHeight;
                        }
                    };
                    var elementScrollLeftOnStart = function($el) {
                        if ($el) {
                            if (elementHasOverflowHidden($el)) return true;
                            var scrollLeft = $el.scrollLeft;
                            return scrollLeft <= 0;
                        }
                    };
                    var elementScrollLeftOnEnd = function($el) {
                        if ($el) {
                            if (elementHasOverflowHidden($el)) return true;
                            var scrollLeft = $el.scrollLeft;
                            var scrollWidth = $el.scrollWidth;
                            var scrollLeftWithWidth = scrollLeft + $el.offsetWidth;
                            return scrollLeftWithWidth >= scrollWidth;
                        }
                    };
                    var elementIsScrollableField = function($el) {
                        var selector = 'textarea, [contenteditable="true"]';
                        return elementHasSelector($el, selector);
                    };
                    var elementIsInputRange = function($el) {
                        var selector = 'input[type="range"]';
                        return elementHasSelector($el, selector);
                    };
                    __nested_webpack_require_5303__.d(__webpack_exports__, "disablePageScroll", (function() {
                        return disablePageScroll;
                    }));
                    __nested_webpack_require_5303__.d(__webpack_exports__, "enablePageScroll", (function() {
                        return enablePageScroll;
                    }));
                    __nested_webpack_require_5303__.d(__webpack_exports__, "getScrollState", (function() {
                        return getScrollState;
                    }));
                    __nested_webpack_require_5303__.d(__webpack_exports__, "clearQueueScrollLocks", (function() {
                        return clearQueueScrollLocks;
                    }));
                    __nested_webpack_require_5303__.d(__webpack_exports__, "getTargetScrollBarWidth", (function() {
                        return scroll_lock_getTargetScrollBarWidth;
                    }));
                    __nested_webpack_require_5303__.d(__webpack_exports__, "getCurrentTargetScrollBarWidth", (function() {
                        return scroll_lock_getCurrentTargetScrollBarWidth;
                    }));
                    __nested_webpack_require_5303__.d(__webpack_exports__, "getPageScrollBarWidth", (function() {
                        return getPageScrollBarWidth;
                    }));
                    __nested_webpack_require_5303__.d(__webpack_exports__, "getCurrentPageScrollBarWidth", (function() {
                        return getCurrentPageScrollBarWidth;
                    }));
                    __nested_webpack_require_5303__.d(__webpack_exports__, "addScrollableTarget", (function() {
                        return scroll_lock_addScrollableTarget;
                    }));
                    __nested_webpack_require_5303__.d(__webpack_exports__, "removeScrollableTarget", (function() {
                        return scroll_lock_removeScrollableTarget;
                    }));
                    __nested_webpack_require_5303__.d(__webpack_exports__, "addScrollableSelector", (function() {
                        return scroll_lock_addScrollableSelector;
                    }));
                    __nested_webpack_require_5303__.d(__webpack_exports__, "removeScrollableSelector", (function() {
                        return scroll_lock_removeScrollableSelector;
                    }));
                    __nested_webpack_require_5303__.d(__webpack_exports__, "addLockableTarget", (function() {
                        return scroll_lock_addLockableTarget;
                    }));
                    __nested_webpack_require_5303__.d(__webpack_exports__, "addLockableSelector", (function() {
                        return scroll_lock_addLockableSelector;
                    }));
                    __nested_webpack_require_5303__.d(__webpack_exports__, "setFillGapMethod", (function() {
                        return scroll_lock_setFillGapMethod;
                    }));
                    __nested_webpack_require_5303__.d(__webpack_exports__, "addFillGapTarget", (function() {
                        return scroll_lock_addFillGapTarget;
                    }));
                    __nested_webpack_require_5303__.d(__webpack_exports__, "removeFillGapTarget", (function() {
                        return scroll_lock_removeFillGapTarget;
                    }));
                    __nested_webpack_require_5303__.d(__webpack_exports__, "addFillGapSelector", (function() {
                        return scroll_lock_addFillGapSelector;
                    }));
                    __nested_webpack_require_5303__.d(__webpack_exports__, "removeFillGapSelector", (function() {
                        return scroll_lock_removeFillGapSelector;
                    }));
                    __nested_webpack_require_5303__.d(__webpack_exports__, "refillGaps", (function() {
                        return refillGaps;
                    }));
                    function _objectSpread(target) {
                        for (var i = 1; i < arguments.length; i++) {
                            var source = null != arguments[i] ? arguments[i] : {};
                            var ownKeys = Object.keys(source);
                            if ("function" === typeof Object.getOwnPropertySymbols) ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter((function(sym) {
                                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
                            })));
                            ownKeys.forEach((function(key) {
                                _defineProperty(target, key, source[key]);
                            }));
                        }
                        return target;
                    }
                    function _defineProperty(obj, key, value) {
                        if (key in obj) Object.defineProperty(obj, key, {
                            value,
                            enumerable: true,
                            configurable: true,
                            writable: true
                        }); else obj[key] = value;
                        return obj;
                    }
                    var FILL_GAP_AVAILABLE_METHODS = [ "padding", "margin", "width", "max-width", "none" ];
                    var TOUCH_DIRECTION_DETECT_OFFSET = 3;
                    var state = {
                        scroll: true,
                        queue: 0,
                        scrollableSelectors: [ "[data-scroll-lock-scrollable]" ],
                        lockableSelectors: [ "body", "[data-scroll-lock-lockable]" ],
                        fillGapSelectors: [ "body", "[data-scroll-lock-fill-gap]", "[data-scroll-lock-lockable]" ],
                        fillGapMethod: FILL_GAP_AVAILABLE_METHODS[0],
                        startTouchY: 0,
                        startTouchX: 0
                    };
                    var disablePageScroll = function(target) {
                        if (state.queue <= 0) {
                            state.scroll = false;
                            scroll_lock_hideLockableOverflow();
                            fillGaps();
                        }
                        scroll_lock_addScrollableTarget(target);
                        state.queue++;
                    };
                    var enablePageScroll = function(target) {
                        state.queue > 0 && state.queue--;
                        if (state.queue <= 0) {
                            state.scroll = true;
                            scroll_lock_showLockableOverflow();
                            unfillGaps();
                        }
                        scroll_lock_removeScrollableTarget(target);
                    };
                    var getScrollState = function() {
                        return state.scroll;
                    };
                    var clearQueueScrollLocks = function() {
                        state.queue = 0;
                    };
                    var scroll_lock_getTargetScrollBarWidth = function($target) {
                        var onlyExists = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : false;
                        if (isElement($target)) {
                            var currentOverflowYProperty = $target.style.overflowY;
                            if (onlyExists) {
                                if (!getScrollState()) $target.style.overflowY = $target.getAttribute("data-scroll-lock-saved-overflow-y-property");
                            } else $target.style.overflowY = "scroll";
                            var width = scroll_lock_getCurrentTargetScrollBarWidth($target);
                            $target.style.overflowY = currentOverflowYProperty;
                            return width;
                        } else return 0;
                    };
                    var scroll_lock_getCurrentTargetScrollBarWidth = function($target) {
                        if (isElement($target)) if ($target === document.body) {
                            var documentWidth = document.documentElement.clientWidth;
                            var windowWidth = window.innerWidth;
                            var currentWidth = windowWidth - documentWidth;
                            return currentWidth;
                        } else {
                            var borderLeftWidthCurrentProperty = $target.style.borderLeftWidth;
                            var borderRightWidthCurrentProperty = $target.style.borderRightWidth;
                            $target.style.borderLeftWidth = "0px";
                            $target.style.borderRightWidth = "0px";
                            var _currentWidth = $target.offsetWidth - $target.clientWidth;
                            $target.style.borderLeftWidth = borderLeftWidthCurrentProperty;
                            $target.style.borderRightWidth = borderRightWidthCurrentProperty;
                            return _currentWidth;
                        } else return 0;
                    };
                    var getPageScrollBarWidth = function() {
                        var onlyExists = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : false;
                        return scroll_lock_getTargetScrollBarWidth(document.body, onlyExists);
                    };
                    var getCurrentPageScrollBarWidth = function() {
                        return scroll_lock_getCurrentTargetScrollBarWidth(document.body);
                    };
                    var scroll_lock_addScrollableTarget = function(target) {
                        if (target) {
                            var targets = argumentAsArray(target);
                            targets.map((function($targets) {
                                eachNode($targets, (function($target) {
                                    if (isElement($target)) $target.setAttribute("data-scroll-lock-scrollable", ""); else throwError('"'.concat($target, '" is not a Element.'));
                                }));
                            }));
                        }
                    };
                    var scroll_lock_removeScrollableTarget = function(target) {
                        if (target) {
                            var targets = argumentAsArray(target);
                            targets.map((function($targets) {
                                eachNode($targets, (function($target) {
                                    if (isElement($target)) $target.removeAttribute("data-scroll-lock-scrollable"); else throwError('"'.concat($target, '" is not a Element.'));
                                }));
                            }));
                        }
                    };
                    var scroll_lock_addScrollableSelector = function(selector) {
                        if (selector) {
                            var selectors = argumentAsArray(selector);
                            selectors.map((function(selector) {
                                state.scrollableSelectors.push(selector);
                            }));
                        }
                    };
                    var scroll_lock_removeScrollableSelector = function(selector) {
                        if (selector) {
                            var selectors = argumentAsArray(selector);
                            selectors.map((function(selector) {
                                state.scrollableSelectors = state.scrollableSelectors.filter((function(sSelector) {
                                    return sSelector !== selector;
                                }));
                            }));
                        }
                    };
                    var scroll_lock_addLockableTarget = function(target) {
                        if (target) {
                            var targets = argumentAsArray(target);
                            targets.map((function($targets) {
                                eachNode($targets, (function($target) {
                                    if (isElement($target)) $target.setAttribute("data-scroll-lock-lockable", ""); else throwError('"'.concat($target, '" is not a Element.'));
                                }));
                            }));
                            if (!getScrollState()) scroll_lock_hideLockableOverflow();
                        }
                    };
                    var scroll_lock_addLockableSelector = function(selector) {
                        if (selector) {
                            var selectors = argumentAsArray(selector);
                            selectors.map((function(selector) {
                                state.lockableSelectors.push(selector);
                            }));
                            if (!getScrollState()) scroll_lock_hideLockableOverflow();
                            scroll_lock_addFillGapSelector(selector);
                        }
                    };
                    var scroll_lock_setFillGapMethod = function(method) {
                        if (method) if (-1 !== FILL_GAP_AVAILABLE_METHODS.indexOf(method)) {
                            state.fillGapMethod = method;
                            refillGaps();
                        } else {
                            var methods = FILL_GAP_AVAILABLE_METHODS.join(", ");
                            throwError('"'.concat(method, '" method is not available!\nAvailable fill gap methods: ').concat(methods, "."));
                        }
                    };
                    var scroll_lock_addFillGapTarget = function(target) {
                        if (target) {
                            var targets = argumentAsArray(target);
                            targets.map((function($targets) {
                                eachNode($targets, (function($target) {
                                    if (isElement($target)) {
                                        $target.setAttribute("data-scroll-lock-fill-gap", "");
                                        if (!state.scroll) scroll_lock_fillGapTarget($target);
                                    } else throwError('"'.concat($target, '" is not a Element.'));
                                }));
                            }));
                        }
                    };
                    var scroll_lock_removeFillGapTarget = function(target) {
                        if (target) {
                            var targets = argumentAsArray(target);
                            targets.map((function($targets) {
                                eachNode($targets, (function($target) {
                                    if (isElement($target)) {
                                        $target.removeAttribute("data-scroll-lock-fill-gap");
                                        if (!state.scroll) scroll_lock_unfillGapTarget($target);
                                    } else throwError('"'.concat($target, '" is not a Element.'));
                                }));
                            }));
                        }
                    };
                    var scroll_lock_addFillGapSelector = function(selector) {
                        if (selector) {
                            var selectors = argumentAsArray(selector);
                            selectors.map((function(selector) {
                                if (-1 === state.fillGapSelectors.indexOf(selector)) {
                                    state.fillGapSelectors.push(selector);
                                    if (!state.scroll) scroll_lock_fillGapSelector(selector);
                                }
                            }));
                        }
                    };
                    var scroll_lock_removeFillGapSelector = function(selector) {
                        if (selector) {
                            var selectors = argumentAsArray(selector);
                            selectors.map((function(selector) {
                                state.fillGapSelectors = state.fillGapSelectors.filter((function(fSelector) {
                                    return fSelector !== selector;
                                }));
                                if (!state.scroll) scroll_lock_unfillGapSelector(selector);
                            }));
                        }
                    };
                    var refillGaps = function() {
                        if (!state.scroll) fillGaps();
                    };
                    var scroll_lock_hideLockableOverflow = function() {
                        var selector = arrayAsSelector(state.lockableSelectors);
                        scroll_lock_hideLockableOverflowSelector(selector);
                    };
                    var scroll_lock_showLockableOverflow = function() {
                        var selector = arrayAsSelector(state.lockableSelectors);
                        scroll_lock_showLockableOverflowSelector(selector);
                    };
                    var scroll_lock_hideLockableOverflowSelector = function(selector) {
                        var $targets = document.querySelectorAll(selector);
                        eachNode($targets, (function($target) {
                            scroll_lock_hideLockableOverflowTarget($target);
                        }));
                    };
                    var scroll_lock_showLockableOverflowSelector = function(selector) {
                        var $targets = document.querySelectorAll(selector);
                        eachNode($targets, (function($target) {
                            scroll_lock_showLockableOverflowTarget($target);
                        }));
                    };
                    var scroll_lock_hideLockableOverflowTarget = function($target) {
                        if (isElement($target) && "true" !== $target.getAttribute("data-scroll-lock-locked")) {
                            var computedStyle = window.getComputedStyle($target);
                            $target.setAttribute("data-scroll-lock-saved-overflow-y-property", computedStyle.overflowY);
                            $target.setAttribute("data-scroll-lock-saved-inline-overflow-property", $target.style.overflow);
                            $target.setAttribute("data-scroll-lock-saved-inline-overflow-y-property", $target.style.overflowY);
                            $target.style.overflow = "hidden";
                            $target.setAttribute("data-scroll-lock-locked", "true");
                        }
                    };
                    var scroll_lock_showLockableOverflowTarget = function($target) {
                        if (isElement($target) && "true" === $target.getAttribute("data-scroll-lock-locked")) {
                            $target.style.overflow = $target.getAttribute("data-scroll-lock-saved-inline-overflow-property");
                            $target.style.overflowY = $target.getAttribute("data-scroll-lock-saved-inline-overflow-y-property");
                            $target.removeAttribute("data-scroll-lock-saved-overflow-property");
                            $target.removeAttribute("data-scroll-lock-saved-inline-overflow-property");
                            $target.removeAttribute("data-scroll-lock-saved-inline-overflow-y-property");
                            $target.removeAttribute("data-scroll-lock-locked");
                        }
                    };
                    var fillGaps = function() {
                        state.fillGapSelectors.map((function(selector) {
                            scroll_lock_fillGapSelector(selector);
                        }));
                    };
                    var unfillGaps = function() {
                        state.fillGapSelectors.map((function(selector) {
                            scroll_lock_unfillGapSelector(selector);
                        }));
                    };
                    var scroll_lock_fillGapSelector = function(selector) {
                        var $targets = document.querySelectorAll(selector);
                        var isLockable = -1 !== state.lockableSelectors.indexOf(selector);
                        eachNode($targets, (function($target) {
                            scroll_lock_fillGapTarget($target, isLockable);
                        }));
                    };
                    var scroll_lock_fillGapTarget = function($target) {
                        var isLockable = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : false;
                        if (isElement($target)) {
                            var scrollBarWidth;
                            if ("" === $target.getAttribute("data-scroll-lock-lockable") || isLockable) scrollBarWidth = scroll_lock_getTargetScrollBarWidth($target, true); else {
                                var $lockableParent = findParentBySelector($target, arrayAsSelector(state.lockableSelectors));
                                scrollBarWidth = scroll_lock_getTargetScrollBarWidth($lockableParent, true);
                            }
                            if ("true" === $target.getAttribute("data-scroll-lock-filled-gap")) scroll_lock_unfillGapTarget($target);
                            var computedStyle = window.getComputedStyle($target);
                            $target.setAttribute("data-scroll-lock-filled-gap", "true");
                            $target.setAttribute("data-scroll-lock-current-fill-gap-method", state.fillGapMethod);
                            if ("margin" === state.fillGapMethod) {
                                var currentMargin = parseFloat(computedStyle.marginRight);
                                $target.style.marginRight = "".concat(currentMargin + scrollBarWidth, "px");
                            } else if ("width" === state.fillGapMethod) $target.style.width = "calc(100% - ".concat(scrollBarWidth, "px)"); else if ("max-width" === state.fillGapMethod) $target.style.maxWidth = "calc(100% - ".concat(scrollBarWidth, "px)"); else if ("padding" === state.fillGapMethod) {
                                var currentPadding = parseFloat(computedStyle.paddingRight);
                                $target.style.paddingRight = "".concat(currentPadding + scrollBarWidth, "px");
                            }
                        }
                    };
                    var scroll_lock_unfillGapSelector = function(selector) {
                        var $targets = document.querySelectorAll(selector);
                        eachNode($targets, (function($target) {
                            scroll_lock_unfillGapTarget($target);
                        }));
                    };
                    var scroll_lock_unfillGapTarget = function($target) {
                        if (isElement($target)) if ("true" === $target.getAttribute("data-scroll-lock-filled-gap")) {
                            var currentFillGapMethod = $target.getAttribute("data-scroll-lock-current-fill-gap-method");
                            $target.removeAttribute("data-scroll-lock-filled-gap");
                            $target.removeAttribute("data-scroll-lock-current-fill-gap-method");
                            if ("margin" === currentFillGapMethod) $target.style.marginRight = ""; else if ("width" === currentFillGapMethod) $target.style.width = ""; else if ("max-width" === currentFillGapMethod) $target.style.maxWidth = ""; else if ("padding" === currentFillGapMethod) $target.style.paddingRight = "";
                        }
                    };
                    var onResize = function(e) {
                        refillGaps();
                    };
                    var onTouchStart = function(e) {
                        if (!state.scroll) {
                            state.startTouchY = e.touches[0].clientY;
                            state.startTouchX = e.touches[0].clientX;
                        }
                    };
                    var scroll_lock_onTouchMove = function(e) {
                        if (!state.scroll) {
                            var startTouchY = state.startTouchY, startTouchX = state.startTouchX;
                            var currentClientY = e.touches[0].clientY;
                            var currentClientX = e.touches[0].clientX;
                            if (e.touches.length < 2) {
                                var selector = arrayAsSelector(state.scrollableSelectors);
                                var direction = {
                                    up: startTouchY < currentClientY,
                                    down: startTouchY > currentClientY,
                                    left: startTouchX < currentClientX,
                                    right: startTouchX > currentClientX
                                };
                                var directionWithOffset = {
                                    up: startTouchY + TOUCH_DIRECTION_DETECT_OFFSET < currentClientY,
                                    down: startTouchY - TOUCH_DIRECTION_DETECT_OFFSET > currentClientY,
                                    left: startTouchX + TOUCH_DIRECTION_DETECT_OFFSET < currentClientX,
                                    right: startTouchX - TOUCH_DIRECTION_DETECT_OFFSET > currentClientX
                                };
                                var handle = function handle($el) {
                                    var skip = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : false;
                                    if ($el) {
                                        var parentScrollableEl = findParentBySelector($el, selector, false);
                                        if (elementIsInputRange($el)) return false;
                                        if (skip || elementIsScrollableField($el) && findParentBySelector($el, selector) || elementHasSelector($el, selector)) {
                                            var prevent = false;
                                            if (elementScrollLeftOnStart($el) && elementScrollLeftOnEnd($el)) {
                                                if (direction.up && elementScrollTopOnStart($el) || direction.down && elementScrollTopOnEnd($el)) prevent = true;
                                            } else if (elementScrollTopOnStart($el) && elementScrollTopOnEnd($el)) {
                                                if (direction.left && elementScrollLeftOnStart($el) || direction.right && elementScrollLeftOnEnd($el)) prevent = true;
                                            } else if (directionWithOffset.up && elementScrollTopOnStart($el) || directionWithOffset.down && elementScrollTopOnEnd($el) || directionWithOffset.left && elementScrollLeftOnStart($el) || directionWithOffset.right && elementScrollLeftOnEnd($el)) prevent = true;
                                            if (prevent) if (parentScrollableEl) handle(parentScrollableEl, true); else if (e.cancelable) e.preventDefault();
                                        } else handle(parentScrollableEl);
                                    } else if (e.cancelable) e.preventDefault();
                                };
                                handle(e.target);
                            }
                        }
                    };
                    var onTouchEnd = function(e) {
                        if (!state.scroll) {
                            state.startTouchY = 0;
                            state.startTouchX = 0;
                        }
                    };
                    if ("undefined" !== typeof window) window.addEventListener("resize", onResize);
                    if ("undefined" !== typeof document) {
                        document.addEventListener("touchstart", onTouchStart);
                        document.addEventListener("touchmove", scroll_lock_onTouchMove, {
                            passive: false
                        });
                        document.addEventListener("touchend", onTouchEnd);
                    }
                    var deprecatedMethods = {
                        hide: function(target) {
                            throwError('"hide" is deprecated! Use "disablePageScroll" instead. \n https://github.com/FL3NKEY/scroll-lock#disablepagescrollscrollabletarget');
                            disablePageScroll(target);
                        },
                        show: function(target) {
                            throwError('"show" is deprecated! Use "enablePageScroll" instead. \n https://github.com/FL3NKEY/scroll-lock#enablepagescrollscrollabletarget');
                            enablePageScroll(target);
                        },
                        toggle: function(target) {
                            throwError('"toggle" is deprecated! Do not use it.');
                            if (getScrollState()) disablePageScroll(); else enablePageScroll(target);
                        },
                        getState: function() {
                            throwError('"getState" is deprecated! Use "getScrollState" instead. \n https://github.com/FL3NKEY/scroll-lock#getscrollstate');
                            return getScrollState();
                        },
                        getWidth: function() {
                            throwError('"getWidth" is deprecated! Use "getPageScrollBarWidth" instead. \n https://github.com/FL3NKEY/scroll-lock#getpagescrollbarwidth');
                            return getPageScrollBarWidth();
                        },
                        getCurrentWidth: function() {
                            throwError('"getCurrentWidth" is deprecated! Use "getCurrentPageScrollBarWidth" instead. \n https://github.com/FL3NKEY/scroll-lock#getcurrentpagescrollbarwidth');
                            return getCurrentPageScrollBarWidth();
                        },
                        setScrollableTargets: function(target) {
                            throwError('"setScrollableTargets" is deprecated! Use "addScrollableTarget" instead. \n https://github.com/FL3NKEY/scroll-lock#addscrollabletargetscrollabletarget');
                            scroll_lock_addScrollableTarget(target);
                        },
                        setFillGapSelectors: function(selector) {
                            throwError('"setFillGapSelectors" is deprecated! Use "addFillGapSelector" instead. \n https://github.com/FL3NKEY/scroll-lock#addfillgapselectorfillgapselector');
                            scroll_lock_addFillGapSelector(selector);
                        },
                        setFillGapTargets: function(target) {
                            throwError('"setFillGapTargets" is deprecated! Use "addFillGapTarget" instead. \n https://github.com/FL3NKEY/scroll-lock#addfillgaptargetfillgaptarget');
                            scroll_lock_addFillGapTarget(target);
                        },
                        clearQueue: function() {
                            throwError('"clearQueue" is deprecated! Use "clearQueueScrollLocks" instead. \n https://github.com/FL3NKEY/scroll-lock#clearqueuescrolllocks');
                            clearQueueScrollLocks();
                        }
                    };
                    var scrollLock = _objectSpread({
                        disablePageScroll,
                        enablePageScroll,
                        getScrollState,
                        clearQueueScrollLocks,
                        getTargetScrollBarWidth: scroll_lock_getTargetScrollBarWidth,
                        getCurrentTargetScrollBarWidth: scroll_lock_getCurrentTargetScrollBarWidth,
                        getPageScrollBarWidth,
                        getCurrentPageScrollBarWidth,
                        addScrollableSelector: scroll_lock_addScrollableSelector,
                        removeScrollableSelector: scroll_lock_removeScrollableSelector,
                        addScrollableTarget: scroll_lock_addScrollableTarget,
                        removeScrollableTarget: scroll_lock_removeScrollableTarget,
                        addLockableSelector: scroll_lock_addLockableSelector,
                        addLockableTarget: scroll_lock_addLockableTarget,
                        addFillGapSelector: scroll_lock_addFillGapSelector,
                        removeFillGapSelector: scroll_lock_removeFillGapSelector,
                        addFillGapTarget: scroll_lock_addFillGapTarget,
                        removeFillGapTarget: scroll_lock_removeFillGapTarget,
                        setFillGapMethod: scroll_lock_setFillGapMethod,
                        refillGaps,
                        _state: state
                    }, deprecatedMethods);
                    __webpack_exports__["default"] = scrollLock;
                } ])["default"];
            }));
        },
        "./node_modules/url/node_modules/punycode/punycode.js": function(module, exports, __webpack_require__) {
            module = __webpack_require__.nmd(module);
            var __WEBPACK_AMD_DEFINE_RESULT__;
            (function(root) {
                true && exports && exports.nodeType;
                true && module && module.nodeType;
                var freeGlobal = "object" == typeof __webpack_require__.g && __webpack_require__.g;
                if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal) freeGlobal;
                var punycode, maxInt = 2147483647, base = 36, tMin = 1, tMax = 26, skew = 38, damp = 700, initialBias = 72, initialN = 128, delimiter = "-", regexPunycode = /^xn--/, regexNonASCII = /[^\x20-\x7E]/, regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, errors = {
                    overflow: "Overflow: input needs wider integers to process",
                    "not-basic": "Illegal input >= 0x80 (not a basic code point)",
                    "invalid-input": "Invalid input"
                }, baseMinusTMin = base - tMin, floor = Math.floor, stringFromCharCode = String.fromCharCode;
                function error(type) {
                    throw RangeError(errors[type]);
                }
                function map(array, fn) {
                    var length = array.length;
                    var result = [];
                    while (length--) result[length] = fn(array[length]);
                    return result;
                }
                function mapDomain(string, fn) {
                    var parts = string.split("@");
                    var result = "";
                    if (parts.length > 1) {
                        result = parts[0] + "@";
                        string = parts[1];
                    }
                    string = string.replace(regexSeparators, ".");
                    var labels = string.split(".");
                    var encoded = map(labels, fn).join(".");
                    return result + encoded;
                }
                function ucs2decode(string) {
                    var value, extra, output = [], counter = 0, length = string.length;
                    while (counter < length) {
                        value = string.charCodeAt(counter++);
                        if (value >= 55296 && value <= 56319 && counter < length) {
                            extra = string.charCodeAt(counter++);
                            if (56320 == (64512 & extra)) output.push(((1023 & value) << 10) + (1023 & extra) + 65536); else {
                                output.push(value);
                                counter--;
                            }
                        } else output.push(value);
                    }
                    return output;
                }
                function ucs2encode(array) {
                    return map(array, (function(value) {
                        var output = "";
                        if (value > 65535) {
                            value -= 65536;
                            output += stringFromCharCode(value >>> 10 & 1023 | 55296);
                            value = 56320 | 1023 & value;
                        }
                        output += stringFromCharCode(value);
                        return output;
                    })).join("");
                }
                function basicToDigit(codePoint) {
                    if (codePoint - 48 < 10) return codePoint - 22;
                    if (codePoint - 65 < 26) return codePoint - 65;
                    if (codePoint - 97 < 26) return codePoint - 97;
                    return base;
                }
                function digitToBasic(digit, flag) {
                    return digit + 22 + 75 * (digit < 26) - ((0 != flag) << 5);
                }
                function adapt(delta, numPoints, firstTime) {
                    var k = 0;
                    delta = firstTime ? floor(delta / damp) : delta >> 1;
                    delta += floor(delta / numPoints);
                    for (;delta > baseMinusTMin * tMax >> 1; k += base) delta = floor(delta / baseMinusTMin);
                    return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
                }
                function decode(input) {
                    var out, basic, j, index, oldi, w, k, digit, t, baseMinusT, output = [], inputLength = input.length, i = 0, n = initialN, bias = initialBias;
                    basic = input.lastIndexOf(delimiter);
                    if (basic < 0) basic = 0;
                    for (j = 0; j < basic; ++j) {
                        if (input.charCodeAt(j) >= 128) error("not-basic");
                        output.push(input.charCodeAt(j));
                    }
                    for (index = basic > 0 ? basic + 1 : 0; index < inputLength; ) {
                        for (oldi = i, w = 1, k = base; ;k += base) {
                            if (index >= inputLength) error("invalid-input");
                            digit = basicToDigit(input.charCodeAt(index++));
                            if (digit >= base || digit > floor((maxInt - i) / w)) error("overflow");
                            i += digit * w;
                            t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
                            if (digit < t) break;
                            baseMinusT = base - t;
                            if (w > floor(maxInt / baseMinusT)) error("overflow");
                            w *= baseMinusT;
                        }
                        out = output.length + 1;
                        bias = adapt(i - oldi, out, 0 == oldi);
                        if (floor(i / out) > maxInt - n) error("overflow");
                        n += floor(i / out);
                        i %= out;
                        output.splice(i++, 0, n);
                    }
                    return ucs2encode(output);
                }
                function encode(input) {
                    var n, delta, handledCPCount, basicLength, bias, j, m, q, k, t, currentValue, inputLength, handledCPCountPlusOne, baseMinusT, qMinusT, output = [];
                    input = ucs2decode(input);
                    inputLength = input.length;
                    n = initialN;
                    delta = 0;
                    bias = initialBias;
                    for (j = 0; j < inputLength; ++j) {
                        currentValue = input[j];
                        if (currentValue < 128) output.push(stringFromCharCode(currentValue));
                    }
                    handledCPCount = basicLength = output.length;
                    if (basicLength) output.push(delimiter);
                    while (handledCPCount < inputLength) {
                        for (m = maxInt, j = 0; j < inputLength; ++j) {
                            currentValue = input[j];
                            if (currentValue >= n && currentValue < m) m = currentValue;
                        }
                        handledCPCountPlusOne = handledCPCount + 1;
                        if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) error("overflow");
                        delta += (m - n) * handledCPCountPlusOne;
                        n = m;
                        for (j = 0; j < inputLength; ++j) {
                            currentValue = input[j];
                            if (currentValue < n && ++delta > maxInt) error("overflow");
                            if (currentValue == n) {
                                for (q = delta, k = base; ;k += base) {
                                    t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
                                    if (q < t) break;
                                    qMinusT = q - t;
                                    baseMinusT = base - t;
                                    output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
                                    q = floor(qMinusT / baseMinusT);
                                }
                                output.push(stringFromCharCode(digitToBasic(q, 0)));
                                bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
                                delta = 0;
                                ++handledCPCount;
                            }
                        }
                        ++delta;
                        ++n;
                    }
                    return output.join("");
                }
                function toUnicode(input) {
                    return mapDomain(input, (function(string) {
                        return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
                    }));
                }
                function toASCII(input) {
                    return mapDomain(input, (function(string) {
                        return regexNonASCII.test(string) ? "xn--" + encode(string) : string;
                    }));
                }
                punycode = {
                    version: "1.3.2",
                    ucs2: {
                        decode: ucs2decode,
                        encode: ucs2encode
                    },
                    decode,
                    encode,
                    toASCII,
                    toUnicode
                };
                if (true) !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
                    return punycode;
                }.call(exports, __webpack_require__, exports, module), void 0 !== __WEBPACK_AMD_DEFINE_RESULT__ && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
            })();
        },
        "./node_modules/url/url.js": (__unused_webpack_module, exports, __webpack_require__) => {
            var punycode = __webpack_require__("./node_modules/url/node_modules/punycode/punycode.js");
            exports.parse = urlParse;
            exports.resolve = urlResolve;
            exports.resolveObject = urlResolveObject;
            exports.format = urlFormat;
            exports.Url = Url;
            function Url() {
                this.protocol = null;
                this.slashes = null;
                this.auth = null;
                this.host = null;
                this.port = null;
                this.hostname = null;
                this.hash = null;
                this.search = null;
                this.query = null;
                this.pathname = null;
                this.path = null;
                this.href = null;
            }
            var protocolPattern = /^([a-z0-9.+-]+:)/i, portPattern = /:[0-9]*$/, delims = [ "<", ">", '"', "`", " ", "\r", "\n", "\t" ], unwise = [ "{", "}", "|", "\\", "^", "`" ].concat(delims), autoEscape = [ "'" ].concat(unwise), nonHostChars = [ "%", "/", "?", ";", "#" ].concat(autoEscape), hostEndingChars = [ "/", "?", "#" ], hostnameMaxLen = 255, hostnamePartPattern = /^[a-z0-9A-Z_-]{0,63}$/, hostnamePartStart = /^([a-z0-9A-Z_-]{0,63})(.*)$/, unsafeProtocol = {
                javascript: true,
                "javascript:": true
            }, hostlessProtocol = {
                javascript: true,
                "javascript:": true
            }, slashedProtocol = {
                http: true,
                https: true,
                ftp: true,
                gopher: true,
                file: true,
                "http:": true,
                "https:": true,
                "ftp:": true,
                "gopher:": true,
                "file:": true
            }, querystring = __webpack_require__("./node_modules/querystring/index.js");
            function urlParse(url, parseQueryString, slashesDenoteHost) {
                if (url && isObject(url) && url instanceof Url) return url;
                var u = new Url;
                u.parse(url, parseQueryString, slashesDenoteHost);
                return u;
            }
            Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
                if (!isString(url)) throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
                var rest = url;
                rest = rest.trim();
                var proto = protocolPattern.exec(rest);
                if (proto) {
                    proto = proto[0];
                    var lowerProto = proto.toLowerCase();
                    this.protocol = lowerProto;
                    rest = rest.substr(proto.length);
                }
                if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
                    var slashes = "//" === rest.substr(0, 2);
                    if (slashes && !(proto && hostlessProtocol[proto])) {
                        rest = rest.substr(2);
                        this.slashes = true;
                    }
                }
                if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {
                    var hostEnd = -1;
                    for (var i = 0; i < hostEndingChars.length; i++) {
                        var hec = rest.indexOf(hostEndingChars[i]);
                        if (-1 !== hec && (-1 === hostEnd || hec < hostEnd)) hostEnd = hec;
                    }
                    var auth, atSign;
                    if (-1 === hostEnd) atSign = rest.lastIndexOf("@"); else atSign = rest.lastIndexOf("@", hostEnd);
                    if (-1 !== atSign) {
                        auth = rest.slice(0, atSign);
                        rest = rest.slice(atSign + 1);
                        this.auth = decodeURIComponent(auth);
                    }
                    hostEnd = -1;
                    for (i = 0; i < nonHostChars.length; i++) {
                        hec = rest.indexOf(nonHostChars[i]);
                        if (-1 !== hec && (-1 === hostEnd || hec < hostEnd)) hostEnd = hec;
                    }
                    if (-1 === hostEnd) hostEnd = rest.length;
                    this.host = rest.slice(0, hostEnd);
                    rest = rest.slice(hostEnd);
                    this.parseHost();
                    this.hostname = this.hostname || "";
                    var ipv6Hostname = "[" === this.hostname[0] && "]" === this.hostname[this.hostname.length - 1];
                    if (!ipv6Hostname) {
                        var hostparts = this.hostname.split(/\./);
                        i = 0;
                        for (var l = hostparts.length; i < l; i++) {
                            var part = hostparts[i];
                            if (!part) continue;
                            if (!part.match(hostnamePartPattern)) {
                                var newpart = "";
                                for (var j = 0, k = part.length; j < k; j++) if (part.charCodeAt(j) > 127) newpart += "x"; else newpart += part[j];
                                if (!newpart.match(hostnamePartPattern)) {
                                    var validParts = hostparts.slice(0, i);
                                    var notHost = hostparts.slice(i + 1);
                                    var bit = part.match(hostnamePartStart);
                                    if (bit) {
                                        validParts.push(bit[1]);
                                        notHost.unshift(bit[2]);
                                    }
                                    if (notHost.length) rest = "/" + notHost.join(".") + rest;
                                    this.hostname = validParts.join(".");
                                    break;
                                }
                            }
                        }
                    }
                    if (this.hostname.length > hostnameMaxLen) this.hostname = ""; else this.hostname = this.hostname.toLowerCase();
                    if (!ipv6Hostname) {
                        var domainArray = this.hostname.split(".");
                        var newOut = [];
                        for (i = 0; i < domainArray.length; ++i) {
                            var s = domainArray[i];
                            newOut.push(s.match(/[^A-Za-z0-9_-]/) ? "xn--" + punycode.encode(s) : s);
                        }
                        this.hostname = newOut.join(".");
                    }
                    var p = this.port ? ":" + this.port : "";
                    var h = this.hostname || "";
                    this.host = h + p;
                    this.href += this.host;
                    if (ipv6Hostname) {
                        this.hostname = this.hostname.substr(1, this.hostname.length - 2);
                        if ("/" !== rest[0]) rest = "/" + rest;
                    }
                }
                if (!unsafeProtocol[lowerProto]) for (i = 0, l = autoEscape.length; i < l; i++) {
                    var ae = autoEscape[i];
                    var esc = encodeURIComponent(ae);
                    if (esc === ae) esc = escape(ae);
                    rest = rest.split(ae).join(esc);
                }
                var hash = rest.indexOf("#");
                if (-1 !== hash) {
                    this.hash = rest.substr(hash);
                    rest = rest.slice(0, hash);
                }
                var qm = rest.indexOf("?");
                if (-1 !== qm) {
                    this.search = rest.substr(qm);
                    this.query = rest.substr(qm + 1);
                    if (parseQueryString) this.query = querystring.parse(this.query);
                    rest = rest.slice(0, qm);
                } else if (parseQueryString) {
                    this.search = "";
                    this.query = {};
                }
                if (rest) this.pathname = rest;
                if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) this.pathname = "/";
                if (this.pathname || this.search) {
                    p = this.pathname || "";
                    s = this.search || "";
                    this.path = p + s;
                }
                this.href = this.format();
                return this;
            };
            function urlFormat(obj) {
                if (isString(obj)) obj = urlParse(obj);
                if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
                return obj.format();
            }
            Url.prototype.format = function() {
                var auth = this.auth || "";
                if (auth) {
                    auth = encodeURIComponent(auth);
                    auth = auth.replace(/%3A/i, ":");
                    auth += "@";
                }
                var protocol = this.protocol || "", pathname = this.pathname || "", hash = this.hash || "", host = false, query = "";
                if (this.host) host = auth + this.host; else if (this.hostname) {
                    host = auth + (-1 === this.hostname.indexOf(":") ? this.hostname : "[" + this.hostname + "]");
                    if (this.port) host += ":" + this.port;
                }
                if (this.query && isObject(this.query) && Object.keys(this.query).length) query = querystring.stringify(this.query);
                var search = this.search || query && "?" + query || "";
                if (protocol && ":" !== protocol.substr(-1)) protocol += ":";
                if (this.slashes || (!protocol || slashedProtocol[protocol]) && false !== host) {
                    host = "//" + (host || "");
                    if (pathname && "/" !== pathname.charAt(0)) pathname = "/" + pathname;
                } else if (!host) host = "";
                if (hash && "#" !== hash.charAt(0)) hash = "#" + hash;
                if (search && "?" !== search.charAt(0)) search = "?" + search;
                pathname = pathname.replace(/[?#]/g, (function(match) {
                    return encodeURIComponent(match);
                }));
                search = search.replace("#", "%23");
                return protocol + host + pathname + search + hash;
            };
            function urlResolve(source, relative) {
                return urlParse(source, false, true).resolve(relative);
            }
            Url.prototype.resolve = function(relative) {
                return this.resolveObject(urlParse(relative, false, true)).format();
            };
            function urlResolveObject(source, relative) {
                if (!source) return relative;
                return urlParse(source, false, true).resolveObject(relative);
            }
            Url.prototype.resolveObject = function(relative) {
                if (isString(relative)) {
                    var rel = new Url;
                    rel.parse(relative, false, true);
                    relative = rel;
                }
                var result = new Url;
                Object.keys(this).forEach((function(k) {
                    result[k] = this[k];
                }), this);
                result.hash = relative.hash;
                if ("" === relative.href) {
                    result.href = result.format();
                    return result;
                }
                if (relative.slashes && !relative.protocol) {
                    Object.keys(relative).forEach((function(k) {
                        if ("protocol" !== k) result[k] = relative[k];
                    }));
                    if (slashedProtocol[result.protocol] && result.hostname && !result.pathname) result.path = result.pathname = "/";
                    result.href = result.format();
                    return result;
                }
                if (relative.protocol && relative.protocol !== result.protocol) {
                    if (!slashedProtocol[relative.protocol]) {
                        Object.keys(relative).forEach((function(k) {
                            result[k] = relative[k];
                        }));
                        result.href = result.format();
                        return result;
                    }
                    result.protocol = relative.protocol;
                    if (!relative.host && !hostlessProtocol[relative.protocol]) {
                        var relPath = (relative.pathname || "").split("/");
                        while (relPath.length && !(relative.host = relPath.shift())) ;
                        if (!relative.host) relative.host = "";
                        if (!relative.hostname) relative.hostname = "";
                        if ("" !== relPath[0]) relPath.unshift("");
                        if (relPath.length < 2) relPath.unshift("");
                        result.pathname = relPath.join("/");
                    } else result.pathname = relative.pathname;
                    result.search = relative.search;
                    result.query = relative.query;
                    result.host = relative.host || "";
                    result.auth = relative.auth;
                    result.hostname = relative.hostname || relative.host;
                    result.port = relative.port;
                    if (result.pathname || result.search) {
                        var p = result.pathname || "";
                        var s = result.search || "";
                        result.path = p + s;
                    }
                    result.slashes = result.slashes || relative.slashes;
                    result.href = result.format();
                    return result;
                }
                var isSourceAbs = result.pathname && "/" === result.pathname.charAt(0), isRelAbs = relative.host || relative.pathname && "/" === relative.pathname.charAt(0), mustEndAbs = isRelAbs || isSourceAbs || result.host && relative.pathname, removeAllDots = mustEndAbs, srcPath = result.pathname && result.pathname.split("/") || [], psychotic = (relPath = relative.pathname && relative.pathname.split("/") || [], 
                result.protocol && !slashedProtocol[result.protocol]);
                if (psychotic) {
                    result.hostname = "";
                    result.port = null;
                    if (result.host) if ("" === srcPath[0]) srcPath[0] = result.host; else srcPath.unshift(result.host);
                    result.host = "";
                    if (relative.protocol) {
                        relative.hostname = null;
                        relative.port = null;
                        if (relative.host) if ("" === relPath[0]) relPath[0] = relative.host; else relPath.unshift(relative.host);
                        relative.host = null;
                    }
                    mustEndAbs = mustEndAbs && ("" === relPath[0] || "" === srcPath[0]);
                }
                if (isRelAbs) {
                    result.host = relative.host || "" === relative.host ? relative.host : result.host;
                    result.hostname = relative.hostname || "" === relative.hostname ? relative.hostname : result.hostname;
                    result.search = relative.search;
                    result.query = relative.query;
                    srcPath = relPath;
                } else if (relPath.length) {
                    if (!srcPath) srcPath = [];
                    srcPath.pop();
                    srcPath = srcPath.concat(relPath);
                    result.search = relative.search;
                    result.query = relative.query;
                } else if (!isNullOrUndefined(relative.search)) {
                    if (psychotic) {
                        result.hostname = result.host = srcPath.shift();
                        var authInHost = result.host && result.host.indexOf("@") > 0 ? result.host.split("@") : false;
                        if (authInHost) {
                            result.auth = authInHost.shift();
                            result.host = result.hostname = authInHost.shift();
                        }
                    }
                    result.search = relative.search;
                    result.query = relative.query;
                    if (!isNull(result.pathname) || !isNull(result.search)) result.path = (result.pathname ? result.pathname : "") + (result.search ? result.search : "");
                    result.href = result.format();
                    return result;
                }
                if (!srcPath.length) {
                    result.pathname = null;
                    if (result.search) result.path = "/" + result.search; else result.path = null;
                    result.href = result.format();
                    return result;
                }
                var last = srcPath.slice(-1)[0];
                var hasTrailingSlash = (result.host || relative.host) && ("." === last || ".." === last) || "" === last;
                var up = 0;
                for (var i = srcPath.length; i >= 0; i--) {
                    last = srcPath[i];
                    if ("." == last) srcPath.splice(i, 1); else if (".." === last) {
                        srcPath.splice(i, 1);
                        up++;
                    } else if (up) {
                        srcPath.splice(i, 1);
                        up--;
                    }
                }
                if (!mustEndAbs && !removeAllDots) for (;up--; up) srcPath.unshift("..");
                if (mustEndAbs && "" !== srcPath[0] && (!srcPath[0] || "/" !== srcPath[0].charAt(0))) srcPath.unshift("");
                if (hasTrailingSlash && "/" !== srcPath.join("/").substr(-1)) srcPath.push("");
                var isAbsolute = "" === srcPath[0] || srcPath[0] && "/" === srcPath[0].charAt(0);
                if (psychotic) {
                    result.hostname = result.host = isAbsolute ? "" : srcPath.length ? srcPath.shift() : "";
                    authInHost = result.host && result.host.indexOf("@") > 0 ? result.host.split("@") : false;
                    if (authInHost) {
                        result.auth = authInHost.shift();
                        result.host = result.hostname = authInHost.shift();
                    }
                }
                mustEndAbs = mustEndAbs || result.host && srcPath.length;
                if (mustEndAbs && !isAbsolute) srcPath.unshift("");
                if (!srcPath.length) {
                    result.pathname = null;
                    result.path = null;
                } else result.pathname = srcPath.join("/");
                if (!isNull(result.pathname) || !isNull(result.search)) result.path = (result.pathname ? result.pathname : "") + (result.search ? result.search : "");
                result.auth = relative.auth || result.auth;
                result.slashes = result.slashes || relative.slashes;
                result.href = result.format();
                return result;
            };
            Url.prototype.parseHost = function() {
                var host = this.host;
                var port = portPattern.exec(host);
                if (port) {
                    port = port[0];
                    if (":" !== port) this.port = port.substr(1);
                    host = host.substr(0, host.length - port.length);
                }
                if (host) this.hostname = host;
            };
            function isString(arg) {
                return "string" === typeof arg;
            }
            function isObject(arg) {
                return "object" === typeof arg && null !== arg;
            }
            function isNull(arg) {
                return null === arg;
            }
            function isNullOrUndefined(arg) {
                return null == arg;
            }
        },
        "./src/assets/commons/utils/url.js": (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
            "use strict";
            __webpack_require__.d(__webpack_exports__, {
                changeURLArg: () => changeURLArg,
                getUrlQuery: () => getUrlQuery,
                delParam: () => delParam
            });
            var url__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/url/url.js");
            var querystring__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./node_modules/querystring/index.js");
            function changeURLArg(urlStr, arg, argVal) {
                const durl = decodeURIComponent(urlStr);
                const pattern = `${arg}=([^&]*)`;
                const replaceText = `${arg}=${argVal}`;
                if (durl.match(pattern)) {
                    let tmp = `/(${arg}=)([^&]*)/gi`;
                    tmp = durl.replace(eval(tmp), replaceText);
                    return tmp;
                }
                if (durl.match("[?]")) return `${durl}&${replaceText}`;
                return `${durl}?${replaceText}`;
            }
            function getUrlQuery(key) {
                if ("undefined" !== typeof window) {
                    var _url$parse;
                    const locationHref = window.location.href;
                    const urlQuery = null === (_url$parse = url__WEBPACK_IMPORTED_MODULE_0__.parse(decodeURIComponent(locationHref))) || void 0 === _url$parse ? void 0 : _url$parse.query;
                    const urlQueryObj = querystring__WEBPACK_IMPORTED_MODULE_1__.parse(urlQuery);
                    const hitUrlQuery = urlQueryObj[key];
                    if (hitUrlQuery) {
                        if (hitUrlQuery && -1 !== hitUrlQuery.indexOf("?")) {
                            window.history.replaceState({}, document.title, changeURLArg(locationHref, key, `${hitUrlQuery.replace("?", "&")}`));
                            return hitUrlQuery.split("?")[0];
                        }
                        return hitUrlQuery;
                    }
                    return null;
                }
                return null;
            }
            function getUrlAllQuery(href) {
                var _url$parse2;
                const locationHref = href || window.location.href;
                const urlQuery = null === (_url$parse2 = url__WEBPACK_IMPORTED_MODULE_0__.parse(decodeURIComponent(locationHref))) || void 0 === _url$parse2 ? void 0 : _url$parse2.query;
                const urlQueryObj = querystring__WEBPACK_IMPORTED_MODULE_1__.parse(urlQuery);
                return urlQueryObj;
            }
            function delParam(paramKey) {
                let {href} = window.location;
                const urlParam = window.location.search.substr(1);
                const beforeUrl = href.substr(0, href.indexOf("?"));
                let nextUrl = "";
                const arr = [];
                if ("" !== urlParam) {
                    const urlParamArr = urlParam.split("&");
                    urlParamArr.forEach((segment => {
                        const paramArr = segment.split("=");
                        if (paramArr[0] !== paramKey) arr.push(segment);
                    }));
                }
                if (arr.length > 0) nextUrl = `?${arr.join("&")}`;
                href = beforeUrl + nextUrl;
                return href;
            }
            function getUrlPathId(u = window.location.href, index = -1) {
                var _url$parse$pathname;
                const urlArr = (null === (_url$parse$pathname = url__WEBPACK_IMPORTED_MODULE_0__.parse(u).pathname) || void 0 === _url$parse$pathname ? void 0 : _url$parse$pathname.replace(/^\//, "").split("/")) || [];
                if (index < 0) return urlArr[urlArr.length + index];
                return urlArr[index];
            }
            function updateUrlQueryParam(urlStr, param, value) {
                const re = new RegExp(`([?&])${param}=.*?(&|$)`, "i");
                const separator = -1 !== urlStr.indexOf("?") ? "&" : "?";
                if (urlStr.match(re)) return urlStr.replace(re, `$1${param}=${value}$2`);
                return `${urlStr}${separator}${param}=${value}`;
            }
        },
        "../shared/browser/report/customArgs/index.js": () => {
            function getValue(keysMap, name) {
                var _keysMap$name;
                return null !== (_keysMap$name = null === keysMap || void 0 === keysMap ? void 0 : keysMap[name]) && void 0 !== _keysMap$name ? _keysMap$name : name;
            }
            function getValuesByKey(channelArgs, key) {
                return name => getValue(null === channelArgs || void 0 === channelArgs ? void 0 : channelArgs[key], name);
            }
            function getByChannel(channel) {
                return key => {
                    var _window$SL_ReportArgs;
                    return getValuesByKey(null === (_window$SL_ReportArgs = window.SL_ReportArgsMap) || void 0 === _window$SL_ReportArgs ? void 0 : _window$SL_ReportArgs[channel], key);
                };
            }
            if (!window.SL_GetReportArg) window.SL_GetReportArg = function(...args) {
                if (1 === args.length) return getByChannel(args[0]);
                if (2 === args.length) return getByChannel(args[0])(args[1]);
                if (3 === args.length) return getByChannel(args[0])(args[1])(args[2]);
            };
        },
        "../shared/node_modules/@funnyecho/context/dist/constant.js": (__unused_webpack_module, exports) => {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var errCanceled = "context done with cancellation";
            var errTimeout = "context done with timeout";
            var errDeadline = "context done with deadline";
            var errNotNullableValuer = "valuer is not nullable";
            exports["default"] = {
                errCanceled,
                errTimeout,
                errDeadline,
                errNotNullableValuer
            };
        },
        "../shared/node_modules/@funnyecho/context/dist/context.js": function(__unused_webpack_module, exports, __webpack_require__) {
            "use strict";
            var __importDefault = this && this.__importDefault || function(mod) {
                return mod && mod.__esModule ? mod : {
                    default: mod
                };
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var promise_1 = __importDefault(__webpack_require__("../shared/node_modules/@funnyecho/promise/dist/index.js"));
            var time_1 = __importDefault(__webpack_require__("../shared/node_modules/@funnyecho/time/dist/index.js"));
            var constant_1 = __importDefault(__webpack_require__("../shared/node_modules/@funnyecho/context/dist/constant.js"));
            function background() {
                return forkParentCtx(_background);
            }
            function todo() {
                return forkParentCtx(_todo);
            }
            function withValue(parent, valuer, value) {
                return newValueCtx(parent, valuer, value);
            }
            function withCancel(parent) {
                return newCancelCtx(parent);
            }
            function withTimeout(parent, timeout) {
                return newCancelCtx(newTimeoutCtx(parent, timeout));
            }
            function withDeadline(parent, deadline) {
                return newCancelCtx(newDeadlineCtx(parent, deadline));
            }
            exports["default"] = {
                background,
                todo,
                withValue,
                withCancel,
                withTimeout,
                withDeadline
            };
            function newEmptyCtx() {
                return {
                    deadline: function() {
                        return null;
                    },
                    done: function() {
                        return promise_1.default.zombie;
                    },
                    err: function() {
                        return null;
                    },
                    value: function(cv) {
                        return cv ? cv.defaultGetter() : null;
                    }
                };
            }
            function newValueCtx(parent, valuer, value) {
                return {
                    deadline: function() {
                        return parent.deadline();
                    },
                    done: function() {
                        return parent.done();
                    },
                    err: function() {
                        return parent.err();
                    },
                    value: function(cv) {
                        if (valuer === cv) return value;
                        return parent.value(cv);
                    }
                };
            }
            function forkParentCtx(parent) {
                if (!parent) parent = _background;
                return {
                    deadline: function() {
                        return parent.deadline();
                    },
                    done: function() {
                        return parent.done();
                    },
                    err: function() {
                        return parent.err();
                    },
                    value: function(cv) {
                        return parent.value(cv);
                    }
                };
            }
            function createCancellablePromise() {
                return promise_1.default.resolvable();
            }
            function newTimeoutCtx(parent, dur) {
                var error;
                var deadline = time_1.default.later(dur);
                var timeoutPromise = promise_1.default.resolveAfterDuration(dur);
                return {
                    deadline: function() {
                        return deadline;
                    },
                    done: function() {
                        return Promise.race([ parent.done().then((function() {
                            return parent.err();
                        })), timeoutPromise.then((function() {
                            return new Error(constant_1.default.errTimeout);
                        })) ]).then((function(err) {
                            error = err;
                        }));
                    },
                    err: function() {
                        return error;
                    },
                    value: function(cv) {
                        return parent.value(cv);
                    }
                };
            }
            function newDeadlineCtx(parent, deadline) {
                var error = null;
                var deadlinePromise = promise_1.default.resolveAfterDuration(deadline.duration(time_1.default.now()));
                return {
                    deadline: function() {
                        return deadline;
                    },
                    done: function() {
                        return Promise.race([ parent.done().then((function() {
                            return parent.err();
                        })), deadlinePromise.then((function() {
                            return new Error(constant_1.default.errDeadline);
                        })) ]).then((function(err) {
                            error = err;
                        }));
                    },
                    err: function() {
                        return error;
                    },
                    value: function(cv) {
                        return parent.value(cv);
                    }
                };
            }
            function newCancelCtx(parent) {
                var _a = createCancellablePromise(), cancelPromise = _a[0], cancelFunc = _a[1];
                var error = null;
                return [ {
                    deadline: function() {
                        return parent.deadline();
                    },
                    done: function() {
                        return Promise.race([ parent.done().then((function() {
                            return parent.err();
                        })), cancelPromise.then((function() {
                            return new Error(constant_1.default.errCanceled);
                        })) ]).then((function(err) {
                            error = err;
                        }));
                    },
                    err: function() {
                        return error;
                    },
                    value: function(cv) {
                        return parent.value(cv);
                    }
                }, cancelFunc ];
            }
            var _background = newEmptyCtx();
            var _todo = newEmptyCtx();
        },
        "../shared/node_modules/@funnyecho/context/dist/index.js": function(__unused_webpack_module, exports, __webpack_require__) {
            "use strict";
            var __assign = this && this.__assign || function() {
                __assign = Object.assign || function(t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                        s = arguments[i];
                        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                    }
                    return t;
                };
                return __assign.apply(this, arguments);
            };
            var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
                if (void 0 === k2) k2 = k;
                Object.defineProperty(o, k2, {
                    enumerable: true,
                    get: function() {
                        return m[k];
                    }
                });
            } : function(o, m, k, k2) {
                if (void 0 === k2) k2 = k;
                o[k2] = m[k];
            });
            var __exportStar = this && this.__exportStar || function(m, exports) {
                for (var p in m) if ("default" !== p && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
            };
            var __importDefault = this && this.__importDefault || function(mod) {
                return mod && mod.__esModule ? mod : {
                    default: mod
                };
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var context_1 = __importDefault(__webpack_require__("../shared/node_modules/@funnyecho/context/dist/context.js"));
            var constant_1 = __importDefault(__webpack_require__("../shared/node_modules/@funnyecho/context/dist/constant.js"));
            var valuer_1 = __importDefault(__webpack_require__("../shared/node_modules/@funnyecho/context/dist/valuer.js"));
            __exportStar(__webpack_require__("../shared/node_modules/@funnyecho/context/dist/context.js"), exports);
            __exportStar(__webpack_require__("../shared/node_modules/@funnyecho/context/dist/valuer.js"), exports);
            exports["default"] = __assign(__assign(__assign({}, constant_1.default), context_1.default), valuer_1.default);
        },
        "../shared/node_modules/@funnyecho/context/dist/valuer.js": function(__unused_webpack_module, exports, __webpack_require__) {
            "use strict";
            var __importDefault = this && this.__importDefault || function(mod) {
                return mod && mod.__esModule ? mod : {
                    default: mod
                };
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var constant_1 = __importDefault(__webpack_require__("../shared/node_modules/@funnyecho/context/dist/constant.js"));
            function newValuer(value) {
                var getter;
                if (void 0 === value) getter = function() {
                    throw new Error(constant_1.default.errNotNullableValuer);
                }; else getter = function() {
                    return value;
                };
                return createValuer(getter);
            }
            function newValuerWithGetter(getter) {
                if ("function" !== typeof getter) getter = function() {
                    throw new Error(constant_1.default.errNotNullableValuer);
                };
                return createValuer(getter);
            }
            exports["default"] = {
                newValuer,
                newValuerWithGetter
            };
            function createValuer(getter) {
                return Object.defineProperty({}, "defaultGetter", {
                    value: getter,
                    writable: false,
                    configurable: false
                });
            }
        },
        "../shared/node_modules/@funnyecho/logger/dist/entry.js": (__unused_webpack_module, exports) => {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
        },
        "../shared/node_modules/@funnyecho/logger/dist/error.js": (__unused_webpack_module, exports) => {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var errNilEntry = "FA_LOGGER_NIL_ENTRY";
            var errNilFieldKey = "FA_LOGGER_NIL_FIELD_KEY";
            var errNilFieldValue = "FA_LOGGER_NIL_FIELD_VALUE";
            exports["default"] = {
                errNilEntry,
                errNilFieldKey,
                errNilFieldValue
            };
        },
        "../shared/node_modules/@funnyecho/logger/dist/field.js": function(__unused_webpack_module, exports, __webpack_require__) {
            "use strict";
            var __importDefault = this && this.__importDefault || function(mod) {
                return mod && mod.__esModule ? mod : {
                    default: mod
                };
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var error_1 = __importDefault(__webpack_require__("../shared/node_modules/@funnyecho/logger/dist/error.js"));
            function getFieldKey(field) {
                return null == (null === field || void 0 === field ? void 0 : field.key) ? "" : String(field.key);
            }
            function getFieldValue(field) {
                return null === field || void 0 === field ? void 0 : field.value;
            }
            function marshalFieldList() {
                var values = [];
                for (var _i = 0; _i < arguments.length; _i++) values[_i] = arguments[_i];
                var fields = [];
                var _loop_1 = function(i) {
                    var item = values[i];
                    if (item) {
                        var itemType = typeof item;
                        if ("string" === itemType) {
                            i += 1;
                            if (i >= values.length) fields.push({
                                key: item,
                                value: error_1.default.errNilFieldValue
                            }); else fields.push({
                                key: item,
                                value: values[i]
                            });
                        } else if (isPlainObject(item)) Object.keys(item).forEach((function(key) {
                            fields.push({
                                key,
                                value: item[key]
                            });
                        })); else fields.push({
                            key: "",
                            value: item
                        });
                    }
                    out_i_1 = i;
                };
                var out_i_1;
                for (var i = 0; i < values.length; ++i) {
                    _loop_1(i);
                    i = out_i_1;
                }
                return fields;
            }
            function mergeFieldList() {
                var list = [];
                for (var _i = 0; _i < arguments.length; _i++) list[_i] = arguments[_i];
                return list.reduce((function(result, l) {
                    if (!Array.isArray(l)) return result;
                    return result.concat(l || []);
                }), []);
            }
            function mapFieldList(fields) {
                var record = {};
                var extra = [];
                (fields || []).forEach((function(field) {
                    var key = getFieldKey(field);
                    var value = getFieldValue(field);
                    if (!key) extra.push(value); else record[key] = value;
                }));
                if (extra.length > 0) Object.assign(record, {
                    __extra__: extra
                });
                return record;
            }
            exports["default"] = {
                getFieldKey,
                getFieldValue,
                marshalFieldList,
                mergeFieldList,
                mapFieldList
            };
            function isPlainObject(obj) {
                if ("object" == typeof obj && null !== obj) {
                    if ("function" == typeof Object.getPrototypeOf) {
                        var proto = Object.getPrototypeOf(obj);
                        return proto === Object.prototype || null === proto;
                    }
                    return "[object Object]" == Object.prototype.toString.call(obj);
                }
                return false;
            }
        },
        "../shared/node_modules/@funnyecho/logger/dist/index.js": function(__unused_webpack_module, exports, __webpack_require__) {
            "use strict";
            var __assign = this && this.__assign || function() {
                __assign = Object.assign || function(t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                        s = arguments[i];
                        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                    }
                    return t;
                };
                return __assign.apply(this, arguments);
            };
            var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
                if (void 0 === k2) k2 = k;
                Object.defineProperty(o, k2, {
                    enumerable: true,
                    get: function() {
                        return m[k];
                    }
                });
            } : function(o, m, k, k2) {
                if (void 0 === k2) k2 = k;
                o[k2] = m[k];
            });
            var __exportStar = this && this.__exportStar || function(m, exports) {
                for (var p in m) if ("default" !== p && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
            };
            var __importDefault = this && this.__importDefault || function(mod) {
                return mod && mod.__esModule ? mod : {
                    default: mod
                };
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var error_1 = __importDefault(__webpack_require__("../shared/node_modules/@funnyecho/logger/dist/error.js"));
            var field_1 = __importDefault(__webpack_require__("../shared/node_modules/@funnyecho/logger/dist/field.js"));
            var level_1 = __importDefault(__webpack_require__("../shared/node_modules/@funnyecho/logger/dist/level.js"));
            var logger_1 = __importDefault(__webpack_require__("../shared/node_modules/@funnyecho/logger/dist/logger.js"));
            var loggerConfig_1 = __importDefault(__webpack_require__("../shared/node_modules/@funnyecho/logger/dist/loggerConfig.js"));
            var transport_1 = __importDefault(__webpack_require__("../shared/node_modules/@funnyecho/logger/dist/transport.js"));
            __exportStar(__webpack_require__("../shared/node_modules/@funnyecho/logger/dist/entry.js"), exports);
            __exportStar(__webpack_require__("../shared/node_modules/@funnyecho/logger/dist/error.js"), exports);
            __exportStar(__webpack_require__("../shared/node_modules/@funnyecho/logger/dist/field.js"), exports);
            __exportStar(__webpack_require__("../shared/node_modules/@funnyecho/logger/dist/kvt.js"), exports);
            __exportStar(__webpack_require__("../shared/node_modules/@funnyecho/logger/dist/level.js"), exports);
            __exportStar(__webpack_require__("../shared/node_modules/@funnyecho/logger/dist/logger.js"), exports);
            __exportStar(__webpack_require__("../shared/node_modules/@funnyecho/logger/dist/loggerConfig.js"), exports);
            __exportStar(__webpack_require__("../shared/node_modules/@funnyecho/logger/dist/transport.js"), exports);
            exports["default"] = __assign(__assign(__assign(__assign(__assign(__assign({}, error_1.default), field_1.default), level_1.default), loggerConfig_1.default), logger_1.default), transport_1.default);
        },
        "../shared/node_modules/@funnyecho/logger/dist/kvt.js": (__unused_webpack_module, exports) => {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
        },
        "../shared/node_modules/@funnyecho/logger/dist/level.js": (__unused_webpack_module, exports) => {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.LevelEnum = void 0;
            var LevelEnum;
            (function(LevelEnum) {
                LevelEnum[LevelEnum["fatal"] = 0] = "fatal";
                LevelEnum[LevelEnum["error"] = 1] = "error";
                LevelEnum[LevelEnum["info"] = 2] = "info";
                LevelEnum[LevelEnum["debug"] = 3] = "debug";
            })(LevelEnum = exports.LevelEnum || (exports.LevelEnum = {}));
            exports["default"] = {
                LevelEnum
            };
        },
        "../shared/node_modules/@funnyecho/logger/dist/logger.js": function(__unused_webpack_module, exports, __webpack_require__) {
            "use strict";
            var __spreadArray = this && this.__spreadArray || function(to, from) {
                for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];
                return to;
            };
            var __importDefault = this && this.__importDefault || function(mod) {
                return mod && mod.__esModule ? mod : {
                    default: mod
                };
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var loggerConfig_1 = __importDefault(__webpack_require__("../shared/node_modules/@funnyecho/logger/dist/loggerConfig.js"));
            var level_1 = __importDefault(__webpack_require__("../shared/node_modules/@funnyecho/logger/dist/level.js"));
            var field_1 = __importDefault(__webpack_require__("../shared/node_modules/@funnyecho/logger/dist/field.js"));
            var transport_1 = __importDefault(__webpack_require__("../shared/node_modules/@funnyecho/logger/dist/transport.js"));
            var context_1 = __importDefault(__webpack_require__("../shared/node_modules/@funnyecho/context/dist/index.js"));
            function withLogger(logger) {
                var withConfig = [];
                for (var _i = 1; _i < arguments.length; _i++) withConfig[_i - 1] = arguments[_i];
                return newLogger(loggerConfig_1.default.withLoggerConfig.apply(loggerConfig_1.default, __spreadArray([ copyLoggerConfig(logger) ], withConfig)));
            }
            function newNopLogger() {
                return newLogger(loggerConfig_1.default.newNopLoggerConfig());
            }
            var _globalLogger = newNopLogger();
            function takeGlobalLogger() {
                return _globalLogger;
            }
            function withGlobalLogger(_logger) {
                _globalLogger = _logger;
            }
            exports["default"] = {
                withLogger,
                newNopLogger,
                takeGlobalLogger,
                withGlobalLogger
            };
            function newLogger(config) {
                var owner = config.owner, transportList = config.transportList;
                function marshalLogExtra(extra) {
                    return field_1.default.marshalFieldList.apply(field_1.default, extra);
                }
                function log(entry) {
                    try {
                        transport_1.default.traverseTransportList(context_1.default.background(), entry, transportList);
                    } catch (e) {
                        console.error("failed to log entry", "entry", entry, "error", e);
                    }
                }
                function debug(msg) {
                    var entry = {
                        owner,
                        level: level_1.default.LevelEnum.debug,
                        message: msg,
                        fields: marshalLogExtra(Array.from(arguments).slice(1))
                    };
                    log(entry);
                }
                function info(msg) {
                    var entry = {
                        owner,
                        level: level_1.default.LevelEnum.info,
                        message: msg,
                        fields: marshalLogExtra(Array.from(arguments).slice(1))
                    };
                    log(entry);
                }
                function error(msg) {
                    var entry = {
                        owner,
                        level: level_1.default.LevelEnum.error,
                        message: msg,
                        fields: marshalLogExtra(Array.from(arguments).slice(1))
                    };
                    log(entry);
                }
                return {
                    get owner() {
                        return owner;
                    },
                    get transportList() {
                        return transportList;
                    },
                    debug,
                    info,
                    error
                };
            }
            function copyLoggerConfig(logger) {
                if (!logger) return loggerConfig_1.default.newNopLoggerConfig();
                return {
                    owner: logger.owner,
                    transportList: logger.transportList
                };
            }
        },
        "../shared/node_modules/@funnyecho/logger/dist/loggerConfig.js": function(__unused_webpack_module, exports) {
            "use strict";
            var __spreadArray = this && this.__spreadArray || function(to, from) {
                for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];
                return to;
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            function newNopLoggerConfig() {
                return {
                    owner: "",
                    transportList: []
                };
            }
            function withLoggerConfig(config) {
                var withConfigs = [];
                for (var _i = 1; _i < arguments.length; _i++) withConfigs[_i - 1] = arguments[_i];
                if (!config) config = newNopLoggerConfig();
                for (var i = 0; i < withConfigs.length; ++i) {
                    var withFn = withConfigs[i];
                    if ("function" === typeof withFn) {
                        var c = withFn(config);
                        if (c) config = c;
                    }
                }
                return config;
            }
            function pipeOwner(owner) {
                return function(config) {
                    if (owner) config.owner = [ config.owner, owner ].join(".");
                };
            }
            function withOwner(owner) {
                return function(config) {
                    if (owner) config.owner = "" + owner;
                };
            }
            function pipeTransport() {
                var transportList = [];
                for (var _i = 0; _i < arguments.length; _i++) transportList[_i] = arguments[_i];
                return function(config) {
                    config.transportList = __spreadArray(__spreadArray([], config.transportList || []), transportList.filter((function(v) {
                        return v;
                    })));
                };
            }
            exports["default"] = {
                newNopLoggerConfig,
                withLoggerConfig,
                pipeOwner,
                withOwner,
                pipeTransport
            };
        },
        "../shared/node_modules/@funnyecho/logger/dist/transport.js": (__unused_webpack_module, exports) => {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            function traverseTransportWalkerList(ctx, entry, list) {
                if (!ctx || !Array.isArray(list) || !entry) return;
                for (var i = 0; i < list.length; ++i) {
                    var walker = list[i];
                    if ("function" === typeof walker) {
                        var result = walker(ctx, entry);
                        if (Array.isArray(result)) ctx = result[0], entry = result[1]; else if (false === result) return false;
                    }
                }
                return [ ctx, entry ];
            }
            function traverseCapturedTransportList(ctx, entry, list) {
                if (!ctx || !Array.isArray(list) || !entry) return;
                for (var i = 0; i < list.length; ++i) {
                    var transport = list[i];
                    if (transport) {
                        var walker = void 0;
                        if ("function" !== typeof transport) walker = transport.capture; else walker = transport;
                        if ("function" === typeof walker) {
                            var result = walker(ctx, entry);
                            if (Array.isArray(result)) ctx = result[0], entry = result[1]; else if (false === result) return false;
                        }
                    }
                }
                return [ ctx, entry ];
            }
            function traverseBubbledTransportList(ctx, entry, list) {
                if (!ctx || !Array.isArray(list) || !entry) return;
                for (var i = list.length - 1; i >= 0; --i) {
                    var transport = list[i];
                    if (transport) {
                        var walker = void 0;
                        if ("function" !== typeof transport) walker = transport.bubble;
                        if ("function" === typeof walker) {
                            var result = walker(ctx, entry);
                            if (Array.isArray(result)) ctx = result[0], entry = result[1]; else if (false === result) return false;
                        }
                    }
                }
                return [ ctx, entry ];
            }
            function traverseTransportList(ctx, entry, list) {
                if (!ctx || !Array.isArray(list) || !entry) return entry;
                var capturedRes = traverseCapturedTransportList(ctx, entry, list);
                if (false === capturedRes) return;
                if (Array.isArray(capturedRes)) ctx = capturedRes[0], entry = capturedRes[1];
                var bubbledRes = traverseBubbledTransportList(ctx, entry, list);
                if (false === bubbledRes) return;
                if (Array.isArray(bubbledRes)) ctx = bubbledRes[0], entry = bubbledRes[1];
                return entry;
            }
            exports["default"] = {
                traverseTransportWalkerList,
                traverseTransportList,
                traverseCapturedTransportList,
                traverseBubbledTransportList
            };
        },
        "../shared/node_modules/@funnyecho/logger/dist/transports/concat.js": function(__unused_webpack_module, exports, __webpack_require__) {
            "use strict";
            var __importDefault = this && this.__importDefault || function(mod) {
                return mod && mod.__esModule ? mod : {
                    default: mod
                };
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var transport_1 = __importDefault(__webpack_require__("../shared/node_modules/@funnyecho/logger/dist/transport.js"));
            function withConcat() {
                var transportList = [];
                for (var _i = 0; _i < arguments.length; _i++) transportList[_i] = arguments[_i];
                return {
                    capture: function(ctx, entry) {
                        return transport_1.default.traverseCapturedTransportList(ctx, entry, transportList);
                    },
                    bubble: function(ctx, entry) {
                        return transport_1.default.traverseBubbledTransportList(ctx, entry, transportList);
                    }
                };
            }
            exports["default"] = {
                withConcat
            };
        },
        "../shared/node_modules/@funnyecho/logger/dist/transports/expect.js": function(__unused_webpack_module, exports, __webpack_require__) {
            "use strict";
            var __importDefault = this && this.__importDefault || function(mod) {
                return mod && mod.__esModule ? mod : {
                    default: mod
                };
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var transport_1 = __importDefault(__webpack_require__("../shared/node_modules/@funnyecho/logger/dist/transport.js"));
            function withExpect(tester, next) {
                return {
                    capture: function(ctx, entry) {
                        if (tester(ctx, entry) && null != next) return transport_1.default.traverseCapturedTransportList(ctx, entry, [ next ]);
                    },
                    bubble: function(ctx, entry) {
                        if (tester(ctx, entry) && null != next) return transport_1.default.traverseBubbledTransportList(ctx, entry, [ next ]);
                    }
                };
            }
            function withTruth(tester, next) {
                return withExpect(tester, next);
            }
            function withFalsy(tester, next) {
                return withExpect((function(ctx, entry) {
                    return !tester(ctx, entry);
                }), next);
            }
            exports["default"] = {
                withExpect,
                withTruth,
                withFalsy
            };
        },
        "../shared/node_modules/@funnyecho/logger/dist/transports/field.js": function(__unused_webpack_module, exports, __webpack_require__) {
            "use strict";
            var __importDefault = this && this.__importDefault || function(mod) {
                return mod && mod.__esModule ? mod : {
                    default: mod
                };
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var field_1 = __importDefault(__webpack_require__("../shared/node_modules/@funnyecho/logger/dist/field.js"));
            function withFields(fields) {
                return function(_, entry) {
                    entry.fields = field_1.default.mergeFieldList(entry.fields, fields);
                };
            }
            exports["default"] = {
                withFields
            };
        },
        "../shared/node_modules/@funnyecho/logger/dist/transports/index.js": function(__unused_webpack_module, exports, __webpack_require__) {
            "use strict";
            var __assign = this && this.__assign || function() {
                __assign = Object.assign || function(t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                        s = arguments[i];
                        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                    }
                    return t;
                };
                return __assign.apply(this, arguments);
            };
            var __importDefault = this && this.__importDefault || function(mod) {
                return mod && mod.__esModule ? mod : {
                    default: mod
                };
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var field_1 = __importDefault(__webpack_require__("../shared/node_modules/@funnyecho/logger/dist/transports/field.js"));
            var level_1 = __importDefault(__webpack_require__("../shared/node_modules/@funnyecho/logger/dist/transports/level.js"));
            var stdout_1 = __importDefault(__webpack_require__("../shared/node_modules/@funnyecho/logger/dist/transports/stdout.js"));
            var expect_1 = __importDefault(__webpack_require__("../shared/node_modules/@funnyecho/logger/dist/transports/expect.js"));
            var split_1 = __importDefault(__webpack_require__("../shared/node_modules/@funnyecho/logger/dist/transports/split.js"));
            var concat_1 = __importDefault(__webpack_require__("../shared/node_modules/@funnyecho/logger/dist/transports/concat.js"));
            exports["default"] = __assign(__assign(__assign(__assign(__assign(__assign({}, field_1.default), level_1.default), stdout_1.default), expect_1.default), split_1.default), concat_1.default);
        },
        "../shared/node_modules/@funnyecho/logger/dist/transports/level.js": function(__unused_webpack_module, exports, __webpack_require__) {
            "use strict";
            var __importDefault = this && this.__importDefault || function(mod) {
                return mod && mod.__esModule ? mod : {
                    default: mod
                };
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var level_1 = __importDefault(__webpack_require__("../shared/node_modules/@funnyecho/logger/dist/level.js"));
            function withLevel(level) {
                return {
                    capture: function(_, entry) {
                        if (entry && entry.level > level) return false;
                    }
                };
            }
            function withDebugLevel() {
                return withLevel(level_1.default.LevelEnum.debug);
            }
            function withInfoLevel() {
                return withLevel(level_1.default.LevelEnum.info);
            }
            exports["default"] = {
                withLevel,
                withDebugLevel,
                withInfoLevel
            };
        },
        "../shared/node_modules/@funnyecho/logger/dist/transports/split.js": function(__unused_webpack_module, exports, __webpack_require__) {
            "use strict";
            var __importDefault = this && this.__importDefault || function(mod) {
                return mod && mod.__esModule ? mod : {
                    default: mod
                };
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var transport_1 = __importDefault(__webpack_require__("../shared/node_modules/@funnyecho/logger/dist/transport.js"));
            function withSplit(tester, truth, falsy) {
                return {
                    capture: function(ctx, entry) {
                        var useTruth = !!tester(ctx, entry);
                        if (useTruth && null != truth) return transport_1.default.traverseCapturedTransportList(ctx, entry, [ truth ]);
                        if (!useTruth && null != falsy) return transport_1.default.traverseCapturedTransportList(ctx, entry, [ falsy ]);
                    },
                    bubble: function(ctx, entry) {
                        var useTruth = !!tester(ctx, entry);
                        if (useTruth && null != truth) return transport_1.default.traverseBubbledTransportList(ctx, entry, [ truth ]);
                        if (!useTruth && null != falsy) return transport_1.default.traverseBubbledTransportList(ctx, entry, [ falsy ]);
                    }
                };
            }
            exports["default"] = {
                withSplit
            };
        },
        "../shared/node_modules/@funnyecho/logger/dist/transports/stdout.js": function(__unused_webpack_module, exports, __webpack_require__) {
            "use strict";
            var __importDefault = this && this.__importDefault || function(mod) {
                return mod && mod.__esModule ? mod : {
                    default: mod
                };
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var level_1 = __importDefault(__webpack_require__("../shared/node_modules/@funnyecho/logger/dist/level.js"));
            var field_1 = __importDefault(__webpack_require__("../shared/node_modules/@funnyecho/logger/dist/field.js"));
            function withStdout() {
                return {
                    bubble: function(_, entry) {
                        var owner = entry.owner, level = entry.level, message = entry.message, fields = entry.fields;
                        var label = message + " [" + owner + "]";
                        var fieldMap = field_1.default.mapFieldList(fields);
                        var output = label + " " + JSON.stringify(fieldMap, null, 2);
                        switch (level) {
                          case level_1.default.LevelEnum.error:
                          case level_1.default.LevelEnum.fatal:
                            console.error(output);
                            break;

                          case level_1.default.LevelEnum.info:
                            console.info(output);
                            break;

                          default:
                          case level_1.default.LevelEnum.debug:
                            console.debug(output);
                        }
                    }
                };
            }
            exports["default"] = {
                withStdout
            };
        },
        "../shared/node_modules/@funnyecho/promise/dist/index.js": function(__unused_webpack_module, exports) {
            "use strict";
            var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
                function adopt(value) {
                    return value instanceof P ? value : new P((function(resolve) {
                        resolve(value);
                    }));
                }
                return new (P || (P = Promise))((function(resolve, reject) {
                    function fulfilled(value) {
                        try {
                            step(generator.next(value));
                        } catch (e) {
                            reject(e);
                        }
                    }
                    function rejected(value) {
                        try {
                            step(generator["throw"](value));
                        } catch (e) {
                            reject(e);
                        }
                    }
                    function step(result) {
                        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
                    }
                    step((generator = generator.apply(thisArg, _arguments || [])).next());
                }));
            };
            var __generator = this && this.__generator || function(thisArg, body) {
                var f, y, t, g, _ = {
                    label: 0,
                    sent: function() {
                        if (1 & t[0]) throw t[1];
                        return t[1];
                    },
                    trys: [],
                    ops: []
                };
                return g = {
                    next: verb(0),
                    throw: verb(1),
                    return: verb(2)
                }, "function" === typeof Symbol && (g[Symbol.iterator] = function() {
                    return this;
                }), g;
                function verb(n) {
                    return function(v) {
                        return step([ n, v ]);
                    };
                }
                function step(op) {
                    if (f) throw new TypeError("Generator is already executing.");
                    while (_) try {
                        if (f = 1, y && (t = 2 & op[0] ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 
                        0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                        if (y = 0, t) op = [ 2 & op[0], t.value ];
                        switch (op[0]) {
                          case 0:
                          case 1:
                            t = op;
                            break;

                          case 4:
                            _.label++;
                            return {
                                value: op[1],
                                done: false
                            };

                          case 5:
                            _.label++;
                            y = op[1];
                            op = [ 0 ];
                            continue;

                          case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;

                          default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (6 === op[0] || 2 === op[0])) {
                                _ = 0;
                                continue;
                            }
                            if (3 === op[0] && (!t || op[1] > t[0] && op[1] < t[3])) {
                                _.label = op[1];
                                break;
                            }
                            if (6 === op[0] && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2]) _.ops.pop();
                            _.trys.pop();
                            continue;
                        }
                        op = body.call(thisArg, _);
                    } catch (e) {
                        op = [ 6, e ];
                        y = 0;
                    } finally {
                        f = t = 0;
                    }
                    if (5 & op[0]) throw op[1];
                    return {
                        value: op[0] ? op[1] : void 0,
                        done: true
                    };
                }
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            function resolveAfterDuration(dur) {
                return __awaiter(this, void 0, void 0, (function() {
                    return __generator(this, (function(_a) {
                        if (dur <= 0) return [ 2, Promise.resolve() ];
                        return [ 2, new Promise((function(resolve) {
                            setTimeout((function() {
                                resolve();
                            }), dur);
                        })) ];
                    }));
                }));
            }
            function resolveAfterSeconds(s) {
                return __awaiter(this, void 0, void 0, (function() {
                    return __generator(this, (function(_a) {
                        if (s <= 0) return [ 2, Promise.resolve() ];
                        return [ 2, new Promise((function(resolve) {
                            setTimeout((function() {
                                resolve();
                            }), 1e3 * s);
                        })) ];
                    }));
                }));
            }
            function resolveAfterEventBubbled($ele, eventName) {
                return __awaiter(this, void 0, void 0, (function() {
                    return __generator(this, (function(_a) {
                        return [ 2, new Promise((function(resolve) {
                            var listener = function(e) {
                                $ele.removeEventListener(eventName, listener);
                                resolve(e);
                            };
                            $ele.addEventListener(eventName, listener);
                        })) ];
                    }));
                }));
            }
            function promiseResolvable() {
                var resolver;
                var resolved = false;
                var promise = new Promise((function(res) {
                    if (resolved) res(); else resolver = res;
                }));
                var resolveFunc = function() {
                    resolved = true;
                    "function" === typeof resolver && resolver();
                };
                return [ promise, resolveFunc ];
            }
            var zombie = new Promise((function(_) {}));
            exports["default"] = {
                zombie,
                resolvable: promiseResolvable,
                resolveAfterEventBubbled,
                resolveAfterSeconds,
                resolveAfterDuration
            };
        },
        "../shared/node_modules/@funnyecho/time/dist/index.js": (__unused_webpack_module, exports) => {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var Millisecond = 1;
            var Second = 1e3 * Millisecond;
            var Minute = 60 * Second;
            var Hour = 60 * Minute;
            var Day = 24 * Hour;
            var Week = 7 * Day;
            var Time = function() {
                function Time(v) {
                    this.v = v;
                }
                Object.defineProperty(Time.prototype, "timestamp", {
                    get: function() {
                        return this.v;
                    },
                    enumerable: false,
                    configurable: true
                });
                Time.prototype.add = function(d) {
                    return new Time(this.v + d);
                };
                Time.prototype.sub = function(d) {
                    return new Time(this.v - d);
                };
                Time.prototype.duration = function(t) {
                    return this.v - t.timestamp;
                };
                return Time;
            }();
            function time(v) {
                return new Time(v);
            }
            function now() {
                return time(Date.now());
            }
            function later(dur) {
                return now().add(dur);
            }
            function former(dur) {
                return now().sub(dur);
            }
            exports["default"] = {
                time,
                now,
                later,
                former,
                Millisecond,
                Second,
                Minute,
                Hour,
                Day,
                Week
            };
        },
        "../shared/node_modules/@payment/gateway-sdk/dist/index.js": function(__unused_webpack_module, exports, __webpack_require__) {
            !function(e, t) {
                true ? t(exports) : 0;
            }(0, (function(e) {
                "use strict";
                var t = function(e, n) {
                    return (t = Object.setPrototypeOf || {
                        __proto__: []
                    } instanceof Array && function(e, t) {
                        e.__proto__ = t;
                    } || function(e, t) {
                        for (var n in t) t.hasOwnProperty(n) && (e[n] = t[n]);
                    })(e, n);
                };
                function n(e, n) {
                    function i() {
                        this.constructor = e;
                    }
                    t(e, n), e.prototype = null === n ? Object.create(n) : (i.prototype = n.prototype, 
                    new i);
                }
                var i = function() {
                    return (i = Object.assign || function(e) {
                        for (var t, n = 1, i = arguments.length; n < i; n++) for (var a in t = arguments[n]) Object.prototype.hasOwnProperty.call(t, a) && (e[a] = t[a]);
                        return e;
                    }).apply(this, arguments);
                };
                function a(e, t, n, i) {
                    return new (n || (n = Promise))((function(a, o) {
                        function l(e) {
                            try {
                                d(i.next(e));
                            } catch (e) {
                                o(e);
                            }
                        }
                        function r(e) {
                            try {
                                d(i.throw(e));
                            } catch (e) {
                                o(e);
                            }
                        }
                        function d(e) {
                            var t;
                            e.done ? a(e.value) : (t = e.value, t instanceof n ? t : new n((function(e) {
                                e(t);
                            }))).then(l, r);
                        }
                        d((i = i.apply(e, t || [])).next());
                    }));
                }
                function o(e, t) {
                    var n, i, a, o, l = {
                        label: 0,
                        sent: function() {
                            if (1 & a[0]) throw a[1];
                            return a[1];
                        },
                        trys: [],
                        ops: []
                    };
                    return o = {
                        next: r(0),
                        throw: r(1),
                        return: r(2)
                    }, "function" == typeof Symbol && (o[Symbol.iterator] = function() {
                        return this;
                    }), o;
                    function r(o) {
                        return function(r) {
                            return function(o) {
                                if (n) throw new TypeError("Generator is already executing.");
                                for (;l; ) try {
                                    if (n = 1, i && (a = 2 & o[0] ? i.return : o[0] ? i.throw || ((a = i.return) && a.call(i), 
                                    0) : i.next) && !(a = a.call(i, o[1])).done) return a;
                                    switch (i = 0, a && (o = [ 2 & o[0], a.value ]), o[0]) {
                                      case 0:
                                      case 1:
                                        a = o;
                                        break;

                                      case 4:
                                        return l.label++, {
                                            value: o[1],
                                            done: !1
                                        };

                                      case 5:
                                        l.label++, i = o[1], o = [ 0 ];
                                        continue;

                                      case 7:
                                        o = l.ops.pop(), l.trys.pop();
                                        continue;

                                      default:
                                        if (!(a = l.trys, (a = a.length > 0 && a[a.length - 1]) || 6 !== o[0] && 2 !== o[0])) {
                                            l = 0;
                                            continue;
                                        }
                                        if (3 === o[0] && (!a || o[1] > a[0] && o[1] < a[3])) {
                                            l.label = o[1];
                                            break;
                                        }
                                        if (6 === o[0] && l.label < a[1]) {
                                            l.label = a[1], a = o;
                                            break;
                                        }
                                        if (a && l.label < a[2]) {
                                            l.label = a[2], l.ops.push(o);
                                            break;
                                        }
                                        a[2] && l.ops.pop(), l.trys.pop();
                                        continue;
                                    }
                                    o = t.call(e, l);
                                } catch (e) {
                                    o = [ 6, e ], i = 0;
                                } finally {
                                    n = a = 0;
                                }
                                if (5 & o[0]) throw o[1];
                                return {
                                    value: o[0] ? o[1] : void 0,
                                    done: !0
                                };
                            }([ o, r ]);
                        };
                    }
                }
                const l = new Set([ "a", "altGlyph", "altGlyphDef", "altGlyphItem", "animate", "animateColor", "animateMotion", "animateTransform", "animation", "audio", "canvas", "circle", "clipPath", "color-profile", "cursor", "defs", "desc", "discard", "ellipse", "feBlend", "feColorMatrix", "feComponentTransfer", "feComposite", "feConvolveMatrix", "feDiffuseLighting", "feDisplacementMap", "feDistantLight", "feDropShadow", "feFlood", "feFuncA", "feFuncB", "feFuncG", "feFuncR", "feGaussianBlur", "feImage", "feMerge", "feMergeNode", "feMorphology", "feOffset", "fePointLight", "feSpecularLighting", "feSpotLight", "feTile", "feTurbulence", "filter", "font", "font-face", "font-face-format", "font-face-name", "font-face-src", "font-face-uri", "foreignObject", "g", "glyph", "glyphRef", "handler", "hkern", "iframe", "image", "line", "linearGradient", "listener", "marker", "mask", "metadata", "missing-glyph", "mpath", "path", "pattern", "polygon", "polyline", "prefetch", "radialGradient", "rect", "script", "set", "solidColor", "stop", "style", "svg", "switch", "symbol", "tbreak", "text", "textArea", "textPath", "title", "tref", "tspan", "unknown", "use", "video", "view", "vkern" ]);
                l.delete("a"), l.delete("audio"), l.delete("canvas"), l.delete("iframe"), l.delete("script"), 
                l.delete("video");
                const r = /acit|ex(?:s|g|n|p|$)|rph|ows|mnc|ntw|ine[ch]|zoo|^ord/i, d = (e, t) => {
                    for (const [n, i] of Object.entries(t)) n.startsWith("-") ? e.style.setProperty(n, i) : "number" != typeof i || r.test(n) ? e.style[n] = i : e.style[n] = i + "px";
                }, s = e => "string" == typeof e ? l.has(e) ? document.createElementNS("http://www.w3.org/2000/svg", e) : document.createElement(e) : (e => e === DocumentFragment)(e) ? document.createDocumentFragment() : e(e.defaultProps), u = (e, t, n) => {
                    null != n && (/^xlink[AHRST]/.test(t) ? e.setAttributeNS("http://www.w3.org/1999/xlink", t.replace("xlink", "xlink:").toLowerCase(), n) : e.setAttribute(t, n));
                }, c = (e, t) => {
                    for (const n of t) n instanceof Node ? e.appendChild(n) : Array.isArray(n) ? c(e, n) : "boolean" != typeof n && null != n && e.appendChild(document.createTextNode(n));
                }, p = (e, t, ...n) => {
                    var i;
                    const a = s(e);
                    if (c(a, n), a instanceof DocumentFragment || !t) return a;
                    for (let [e, n] of Object.entries(t)) if ("htmlFor" === e && (e = "for"), "class" === e || "className" === e) {
                        const e = null !== (i = a.getAttribute("class")) && void 0 !== i ? i : "";
                        u(a, "class", (e + " " + String(n)).trim());
                    } else if ("style" === e) d(a, n); else if (e.startsWith("on")) {
                        const t = e.slice(2).toLowerCase().replace(/^-/, "");
                        a.addEventListener(t, n);
                    } else "dangerouslySetInnerHTML" === e && "__html" in n ? a.innerHTML = n.__html : "key" !== e && !1 !== n && u(a, e, !0 === n ? "" : n);
                    return a;
                };
                var v = function() {
                    function e() {}
                    return e.prototype.renderToDom = function(e, t) {
                        t.length > 0 && document.querySelector("#" + t) ? (console.log("将挂载到 DOM id 为 " + t + " 的节点上"), 
                        document.querySelector("#" + t).appendChild(e)) : (console.log("domId 无效，将挂载到 body "), 
                        document.querySelector("body").append(e));
                    }, e;
                }();
                "undefined" != typeof globalThis ? globalThis : "undefined" != typeof window ? window : "undefined" != typeof __webpack_require__.g ? __webpack_require__.g : "undefined" != typeof self && self;
                function m(e, t) {
                    return e(t = {
                        exports: {}
                    }, t.exports), t.exports;
                }
                var y = m((function(e, t) {
                    e.exports = function() {
                        var e = function() {}, t = {}, n = {}, i = {};
                        function a(e, t) {
                            if (e) {
                                var a = i[e];
                                if (n[e] = t, a) for (;a.length; ) a[0](e, t), a.splice(0, 1);
                            }
                        }
                        function o(t, n) {
                            t.call && (t = {
                                success: t
                            }), n.length ? (t.error || e)(n) : (t.success || e)(t);
                        }
                        function l(t, n, i, a) {
                            var o, r, d = document, s = i.async, u = (i.numRetries || 0) + 1, c = i.before || e, p = t.replace(/[\?|#].*$/, ""), v = t.replace(/^(css|img)!/, "");
                            a = a || 0, /(^css!|\.css$)/.test(p) ? ((r = d.createElement("link")).rel = "stylesheet", 
                            r.href = v, (o = "hideFocus" in r) && r.relList && (o = 0, r.rel = "preload", r.as = "style")) : /(^img!|\.(png|gif|jpg|svg|webp)$)/.test(p) ? (r = d.createElement("img")).src = v : ((r = d.createElement("script")).src = t, 
                            r.async = void 0 === s || s), r.onload = r.onerror = r.onbeforeload = function(e) {
                                var d = e.type[0];
                                if (o) try {
                                    r.sheet.cssText.length || (d = "e");
                                } catch (e) {
                                    18 != e.code && (d = "e");
                                }
                                if ("e" == d) {
                                    if ((a += 1) < u) return l(t, n, i, a);
                                } else if ("preload" == r.rel && "style" == r.as) return r.rel = "stylesheet";
                                n(t, d, e.defaultPrevented);
                            }, !1 !== c(t, r) && d.head.appendChild(r);
                        }
                        function r(e, n, i) {
                            var r, d;
                            if (n && n.trim && (r = n), d = (r ? i : n) || {}, r) {
                                if (r in t) throw "LoadJS";
                                t[r] = !0;
                            }
                            function s(t, n) {
                                !function(e, t, n) {
                                    var i, a, o = (e = e.push ? e : [ e ]).length, r = o, d = [];
                                    for (i = function(e, n, i) {
                                        if ("e" == n && d.push(e), "b" == n) {
                                            if (!i) return;
                                            d.push(e);
                                        }
                                        --o || t(d);
                                    }, a = 0; a < r; a++) l(e[a], i, n);
                                }(e, (function(e) {
                                    o(d, e), t && o({
                                        success: t,
                                        error: n
                                    }, e), a(r, e);
                                }), d);
                            }
                            if (d.returnPromise) return new Promise(s);
                            s();
                        }
                        return r.ready = function(e, t) {
                            return function(e, t) {
                                e = e.push ? e : [ e ];
                                var a, o, l, r = [], d = e.length, s = d;
                                for (a = function(e, n) {
                                    n.length && r.push(e), --s || t(r);
                                }; d--; ) o = e[d], (l = n[o]) ? a(o, l) : (i[o] = i[o] || []).push(a);
                            }(e, (function(e) {
                                o(t, e);
                            })), r;
                        }, r.done = function(e) {
                            a(e, []);
                        }, r.reset = function() {
                            t = {}, n = {}, i = {};
                        }, r.isDefined = function(e) {
                            return e in t;
                        }, r;
                    }();
                })), h = function(e) {
                    function t(t, n) {
                        var i, l, r = e.call(this) || this;
                        console.log("publicKey", t, "initialData", n), r.publicKey = t, r.initialData = n;
                        var d = (new Date).getTime();
                        r.renderHtml(), y([ "https://2pay-js.2checkout.com/v1/2pay.js" ], (function() {
                            var e, i, l, d, s, u;
                            console.log("--------2checkout.js loaded-------"), r.jsPaymentClient = new TwoPayClient(t.key), 
                            n.language && r.jsPaymentClient.setup.setLanguage(n.language), r.component = r.jsPaymentClient.components.create("card", (e = n.styleOption, 
                            i = null == e ? void 0 : e.commonStyle, l = null == e ? void 0 : e.componentStyle, 
                            d = null == l ? void 0 : l.cardInputStyle, s = null == l ? void 0 : l.expirationInputStyle, 
                            u = null == l ? void 0 : l.cvvInputStyle, {
                                margin: 0,
                                fontFamily: (null == i ? void 0 : i.fontFamily) || "Helvetica, sans-serif",
                                fontSize: (null == i ? void 0 : i.fontSize) || "1rem",
                                fontWeight: (null == i ? void 0 : i.fontWeight) || "400",
                                color: (null == i ? void 0 : i.color) || "#212529",
                                textAlign: (null == i ? void 0 : i.textAlign) || "left",
                                backgroundColor: (null == i ? void 0 : i.backgroundColor) || "#ffffff",
                                "*": {
                                    boxSizing: (null == i ? void 0 : i.boxSizing) || "border-box"
                                },
                                ".card-number .control-label": (null == d ? void 0 : d.labelStyle) || {},
                                ".card-number .input-wrapper": (null == d ? void 0 : d.inputWrapperStyle) || {},
                                ".card-number .form-control": (null == d ? void 0 : d.inputStyle) || {},
                                ".card-number .validation-message": (null == d ? void 0 : d.messageStyle) || {},
                                ".card-expiration-date .control-label": (null == s ? void 0 : s.labelStyle) || {},
                                ".card-expiration-date .input-wrapper": (null == s ? void 0 : s.inputWrapperStyle) || {},
                                ".card-expiration-date .form-control": (null == s ? void 0 : s.inputStyle) || {},
                                ".card-expiration-date .validation-message": (null == s ? void 0 : s.messageStyle) || {},
                                ".card-security-code .control-label": (null == u ? void 0 : u.labelStyle) || {},
                                ".card-security-code .input-wrapper": (null == u ? void 0 : u.inputWrapperStyle) || {},
                                ".card-security-code .form-control": (null == u ? void 0 : u.inputStyle) || {},
                                ".card-security-code .validation-message": (null == u ? void 0 : u.messageStyle) || {},
                                ".no-gutters": {
                                    marginRight: 0,
                                    marginLeft: 0
                                },
                                ".row": {
                                    display: "flex",
                                    flexWrap: "wrap"
                                },
                                ".col": {
                                    flexBasis: "0",
                                    flexGrow: "1",
                                    maxWidth: "100%",
                                    padding: "0",
                                    position: "relative",
                                    width: "100%"
                                },
                                div: {
                                    display: "block"
                                },
                                ".field-container": {
                                    paddingBottom: "14px"
                                },
                                ".field-wrapper": {
                                    paddingRight: "25px"
                                },
                                ".input-wrapper": {
                                    position: "relative"
                                },
                                label: {
                                    display: "inline-block",
                                    marginBottom: "9px",
                                    color: "#313131",
                                    fontWeight: "300",
                                    fontSize: "14px",
                                    lineHeight: "17px"
                                },
                                input: {
                                    outline: "none",
                                    position: "absolute",
                                    overflow: "visible",
                                    margin: 0,
                                    fontFamily: "inherit",
                                    display: "block",
                                    width: "100%",
                                    height: "42px",
                                    padding: "10px 12px",
                                    fontSize: "18px",
                                    fontWeight: "400",
                                    lineHeight: "22px",
                                    color: "#313131",
                                    backgroundColor: "#fff",
                                    backgroundClip: "padding-box",
                                    border: "1px solid #CBCBCB",
                                    borderRadius: "3px",
                                    transition: "border-color .15s ease-in-out,box-shadow .15s ease-in-out",
                                    ontline: "0"
                                },
                                ".form-control": {
                                    position: "relative"
                                },
                                "input:focus": {
                                    border: "1px solid #5D5D5D",
                                    backgroundColor: "#FFFDF2"
                                },
                                ".is-error input": {
                                    border: "1px solid #D9534F"
                                },
                                ".is-error input:focus": {
                                    backgroundColor: "#D9534F0B"
                                },
                                ".is-valid input": {
                                    border: "1px solid #1BB43F"
                                },
                                ".is-valid input:focus": {
                                    backgroundColor: "#1BB43F0B"
                                },
                                ".validation-message": {
                                    color: "#D9534F",
                                    fontSize: "10px",
                                    fontStyle: "italic",
                                    marginTop: "6px",
                                    marginBottom: "-5px",
                                    display: "block",
                                    lineHeight: "1"
                                },
                                ".card-expiration-date": {
                                    paddingRight: ".5rem"
                                },
                                ".is-empty input": {
                                    color: "#EBEBEB"
                                },
                                ".lock-icon": {
                                    top: "calc(50% - 7px)",
                                    right: "10px"
                                },
                                ".valid-icon": {
                                    top: "calc(50% - 8px)",
                                    right: "-25px"
                                },
                                ".error-icon": {
                                    top: "calc(50% - 8px)",
                                    right: " -25px"
                                },
                                ".card-icon": {
                                    top: "calc(50% - 10px)",
                                    left: "10px",
                                    display: "none"
                                },
                                ".is-empty .card-icon": {
                                    display: "block"
                                },
                                ".is-focused .card-icon": {
                                    display: "none"
                                },
                                ".card-type-icon": {
                                    right: "30px",
                                    display: "block"
                                },
                                ".card-type-icon.visa": {
                                    top: "calc(50% - 14px)"
                                },
                                ".card-type-icon.mastercard": {
                                    top: "calc(50% - 14.5px)"
                                },
                                ".card-type-icon.amex": {
                                    top: "calc(50% - 14px)"
                                },
                                ".card-type-icon.discover": {
                                    top: "calc(50% - 14px)"
                                },
                                ".card-type-icon.jcb": {
                                    top: "calc(50% - 14px)"
                                },
                                ".card-type-icon.dankort": {
                                    top: "calc(50% - 14px)"
                                },
                                ".card-type-icon.cartebleue": {
                                    top: "calc(50% - 14px)"
                                },
                                ".card-type-icon.diners": {
                                    top: "calc(50% - 14px)"
                                },
                                ".card-type-icon.elo": {
                                    top: "calc(50% - 14px)"
                                }
                            })), r.component.mount("#card-element"), r.initialData.btnText && document.getElementById("payment-form").addEventListener("submit", (function(e) {
                                return a(r, void 0, void 0, (function() {
                                    var t, n, i, a;
                                    return o(this, (function(o) {
                                        switch (o.label) {
                                          case 0:
                                            return e.preventDefault(), t = (null === (a = null === (i = this.initialData) || void 0 === i ? void 0 : i.fieldData) || void 0 === a ? void 0 : a.userName) || document.querySelector("#name").value, 
                                            [ 4, this.generateToken(this.jsPaymentClient, this.component, t) ];

                                          case 1:
                                            return n = o.sent(), this.initialData.createToken && this.initialData.createToken(n), 
                                            [ 2 ];
                                        }
                                    }));
                                }));
                            }));
                        }));
                        var s = (new Date).getTime() - d;
                        return null === (l = null === (i = r.initialData) || void 0 === i ? void 0 : i.reportSDKLoading) || void 0 === l || l.call(i, {
                            time: s
                        }), r;
                    }
                    return n(t, e), t.prototype.generateToken = function(e, t, n) {
                        return a(this, void 0, void 0, (function() {
                            var i, a;
                            return o(this, (function(o) {
                                switch (o.label) {
                                  case 0:
                                    this.nameOnblur(), i = {
                                        name: n
                                    }, o.label = 1;

                                  case 1:
                                    return o.trys.push([ 1, 3, , 4 ]), [ 4, e.tokens.generate(t, i) ];

                                  case 2:
                                    return [ 2, o.sent() ];

                                  case 3:
                                    return a = o.sent(), [ 2, {
                                        error: a.toString().trim().split("\n")[0]
                                    } ];

                                  case 4:
                                    return [ 2 ];
                                }
                            }));
                        }));
                    }, t.prototype.getToken = function(e) {
                        return a(this, void 0, void 0, (function() {
                            var t;
                            return o(this, (function(n) {
                                switch (n.label) {
                                  case 0:
                                    return t = e || document.querySelector("#name").value, [ 4, this.generateToken(this.jsPaymentClient, this.component, t) ];

                                  case 1:
                                    return [ 2, n.sent() ];
                                }
                            }));
                        }));
                    }, t.prototype.nameOnblur = function() {
                        var e = document.querySelector("#name-field-wrapper"), t = document.querySelector("#name").value, n = document.querySelector("#name-message");
                        t ? (n.style.display = "none", e.setAttribute("class", "name-field-wrapper is-valid")) : (n.style.display = "inline-block", 
                        e.setAttribute("class", "name-field-wrapper is-error"));
                    }, t.prototype.renderHtml = function() {
                        var e, t, n, a, o, l, r, d, s = function(e) {
                            var t, n, a, o, l, r, d, s, u, c;
                            return {
                                common: (null == e ? void 0 : e.commonStyle) || {},
                                form: i({
                                    fontFamily: "Helvetica, sans-serif"
                                }, (null === (t = null == e ? void 0 : e.componentStyle) || void 0 === t ? void 0 : t.formStyle) || {}),
                                name: {
                                    wrapper: i({
                                        paddingBottom: "14px",
                                        paddingRight: "25px"
                                    }, (null === (a = null === (n = null == e ? void 0 : e.componentStyle) || void 0 === n ? void 0 : n.nameInputStyle) || void 0 === a ? void 0 : a.inputWrapperStyle) || {}),
                                    label: i({
                                        display: "inline-block",
                                        marginBottom: "9px",
                                        color: "#313131",
                                        fontSize: "14px",
                                        fontWeight: "300",
                                        lineHeight: "17px"
                                    }, (null === (l = null === (o = null == e ? void 0 : e.componentStyle) || void 0 === o ? void 0 : o.nameInputStyle) || void 0 === l ? void 0 : l.labelStyle) || {}),
                                    input: i({
                                        padding: "10px 12px",
                                        outline: "none",
                                        margin: 0,
                                        fontFamily: "inherit",
                                        display: "block",
                                        width: "100%",
                                        height: "42px",
                                        fontSize: "18px",
                                        fontWeight: "400",
                                        lineHeight: "22px",
                                        color: "#313131",
                                        backgroundClip: "padding-box",
                                        borderRadius: "3px",
                                        transition: "border-color .15s ease-in-out,box-shadow .15s ease-in-out",
                                        ontline: "0"
                                    }, (null === (d = null === (r = null == e ? void 0 : e.componentStyle) || void 0 === r ? void 0 : r.nameInputStyle) || void 0 === d ? void 0 : d.inputStyle) || {}),
                                    message: i({
                                        display: "none",
                                        color: "#D9534F",
                                        fontSize: "10px",
                                        fontStyle: "italic",
                                        marginTop: "6px",
                                        marginBottom: "-5px",
                                        lineHeight: "1"
                                    }, (null === (u = null === (s = null == e ? void 0 : e.componentStyle) || void 0 === s ? void 0 : s.nameInputStyle) || void 0 === u ? void 0 : u.messageStyle) || {})
                                },
                                submit: {
                                    wrapper: {
                                        paddingRight: "25px",
                                        width: "100%",
                                        textAlign: "center"
                                    },
                                    button: i({
                                        color: "#fff",
                                        backgroundColor: "#007bff",
                                        borderColor: "#007bff",
                                        display: "inline-block",
                                        fontWeight: "400",
                                        textAlign: "center",
                                        verticalAlign: "middle",
                                        border: "1px solid transparent",
                                        padding: ".375rem .75rem",
                                        fontSize: "1rem",
                                        lineHeight: "1.5",
                                        borderRadius: ".25rem"
                                    }, (null === (c = null == e ? void 0 : e.componentStyle) || void 0 === c ? void 0 : c.btnStyle) || {})
                                }
                            };
                        }(null === (e = this.initialData) || void 0 === e ? void 0 : e.styleOption), u = {
                            nameOnblur: this.nameOnblur,
                            userNamePlaceholder: null === (n = null === (t = this.initialData) || void 0 === t ? void 0 : t.placeholder) || void 0 === n ? void 0 : n.userNamePlaceholder,
                            nameInputText: null === (o = null === (a = this.initialData) || void 0 === a ? void 0 : a.label) || void 0 === o ? void 0 : o.userNameLabel,
                            submitBtnText: null === (l = this.initialData) || void 0 === l ? void 0 : l.btnText,
                            nameMessageText: null === (d = null === (r = this.initialData) || void 0 === r ? void 0 : r.errorTips) || void 0 === d ? void 0 : d.userNameErrorTips,
                            style: s
                        };
                        this.renderToDom(function(e) {
                            return p("div", {
                                className: "two-checkout",
                                style: e.style.common
                            }, p("div", {
                                dangerouslySetInnerHTML: {
                                    __html: "<style>\n        .two-checkout * {\n          box-sizing: border-box;\n        }\n        .name-input {\n          border: 1px solid #CBCBCB;\n          background-color: #fff,\n        }\n        input:focus {\n          border          : 1px solid #5D5D5D;\n          background-color: #FFFDF2;\n        }\n        \n        .is-error input {\n          border: 1px solid #D9534F;\n        }\n        \n        .is-error input:focus {\n          background-color: #D9534F0B;\n        }\n        \n        .is-valid input {\n          border: 1px solid #1BB43F;\n        }\n        \n        .is-valid input:focus {\n          background-color: #1BB43F0B;\n        }\n                </style>"
                                }
                            }), p("form", {
                                type: "post",
                                id: "payment-form",
                                style: e.style.form
                            }, p("div", {
                                className: "twocheckout-group"
                            }, (null == e ? void 0 : e.nameInputText) ? p("div", {
                                id: "name-field-wrapper",
                                class: "name-field-wrapper",
                                style: e.style.name.wrapper
                            }, p("label", {
                                for: "name",
                                class: "name-label",
                                style: e.style.name.label
                            }, null == e ? void 0 : e.nameInputText), p("input", {
                                type: "text",
                                id: "name",
                                name: "name",
                                class: "name-input",
                                style: e.style.name.input,
                                oninput: function(e) {
                                    e.target.value = e.target.value.replace(/[1-9]/g, "");
                                },
                                placeholder: "" + ((null == e ? void 0 : e.userNamePlaceholder) || ""),
                                onblur: function() {
                                    e.nameOnblur();
                                }
                            }), p("span", {
                                id: "name-message",
                                style: e.style.name.message
                            }, e.nameMessageText || "Card holder name is empty.")) : null, p("div", {
                                id: "card-element",
                                className: "card-element"
                            }), (null == e ? void 0 : e.submitBtnText) ? p("div", {
                                style: e.style.submit.wrapper
                            }, p("button", {
                                className: "twocheckout-btn",
                                style: e.style.submit.button,
                                type: "submit"
                            }, null == e ? void 0 : e.submitBtnText)) : null)));
                        }(u), this.initialData.domId);
                    }, t;
                }(v);
                var b, f = function(e) {
                    null == e || e.commonStyle;
                    var t = null == e ? void 0 : e.componentStyle, n = null == t ? void 0 : t.formStyle, a = null == t ? void 0 : t.nameInputStyle, o = null == t ? void 0 : t.cardInputStyle, l = null == t ? void 0 : t.expirationInputStyle, r = null == t ? void 0 : t.cvvInputStyle, d = null == t ? void 0 : t.btnStyle;
                    return {
                        ebanx_payment_form: i({
                            width: "100%"
                        }, n || {}),
                        ebanx_nameInputStyle_inputWrapperStyle: i({
                            width: "100%",
                            margin: "10px 0"
                        }, (null == a ? void 0 : a.inputWrapperStyle) || {}),
                        ebanx_nameInputStyle_labelStyle: i({
                            display: "block",
                            fontWeight: 400,
                            fontSize: "15px",
                            marginBottom: "8px"
                        }, (null == a ? void 0 : a.labelStyle) || {}),
                        ebanx_nameInputStyle_inputStyle: i({
                            width: "100%",
                            padding: "18px 15px",
                            borderRadius: "6px",
                            color: "#000000",
                            background: "#F3F3F3",
                            border: "0px",
                            fontSize: "16px",
                            outline: "none"
                        }, (null == a ? void 0 : a.inputStyle) || {}),
                        ebanx_nameInputStyle_messageStyle: {},
                        ebanx_cardInputStyle_inputWrapperStyle: i({
                            width: "100%",
                            margin: "10px 0"
                        }, (null == o ? void 0 : o.inputWrapperStyle) || {}),
                        ebanx_cardInputStyle_labelStyle: i({
                            display: "block",
                            fontWeight: 400,
                            fontSize: "15px",
                            marginBottom: "8px"
                        }, (null == o ? void 0 : o.labelStyle) || {}),
                        ebanx_cardInputStyle_inputStyle: i({
                            width: "100%",
                            padding: "18px 15px",
                            borderRadius: "6px",
                            color: "#000000",
                            background: "#F3F3F3",
                            border: "0px",
                            fontSize: "16px",
                            outline: "none"
                        }, (null == o ? void 0 : o.inputStyle) || {}),
                        ebanx_cardInputStyle_messageStyle: {},
                        ebanx_flex_style: {
                            display: "flex",
                            justifyContent: "space-between",
                            alignItems: "center"
                        },
                        ebanx_expirationInputStyle_inputWrapperStyle: i({
                            width: "48%",
                            margin: "10px 0"
                        }, (null == l ? void 0 : l.inputWrapperStyle) || {}),
                        ebanx_expirationInputStyle_labelStyle: i({
                            display: "block",
                            fontWeight: 400,
                            fontSize: "15px",
                            marginBottom: "8px"
                        }, (null == l ? void 0 : l.labelStyle) || {}),
                        ebanx_expirationInputStyle_inputStyle: i({
                            width: "100%",
                            padding: "18px 15px",
                            borderRadius: "6px",
                            color: "#000000",
                            background: "#F3F3F3",
                            border: "0px",
                            fontSize: "16px",
                            outline: "none"
                        }, (null == l ? void 0 : l.inputStyle) || {}),
                        ebanx_expirationInputStyle_messageStyle: {},
                        ebanx_cvvInputStyle_inputWrapperStyle: i({
                            width: "48%",
                            margin: "10px 0"
                        }, (null == r ? void 0 : r.inputWrapperStyle) || {}),
                        ebanx_cvvInputStyle_labelStyle: i({
                            display: "block",
                            fontWeight: 400,
                            fontSize: "15px",
                            marginBottom: "8px"
                        }, (null == r ? void 0 : r.labelStyle) || {}),
                        ebanx_cvvInputStyle_inputStyle: i({
                            width: "100%",
                            padding: "18px 15px",
                            borderRadius: "6px",
                            color: "#000000",
                            background: "#F3F3F3",
                            border: "0px",
                            fontSize: "16px",
                            outline: "none"
                        }, (null == r ? void 0 : r.inputStyle) || {}),
                        ebanx_cvvInputStyle_messageStyle: {},
                        ebanx_error_tips: i(i(i(i({
                            marginTop: "-10px",
                            lineHeight: "18px",
                            minHeight: "20px",
                            color: "red"
                        }, (null == a ? void 0 : a.messageStyle) || {}), (null == o ? void 0 : o.messageStyle) || {}), (null == l ? void 0 : l.messageStyle) || {}), (null == r ? void 0 : r.messageStyle) || {}),
                        ebanx_submit_btn: i({
                            position: "relative",
                            display: "flex",
                            justifyContent: "center",
                            alignItems: "center",
                            width: "100%",
                            color: "#ffffff",
                            padding: "15px",
                            fontSize: "16px",
                            opacity: 1,
                            background: (null == d ? void 0 : d.disableBackground) || (null == d ? void 0 : d.background) || "#dddddd",
                            outline: "none",
                            border: "0px",
                            borderRadius: "6px"
                        }, d)
                    };
                }, g = function(e) {
                    function t(t, n) {
                        var i, a, o = e.call(this) || this;
                        return o.publicKey = t, o.initialData = n, o.userNameErrorTips = "", o.cardNumberErrorTips = "", 
                        o.expirationErrorTips = "", o.cvvErrorTips = "", o.userName = "", o.cardNumber = "", 
                        o.expiration = "", o.cvv = "", o.loadEBANXJS(), o.renderHtml(), (null === (i = o.initialData) || void 0 === i ? void 0 : i.isWith3DS) && o.checkoutFieldData((null === (a = o.initialData) || void 0 === a ? void 0 : a.fieldData) || {}), 
                        o;
                    }
                    return n(t, e), t.prototype.loadEBANXJS = function() {
                        var e, t, n = this, i = (new Date).getTime();
                        y([ "https://js.ebanx.com/assets/songbird/songbird-" + (null !== (t = null === (e = this.initialData) || void 0 === e ? void 0 : e.env) && void 0 !== t ? t : "dev") + ".js", "https://js.ebanx.com/ebanx-libjs-latest.min.js" ], (function() {
                            var e, t, a, o, l;
                            console.log("success", EBANX), EBANX.config.setMode("prod" === (null === (e = n.initialData) || void 0 === e ? void 0 : e.env) ? "production" : "test"), 
                            EBANX.config.setPublishableKey(n.publicKey.key), EBANX.config.setCountry((null === (a = null === (t = n.initialData) || void 0 === t ? void 0 : t.country) || void 0 === a ? void 0 : a.toLowerCase()) || "br");
                            var r = (new Date).getTime() - i;
                            null === (l = null === (o = n.initialData) || void 0 === o ? void 0 : o.reportSDKLoading) || void 0 === l || l.call(o, {
                                time: r
                            });
                        }));
                    }, t.prototype.renderHtml = function() {
                        var e, t, n, i, a, o, l = f(null === (e = this.initialData) || void 0 === e ? void 0 : e.styleOption);
                        this.renderToDom(function(e) {
                            var t, n, i, a, o, l, r, d, s, u, c, v, m, y, h, b, f, g, x, S, _, D, k, w, N, T, C, I, E, P, A, B;
                            return p("div", {
                                className: "ebanx_cover"
                            }, p("div", {
                                dangerouslySetInnerHTML: {
                                    __html: "<style>\n        .ebanx_cover * {\n          box-sizing: border-box !important;\n          margin: 0;\n          padding: 0;\n        }\n        .ebanx_cover input::placeholder{\n          color: #999999 !important;\n        }\n        </style>"
                                }
                            }), p("div", {
                                className: "ebanx_payment_form",
                                style: e.styleOption.ebanx_payment_form
                            }, !e.userName && p("div", {
                                calssName: "ebanx_nameInputStyle_inputWrapperStyle",
                                style: e.styleOption.ebanx_nameInputStyle_inputWrapperStyle
                            }, (null === (t = null == e ? void 0 : e.label) || void 0 === t ? void 0 : t.userNameLabel) && p("label", {
                                for: "ebanx_user_name",
                                className: "ebanx_nameInputStyle_labelStyle",
                                style: null === (n = e.styleOption) || void 0 === n ? void 0 : n.ebanx_nameInputStyle_labelStyle
                            }, null !== (a = null === (i = null == e ? void 0 : e.label) || void 0 === i ? void 0 : i.userNameLabel) && void 0 !== a ? a : "User Name"), p("input", {
                                placeholder: "" + (null !== (l = null === (o = null == e ? void 0 : e.placeholder) || void 0 === o ? void 0 : o.userNamePlaceholder) && void 0 !== l ? l : "User Name"),
                                type: "text",
                                id: "ebanx_user_name",
                                className: "ebanx_nameInputStyle_inputStyle",
                                style: null === (r = e.styleOption) || void 0 === r ? void 0 : r.ebanx_nameInputStyle_inputStyle,
                                onkeyup: function(t) {
                                    e.changeUserName(t, "onkeyup");
                                },
                                onblur: function(t) {
                                    e.changeUserName(t, "onblur");
                                }
                            })), p("div", {
                                className: "ebanx_cardInputStyle_inputWrapperStyle",
                                style: e.styleOption.ebanx_cardInputStyle_inputWrapperStyle
                            }, (null === (d = null == e ? void 0 : e.label) || void 0 === d ? void 0 : d.cardNumberLabel) && p("label", {
                                for: "ebanx_card_number",
                                className: "ebanx_cardInputStyle_labelStyle",
                                style: null === (s = e.styleOption) || void 0 === s ? void 0 : s.ebanx_cardInputStyle_labelStyle
                            }, null !== (c = null === (u = null == e ? void 0 : e.label) || void 0 === u ? void 0 : u.cardNumberLabel) && void 0 !== c ? c : "Card Number"), p("div", null, p("input", {
                                placeholder: "" + (null !== (m = null === (v = null == e ? void 0 : e.placeholder) || void 0 === v ? void 0 : v.cardNumberPlaceholder) && void 0 !== m ? m : "Card Number"),
                                type: "text",
                                maxlength: "23",
                                id: "ebanx_card_number",
                                className: "ebanx_cardInputStyle_inputStyle",
                                style: null === (y = e.styleOption) || void 0 === y ? void 0 : y.ebanx_cardInputStyle_inputStyle,
                                oninput: function(e) {
                                    var t, n, i, a;
                                    e.target.value = null === (a = null === (i = null === (n = null === (t = e.target.value) || void 0 === t ? void 0 : t.replace(/\D/g, "")) || void 0 === n ? void 0 : n.replace(/(\d{4})/g, "$1 ")) || void 0 === i ? void 0 : i.trim()) || void 0 === a ? void 0 : a.slice(0, 23);
                                },
                                onkeyup: function(t) {
                                    var n, i, a, o;
                                    t.target.value = null === (o = null === (a = null === (i = null === (n = t.target.value) || void 0 === n ? void 0 : n.replace(/\D/g, "")) || void 0 === i ? void 0 : i.replace(/(\d{4})/g, "$1 ")) || void 0 === a ? void 0 : a.trim()) || void 0 === o ? void 0 : o.slice(0, 23), 
                                    e.changeCardNumber(t, "onkeyup");
                                },
                                onblur: function(t) {
                                    e.changeCardNumber(t, "onblur");
                                }
                            }))), p("div", {
                                className: "ebanx_flex_style",
                                style: e.styleOption.ebanx_flex_style
                            }, p("div", {
                                className: "ebanx_expirationInputStyle_inputWrapperStyle",
                                style: e.styleOption.ebanx_expirationInputStyle_inputWrapperStyle
                            }, (null === (h = null == e ? void 0 : e.label) || void 0 === h ? void 0 : h.expirationLabel) && p("label", {
                                for: "ebanx_card_due_date",
                                className: "ebanx_expirationInputStyle_labelStyle",
                                style: null === (b = e.styleOption) || void 0 === b ? void 0 : b.ebanx_expirationInputStyle_labelStyle
                            }, null !== (g = null === (f = null == e ? void 0 : e.label) || void 0 === f ? void 0 : f.expirationLabel) && void 0 !== g ? g : "Card Due Date"), p("input", {
                                placeholder: (null !== (S = null === (x = null == e ? void 0 : e.placeholder) || void 0 === x ? void 0 : x.expiryMonthPlaceholder) && void 0 !== S ? S : "MM") + "/" + (null !== (D = null === (_ = null == e ? void 0 : e.placeholder) || void 0 === _ ? void 0 : _.expiryYearPlaceholder) && void 0 !== D ? D : "YYYY"),
                                type: "text",
                                id: "ebanx_card_due_date",
                                className: "ebanx_expirationInputStyle_inputStyle",
                                style: null === (k = e.styleOption) || void 0 === k ? void 0 : k.ebanx_expirationInputStyle_inputStyle,
                                onblur: function(t) {
                                    e.changeExpiration(t, "onblur");
                                },
                                onkeyup: function(t) {
                                    var n, i, a;
                                    t.target.value = null === (a = null === (i = null === (n = t.target.value) || void 0 === n ? void 0 : n.replace(/\D/g, "")) || void 0 === i ? void 0 : i.slice(0, 6)) || void 0 === a ? void 0 : a.replace(/^(\d{2})\/?(\d{0,})$/, (function(e, t, n) {
                                        return "" + t + (n ? "/" + n : n);
                                    })), e.changeExpiration(t, "onkeyup");
                                }
                            })), p("div", {
                                className: "ebanx_cvvInputStyle_inputWrapperStyle",
                                style: e.styleOption.ebanx_cvvInputStyle_inputWrapperStyle
                            }, (null === (w = null == e ? void 0 : e.label) || void 0 === w ? void 0 : w.cvvLabel) && p("label", {
                                for: "ebanx_card_cvv",
                                className: "ebanx_cvvInputStyle_labelStyle",
                                style: null === (N = e.styleOption) || void 0 === N ? void 0 : N.ebanx_cvvInputStyle_labelStyle
                            }, null !== (C = null === (T = null == e ? void 0 : e.label) || void 0 === T ? void 0 : T.cvvLabel) && void 0 !== C ? C : "Card Cvv"), p("input", {
                                placeholder: "" + (null !== (E = null === (I = null == e ? void 0 : e.placeholder) || void 0 === I ? void 0 : I.cvvPlaceholder) && void 0 !== E ? E : "Cvv"),
                                type: "text",
                                maxlength: "4",
                                id: "ebanx_card_cvv",
                                className: "ebanx_cvvInputStyle_inputStyle",
                                style: null === (P = e.styleOption) || void 0 === P ? void 0 : P.ebanx_cvvInputStyle_inputStyle,
                                oninput: function(e) {
                                    var t, n;
                                    e.target.value = null === (n = null === (t = e.target.value) || void 0 === t ? void 0 : t.replace(/\D/g, "")) || void 0 === n ? void 0 : n.slice(0, 4);
                                },
                                onkeyup: function(t) {
                                    var n, i;
                                    t.target.value = null === (i = null === (n = t.target.value) || void 0 === n ? void 0 : n.replace(/\D/g, "")) || void 0 === i ? void 0 : i.slice(0, 4), 
                                    e.changeCVV(t, "onkeyup");
                                },
                                onblur: function(t) {
                                    e.changeCVV(t, "onblur");
                                }
                            }))), p("div", {
                                id: "ebanx_error_tips",
                                className: "ebanx_error_tips",
                                style: e.styleOption.ebanx_error_tips
                            }), (null == e ? void 0 : e.btnText) && p("button", {
                                type: "submit",
                                id: "ebanx_submit_btn",
                                className: "ebanx_submit_btn",
                                style: null === (A = e.styleOption) || void 0 === A ? void 0 : A.ebanx_submit_btn,
                                disabled: !0,
                                onClick: function(t) {
                                    null == e || e.submit(t);
                                }
                            }, null !== (B = null == e ? void 0 : e.btnText) && void 0 !== B ? B : "OK")));
                        }({
                            submit: this.submit.bind(this),
                            changeUserName: this.changeUserName.bind(this),
                            changeCardNumber: this.changeCardNumber.bind(this),
                            changeExpiration: this.changeExpiration.bind(this),
                            changeCVV: this.changeCVV.bind(this),
                            label: null === (t = this.initialData) || void 0 === t ? void 0 : t.label,
                            placeholder: null === (n = this.initialData) || void 0 === n ? void 0 : n.placeholder,
                            btnText: null === (i = this.initialData) || void 0 === i ? void 0 : i.btnText,
                            styleOption: l,
                            userName: null === (o = null === (a = this.initialData) || void 0 === a ? void 0 : a.fieldData) || void 0 === o ? void 0 : o.userName
                        }), this.initialData.domId);
                    }, t.prototype.fieldOnChange = function(e, t) {
                        var n, i, a, o, l, r;
                        e.message || (this.userNameErrorTips && !(null === (i = null === (n = this.initialData) || void 0 === n ? void 0 : n.fieldData) || void 0 === i ? void 0 : i.userName) && (e.message = this.userNameErrorTips, 
                        e.param = "username"), this.cardNumberErrorTips && (e.message = this.cardNumberErrorTips, 
                        e.param = "cardnumber"), this.expirationErrorTips && (e.message = this.expirationErrorTips, 
                        e.param = "expiration"), this.cvvErrorTips && (e.message = this.cvvErrorTips, e.param = "cvv")), 
                        "onblur" !== t && e.message || (document.getElementById("ebanx_error_tips").innerText = e.message), 
                        "onblur" === t && (null === (o = null === (a = this.initialData) || void 0 === a ? void 0 : a.fieldOnBlur) || void 0 === o || o.call(a, e)), 
                        "onkeyup" === t && (null === (r = null === (l = this.initialData) || void 0 === l ? void 0 : l.fieldOnChange) || void 0 === r || r.call(l, e)), 
                        this.fieldComplete();
                    }, t.prototype.fieldComplete = function() {
                        var e, t, n, i, a, o, l, r, d, s, u, c, p = document.getElementById("ebanx_submit_btn");
                        ((null === (t = null === (e = this.initialData) || void 0 === e ? void 0 : e.fieldData) || void 0 === t ? void 0 : t.userName) || !this.userNameErrorTips && this.userName) && !this.cardNumberErrorTips && !this.expirationErrorTips && !this.cvvErrorTips && this.cardNumber && this.expiration && this.cvv ? (console.log("表单填写完成"), 
                        p.removeAttribute("disabled"), p.style.background = (null === (o = null === (a = null === (i = null === (n = this.initialData) || void 0 === n ? void 0 : n.styleOption) || void 0 === i ? void 0 : i.componentStyle) || void 0 === a ? void 0 : a.btnStyle) || void 0 === o ? void 0 : o.normalBackground) || "#ffc102", 
                        null === (r = null === (l = this.initialData) || void 0 === l ? void 0 : l.fieldComplete) || void 0 === r || r.call(l, {
                            userName: this.userName,
                            cardNumber: this.cardNumber,
                            expiration: this.expiration,
                            cvv: this.cvv
                        })) : (console.log("表单没填写完成"), p.setAttribute("disabled", "disabled"), p.style.background = (null === (c = null === (u = null === (s = null === (d = this.initialData) || void 0 === d ? void 0 : d.styleOption) || void 0 === s ? void 0 : s.componentStyle) || void 0 === u ? void 0 : u.btnStyle) || void 0 === c ? void 0 : c.disableBackground) || "#dddddd");
                    }, t.prototype.changeUserName = function(e, t) {
                        var n, i, a;
                        this.userName = e.target.value, a = this.userName, /^[\s\S]{2,50}$/.test(a) ? this.userNameErrorTips = "" : this.userNameErrorTips = (null === (i = null === (n = this.initialData) || void 0 === n ? void 0 : n.errorTips) || void 0 === i ? void 0 : i.userNameErrorTips) || "The username is incorrect.", 
                        this.fieldOnChange({
                            message: this.userNameErrorTips,
                            param: "username"
                        }, t);
                    }, t.prototype.changeCardNumber = function(e, t, n) {
                        var i, l;
                        return a(this, void 0, void 0, (function() {
                            return o(this, (function(a) {
                                return this.cardNumber = e.target.value, n && this.cardNumber.length !== n || (!function(e) {
                                    var t = (e + "").replace(/[\D]/g, "");
                                    if (!/^\d{12,19}$/.test(t)) return !1;
                                    for (var n = t.split("").reverse(), i = parseInt(n.shift(), 10), a = n.length, o = a, l = 0; o > 0; o--) {
                                        var r = a - o, d = parseInt(n[r], 10), s = d;
                                        if (r % 2 == 0) {
                                            var u = 2 * d;
                                            switch (u) {
                                              case 10:
                                                s = 1;
                                                break;

                                              case 12:
                                                s = 3;
                                                break;

                                              case 14:
                                                s = 5;
                                                break;

                                              case 16:
                                                s = 7;
                                                break;

                                              case 18:
                                                s = 9;
                                                break;

                                              default:
                                                s = u;
                                            }
                                        }
                                        l += s;
                                    }
                                    return parseInt((9 * l + "").replace(/\d+(\d$)/, "$1"), 10) === i;
                                }(this.cardNumber) ? this.cardNumberErrorTips = (null === (l = null === (i = this.initialData) || void 0 === i ? void 0 : i.errorTips) || void 0 === l ? void 0 : l.cardNumberErrorTips) || "The card number is incorrect." : this.cardNumberErrorTips = "", 
                                this.fieldOnChange({
                                    message: this.cardNumberErrorTips,
                                    param: "cardnumber"
                                }, t)), [ 2 ];
                            }));
                        }));
                    }, t.prototype.changeExpiration = function(e, t) {
                        var n, i, a, o, l, r, d, s, u;
                        this.expiration = e.target.value, a = this.expiration, o = new Date, l = o.getFullYear(), 
                        r = o.getMonth() + 1, d = a.split("/"), s = Number(d[1]), u = Number(d[0]), this.expirationErrorTips = u < 1 || u > 12 || !(l < s || l === s && r <= u) ? (null === (i = null === (n = this.initialData) || void 0 === n ? void 0 : n.errorTips) || void 0 === i ? void 0 : i.expirationErrorTips) || "The card’s expiration date is incorrect." : "", 
                        this.fieldOnChange({
                            message: this.expirationErrorTips,
                            param: "expiration"
                        }, t);
                    }, t.prototype.changeCVV = function(e, t) {
                        var n, i, a;
                        this.cvv = e.target.value, a = this.cvv, /^\d{3,4}$/.test(a) ? this.cvvErrorTips = "" : this.cvvErrorTips = (null === (i = null === (n = this.initialData) || void 0 === n ? void 0 : n.errorTips) || void 0 === i ? void 0 : i.cvvErrorTips) || "The card’s security code is incorrect.", 
                        this.fieldOnChange({
                            message: this.cvvErrorTips,
                            param: "cvv"
                        }, t);
                    }, t.prototype.submit = function(e) {
                        var t, n, i, a, o, l, r, d, s = document.getElementById("ebanx_submit_btn");
                        s.setAttribute("disabled", "disabled");
                        var u = f(null === (t = this.initialData) || void 0 === t ? void 0 : t.styleOption), c = document.createElement("style");
                        c.type = "text/css", c.innerHTML = "\n      @keyframes loading {\n        0% {transform: rotate(0deg);}\n        100% {transform: rotate(360deg);}\n      }\n    ";
                        var p = document.createElement("div");
                        p.setAttribute("style", "\n        width: " + (null === (n = null == u ? void 0 : u.ebanx_submit_btn) || void 0 === n ? void 0 : n.fontSize) + ";\n        height: " + (null === (i = null == u ? void 0 : u.ebanx_submit_btn) || void 0 === i ? void 0 : i.fontSize) + ";\n        border: 2px solid;\n        border-color: #fff #fff transparent;\n        border-radius: 50%;\n        animation: loading 1.2s linear infinite;\n      "), 
                        s.innerHTML = "", s.appendChild(c), s.appendChild(p);
                        var v = null === (o = null === (a = document.getElementById("ebanx_card_number")) || void 0 === a ? void 0 : a.value) || void 0 === o ? void 0 : o.replace(/\D/g, ""), m = (null === (r = null === (l = this.initialData) || void 0 === l ? void 0 : l.fieldData) || void 0 === r ? void 0 : r.userName) || document.getElementById("ebanx_user_name").value, y = document.getElementById("ebanx_card_due_date").value, h = document.getElementById("ebanx_card_cvv").value;
                        (null === (d = this.initialData) || void 0 === d ? void 0 : d.isWith3DS) ? this.isWith3DSSubmit({
                            cardNumber: v,
                            userName: m,
                            cardDueDate: y,
                            cardCvv: h
                        }) : this.isWithout3DSSubmit({
                            cardNumber: v,
                            userName: m,
                            cardDueDate: y,
                            cardCvv: h
                        });
                    }, t.prototype.isWithout3DSSubmit = function(e) {
                        var t = e.cardNumber, n = e.userName, i = e.cardDueDate, a = e.cardCvv;
                        this.successCallToken({
                            cardNumber: t,
                            userName: n,
                            cardDueDate: i,
                            cardCvv: a
                        });
                    }, t.prototype.isWith3DSSubmit = function(e) {
                        var t = this, n = e.cardNumber, i = e.userName, a = e.cardDueDate, o = e.cardCvv, l = this.initialData.fieldData, r = void 0 === l ? {} : l, d = r.orderAmount, s = r.orderCurrency, u = r.shipAddress, c = r.shipCountry, p = r.shipState, v = r.shipCity, m = r.shipZip, y = r.email, h = r.shipPhone, b = r.homePhone, f = r.CPF;
                        try {
                            this.checkoutFieldData(r);
                            var g = {
                                orderInformation: {
                                    amountDetails: {
                                        totalAmount: d,
                                        currency: s
                                    },
                                    billTo: {
                                        address1: u,
                                        administrativeArea: p,
                                        country: c || "BR",
                                        email: y,
                                        homePhone: b || h,
                                        locality: v,
                                        postalCode: m,
                                        mobilePhone: h
                                    }
                                },
                                paymentInformation: {
                                    card: {
                                        number: n,
                                        expirationMonth: a.split("/")[0],
                                        expirationYear: a.split("/")[1],
                                        holderName: i
                                    }
                                },
                                personalIdentification: {
                                    id: f,
                                    type: "CPF"
                                }
                            };
                            console.log("3DS校验传参：", g), EBANX.threedsecure.checkIfShouldAuthenticate(g).then((function(e) {
                                e ? EBANX.threedsecure.run(g).then((function(e) {
                                    t.successCallToken({
                                        cardNumber: n,
                                        userName: i,
                                        cardDueDate: a,
                                        cardCvv: o,
                                        threedsEci: e.threeds_eci,
                                        threedsCryptogram: e.threeds_cryptogram,
                                        threedsXid: e.threeds_xid,
                                        threedsVersion: e.threeds_version,
                                        threedsTrxid: e.threeds_trxid
                                    });
                                })).catch((function(e) {
                                    console.log("进行threedsecure时出错"), t.failureCall(e);
                                })) : t.successCallToken({
                                    cardNumber: n,
                                    userName: i,
                                    cardDueDate: a,
                                    cardCvv: o
                                });
                            })).catch((function(e) {
                                console.log("checkIfShouldAuthenticate时出错"), t.failureCall(e);
                            }));
                        } catch (e) {
                            console.error("传参缺失", e);
                        }
                    }, t.prototype.failureCall = function(e) {
                        var t, n, i, a = document.getElementById("ebanx_submit_btn");
                        null === (t = null == a ? void 0 : a.removeAttribute) || void 0 === t || t.call(a, "disabled"), 
                        a && (a.innerHTML = null !== (i = null === (n = this.initialData) || void 0 === n ? void 0 : n.btnText) && void 0 !== i ? i : "OK"), 
                        document.getElementById("ebanx_error_tips").textContent = null == e ? void 0 : e.toString(), 
                        console.error("failureCall", e);
                    }, t.prototype.successCallToken = function(e) {
                        var t = this, n = e.cardNumber, a = e.userName, o = e.cardDueDate, l = e.cardCvv, r = e.threedsEci, d = e.threedsCryptogram, s = e.threedsXid, u = e.threedsVersion, c = e.threedsTrxid;
                        console.log("successCallToken");
                        var p = document.getElementById("ebanx_submit_btn");
                        EBANX.card.createToken({
                            card_number: n,
                            card_name: a,
                            card_due_date: o,
                            card_cvv: l,
                            threeds_eci: r,
                            threeds_cryptogram: d,
                            threeds_xid: s,
                            threeds_version: u,
                            threeds_trxid: c
                        }, (function(e) {
                            var n, a, o, l, v, m, y, h, b, f;
                            if (null === (n = null == p ? void 0 : p.removeAttribute) || void 0 === n || n.call(p, "disabled"), 
                            p && (p.innerHTML = null !== (o = null === (a = t.initialData) || void 0 === a ? void 0 : a.btnText) && void 0 !== o ? o : "OK"), 
                            null === (l = null == e ? void 0 : e.data) || void 0 === l ? void 0 : l.hasOwnProperty("status")) ; else {
                                var g = (null === (m = null === (v = null == e ? void 0 : e.error) || void 0 === v ? void 0 : v.err) || void 0 === m ? void 0 : m.status_message) || (null === (h = null === (y = null == e ? void 0 : e.error) || void 0 === y ? void 0 : y.err) || void 0 === h ? void 0 : h.message) || "";
                                document.getElementById("ebanx_error_tips").textContent = g;
                            }
                            var x = i({}, e), S = {};
                            r && (S.threeds_eci = r), d && (S.threeds_cryptogram = d), s && (S.threeds_xid = s), 
                            u && (S.threeds_version = u), c && (S.threeds_trxid = c), Object.keys(S).length > 0 && (x.threedSecure = S), 
                            null === (f = null === (b = t.initialData) || void 0 === b ? void 0 : b.createToken) || void 0 === f || f.call(b, x);
                        }));
                    }, t.prototype.checkoutFieldData = function(e) {
                        var t = e.orderAmount, n = e.orderCurrency, i = e.shipAddress, a = e.shipCountry, o = e.shipState, l = e.shipCity, r = e.shipZip, d = e.email, s = e.shipPhone;
                        e.homePhone;
                        var u = {
                            orderAmount: t,
                            orderCurrency: n,
                            shipAddress: i,
                            shipCountry: a,
                            shipState: o,
                            shipCity: l,
                            shipZip: r,
                            email: d,
                            shipPhone: s,
                            CPF: e.CPF
                        };
                        for (var c in u) if (!u[c]) throw this.failureCall("initialData.fieldData." + c + " cannot be null"), 
                        "initialData.fieldData." + c + "参数不能为null";
                    }, t.prototype.getToken = function() {
                        return a(this, void 0, void 0, (function() {
                            var e = this;
                            return o(this, (function(t) {
                                return console.log("getToken"), [ 2, new Promise((function(t, n) {
                                    var i, a;
                                    EBANX.card.createToken({
                                        card_number: document.getElementById("ebanx_card_number").value,
                                        card_name: (null === (a = null === (i = e.initialData) || void 0 === i ? void 0 : i.fieldData) || void 0 === a ? void 0 : a.userName) || document.getElementById("ebanx_user_name").value,
                                        card_due_date: document.getElementById("ebanx_card_due_date").value,
                                        card_cvv: document.getElementById("ebanx_card_cvv").value
                                    }, (function(e) {
                                        var i, a, o, l, r;
                                        if (null === (i = null == e ? void 0 : e.data) || void 0 === i ? void 0 : i.hasOwnProperty("status")) t(e); else {
                                            var d = (null === (o = null === (a = null == e ? void 0 : e.error) || void 0 === a ? void 0 : a.err) || void 0 === o ? void 0 : o.status_message) || (null === (r = null === (l = null == e ? void 0 : e.error) || void 0 === l ? void 0 : l.err) || void 0 === r ? void 0 : r.message) || "";
                                            document.getElementById("ebanx_error_tips").textContent = d, n(e);
                                        }
                                    }));
                                })) ];
                            }));
                        }));
                    }, t;
                }(v), x = function(e) {
                    function t(t, n) {
                        var i, a, o = e.call(this) || this;
                        o.publicKey = t, o.initialData = n;
                        var l = (new Date).getTime();
                        o.renderHtml();
                        var r = (new Date).getTime() - l;
                        return null === (a = null === (i = o.initialData) || void 0 === i ? void 0 : i.reportSDKLoading) || void 0 === a || a.call(i, {
                            time: r
                        }), o;
                    }
                    return n(t, e), t.prototype.getToken = function() {
                        return a(this, void 0, void 0, (function() {
                            return o(this, (function(e) {
                                return [ 2, "" ];
                            }));
                        }));
                    }, t.prototype.sdkFormOnLoad = function(e) {
                        if (e) {
                            var t = e.contentWindow.location.href;
                            console.log("curSrc", t);
                        } else console.log("curSrc iframe not init");
                    }, t.prototype.renderHtml = function() {
                        console.log("this.publicKey.key", this.publicKey.key);
                        var e, t = this.publicKey.key.split("?")[0], n = (e = this.publicKey.key, decodeURIComponent(e).match(/(\w+)=([^=&]+)/gi)), i = {};
                        console.log("iframeAction", t), console.log("keyArray", n), n && n.length > 0 && n.forEach((function(e) {
                            var t = e.split("=");
                            i[t[0]] = t[1];
                        })), i.cssUrl = this.initialData.rewriteCssUrl || "https://unpkg.com/@efox/pay@1.0.32/assets/oceanpay/rewrite.css", 
                        i.iframeOnload = this.sdkFormOnLoad, i.action = t, this.renderToDom(function(e) {
                            return p(DocumentFragment, null, p("form", {
                                action: e.action || "https://secure.oceanpayment.com/gateway/service/pay",
                                id: "creditcard_payment_checkout",
                                name: "creditcard_payment_checkout",
                                method: "POST",
                                target: "ifrm_creditcard_checkout"
                            }, p("input", {
                                type: "hidden",
                                name: "account",
                                value: e.account
                            }), p("input", {
                                type: "hidden",
                                name: "terminal",
                                value: e.terminal
                            }), p("input", {
                                type: "hidden",
                                name: "order_number",
                                value: e.order_number
                            }), p("input", {
                                type: "hidden",
                                name: "order_currency",
                                value: e.order_currency
                            }), p("input", {
                                type: "hidden",
                                name: "order_amount",
                                value: e.order_amount
                            }), p("input", {
                                type: "hidden",
                                name: "signValue",
                                value: e.signValue
                            }), p("input", {
                                type: "hidden",
                                name: "backUrl",
                                value: e.backUrl
                            }), p("input", {
                                type: "hidden",
                                name: "billing_firstName",
                                value: e.billing_firstName
                            }), p("input", {
                                type: "hidden",
                                name: "billing_lastName",
                                value: e.billing_lastName
                            }), p("input", {
                                type: "hidden",
                                name: "billing_email",
                                value: e.billing_email
                            }), p("input", {
                                type: "hidden",
                                name: "billing_phone",
                                value: e.billing_phone
                            }), p("input", {
                                type: "hidden",
                                name: "billing_country",
                                value: e.billing_country
                            }), p("input", {
                                type: "hidden",
                                name: "billing_city",
                                value: e.billing_city
                            }), p("input", {
                                type: "hidden",
                                name: "billing_address",
                                value: e.billing_address
                            }), p("input", {
                                type: "hidden",
                                name: "billing_zip",
                                value: e.billing_zip
                            }), p("input", {
                                type: "hidden",
                                name: "productSku",
                                value: e.productSku
                            }), p("input", {
                                type: "hidden",
                                name: "productName",
                                value: e.productName
                            }), p("input", {
                                type: "hidden",
                                name: "productNum",
                                value: e.productNum
                            }), p("input", {
                                type: "hidden",
                                name: "cssUrl",
                                value: e.cssUrl
                            })), p("iframe", {
                                width: "100%",
                                height: "100%",
                                scrolling: "auto",
                                name: "ifrm_creditcard_checkout",
                                id: "ifrm_creditcard_checkout",
                                onLoad: e.iframeOnload(void 0)
                            }));
                        }(i), this.initialData.domId), document.querySelector("#creditcard_payment_checkout").submit();
                    }, t;
                }(v), S = function(e) {
                    function t(t, n) {
                        var i = e.call(this) || this;
                        return i.publicKey = t, i.initialData = n, i.paypalInstanceName = "paypal", window.__PAYPALSPB_LOADJS || (window.__PAYPALSPB_LOADJS = y, 
                        window.__PAYPALSPB_LOADJS.ids = {}), i.loadPAYPALPSB(), i.renderHtml(), i;
                    }
                    return n(t, e), t.prototype.loadPAYPALPSB = function() {
                        var e, t, n, i, a, o, l, r, d, s = this, u = (new Date).getTime(), c = "https://www.paypal.com/sdk/js?client-id=" + (null === (e = this.publicKey) || void 0 === e ? void 0 : e.key) + "&currency=" + ((null === (n = null === (t = this.publicKey) || void 0 === t ? void 0 : t.expand) || void 0 === n ? void 0 : n.currency) || "USD");
                        (null === (i = this.initialData) || void 0 === i ? void 0 : i.isContinue) && (c += "&intent=capture&commit=false"), 
                        (null === (a = this.initialData) || void 0 === a ? void 0 : a.disableFunding) && (c += "&disable-funding=" + (null === (o = this.initialData) || void 0 === o ? void 0 : o.disableFunding)), 
                        (null === (l = this.initialData) || void 0 === l ? void 0 : l.paypalQueryParams) && (c += "&" + this.initialData.paypalQueryParams);
                        var p = c, v = {
                            success: function() {
                                window.__PAYPALSPB_LOADJS.ids[p] = !0, s.spbInit(c, u);
                            }
                        };
                        (null === (r = this.initialData) || void 0 === r ? void 0 : r.paypalScriptParams) && (v.before = function(e, t) {
                            Object.keys(s.initialData.paypalScriptParams).forEach((function(e) {
                                var n = s.initialData.paypalScriptParams[e];
                                t.setAttribute(e, n);
                            }));
                        }, (null === (d = this.initialData.paypalScriptParams) || void 0 === d ? void 0 : d["data-namespace"]) && (this.paypalInstanceName = this.initialData.paypalScriptParams["data-namespace"]), 
                        Object.keys(this.initialData.paypalScriptParams).forEach((function(e) {
                            var t = s.initialData.paypalScriptParams[e];
                            p += e + "&" + t;
                        }))), window.__PAYPALSPB_LOADJS.ids[p] ? window.__PAYPALSPB_LOADJS.ready(p, v) : (window.__PAYPALSPB_LOADJS.ids[p] = !0, 
                        window.__PAYPALSPB_LOADJS([ c ], p, v));
                    }, t.prototype.spbInit = function(e, t) {
                        var n, l, r, d, s, u, c, p, v, m, y, h = this, b = (new Date).getTime() - t;
                        null === (l = null === (n = this.initialData) || void 0 === n ? void 0 : n.reportSDKLoading) || void 0 === l || l.call(n, {
                            time: b
                        });
                        var f = function(e) {
                            var t = null == e ? void 0 : e.commonStyle;
                            return null == e || e.componentStyle, i({}, t);
                        }(null === (r = this.initialData) || void 0 === r ? void 0 : r.styleOption);
                        window[this.paypalInstanceName].Buttons(i({
                            style: {
                                layout: (null === (d = null == f ? void 0 : f.paypalSPBStyle) || void 0 === d ? void 0 : d.layout) || "vertical",
                                color: (null === (s = null == f ? void 0 : f.paypalSPBStyle) || void 0 === s ? void 0 : s.color) || "gold",
                                shape: (null === (u = null == f ? void 0 : f.paypalSPBStyle) || void 0 === u ? void 0 : u.shape) || "rect",
                                label: (null === (c = null == f ? void 0 : f.paypalSPBStyle) || void 0 === c ? void 0 : c.label) || "paypal",
                                height: null === (p = null == f ? void 0 : f.paypalSPBStyle) || void 0 === p ? void 0 : p.height,
                                tagline: null !== (m = null === (v = null == f ? void 0 : f.paypalSPBStyle) || void 0 === v ? void 0 : v.tagline) && void 0 !== m && m
                            },
                            createOrder: function(e, t) {
                                return a(h, void 0, void 0, (function() {
                                    var n, i;
                                    return o(this, (function(a) {
                                        switch (a.label) {
                                          case 0:
                                            return console.log("createOrder", e, t), [ 4, null === (i = null === (n = this.initialData) || void 0 === n ? void 0 : n.createOrder) || void 0 === i ? void 0 : i.call(n, {
                                                data: e,
                                                actions: t
                                            }) ];

                                          case 1:
                                            return [ 2, a.sent() ];
                                        }
                                    }));
                                }));
                            },
                            onApprove: function(e, t) {
                                var n, i;
                                console.log("onApprove", e, t), null === (i = null === (n = h.initialData) || void 0 === n ? void 0 : n.createToken) || void 0 === i || i.call(n, {
                                    data: e,
                                    actions: t
                                });
                            }
                        }, null === (y = this.initialData) || void 0 === y ? void 0 : y.paypalProps)).render("#" + (this.initialData.domId ? this.initialData.domId : "paypal-button-container"));
                    }, t.prototype.renderHtml = function() {
                        this.renderToDom(p(DocumentFragment, null, p("div", {
                            id: "paypal-button-container"
                        })), this.initialData.domId);
                    }, t.prototype.getToken = function() {
                        return a(this, void 0, void 0, (function() {
                            return o(this, (function(e) {
                                return [ 2 ];
                            }));
                        }));
                    }, t;
                }(v), _ = m((function(e) {
                    function t(n) {
                        return "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? (e.exports = t = function(e) {
                            return typeof e;
                        }, e.exports.default = e.exports, e.exports.__esModule = !0) : (e.exports = t = function(e) {
                            return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
                        }, e.exports.default = e.exports, e.exports.__esModule = !0), t(n);
                    }
                    e.exports = t, e.exports.default = e.exports, e.exports.__esModule = !0;
                })), D = (b = _) && b.__esModule && Object.prototype.hasOwnProperty.call(b, "default") ? b.default : b, k = {
                    length: function(e, t) {
                        return e = e.toString(), RegExp("^\\S{" + t + "}$", "g").test(e);
                    },
                    enum: function(e, t) {
                        var n = !1;
                        return t.map((function(t) {
                            t === e && (n = !0);
                        })), n;
                    },
                    any: function(e, t) {
                        return e = e.toString(), RegExp(t, "g").test(e);
                    }
                };
                var w = [ {
                    name: "merNo",
                    type: "length",
                    target: "1,5",
                    msg: "require a length of 5",
                    errorCode: "101"
                }, {
                    name: "gatewayNo",
                    type: "length",
                    target: "1,8",
                    msg: "require a length of 8",
                    errorCode: "102"
                }, {
                    name: "orderNo",
                    type: "length",
                    target: "0,50",
                    msg: "require a length less than 50",
                    errorCode: "103"
                }, {
                    name: "orderCurrency",
                    type: "enum",
                    target: [ "KRW", "TRY", "ZAR", "AED", "MXN", "CLP", "BYR", "MYR", "MKD", "CSD", "PKR", "UAH", "IRR", "TZS", "AMD", "ISK", "AZN", "ALL", "BDT", "SAR", "GEL", "PLN", "NZD", "NOK", "DKK", "SEK", "CHF", "RUB", "BAM", "BGN", "HRK", "HUF", "LTL", "LVL", "RON", "RSD", "BRL", "THB", "ILS", "CNY", "USD", "GBP", "EUR", "AUD", "CAD", "JPY", "SGD", "HKD", "MYR", "PHP", "TWD", "INR", "CZK" ],
                    msg: "require currency code,https://www.asiabill.com/developers/347-cn.html#currency",
                    errorCode: "104"
                }, {
                    name: "orderAmount",
                    type: "any",
                    target: "^[0-9]{0,8}.[0-9]{2}$",
                    msg: "2 decimal places after the decimal point. Length less than ten digits",
                    errorCode: "105"
                }, {
                    name: "email",
                    type: "length",
                    target: "2,200",
                    msg: "the length must be between 2-200",
                    errorCode: "108"
                }, {
                    name: "phone",
                    type: "length",
                    target: "2,50",
                    msg: "the length must be between 2-50",
                    errorCode: "109"
                }, {
                    name: "paymentMethod",
                    type: "enum",
                    target: [ "Credit Card" ],
                    msg: "inaccurate payment method",
                    errorCode: "110"
                }, {
                    name: "returnUrl",
                    type: "length",
                    target: "0,500",
                    msg: "require a length less than 500",
                    errorCode: "103"
                } ], N = function() {
                    function e(e) {
                        "prod" === e.env ? this.actionURL = "https://safepay.asiabill.com/Interface/V2" : this.actionURL = "https://safepay.asiabill.com/TestInterface/V2", 
                        this.fieldData = e.fieldData, this.reportSDKLoading = null == e ? void 0 : e.reportSDKLoading;
                    }
                    return e.prototype.getToken = function() {
                        var e, t = this, n = (new Date).getTime(), i = (new Date).getTime() - n;
                        return null === (e = null == this ? void 0 : this.reportSDKLoading) || void 0 === e || e.call(this, {
                            time: i
                        }), new Promise((function(e, n) {
                            var i = document.createElement("form");
                            document.body.appendChild(i), i.method = "post", i.action = t.actionURL;
                            var a = function(e, t) {
                                for (var n, i = 0; i < t.length; i++) {
                                    var a = t[i];
                                    if (!e[a.name]) {
                                        n = {
                                            state: !1,
                                            name: a.name,
                                            msg: a.name + " is required",
                                            code: a.errorCode
                                        };
                                        break;
                                    }
                                    var o = e[a.name], l = k[a.type](o, a.target);
                                    if (!l) {
                                        n = {
                                            state: l,
                                            name: a.name,
                                            msg: a.msg,
                                            code: a.errorCode
                                        };
                                        break;
                                    }
                                    n = {
                                        state: l,
                                        name: "all",
                                        msg: "check pass",
                                        code: "200"
                                    };
                                }
                                return n;
                            }(t.fieldData, w);
                            if (console.log(a), a.state) {
                                for (var o in t.fieldData) {
                                    console.log(o + ":" + t.fieldData[o]);
                                    var l = document.createElement("input");
                                    l.setAttribute("name", o), l.setAttribute("type", "hidden"), "object" !== D(t.fieldData[o]) ? l.setAttribute("value", t.fieldData[o]) : l.setAttribute("value", JSON.stringify(t.fieldData[o])), 
                                    i.appendChild(l);
                                }
                                e(a), console.log(i), i.submit();
                            } else e(a);
                        }));
                    }, e;
                }(), T = {
                    nl: "NL-NL",
                    en: "EN-GB",
                    fr: "FR-FR",
                    de: "DE-DE",
                    it: "IT-IT",
                    ko: "KR-KR",
                    es: "ES-ES"
                }, C = function(e) {
                    function t(t, n) {
                        var i = e.call(this) || this;
                        i.publicKey = t, i.initialData = n;
                        var a = (new Date).getTime();
                        i.render();
                        var o = "https://assets.checkout.com/docs/examples/wireframe/images/card-icons/";
                        return console.log("publicKey", t.key, "initialData", n), y("https://cdn.checkout.com/js/framesv2.min.js", (function() {
                            var e, t, n;
                            window.Frames.init({
                                publicKey: i.publicKey.key,
                                debug: "dev" === i.initialData.env,
                                namespace: "Frames",
                                localization: T[i.initialData.language],
                                style: i.initialData.styleOption.commonStyle
                            });
                            var l = (new Date).getTime() - a;
                            null === (t = null === (e = i.initialData) || void 0 === e ? void 0 : e.reportSDKLoading) || void 0 === t || t.call(e, {
                                time: l
                            });
                            var r = window.Frames, d = function() {
                                var e = {
                                    "card-number": {
                                        src: "card",
                                        alt: "card number logo"
                                    },
                                    "expiry-date": {
                                        src: "exp-date",
                                        alt: "expiry date logo"
                                    },
                                    cvv: {
                                        src: "cvv",
                                        alt: "cvv logo"
                                    }
                                };
                                return e;
                            }();
                            var s = {}, u = null === (n = i.initialData) || void 0 === n ? void 0 : n.errorTips;
                            function c(e) {
                                document.getElementById("icon-" + e + "-error").style.removeProperty("display");
                            }
                            function p(e, t) {
                                void 0 === e && (e = null), void 0 === t && (t = null), e && e.classList.add("show");
                                var n = document.getElementById("logo-payment-method");
                                if (t) {
                                    var i = t.toLowerCase();
                                    n.setAttribute("src", o + i + ".svg"), n.setAttribute("alt", t || "payment method");
                                }
                                n.style.removeProperty("display");
                            }
                            function v(e) {
                                void 0 === e && (e = null), e && e.classList.remove("show"), document.getElementById("logo-payment-method").style.setProperty("display", "none");
                            }
                            s["card-number"] = (null == u ? void 0 : u.cardNumberErrorTips) || "Please enter a valid card number", 
                            s["expiry-date"] = (null == u ? void 0 : u.expirationErrorTips) || "Please enter a valid expiry date", 
                            s.cvv = (null == u ? void 0 : u.cvvErrorTips) || "Please enter a valid cvv code", 
                            r.addEventHandler(r.Events.FRAME_VALIDATION_CHANGED, (function(e) {
                                var t = e.element;
                                e.isValid || e.isEmpty ? ("card-number" !== t || e.isEmpty || p(), i = "icon-" + (n = t), 
                                (a = document.getElementById(i)).setAttribute("src", o + d[n].src + ".svg"), a.setAttribute("alt", d[n].alt), 
                                c(t), function(e) {
                                    var t = ".error-message__" + e;
                                    document.querySelector(t).textContent = "";
                                }(t)) : ("card-number" === t && v(), function(e) {
                                    var t = "icon-" + e, n = document.getElementById(t);
                                    n.setAttribute("src", o + d[e].src + "-error.svg"), n.setAttribute("alt", d[e].alt);
                                }(t), function(e) {
                                    document.getElementById("icon-" + e + "-error").style.setProperty("display", "block");
                                }(t), function(e) {
                                    var t = ".error-message__" + e;
                                    document.querySelector(t).textContent = s[e];
                                }(t));
                                var n, i, a;
                            })), r.addEventHandler(r.Events.CARD_TOKENIZATION_FAILED, (function(e) {
                                console.log("CARD_TOKENIZATION_FAILED: %o", e), r.enableSubmitForm();
                            })), r.addEventHandler(r.Events.PAYMENT_METHOD_CHANGED, (function(e) {
                                var t = e.paymentMethod, n = document.querySelector(".icon-container.payment-method");
                                t ? (c("card-number"), p(n, t)) : v(n);
                            }));
                        })), i;
                    }
                    return n(t, e), t.prototype.getToken = function() {
                        return a(this, void 0, void 0, (function() {
                            return o(this, (function(e) {
                                return [ 2, window.Frames.submitCard() ];
                            }));
                        }));
                    }, t.prototype.render = function() {
                        var e, t, n, i, a, o, l, r, d, s, u, c;
                        this.renderToDom((e = {
                            style: this.initialData.styleOption.componentStyle,
                            label: this.initialData.label
                        }, u = e.style, c = e.label, p("div", {
                            class: "checkout"
                        }, p("div", {
                            dangerouslySetInnerHTML: {
                                __html: "<style>\n.checkout *, *::before, *::after {\n  box-sizing: border-box;\n}\n\n.checkout {\n  padding: 1rem;\n  background-color: #FFF;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n}\n\n.checkout iframe {\n  /* This fixes a mobile Safari bug */\n  height: 38px !important;\n}\n\n.checkout label {\n  display: block;\n  height: 10px;\n  color: #13395E;\n  font-size: 14px;\n  font-weight: 500;\n  line-height: 10px;\n  margin: 8px 0;\n}\n\n#payment-form {\n  width: 280px;\n  margin: 0 auto;\n}\n\n.date-and-code {\n  display: flex;\n  margin-bottom: 8px;\n}\n\n.date-and-code > div:nth-child(1) {\n  width: 55.715%;\n}\n.date-and-code > div:nth-child(2) {\n  width: 45.719%;\n}\n\n.input-container {\n  position: relative;\n  display: flex;\n  height: 40px;\n}\n.icon-container:last-child {\n  right: 0;\n}\n.icon-container.payment-method {\n  right: 0;\n}\n\n.input-container.card-number {\n  margin-bottom: 8px;\n}\n.input-container.expiry-date {\n  margin-right: 4px;\n}\n.input-container.cvv {\n  margin-left: 4px;\n}\n\n.card-number-frame {\n  padding-left: 40px;\n}\n.expiry-date-frame {\n  padding-left: 40px;\n}\n.cvv-frame {\n  padding-left: 40px;\n}\n\ndiv + button {\n  margin-top: 8px;\n}\n\n.icon-container {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  display: flex;\n  justify-content: center;\n  width: 26px;\n  margin: 0 7px;\n}\n\n.icon-container.payment-method  {\n  transform: translateY(-50%) rotateY(90deg);\n  transition: opacity 0.15s ease-out;\n  opacity: 0;\n  top: 50%;\n}\n\n.icon-container.payment-method.show {\n  opacity: 1;\n  transition: all 0.4s ease-out;\n  transform: translateY(-50%) rotateY(0deg);\n}\n\n.icon-container.payment-method img {\n  width: 100%;\n}\n\n[id$=\"-error\"] { display: none }\n\n.frame {\n  opacity: 0;\n}\n\n.frame--activated {\n  opacity: 1;\n  border: solid 1px #13395E;\n  border-radius: 3px;\n  box-shadow: 0 1px 3px 0 rgba(19,57,94,0.2);\n}\n\n.frame--activated.frame--focus {\n  border: solid 1px #13395E;\n  box-shadow: 0 2px 5px 0 rgba(19,57,94,0.15);\n}\n\n.frame--activated.frame--invalid {\n  border: solid 1px #D96830;\n  box-shadow: 0 2px 5px 0 rgba(217,104,48,0.15);\n}\n\n.error-message {\n  display: block;\n  color: #C9501C;\n  font-size: .9rem;\n  margin: 8px 0 0 1px;\n  font-weight: 300;\n}\n\n#pay-button {\n  border: none;\n  border-radius: 3px;\n  color: #FFF;\n  font-weight: 500;\n  height: 40px;\n  width: 100%;\n  background-color: #13395E;\n  box-shadow: 0 1px 3px 0 rgba(19,57,94,0.4);\n}\n\n#pay-button:active {\n  background-color: #0B2A49;\n  box-shadow: 0 1px 3px 0 rgba(19,57,94,0.4);\n}\n\n#pay-button:hover {\n  background-color: #15406B;\n  box-shadow: 0 2px 5px 0 rgba(19,57,94,0.4);\n}\n\n#pay-button:disabled {\n  background-color: #697887;\n  box-shadow: none;\n}\n\n#pay-button:not(:disabled) {\n  cursor: pointer;\n}\n\n.token {\n  color: #b35e14;\n  font-size: .9rem;\n  font-family: monospace;\n}\n\n/**\nIE11-targeted optimisations\n*/\n_:-ms-fullscreen, :root .icon-container {\n  display: block;\n}\n\n_:-ms-fullscreen, :root .icon-container img {\n  top: 50%;\n  -ms-transform: translateY(-50%);\n  position: absolute;\n}\n\n_:-ms-fullscreen, #icon-card-number,\n_:-ms-fullscreen, #icon-expiry-date,\n_:-ms-fullscreen, #icon-cvv {\n  left: 7px;\n}\n\n#checkout-frames-card-number::-ms-clear {\n  display: none;\n}\n\n</style>"
                            }
                        }), p("form", {
                            id: "payment-form",
                            method: "POST",
                            style: !!(null == u ? void 0 : u.formStyle) && u.formStyle
                        }, p("label", {
                            for: "card-number",
                            style: !!(null === (t = null == u ? void 0 : u.cardInputStyle) || void 0 === t ? void 0 : t.labelStyle) && u.cardInputStyle.labelStyle
                        }, (null == c ? void 0 : c.cardNumberLabel) || "Card number"), p("div", {
                            class: "input-container card-number",
                            style: !!(null === (n = null == u ? void 0 : u.cardInputStyle) || void 0 === n ? void 0 : n.inputWrapperStyle) && u.cardInputStyle.inputWrapperStyle
                        }, p("div", {
                            class: "icon-container"
                        }, p("img", {
                            id: "icon-card-number",
                            src: "https://assets.checkout.com/docs/examples/wireframe/images/card-icons/card.svg",
                            alt: "PAN"
                        })), p("div", {
                            class: "card-number-frame"
                        }), p("div", {
                            class: "icon-container payment-method"
                        }, p("img", {
                            id: "logo-payment-method"
                        })), p("div", {
                            class: "icon-container"
                        }, p("img", {
                            id: "icon-card-number-error",
                            src: "https://assets.checkout.com/docs/examples/wireframe/images/card-icons/error.svg"
                        }))), p("span", {
                            class: "error-message error-message__card-number",
                            style: !!(null === (i = null == u ? void 0 : u.cardInputStyle) || void 0 === i ? void 0 : i.messageStyle) && u.cardInputStyle.messageStyle
                        }), p("div", {
                            class: "date-and-code"
                        }, p("div", null, p("label", {
                            for: "expiry-date",
                            style: !!(null === (a = null == u ? void 0 : u.expirationInputStyle) || void 0 === a ? void 0 : a.labelStyle) && u.expirationInputStyle.labelStyle
                        }, (null == c ? void 0 : c.expirationLabel) || "Expiry date"), p("div", {
                            class: "input-container expiry-date",
                            style: !!(null === (o = null == u ? void 0 : u.expirationInputStyle) || void 0 === o ? void 0 : o.inputWrapperStyle) && u.expirationInputStyle.inputWrapperStyle
                        }, p("div", {
                            class: "icon-container"
                        }, p("img", {
                            id: "icon-expiry-date",
                            src: "https://assets.checkout.com/docs/examples/wireframe/images/card-icons/exp-date.svg",
                            alt: "Expiry date"
                        })), p("div", {
                            class: "expiry-date-frame"
                        }), p("div", {
                            class: "icon-container"
                        }, p("img", {
                            id: "icon-expiry-date-error",
                            src: "https://assets.checkout.com/docs/examples/wireframe/images/card-icons/error.svg"
                        })))), p("div", null, p("label", {
                            for: "cvv",
                            style: !!(null === (l = null == u ? void 0 : u.cvvInputStyle) || void 0 === l ? void 0 : l.labelStyle) && u.cvvInputStyle.labelStyle
                        }, (null == c ? void 0 : c.cvvLabel) || " Security code"), p("div", {
                            class: "input-container cvv",
                            style: !!(null === (r = null == u ? void 0 : u.cvvInputStyle) || void 0 === r ? void 0 : r.inputWrapperStyle) && u.cvvInputStyle.inputWrapperStyle
                        }, p("div", {
                            class: "icon-container"
                        }, p("img", {
                            id: "icon-cvv",
                            src: "https://assets.checkout.com/docs/examples/wireframe/images/card-icons/cvv.svg",
                            alt: "CVV"
                        })), p("div", {
                            class: "cvv-frame"
                        }), p("div", {
                            class: "icon-container"
                        }, p("img", {
                            id: "icon-cvv-error",
                            src: "https://assets.checkout.com/docs/examples/wireframe/images/card-icons/error.svg"
                        }))))), p("div", null, p("span", {
                            class: "error-message error-message__expiry-date",
                            style: !!(null === (d = null == u ? void 0 : u.expirationInputStyle) || void 0 === d ? void 0 : d.messageStyle) && u.expirationInputStyle.messageStyle
                        }), p("span", {
                            class: "error-message error-message__cvv",
                            style: !!(null === (s = null == u ? void 0 : u.cvvInputStyle) || void 0 === s ? void 0 : s.messageStyle) && u.cvvInputStyle.messageStyle
                        }))))), this.initialData.domId);
                    }, t;
                }(v), I = function() {
                    function e(e, t) {
                        this.publicKey = e, this.initialData = t, this.initSDK();
                    }
                    return e.prototype.checkKey = function(e) {
                        return !0;
                    }, e.prototype.getToken = function(e) {
                        return a(this, void 0, void 0, (function() {
                            return o(this, (function(t) {
                                switch (t.label) {
                                  case 0:
                                    return [ 4, this.sdk.getToken(e) ];

                                  case 1:
                                    return [ 2, t.sent() ];
                                }
                            }));
                        }));
                    }, e.prototype.initSDK = function() {
                        return a(this, void 0, void 0, (function() {
                            return o(this, (function(e) {
                                if (!this.checkKey(this.publicKey)) return [ 2 ];
                                switch (this.initialData.sdkName) {
                                  case "2checkout":
                                    this.sdk = new h(this.publicKey, this.initialData);
                                    break;

                                  case "ebanx":
                                    this.sdk = new g(this.publicKey, this.initialData);
                                    break;

                                  case "oceanPay":
                                    this.sdk = new x(this.publicKey, this.initialData);
                                    break;

                                  case "paypalSPB":
                                    this.sdk = new S(this.publicKey, this.initialData);
                                    break;

                                  case "asiaBill":
                                    this.sdk = new N(this.initialData);
                                    break;

                                  case "checkout":
                                    this.sdk = new C(this.publicKey, this.initialData);
                                }
                                return [ 2 ];
                            }));
                        }));
                    }, e;
                }();
                e.AsiaBill = N, e.Checkout = C, e.Ebanx = g, e.OceanPay = x, e.PaypalSPB = S, e.TwoCheckOut = h, 
                e.default = I, Object.defineProperty(e, "__esModule", {
                    value: !0
                });
            }));
        },
        "../shared/node_modules/axios/index.js": (module, __unused_webpack_exports, __webpack_require__) => {
            module.exports = __webpack_require__("../shared/node_modules/axios/lib/axios.js");
        },
        "../shared/node_modules/axios/lib/adapters/xhr.js": (module, __unused_webpack_exports, __webpack_require__) => {
            "use strict";
            var utils = __webpack_require__("../shared/node_modules/axios/lib/utils.js");
            var settle = __webpack_require__("../shared/node_modules/axios/lib/core/settle.js");
            var cookies = __webpack_require__("../shared/node_modules/axios/lib/helpers/cookies.js");
            var buildURL = __webpack_require__("../shared/node_modules/axios/lib/helpers/buildURL.js");
            var buildFullPath = __webpack_require__("../shared/node_modules/axios/lib/core/buildFullPath.js");
            var parseHeaders = __webpack_require__("../shared/node_modules/axios/lib/helpers/parseHeaders.js");
            var isURLSameOrigin = __webpack_require__("../shared/node_modules/axios/lib/helpers/isURLSameOrigin.js");
            var createError = __webpack_require__("../shared/node_modules/axios/lib/core/createError.js");
            module.exports = function(config) {
                return new Promise((function(resolve, reject) {
                    var requestData = config.data;
                    var requestHeaders = config.headers;
                    var responseType = config.responseType;
                    if (utils.isFormData(requestData)) delete requestHeaders["Content-Type"];
                    var request = new XMLHttpRequest;
                    if (config.auth) {
                        var username = config.auth.username || "";
                        var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : "";
                        requestHeaders.Authorization = "Basic " + btoa(username + ":" + password);
                    }
                    var fullPath = buildFullPath(config.baseURL, config.url);
                    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);
                    request.timeout = config.timeout;
                    function onloadend() {
                        if (!request) return;
                        var responseHeaders = "getAllResponseHeaders" in request ? parseHeaders(request.getAllResponseHeaders()) : null;
                        var responseData = !responseType || "text" === responseType || "json" === responseType ? request.responseText : request.response;
                        var response = {
                            data: responseData,
                            status: request.status,
                            statusText: request.statusText,
                            headers: responseHeaders,
                            config,
                            request
                        };
                        settle(resolve, reject, response);
                        request = null;
                    }
                    if ("onloadend" in request) request.onloadend = onloadend; else request.onreadystatechange = function() {
                        if (!request || 4 !== request.readyState) return;
                        if (0 === request.status && !(request.responseURL && 0 === request.responseURL.indexOf("file:"))) return;
                        setTimeout(onloadend);
                    };
                    request.onabort = function() {
                        if (!request) return;
                        reject(createError("Request aborted", config, "ECONNABORTED", request));
                        request = null;
                    };
                    request.onerror = function() {
                        reject(createError("Network Error", config, null, request));
                        request = null;
                    };
                    request.ontimeout = function() {
                        var timeoutErrorMessage = "timeout of " + config.timeout + "ms exceeded";
                        if (config.timeoutErrorMessage) timeoutErrorMessage = config.timeoutErrorMessage;
                        reject(createError(timeoutErrorMessage, config, config.transitional && config.transitional.clarifyTimeoutError ? "ETIMEDOUT" : "ECONNABORTED", request));
                        request = null;
                    };
                    if (utils.isStandardBrowserEnv()) {
                        var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : void 0;
                        if (xsrfValue) requestHeaders[config.xsrfHeaderName] = xsrfValue;
                    }
                    if ("setRequestHeader" in request) utils.forEach(requestHeaders, (function(val, key) {
                        if ("undefined" === typeof requestData && "content-type" === key.toLowerCase()) delete requestHeaders[key]; else request.setRequestHeader(key, val);
                    }));
                    if (!utils.isUndefined(config.withCredentials)) request.withCredentials = !!config.withCredentials;
                    if (responseType && "json" !== responseType) request.responseType = config.responseType;
                    if ("function" === typeof config.onDownloadProgress) request.addEventListener("progress", config.onDownloadProgress);
                    if ("function" === typeof config.onUploadProgress && request.upload) request.upload.addEventListener("progress", config.onUploadProgress);
                    if (config.cancelToken) config.cancelToken.promise.then((function(cancel) {
                        if (!request) return;
                        request.abort();
                        reject(cancel);
                        request = null;
                    }));
                    if (!requestData) requestData = null;
                    request.send(requestData);
                }));
            };
        },
        "../shared/node_modules/axios/lib/axios.js": (module, __unused_webpack_exports, __webpack_require__) => {
            "use strict";
            var utils = __webpack_require__("../shared/node_modules/axios/lib/utils.js");
            var bind = __webpack_require__("../shared/node_modules/axios/lib/helpers/bind.js");
            var Axios = __webpack_require__("../shared/node_modules/axios/lib/core/Axios.js");
            var mergeConfig = __webpack_require__("../shared/node_modules/axios/lib/core/mergeConfig.js");
            var defaults = __webpack_require__("../shared/node_modules/axios/lib/defaults.js");
            function createInstance(defaultConfig) {
                var context = new Axios(defaultConfig);
                var instance = bind(Axios.prototype.request, context);
                utils.extend(instance, Axios.prototype, context);
                utils.extend(instance, context);
                return instance;
            }
            var axios = createInstance(defaults);
            axios.Axios = Axios;
            axios.create = function(instanceConfig) {
                return createInstance(mergeConfig(axios.defaults, instanceConfig));
            };
            axios.Cancel = __webpack_require__("../shared/node_modules/axios/lib/cancel/Cancel.js");
            axios.CancelToken = __webpack_require__("../shared/node_modules/axios/lib/cancel/CancelToken.js");
            axios.isCancel = __webpack_require__("../shared/node_modules/axios/lib/cancel/isCancel.js");
            axios.all = function(promises) {
                return Promise.all(promises);
            };
            axios.spread = __webpack_require__("../shared/node_modules/axios/lib/helpers/spread.js");
            axios.isAxiosError = __webpack_require__("../shared/node_modules/axios/lib/helpers/isAxiosError.js");
            module.exports = axios;
            module.exports["default"] = axios;
        },
        "../shared/node_modules/axios/lib/cancel/Cancel.js": module => {
            "use strict";
            function Cancel(message) {
                this.message = message;
            }
            Cancel.prototype.toString = function() {
                return "Cancel" + (this.message ? ": " + this.message : "");
            };
            Cancel.prototype.__CANCEL__ = true;
            module.exports = Cancel;
        },
        "../shared/node_modules/axios/lib/cancel/CancelToken.js": (module, __unused_webpack_exports, __webpack_require__) => {
            "use strict";
            var Cancel = __webpack_require__("../shared/node_modules/axios/lib/cancel/Cancel.js");
            function CancelToken(executor) {
                if ("function" !== typeof executor) throw new TypeError("executor must be a function.");
                var resolvePromise;
                this.promise = new Promise((function(resolve) {
                    resolvePromise = resolve;
                }));
                var token = this;
                executor((function(message) {
                    if (token.reason) return;
                    token.reason = new Cancel(message);
                    resolvePromise(token.reason);
                }));
            }
            CancelToken.prototype.throwIfRequested = function() {
                if (this.reason) throw this.reason;
            };
            CancelToken.source = function() {
                var cancel;
                var token = new CancelToken((function(c) {
                    cancel = c;
                }));
                return {
                    token,
                    cancel
                };
            };
            module.exports = CancelToken;
        },
        "../shared/node_modules/axios/lib/cancel/isCancel.js": module => {
            "use strict";
            module.exports = function(value) {
                return !!(value && value.__CANCEL__);
            };
        },
        "../shared/node_modules/axios/lib/core/Axios.js": (module, __unused_webpack_exports, __webpack_require__) => {
            "use strict";
            var utils = __webpack_require__("../shared/node_modules/axios/lib/utils.js");
            var buildURL = __webpack_require__("../shared/node_modules/axios/lib/helpers/buildURL.js");
            var InterceptorManager = __webpack_require__("../shared/node_modules/axios/lib/core/InterceptorManager.js");
            var dispatchRequest = __webpack_require__("../shared/node_modules/axios/lib/core/dispatchRequest.js");
            var mergeConfig = __webpack_require__("../shared/node_modules/axios/lib/core/mergeConfig.js");
            var validator = __webpack_require__("../shared/node_modules/axios/lib/helpers/validator.js");
            var validators = validator.validators;
            function Axios(instanceConfig) {
                this.defaults = instanceConfig;
                this.interceptors = {
                    request: new InterceptorManager,
                    response: new InterceptorManager
                };
            }
            Axios.prototype.request = function(config) {
                if ("string" === typeof config) {
                    config = arguments[1] || {};
                    config.url = arguments[0];
                } else config = config || {};
                config = mergeConfig(this.defaults, config);
                if (config.method) config.method = config.method.toLowerCase(); else if (this.defaults.method) config.method = this.defaults.method.toLowerCase(); else config.method = "get";
                var transitional = config.transitional;
                if (void 0 !== transitional) validator.assertOptions(transitional, {
                    silentJSONParsing: validators.transitional(validators.boolean, "1.0.0"),
                    forcedJSONParsing: validators.transitional(validators.boolean, "1.0.0"),
                    clarifyTimeoutError: validators.transitional(validators.boolean, "1.0.0")
                }, false);
                var requestInterceptorChain = [];
                var synchronousRequestInterceptors = true;
                this.interceptors.request.forEach((function(interceptor) {
                    if ("function" === typeof interceptor.runWhen && false === interceptor.runWhen(config)) return;
                    synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
                    requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
                }));
                var responseInterceptorChain = [];
                this.interceptors.response.forEach((function(interceptor) {
                    responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
                }));
                var promise;
                if (!synchronousRequestInterceptors) {
                    var chain = [ dispatchRequest, void 0 ];
                    Array.prototype.unshift.apply(chain, requestInterceptorChain);
                    chain = chain.concat(responseInterceptorChain);
                    promise = Promise.resolve(config);
                    while (chain.length) promise = promise.then(chain.shift(), chain.shift());
                    return promise;
                }
                var newConfig = config;
                while (requestInterceptorChain.length) {
                    var onFulfilled = requestInterceptorChain.shift();
                    var onRejected = requestInterceptorChain.shift();
                    try {
                        newConfig = onFulfilled(newConfig);
                    } catch (error) {
                        onRejected(error);
                        break;
                    }
                }
                try {
                    promise = dispatchRequest(newConfig);
                } catch (error) {
                    return Promise.reject(error);
                }
                while (responseInterceptorChain.length) promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
                return promise;
            };
            Axios.prototype.getUri = function(config) {
                config = mergeConfig(this.defaults, config);
                return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, "");
            };
            utils.forEach([ "delete", "get", "head", "options" ], (function(method) {
                Axios.prototype[method] = function(url, config) {
                    return this.request(mergeConfig(config || {}, {
                        method,
                        url,
                        data: (config || {}).data
                    }));
                };
            }));
            utils.forEach([ "post", "put", "patch" ], (function(method) {
                Axios.prototype[method] = function(url, data, config) {
                    return this.request(mergeConfig(config || {}, {
                        method,
                        url,
                        data
                    }));
                };
            }));
            module.exports = Axios;
        },
        "../shared/node_modules/axios/lib/core/InterceptorManager.js": (module, __unused_webpack_exports, __webpack_require__) => {
            "use strict";
            var utils = __webpack_require__("../shared/node_modules/axios/lib/utils.js");
            function InterceptorManager() {
                this.handlers = [];
            }
            InterceptorManager.prototype.use = function(fulfilled, rejected, options) {
                this.handlers.push({
                    fulfilled,
                    rejected,
                    synchronous: options ? options.synchronous : false,
                    runWhen: options ? options.runWhen : null
                });
                return this.handlers.length - 1;
            };
            InterceptorManager.prototype.eject = function(id) {
                if (this.handlers[id]) this.handlers[id] = null;
            };
            InterceptorManager.prototype.forEach = function(fn) {
                utils.forEach(this.handlers, (function(h) {
                    if (null !== h) fn(h);
                }));
            };
            module.exports = InterceptorManager;
        },
        "../shared/node_modules/axios/lib/core/buildFullPath.js": (module, __unused_webpack_exports, __webpack_require__) => {
            "use strict";
            var isAbsoluteURL = __webpack_require__("../shared/node_modules/axios/lib/helpers/isAbsoluteURL.js");
            var combineURLs = __webpack_require__("../shared/node_modules/axios/lib/helpers/combineURLs.js");
            module.exports = function(baseURL, requestedURL) {
                if (baseURL && !isAbsoluteURL(requestedURL)) return combineURLs(baseURL, requestedURL);
                return requestedURL;
            };
        },
        "../shared/node_modules/axios/lib/core/createError.js": (module, __unused_webpack_exports, __webpack_require__) => {
            "use strict";
            var enhanceError = __webpack_require__("../shared/node_modules/axios/lib/core/enhanceError.js");
            module.exports = function(message, config, code, request, response) {
                var error = new Error(message);
                return enhanceError(error, config, code, request, response);
            };
        },
        "../shared/node_modules/axios/lib/core/dispatchRequest.js": (module, __unused_webpack_exports, __webpack_require__) => {
            "use strict";
            var utils = __webpack_require__("../shared/node_modules/axios/lib/utils.js");
            var transformData = __webpack_require__("../shared/node_modules/axios/lib/core/transformData.js");
            var isCancel = __webpack_require__("../shared/node_modules/axios/lib/cancel/isCancel.js");
            var defaults = __webpack_require__("../shared/node_modules/axios/lib/defaults.js");
            function throwIfCancellationRequested(config) {
                if (config.cancelToken) config.cancelToken.throwIfRequested();
            }
            module.exports = function(config) {
                throwIfCancellationRequested(config);
                config.headers = config.headers || {};
                config.data = transformData.call(config, config.data, config.headers, config.transformRequest);
                config.headers = utils.merge(config.headers.common || {}, config.headers[config.method] || {}, config.headers);
                utils.forEach([ "delete", "get", "head", "post", "put", "patch", "common" ], (function(method) {
                    delete config.headers[method];
                }));
                var adapter = config.adapter || defaults.adapter;
                return adapter(config).then((function(response) {
                    throwIfCancellationRequested(config);
                    response.data = transformData.call(config, response.data, response.headers, config.transformResponse);
                    return response;
                }), (function(reason) {
                    if (!isCancel(reason)) {
                        throwIfCancellationRequested(config);
                        if (reason && reason.response) reason.response.data = transformData.call(config, reason.response.data, reason.response.headers, config.transformResponse);
                    }
                    return Promise.reject(reason);
                }));
            };
        },
        "../shared/node_modules/axios/lib/core/enhanceError.js": module => {
            "use strict";
            module.exports = function(error, config, code, request, response) {
                error.config = config;
                if (code) error.code = code;
                error.request = request;
                error.response = response;
                error.isAxiosError = true;
                error.toJSON = function() {
                    return {
                        message: this.message,
                        name: this.name,
                        description: this.description,
                        number: this.number,
                        fileName: this.fileName,
                        lineNumber: this.lineNumber,
                        columnNumber: this.columnNumber,
                        stack: this.stack,
                        config: this.config,
                        code: this.code
                    };
                };
                return error;
            };
        },
        "../shared/node_modules/axios/lib/core/mergeConfig.js": (module, __unused_webpack_exports, __webpack_require__) => {
            "use strict";
            var utils = __webpack_require__("../shared/node_modules/axios/lib/utils.js");
            module.exports = function(config1, config2) {
                config2 = config2 || {};
                var config = {};
                var valueFromConfig2Keys = [ "url", "method", "data" ];
                var mergeDeepPropertiesKeys = [ "headers", "auth", "proxy", "params" ];
                var defaultToConfig2Keys = [ "baseURL", "transformRequest", "transformResponse", "paramsSerializer", "timeout", "timeoutMessage", "withCredentials", "adapter", "responseType", "xsrfCookieName", "xsrfHeaderName", "onUploadProgress", "onDownloadProgress", "decompress", "maxContentLength", "maxBodyLength", "maxRedirects", "transport", "httpAgent", "httpsAgent", "cancelToken", "socketPath", "responseEncoding" ];
                var directMergeKeys = [ "validateStatus" ];
                function getMergedValue(target, source) {
                    if (utils.isPlainObject(target) && utils.isPlainObject(source)) return utils.merge(target, source); else if (utils.isPlainObject(source)) return utils.merge({}, source); else if (utils.isArray(source)) return source.slice();
                    return source;
                }
                function mergeDeepProperties(prop) {
                    if (!utils.isUndefined(config2[prop])) config[prop] = getMergedValue(config1[prop], config2[prop]); else if (!utils.isUndefined(config1[prop])) config[prop] = getMergedValue(void 0, config1[prop]);
                }
                utils.forEach(valueFromConfig2Keys, (function(prop) {
                    if (!utils.isUndefined(config2[prop])) config[prop] = getMergedValue(void 0, config2[prop]);
                }));
                utils.forEach(mergeDeepPropertiesKeys, mergeDeepProperties);
                utils.forEach(defaultToConfig2Keys, (function(prop) {
                    if (!utils.isUndefined(config2[prop])) config[prop] = getMergedValue(void 0, config2[prop]); else if (!utils.isUndefined(config1[prop])) config[prop] = getMergedValue(void 0, config1[prop]);
                }));
                utils.forEach(directMergeKeys, (function(prop) {
                    if (prop in config2) config[prop] = getMergedValue(config1[prop], config2[prop]); else if (prop in config1) config[prop] = getMergedValue(void 0, config1[prop]);
                }));
                var axiosKeys = valueFromConfig2Keys.concat(mergeDeepPropertiesKeys).concat(defaultToConfig2Keys).concat(directMergeKeys);
                var otherKeys = Object.keys(config1).concat(Object.keys(config2)).filter((function(key) {
                    return -1 === axiosKeys.indexOf(key);
                }));
                utils.forEach(otherKeys, mergeDeepProperties);
                return config;
            };
        },
        "../shared/node_modules/axios/lib/core/settle.js": (module, __unused_webpack_exports, __webpack_require__) => {
            "use strict";
            var createError = __webpack_require__("../shared/node_modules/axios/lib/core/createError.js");
            module.exports = function(resolve, reject, response) {
                var validateStatus = response.config.validateStatus;
                if (!response.status || !validateStatus || validateStatus(response.status)) resolve(response); else reject(createError("Request failed with status code " + response.status, response.config, null, response.request, response));
            };
        },
        "../shared/node_modules/axios/lib/core/transformData.js": (module, __unused_webpack_exports, __webpack_require__) => {
            "use strict";
            var utils = __webpack_require__("../shared/node_modules/axios/lib/utils.js");
            var defaults = __webpack_require__("../shared/node_modules/axios/lib/defaults.js");
            module.exports = function(data, headers, fns) {
                var context = this || defaults;
                utils.forEach(fns, (function(fn) {
                    data = fn.call(context, data, headers);
                }));
                return data;
            };
        },
        "../shared/node_modules/axios/lib/defaults.js": (module, __unused_webpack_exports, __webpack_require__) => {
            "use strict";
            var utils = __webpack_require__("../shared/node_modules/axios/lib/utils.js");
            var normalizeHeaderName = __webpack_require__("../shared/node_modules/axios/lib/helpers/normalizeHeaderName.js");
            var enhanceError = __webpack_require__("../shared/node_modules/axios/lib/core/enhanceError.js");
            var DEFAULT_CONTENT_TYPE = {
                "Content-Type": "application/x-www-form-urlencoded"
            };
            function setContentTypeIfUnset(headers, value) {
                if (!utils.isUndefined(headers) && utils.isUndefined(headers["Content-Type"])) headers["Content-Type"] = value;
            }
            function getDefaultAdapter() {
                var adapter;
                if ("undefined" !== typeof XMLHttpRequest) adapter = __webpack_require__("../shared/node_modules/axios/lib/adapters/xhr.js"); else if ("undefined" !== typeof process && "[object process]" === Object.prototype.toString.call(process)) adapter = __webpack_require__("../shared/node_modules/axios/lib/adapters/xhr.js");
                return adapter;
            }
            function stringifySafely(rawValue, parser, encoder) {
                if (utils.isString(rawValue)) try {
                    (parser || JSON.parse)(rawValue);
                    return utils.trim(rawValue);
                } catch (e) {
                    if ("SyntaxError" !== e.name) throw e;
                }
                return (encoder || JSON.stringify)(rawValue);
            }
            var defaults = {
                transitional: {
                    silentJSONParsing: true,
                    forcedJSONParsing: true,
                    clarifyTimeoutError: false
                },
                adapter: getDefaultAdapter(),
                transformRequest: [ function(data, headers) {
                    normalizeHeaderName(headers, "Accept");
                    normalizeHeaderName(headers, "Content-Type");
                    if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) return data;
                    if (utils.isArrayBufferView(data)) return data.buffer;
                    if (utils.isURLSearchParams(data)) {
                        setContentTypeIfUnset(headers, "application/x-www-form-urlencoded;charset=utf-8");
                        return data.toString();
                    }
                    if (utils.isObject(data) || headers && "application/json" === headers["Content-Type"]) {
                        setContentTypeIfUnset(headers, "application/json");
                        return stringifySafely(data);
                    }
                    return data;
                } ],
                transformResponse: [ function(data) {
                    var transitional = this.transitional;
                    var silentJSONParsing = transitional && transitional.silentJSONParsing;
                    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
                    var strictJSONParsing = !silentJSONParsing && "json" === this.responseType;
                    if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) try {
                        return JSON.parse(data);
                    } catch (e) {
                        if (strictJSONParsing) {
                            if ("SyntaxError" === e.name) throw enhanceError(e, this, "E_JSON_PARSE");
                            throw e;
                        }
                    }
                    return data;
                } ],
                timeout: 0,
                xsrfCookieName: "XSRF-TOKEN",
                xsrfHeaderName: "X-XSRF-TOKEN",
                maxContentLength: -1,
                maxBodyLength: -1,
                validateStatus: function(status) {
                    return status >= 200 && status < 300;
                }
            };
            defaults.headers = {
                common: {
                    Accept: "application/json, text/plain, */*"
                }
            };
            utils.forEach([ "delete", "get", "head" ], (function(method) {
                defaults.headers[method] = {};
            }));
            utils.forEach([ "post", "put", "patch" ], (function(method) {
                defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
            }));
            module.exports = defaults;
        },
        "../shared/node_modules/axios/lib/helpers/bind.js": module => {
            "use strict";
            module.exports = function(fn, thisArg) {
                return function() {
                    var args = new Array(arguments.length);
                    for (var i = 0; i < args.length; i++) args[i] = arguments[i];
                    return fn.apply(thisArg, args);
                };
            };
        },
        "../shared/node_modules/axios/lib/helpers/buildURL.js": (module, __unused_webpack_exports, __webpack_require__) => {
            "use strict";
            var utils = __webpack_require__("../shared/node_modules/axios/lib/utils.js");
            function encode(val) {
                return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
            }
            module.exports = function(url, params, paramsSerializer) {
                if (!params) return url;
                var serializedParams;
                if (paramsSerializer) serializedParams = paramsSerializer(params); else if (utils.isURLSearchParams(params)) serializedParams = params.toString(); else {
                    var parts = [];
                    utils.forEach(params, (function(val, key) {
                        if (null === val || "undefined" === typeof val) return;
                        if (utils.isArray(val)) key += "[]"; else val = [ val ];
                        utils.forEach(val, (function(v) {
                            if (utils.isDate(v)) v = v.toISOString(); else if (utils.isObject(v)) v = JSON.stringify(v);
                            parts.push(encode(key) + "=" + encode(v));
                        }));
                    }));
                    serializedParams = parts.join("&");
                }
                if (serializedParams) {
                    var hashmarkIndex = url.indexOf("#");
                    if (-1 !== hashmarkIndex) url = url.slice(0, hashmarkIndex);
                    url += (-1 === url.indexOf("?") ? "?" : "&") + serializedParams;
                }
                return url;
            };
        },
        "../shared/node_modules/axios/lib/helpers/combineURLs.js": module => {
            "use strict";
            module.exports = function(baseURL, relativeURL) {
                return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
            };
        },
        "../shared/node_modules/axios/lib/helpers/cookies.js": (module, __unused_webpack_exports, __webpack_require__) => {
            "use strict";
            var utils = __webpack_require__("../shared/node_modules/axios/lib/utils.js");
            module.exports = utils.isStandardBrowserEnv() ? function() {
                return {
                    write: function(name, value, expires, path, domain, secure) {
                        var cookie = [];
                        cookie.push(name + "=" + encodeURIComponent(value));
                        if (utils.isNumber(expires)) cookie.push("expires=" + new Date(expires).toGMTString());
                        if (utils.isString(path)) cookie.push("path=" + path);
                        if (utils.isString(domain)) cookie.push("domain=" + domain);
                        if (true === secure) cookie.push("secure");
                        document.cookie = cookie.join("; ");
                    },
                    read: function(name) {
                        var match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
                        return match ? decodeURIComponent(match[3]) : null;
                    },
                    remove: function(name) {
                        this.write(name, "", Date.now() - 864e5);
                    }
                };
            }() : function() {
                return {
                    write: function() {},
                    read: function() {
                        return null;
                    },
                    remove: function() {}
                };
            }();
        },
        "../shared/node_modules/axios/lib/helpers/isAbsoluteURL.js": module => {
            "use strict";
            module.exports = function(url) {
                return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
            };
        },
        "../shared/node_modules/axios/lib/helpers/isAxiosError.js": module => {
            "use strict";
            module.exports = function(payload) {
                return "object" === typeof payload && true === payload.isAxiosError;
            };
        },
        "../shared/node_modules/axios/lib/helpers/isURLSameOrigin.js": (module, __unused_webpack_exports, __webpack_require__) => {
            "use strict";
            var utils = __webpack_require__("../shared/node_modules/axios/lib/utils.js");
            module.exports = utils.isStandardBrowserEnv() ? function() {
                var msie = /(msie|trident)/i.test(navigator.userAgent);
                var urlParsingNode = document.createElement("a");
                var originURL;
                function resolveURL(url) {
                    var href = url;
                    if (msie) {
                        urlParsingNode.setAttribute("href", href);
                        href = urlParsingNode.href;
                    }
                    urlParsingNode.setAttribute("href", href);
                    return {
                        href: urlParsingNode.href,
                        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
                        host: urlParsingNode.host,
                        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
                        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
                        hostname: urlParsingNode.hostname,
                        port: urlParsingNode.port,
                        pathname: "/" === urlParsingNode.pathname.charAt(0) ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
                    };
                }
                originURL = resolveURL(window.location.href);
                return function(requestURL) {
                    var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
                    return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
                };
            }() : function() {
                return function() {
                    return true;
                };
            }();
        },
        "../shared/node_modules/axios/lib/helpers/normalizeHeaderName.js": (module, __unused_webpack_exports, __webpack_require__) => {
            "use strict";
            var utils = __webpack_require__("../shared/node_modules/axios/lib/utils.js");
            module.exports = function(headers, normalizedName) {
                utils.forEach(headers, (function(value, name) {
                    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
                        headers[normalizedName] = value;
                        delete headers[name];
                    }
                }));
            };
        },
        "../shared/node_modules/axios/lib/helpers/parseHeaders.js": (module, __unused_webpack_exports, __webpack_require__) => {
            "use strict";
            var utils = __webpack_require__("../shared/node_modules/axios/lib/utils.js");
            var ignoreDuplicateOf = [ "age", "authorization", "content-length", "content-type", "etag", "expires", "from", "host", "if-modified-since", "if-unmodified-since", "last-modified", "location", "max-forwards", "proxy-authorization", "referer", "retry-after", "user-agent" ];
            module.exports = function(headers) {
                var parsed = {};
                var key;
                var val;
                var i;
                if (!headers) return parsed;
                utils.forEach(headers.split("\n"), (function(line) {
                    i = line.indexOf(":");
                    key = utils.trim(line.substr(0, i)).toLowerCase();
                    val = utils.trim(line.substr(i + 1));
                    if (key) {
                        if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) return;
                        if ("set-cookie" === key) parsed[key] = (parsed[key] ? parsed[key] : []).concat([ val ]); else parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
                    }
                }));
                return parsed;
            };
        },
        "../shared/node_modules/axios/lib/helpers/spread.js": module => {
            "use strict";
            module.exports = function(callback) {
                return function(arr) {
                    return callback.apply(null, arr);
                };
            };
        },
        "../shared/node_modules/axios/lib/helpers/validator.js": (module, __unused_webpack_exports, __webpack_require__) => {
            "use strict";
            var pkg = __webpack_require__("../shared/node_modules/axios/package.json");
            var validators = {};
            [ "object", "boolean", "number", "function", "string", "symbol" ].forEach((function(type, i) {
                validators[type] = function(thing) {
                    return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
                };
            }));
            var deprecatedWarnings = {};
            var currentVerArr = pkg.version.split(".");
            function isOlderVersion(version, thanVersion) {
                var pkgVersionArr = thanVersion ? thanVersion.split(".") : currentVerArr;
                var destVer = version.split(".");
                for (var i = 0; i < 3; i++) if (pkgVersionArr[i] > destVer[i]) return true; else if (pkgVersionArr[i] < destVer[i]) return false;
                return false;
            }
            validators.transitional = function(validator, version, message) {
                var isDeprecated = version && isOlderVersion(version);
                function formatMessage(opt, desc) {
                    return "[Axios v" + pkg.version + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
                }
                return function(value, opt, opts) {
                    if (false === validator) throw new Error(formatMessage(opt, " has been removed in " + version));
                    if (isDeprecated && !deprecatedWarnings[opt]) {
                        deprecatedWarnings[opt] = true;
                        console.warn(formatMessage(opt, " has been deprecated since v" + version + " and will be removed in the near future"));
                    }
                    return validator ? validator(value, opt, opts) : true;
                };
            };
            function assertOptions(options, schema, allowUnknown) {
                if ("object" !== typeof options) throw new TypeError("options must be an object");
                var keys = Object.keys(options);
                var i = keys.length;
                while (i-- > 0) {
                    var opt = keys[i];
                    var validator = schema[opt];
                    if (validator) {
                        var value = options[opt];
                        var result = void 0 === value || validator(value, opt, options);
                        if (true !== result) throw new TypeError("option " + opt + " must be " + result);
                        continue;
                    }
                    if (true !== allowUnknown) throw Error("Unknown option " + opt);
                }
            }
            module.exports = {
                isOlderVersion,
                assertOptions,
                validators
            };
        },
        "../shared/node_modules/axios/lib/utils.js": (module, __unused_webpack_exports, __webpack_require__) => {
            "use strict";
            var bind = __webpack_require__("../shared/node_modules/axios/lib/helpers/bind.js");
            var toString = Object.prototype.toString;
            function isArray(val) {
                return "[object Array]" === toString.call(val);
            }
            function isUndefined(val) {
                return "undefined" === typeof val;
            }
            function isBuffer(val) {
                return null !== val && !isUndefined(val) && null !== val.constructor && !isUndefined(val.constructor) && "function" === typeof val.constructor.isBuffer && val.constructor.isBuffer(val);
            }
            function isArrayBuffer(val) {
                return "[object ArrayBuffer]" === toString.call(val);
            }
            function isFormData(val) {
                return "undefined" !== typeof FormData && val instanceof FormData;
            }
            function isArrayBufferView(val) {
                var result;
                if ("undefined" !== typeof ArrayBuffer && ArrayBuffer.isView) result = ArrayBuffer.isView(val); else result = val && val.buffer && val.buffer instanceof ArrayBuffer;
                return result;
            }
            function isString(val) {
                return "string" === typeof val;
            }
            function isNumber(val) {
                return "number" === typeof val;
            }
            function isObject(val) {
                return null !== val && "object" === typeof val;
            }
            function isPlainObject(val) {
                if ("[object Object]" !== toString.call(val)) return false;
                var prototype = Object.getPrototypeOf(val);
                return null === prototype || prototype === Object.prototype;
            }
            function isDate(val) {
                return "[object Date]" === toString.call(val);
            }
            function isFile(val) {
                return "[object File]" === toString.call(val);
            }
            function isBlob(val) {
                return "[object Blob]" === toString.call(val);
            }
            function isFunction(val) {
                return "[object Function]" === toString.call(val);
            }
            function isStream(val) {
                return isObject(val) && isFunction(val.pipe);
            }
            function isURLSearchParams(val) {
                return "undefined" !== typeof URLSearchParams && val instanceof URLSearchParams;
            }
            function trim(str) {
                return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, "");
            }
            function isStandardBrowserEnv() {
                if ("undefined" !== typeof navigator && ("ReactNative" === navigator.product || "NativeScript" === navigator.product || "NS" === navigator.product)) return false;
                return "undefined" !== typeof window && "undefined" !== typeof document;
            }
            function forEach(obj, fn) {
                if (null === obj || "undefined" === typeof obj) return;
                if ("object" !== typeof obj) obj = [ obj ];
                if (isArray(obj)) for (var i = 0, l = obj.length; i < l; i++) fn.call(null, obj[i], i, obj); else for (var key in obj) if (Object.prototype.hasOwnProperty.call(obj, key)) fn.call(null, obj[key], key, obj);
            }
            function merge() {
                var result = {};
                function assignValue(val, key) {
                    if (isPlainObject(result[key]) && isPlainObject(val)) result[key] = merge(result[key], val); else if (isPlainObject(val)) result[key] = merge({}, val); else if (isArray(val)) result[key] = val.slice(); else result[key] = val;
                }
                for (var i = 0, l = arguments.length; i < l; i++) forEach(arguments[i], assignValue);
                return result;
            }
            function extend(a, b, thisArg) {
                forEach(b, (function(val, key) {
                    if (thisArg && "function" === typeof val) a[key] = bind(val, thisArg); else a[key] = val;
                }));
                return a;
            }
            function stripBOM(content) {
                if (65279 === content.charCodeAt(0)) content = content.slice(1);
                return content;
            }
            module.exports = {
                isArray,
                isArrayBuffer,
                isBuffer,
                isFormData,
                isArrayBufferView,
                isString,
                isNumber,
                isObject,
                isPlainObject,
                isUndefined,
                isDate,
                isFile,
                isBlob,
                isFunction,
                isStream,
                isURLSearchParams,
                isStandardBrowserEnv,
                forEach,
                merge,
                extend,
                trim,
                stripBOM
            };
        },
        "../shared/node_modules/debug/node_modules/ms/index.js": module => {
            var s = 1e3;
            var m = 60 * s;
            var h = 60 * m;
            var d = 24 * h;
            var w = 7 * d;
            var y = 365.25 * d;
            module.exports = function(val, options) {
                options = options || {};
                var type = typeof val;
                if ("string" === type && val.length > 0) return parse(val); else if ("number" === type && isFinite(val)) return options.long ? fmtLong(val) : fmtShort(val);
                throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(val));
            };
            function parse(str) {
                str = String(str);
                if (str.length > 100) return;
                var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);
                if (!match) return;
                var n = parseFloat(match[1]);
                var type = (match[2] || "ms").toLowerCase();
                switch (type) {
                  case "years":
                  case "year":
                  case "yrs":
                  case "yr":
                  case "y":
                    return n * y;

                  case "weeks":
                  case "week":
                  case "w":
                    return n * w;

                  case "days":
                  case "day":
                  case "d":
                    return n * d;

                  case "hours":
                  case "hour":
                  case "hrs":
                  case "hr":
                  case "h":
                    return n * h;

                  case "minutes":
                  case "minute":
                  case "mins":
                  case "min":
                  case "m":
                    return n * m;

                  case "seconds":
                  case "second":
                  case "secs":
                  case "sec":
                  case "s":
                    return n * s;

                  case "milliseconds":
                  case "millisecond":
                  case "msecs":
                  case "msec":
                  case "ms":
                    return n;

                  default:
                    return;
                }
            }
            function fmtShort(ms) {
                var msAbs = Math.abs(ms);
                if (msAbs >= d) return Math.round(ms / d) + "d";
                if (msAbs >= h) return Math.round(ms / h) + "h";
                if (msAbs >= m) return Math.round(ms / m) + "m";
                if (msAbs >= s) return Math.round(ms / s) + "s";
                return ms + "ms";
            }
            function fmtLong(ms) {
                var msAbs = Math.abs(ms);
                if (msAbs >= d) return plural(ms, msAbs, d, "day");
                if (msAbs >= h) return plural(ms, msAbs, h, "hour");
                if (msAbs >= m) return plural(ms, msAbs, m, "minute");
                if (msAbs >= s) return plural(ms, msAbs, s, "second");
                return ms + " ms";
            }
            function plural(ms, msAbs, n, name) {
                var isPlural = msAbs >= 1.5 * n;
                return Math.round(ms / n) + " " + name + (isPlural ? "s" : "");
            }
        },
        "../shared/node_modules/debug/src/browser.js": (module, exports, __webpack_require__) => {
            exports.formatArgs = formatArgs;
            exports.save = save;
            exports.load = load;
            exports.useColors = useColors;
            exports.storage = localstorage();
            exports.destroy = (() => {
                let warned = false;
                return () => {
                    if (!warned) {
                        warned = true;
                        console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
                    }
                };
            })();
            exports.colors = [ "#0000CC", "#0000FF", "#0033CC", "#0033FF", "#0066CC", "#0066FF", "#0099CC", "#0099FF", "#00CC00", "#00CC33", "#00CC66", "#00CC99", "#00CCCC", "#00CCFF", "#3300CC", "#3300FF", "#3333CC", "#3333FF", "#3366CC", "#3366FF", "#3399CC", "#3399FF", "#33CC00", "#33CC33", "#33CC66", "#33CC99", "#33CCCC", "#33CCFF", "#6600CC", "#6600FF", "#6633CC", "#6633FF", "#66CC00", "#66CC33", "#9900CC", "#9900FF", "#9933CC", "#9933FF", "#99CC00", "#99CC33", "#CC0000", "#CC0033", "#CC0066", "#CC0099", "#CC00CC", "#CC00FF", "#CC3300", "#CC3333", "#CC3366", "#CC3399", "#CC33CC", "#CC33FF", "#CC6600", "#CC6633", "#CC9900", "#CC9933", "#CCCC00", "#CCCC33", "#FF0000", "#FF0033", "#FF0066", "#FF0099", "#FF00CC", "#FF00FF", "#FF3300", "#FF3333", "#FF3366", "#FF3399", "#FF33CC", "#FF33FF", "#FF6600", "#FF6633", "#FF9900", "#FF9933", "#FFCC00", "#FFCC33" ];
            function useColors() {
                if ("undefined" !== typeof window && window.process && ("renderer" === window.process.type || window.process.__nwjs)) return true;
                if ("undefined" !== typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) return false;
                return "undefined" !== typeof document && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || "undefined" !== typeof window && window.console && (window.console.firebug || window.console.exception && window.console.table) || "undefined" !== typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || "undefined" !== typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
            }
            function formatArgs(args) {
                args[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args[0] + (this.useColors ? "%c " : " ") + "+" + module.exports.humanize(this.diff);
                if (!this.useColors) return;
                const c = "color: " + this.color;
                args.splice(1, 0, c, "color: inherit");
                let index = 0;
                let lastC = 0;
                args[0].replace(/%[a-zA-Z%]/g, (match => {
                    if ("%%" === match) return;
                    index++;
                    if ("%c" === match) lastC = index;
                }));
                args.splice(lastC, 0, c);
            }
            exports.log = console.debug || console.log || (() => {});
            function save(namespaces) {
                try {
                    if (namespaces) exports.storage.setItem("debug", namespaces); else exports.storage.removeItem("debug");
                } catch (error) {}
            }
            function load() {
                let r;
                try {
                    r = exports.storage.getItem("debug");
                } catch (error) {}
                if (!r && "undefined" !== typeof process && "env" in process) r = "MISSING_ENV_VAR".DEBUG;
                return r;
            }
            function localstorage() {
                try {
                    return localStorage;
                } catch (error) {}
            }
            module.exports = __webpack_require__("../shared/node_modules/debug/src/common.js")(exports);
            const {formatters} = module.exports;
            formatters.j = function(v) {
                try {
                    return JSON.stringify(v);
                } catch (error) {
                    return "[UnexpectedJSONParseError]: " + error.message;
                }
            };
        },
        "../shared/node_modules/debug/src/common.js": (module, __unused_webpack_exports, __webpack_require__) => {
            function setup(env) {
                createDebug.debug = createDebug;
                createDebug.default = createDebug;
                createDebug.coerce = coerce;
                createDebug.disable = disable;
                createDebug.enable = enable;
                createDebug.enabled = enabled;
                createDebug.humanize = __webpack_require__("../shared/node_modules/debug/node_modules/ms/index.js");
                createDebug.destroy = destroy;
                Object.keys(env).forEach((key => {
                    createDebug[key] = env[key];
                }));
                createDebug.names = [];
                createDebug.skips = [];
                createDebug.formatters = {};
                function selectColor(namespace) {
                    let hash = 0;
                    for (let i = 0; i < namespace.length; i++) {
                        hash = (hash << 5) - hash + namespace.charCodeAt(i);
                        hash |= 0;
                    }
                    return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
                }
                createDebug.selectColor = selectColor;
                function createDebug(namespace) {
                    let prevTime;
                    let enableOverride = null;
                    let namespacesCache;
                    let enabledCache;
                    function debug(...args) {
                        if (!debug.enabled) return;
                        const self = debug;
                        const curr = Number(new Date);
                        const ms = curr - (prevTime || curr);
                        self.diff = ms;
                        self.prev = prevTime;
                        self.curr = curr;
                        prevTime = curr;
                        args[0] = createDebug.coerce(args[0]);
                        if ("string" !== typeof args[0]) args.unshift("%O");
                        let index = 0;
                        args[0] = args[0].replace(/%([a-zA-Z%])/g, ((match, format) => {
                            if ("%%" === match) return "%";
                            index++;
                            const formatter = createDebug.formatters[format];
                            if ("function" === typeof formatter) {
                                const val = args[index];
                                match = formatter.call(self, val);
                                args.splice(index, 1);
                                index--;
                            }
                            return match;
                        }));
                        createDebug.formatArgs.call(self, args);
                        const logFn = self.log || createDebug.log;
                        logFn.apply(self, args);
                    }
                    debug.namespace = namespace;
                    debug.useColors = createDebug.useColors();
                    debug.color = createDebug.selectColor(namespace);
                    debug.extend = extend;
                    debug.destroy = createDebug.destroy;
                    Object.defineProperty(debug, "enabled", {
                        enumerable: true,
                        configurable: false,
                        get: () => {
                            if (null !== enableOverride) return enableOverride;
                            if (namespacesCache !== createDebug.namespaces) {
                                namespacesCache = createDebug.namespaces;
                                enabledCache = createDebug.enabled(namespace);
                            }
                            return enabledCache;
                        },
                        set: v => {
                            enableOverride = v;
                        }
                    });
                    if ("function" === typeof createDebug.init) createDebug.init(debug);
                    return debug;
                }
                function extend(namespace, delimiter) {
                    const newDebug = createDebug(this.namespace + ("undefined" === typeof delimiter ? ":" : delimiter) + namespace);
                    newDebug.log = this.log;
                    return newDebug;
                }
                function enable(namespaces) {
                    createDebug.save(namespaces);
                    createDebug.namespaces = namespaces;
                    createDebug.names = [];
                    createDebug.skips = [];
                    let i;
                    const split = ("string" === typeof namespaces ? namespaces : "").split(/[\s,]+/);
                    const len = split.length;
                    for (i = 0; i < len; i++) {
                        if (!split[i]) continue;
                        namespaces = split[i].replace(/\*/g, ".*?");
                        if ("-" === namespaces[0]) createDebug.skips.push(new RegExp("^" + namespaces.slice(1) + "$")); else createDebug.names.push(new RegExp("^" + namespaces + "$"));
                    }
                }
                function disable() {
                    const namespaces = [ ...createDebug.names.map(toNamespace), ...createDebug.skips.map(toNamespace).map((namespace => "-" + namespace)) ].join(",");
                    createDebug.enable("");
                    return namespaces;
                }
                function enabled(name) {
                    if ("*" === name[name.length - 1]) return true;
                    let i;
                    let len;
                    for (i = 0, len = createDebug.skips.length; i < len; i++) if (createDebug.skips[i].test(name)) return false;
                    for (i = 0, len = createDebug.names.length; i < len; i++) if (createDebug.names[i].test(name)) return true;
                    return false;
                }
                function toNamespace(regexp) {
                    return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\.\*\?$/, "*");
                }
                function coerce(val) {
                    if (val instanceof Error) return val.stack || val.message;
                    return val;
                }
                function destroy() {
                    console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
                }
                createDebug.enable(createDebug.load());
                return createDebug;
            }
            module.exports = setup;
        },
        "../shared/node_modules/decode-uri-component/index.js": module => {
            "use strict";
            var token = "%[a-f0-9]{2}";
            var singleMatcher = new RegExp(token, "gi");
            var multiMatcher = new RegExp("(" + token + ")+", "gi");
            function decodeComponents(components, split) {
                try {
                    return decodeURIComponent(components.join(""));
                } catch (err) {}
                if (1 === components.length) return components;
                split = split || 1;
                var left = components.slice(0, split);
                var right = components.slice(split);
                return Array.prototype.concat.call([], decodeComponents(left), decodeComponents(right));
            }
            function decode(input) {
                try {
                    return decodeURIComponent(input);
                } catch (err) {
                    var tokens = input.match(singleMatcher);
                    for (var i = 1; i < tokens.length; i++) {
                        input = decodeComponents(tokens, i).join("");
                        tokens = input.match(singleMatcher);
                    }
                    return input;
                }
            }
            function customDecodeURIComponent(input) {
                var replaceMap = {
                    "%FE%FF": "��",
                    "%FF%FE": "��"
                };
                var match = multiMatcher.exec(input);
                while (match) {
                    try {
                        replaceMap[match[0]] = decodeURIComponent(match[0]);
                    } catch (err) {
                        var result = decode(match[0]);
                        if (result !== match[0]) replaceMap[match[0]] = result;
                    }
                    match = multiMatcher.exec(input);
                }
                replaceMap["%C2"] = "�";
                var entries = Object.keys(replaceMap);
                for (var i = 0; i < entries.length; i++) {
                    var key = entries[i];
                    input = input.replace(new RegExp(key, "g"), replaceMap[key]);
                }
                return input;
            }
            module.exports = function(encodedURI) {
                if ("string" !== typeof encodedURI) throw new TypeError("Expected `encodedURI` to be of type `string`, got `" + typeof encodedURI + "`");
                try {
                    encodedURI = encodedURI.replace(/\+/g, " ");
                    return decodeURIComponent(encodedURI);
                } catch (err) {
                    return customDecodeURIComponent(encodedURI);
                }
            };
        },
        "../shared/node_modules/eventemitter3/index.js": module => {
            "use strict";
            var has = Object.prototype.hasOwnProperty, prefix = "~";
            function Events() {}
            if (Object.create) {
                Events.prototype = Object.create(null);
                if (!(new Events).__proto__) prefix = false;
            }
            function EE(fn, context, once) {
                this.fn = fn;
                this.context = context;
                this.once = once || false;
            }
            function addListener(emitter, event, fn, context, once) {
                if ("function" !== typeof fn) throw new TypeError("The listener must be a function");
                var listener = new EE(fn, context || emitter, once), evt = prefix ? prefix + event : event;
                if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++; else if (!emitter._events[evt].fn) emitter._events[evt].push(listener); else emitter._events[evt] = [ emitter._events[evt], listener ];
                return emitter;
            }
            function clearEvent(emitter, evt) {
                if (0 === --emitter._eventsCount) emitter._events = new Events; else delete emitter._events[evt];
            }
            function EventEmitter() {
                this._events = new Events;
                this._eventsCount = 0;
            }
            EventEmitter.prototype.eventNames = function() {
                var events, name, names = [];
                if (0 === this._eventsCount) return names;
                for (name in events = this._events) if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
                if (Object.getOwnPropertySymbols) return names.concat(Object.getOwnPropertySymbols(events));
                return names;
            };
            EventEmitter.prototype.listeners = function(event) {
                var evt = prefix ? prefix + event : event, handlers = this._events[evt];
                if (!handlers) return [];
                if (handlers.fn) return [ handlers.fn ];
                for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) ee[i] = handlers[i].fn;
                return ee;
            };
            EventEmitter.prototype.listenerCount = function(event) {
                var evt = prefix ? prefix + event : event, listeners = this._events[evt];
                if (!listeners) return 0;
                if (listeners.fn) return 1;
                return listeners.length;
            };
            EventEmitter.prototype.emit = function(event, a1, a2, a3, a4, a5) {
                var evt = prefix ? prefix + event : event;
                if (!this._events[evt]) return false;
                var args, i, listeners = this._events[evt], len = arguments.length;
                if (listeners.fn) {
                    if (listeners.once) this.removeListener(event, listeners.fn, void 0, true);
                    switch (len) {
                      case 1:
                        return listeners.fn.call(listeners.context), true;

                      case 2:
                        return listeners.fn.call(listeners.context, a1), true;

                      case 3:
                        return listeners.fn.call(listeners.context, a1, a2), true;

                      case 4:
                        return listeners.fn.call(listeners.context, a1, a2, a3), true;

                      case 5:
                        return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;

                      case 6:
                        return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
                    }
                    for (i = 1, args = new Array(len - 1); i < len; i++) args[i - 1] = arguments[i];
                    listeners.fn.apply(listeners.context, args);
                } else {
                    var j, length = listeners.length;
                    for (i = 0; i < length; i++) {
                        if (listeners[i].once) this.removeListener(event, listeners[i].fn, void 0, true);
                        switch (len) {
                          case 1:
                            listeners[i].fn.call(listeners[i].context);
                            break;

                          case 2:
                            listeners[i].fn.call(listeners[i].context, a1);
                            break;

                          case 3:
                            listeners[i].fn.call(listeners[i].context, a1, a2);
                            break;

                          case 4:
                            listeners[i].fn.call(listeners[i].context, a1, a2, a3);
                            break;

                          default:
                            if (!args) for (j = 1, args = new Array(len - 1); j < len; j++) args[j - 1] = arguments[j];
                            listeners[i].fn.apply(listeners[i].context, args);
                        }
                    }
                }
                return true;
            };
            EventEmitter.prototype.on = function(event, fn, context) {
                return addListener(this, event, fn, context, false);
            };
            EventEmitter.prototype.once = function(event, fn, context) {
                return addListener(this, event, fn, context, true);
            };
            EventEmitter.prototype.removeListener = function(event, fn, context, once) {
                var evt = prefix ? prefix + event : event;
                if (!this._events[evt]) return this;
                if (!fn) {
                    clearEvent(this, evt);
                    return this;
                }
                var listeners = this._events[evt];
                if (listeners.fn) {
                    if (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) clearEvent(this, evt);
                } else {
                    for (var i = 0, events = [], length = listeners.length; i < length; i++) if (listeners[i].fn !== fn || once && !listeners[i].once || context && listeners[i].context !== context) events.push(listeners[i]);
                    if (events.length) this._events[evt] = 1 === events.length ? events[0] : events; else clearEvent(this, evt);
                }
                return this;
            };
            EventEmitter.prototype.removeAllListeners = function(event) {
                var evt;
                if (event) {
                    evt = prefix ? prefix + event : event;
                    if (this._events[evt]) clearEvent(this, evt);
                } else {
                    this._events = new Events;
                    this._eventsCount = 0;
                }
                return this;
            };
            EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
            EventEmitter.prototype.addListener = EventEmitter.prototype.on;
            EventEmitter.prefixed = prefix;
            EventEmitter.EventEmitter = EventEmitter;
            if (true) module.exports = EventEmitter;
        },
        "../shared/node_modules/filter-obj/index.js": module => {
            "use strict";
            module.exports = function(obj, predicate) {
                var ret = {};
                var keys = Object.keys(obj);
                var isArr = Array.isArray(predicate);
                for (var i = 0; i < keys.length; i++) {
                    var key = keys[i];
                    var val = obj[key];
                    if (isArr ? -1 !== predicate.indexOf(key) : predicate(key, val, obj)) ret[key] = val;
                }
                return ret;
            };
        },
        "../shared/node_modules/js-cookie/src/js.cookie.js": (module, exports, __webpack_require__) => {
            var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;
            (function(factory) {
                var registeredInModuleLoader;
                if (true) {
                    !(__WEBPACK_AMD_DEFINE_FACTORY__ = factory, __WEBPACK_AMD_DEFINE_RESULT__ = "function" === typeof __WEBPACK_AMD_DEFINE_FACTORY__ ? __WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module) : __WEBPACK_AMD_DEFINE_FACTORY__, 
                    void 0 !== __WEBPACK_AMD_DEFINE_RESULT__ && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
                    registeredInModuleLoader = true;
                }
                if (true) {
                    module.exports = factory();
                    registeredInModuleLoader = true;
                }
                if (!registeredInModuleLoader) {
                    var OldCookies = window.Cookies;
                    var api = window.Cookies = factory();
                    api.noConflict = function() {
                        window.Cookies = OldCookies;
                        return api;
                    };
                }
            })((function() {
                function extend() {
                    var i = 0;
                    var result = {};
                    for (;i < arguments.length; i++) {
                        var attributes = arguments[i];
                        for (var key in attributes) result[key] = attributes[key];
                    }
                    return result;
                }
                function decode(s) {
                    return s.replace(/(%[0-9A-Z]{2})+/g, decodeURIComponent);
                }
                function init(converter) {
                    function api() {}
                    function set(key, value, attributes) {
                        if ("undefined" === typeof document) return;
                        attributes = extend({
                            path: "/"
                        }, api.defaults, attributes);
                        if ("number" === typeof attributes.expires) attributes.expires = new Date(1 * new Date + 864e5 * attributes.expires);
                        attributes.expires = attributes.expires ? attributes.expires.toUTCString() : "";
                        try {
                            var result = JSON.stringify(value);
                            if (/^[\{\[]/.test(result)) value = result;
                        } catch (e) {}
                        value = converter.write ? converter.write(value, key) : encodeURIComponent(String(value)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);
                        key = encodeURIComponent(String(key)).replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent).replace(/[\(\)]/g, escape);
                        var stringifiedAttributes = "";
                        for (var attributeName in attributes) {
                            if (!attributes[attributeName]) continue;
                            stringifiedAttributes += "; " + attributeName;
                            if (true === attributes[attributeName]) continue;
                            stringifiedAttributes += "=" + attributes[attributeName].split(";")[0];
                        }
                        return document.cookie = key + "=" + value + stringifiedAttributes;
                    }
                    function get(key, json) {
                        if ("undefined" === typeof document) return;
                        var jar = {};
                        var cookies = document.cookie ? document.cookie.split("; ") : [];
                        var i = 0;
                        for (;i < cookies.length; i++) {
                            var parts = cookies[i].split("=");
                            var cookie = parts.slice(1).join("=");
                            if (!json && '"' === cookie.charAt(0)) cookie = cookie.slice(1, -1);
                            try {
                                var name = decode(parts[0]);
                                cookie = (converter.read || converter)(cookie, name) || decode(cookie);
                                if (json) try {
                                    cookie = JSON.parse(cookie);
                                } catch (e) {}
                                jar[name] = cookie;
                                if (key === name) break;
                            } catch (e) {}
                        }
                        return key ? jar[key] : jar;
                    }
                    api.set = set;
                    api.get = function(key) {
                        return get(key, false);
                    };
                    api.getJSON = function(key) {
                        return get(key, true);
                    };
                    api.remove = function(key, attributes) {
                        set(key, "", extend(attributes, {
                            expires: -1
                        }));
                    };
                    api.defaults = {};
                    api.withConverter = init;
                    return api;
                }
                return init((function() {}));
            }));
        },
        "../shared/node_modules/load-script2/index.js": module => {
            module.exports = function(src, attrs, parentNode) {
                return new Promise(((resolve, reject) => {
                    const script = document.createElement("script");
                    script.async = true;
                    script.src = src;
                    for (const [k, v] of Object.entries(attrs || {})) script.setAttribute(k, v);
                    script.onload = () => {
                        script.onerror = script.onload = null;
                        resolve(script);
                    };
                    script.onerror = () => {
                        script.onerror = script.onload = null;
                        reject(new Error(`Failed to load ${src}`));
                    };
                    const node = parentNode || document.head || document.getElementsByTagName("head")[0];
                    node.appendChild(script);
                }));
            };
        },
        "../shared/node_modules/lodash/_SetCache.js": (module, __unused_webpack_exports, __webpack_require__) => {
            var isArray = __webpack_require__("../shared/node_modules/lodash/isArray.js");
            function castArray() {
                if (!arguments.length) return [];
                var value = arguments[0];
                return isArray(value) ? value : [ value ];
            }
            module.exports = castArray;
        },
        "../shared/node_modules/lodash/_Stack.js": (module, __unused_webpack_exports, __webpack_require__) => {
            var listCacheClear = __webpack_require__("../shared/node_modules/lodash/_listCacheClear.js"), listCacheDelete = __webpack_require__("../shared/node_modules/lodash/_listCacheDelete.js"), listCacheGet = __webpack_require__("../shared/node_modules/lodash/_listCacheGet.js"), listCacheHas = __webpack_require__("../shared/node_modules/lodash/_listCacheHas.js"), listCacheSet = __webpack_require__("../shared/node_modules/lodash/_listCacheSet.js");
            function ListCache(entries) {
                var index = -1, length = null == entries ? 0 : entries.length;
                this.clear();
                while (++index < length) {
                    var entry = entries[index];
                    this.set(entry[0], entry[1]);
                }
            }
            ListCache.prototype.clear = listCacheClear;
            ListCache.prototype["delete"] = listCacheDelete;
            ListCache.prototype.get = listCacheGet;
            ListCache.prototype.has = listCacheHas;
            ListCache.prototype.set = listCacheSet;
            module.exports = ListCache;
        },
        "../shared/node_modules/lodash/_arraySome.js": module => {
            function arraySome(array, predicate) {
                var index = -1, length = null == array ? 0 : array.length;
                while (++index < length) if (predicate(array[index], index, array)) return true;
                return false;
            }
            module.exports = arraySome;
        },
        "../shared/node_modules/lodash/_assocIndexOf.js": (module, __unused_webpack_exports, __webpack_require__) => {
            var eq = __webpack_require__("../shared/node_modules/lodash/eq.js");
            function assocIndexOf(array, key) {
                var length = array.length;
                while (length--) if (eq(array[length][0], key)) return length;
                return -1;
            }
            module.exports = assocIndexOf;
        },
        "../shared/node_modules/lodash/_baseFindIndex.js": module => {
            function baseFindIndex(array, predicate, fromIndex, fromRight) {
                var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
                while (fromRight ? index-- : ++index < length) if (predicate(array[index], index, array)) return index;
                return -1;
            }
            module.exports = baseFindIndex;
        },
        "../shared/node_modules/lodash/_baseGet.js": module => {
            function getValue(object, key) {
                return null == object ? void 0 : object[key];
            }
            module.exports = getValue;
        },
        "../shared/node_modules/lodash/_baseGetTag.js": module => {
            var objectProto = Object.prototype;
            var nativeObjectToString = objectProto.toString;
            function objectToString(value) {
                return nativeObjectToString.call(value);
            }
            module.exports = objectToString;
        },
        "../shared/node_modules/lodash/_baseIndexOf.js": module => {
            function strictIndexOf(array, value, fromIndex) {
                var index = fromIndex - 1, length = array.length;
                while (++index < length) if (array[index] === value) return index;
                return -1;
            }
            module.exports = strictIndexOf;
        },
        "../shared/node_modules/lodash/_baseIsEqual.js": (module, __unused_webpack_exports, __webpack_require__) => {
            var baseIsEqualDeep = __webpack_require__("../shared/node_modules/lodash/_baseIsEqualDeep.js"), isObjectLike = __webpack_require__("../shared/node_modules/lodash/isObjectLike.js");
            function baseIsEqual(value, other, bitmask, customizer, stack) {
                if (value === other) return true;
                if (null == value || null == other || !isObjectLike(value) && !isObjectLike(other)) return value !== value && other !== other;
                return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
            }
            module.exports = baseIsEqual;
        },
        "../shared/node_modules/lodash/_baseIsEqualDeep.js": (module, __unused_webpack_exports, __webpack_require__) => {
            var Stack = __webpack_require__("../shared/node_modules/lodash/_Stack.js"), equalArrays = __webpack_require__("../shared/node_modules/lodash/_equalArrays.js"), equalByTag = __webpack_require__("../shared/node_modules/lodash/_equalByTag.js"), equalObjects = __webpack_require__("../shared/node_modules/lodash/_equalObjects.js"), getTag = __webpack_require__("../shared/node_modules/lodash/_getTag.js"), isArray = __webpack_require__("../shared/node_modules/lodash/isArray.js"), isBuffer = __webpack_require__("../shared/node_modules/lodash/isBuffer.js"), isTypedArray = __webpack_require__("../shared/node_modules/lodash/isTypedArray.js");
            var COMPARE_PARTIAL_FLAG = 1;
            var argsTag = "[object Arguments]", arrayTag = "[object Array]", objectTag = "[object Object]";
            var objectProto = Object.prototype;
            var hasOwnProperty = objectProto.hasOwnProperty;
            function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
                var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
                objTag = objTag == argsTag ? objectTag : objTag;
                othTag = othTag == argsTag ? objectTag : othTag;
                var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
                if (isSameTag && isBuffer(object)) {
                    if (!isBuffer(other)) return false;
                    objIsArr = true;
                    objIsObj = false;
                }
                if (isSameTag && !objIsObj) {
                    stack || (stack = new Stack);
                    return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
                }
                if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
                    var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
                    if (objIsWrapped || othIsWrapped) {
                        var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
                        stack || (stack = new Stack);
                        return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
                    }
                }
                if (!isSameTag) return false;
                stack || (stack = new Stack);
                return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
            }
            module.exports = baseIsEqualDeep;
        },
        "../shared/node_modules/lodash/_baseIsMatch.js": (module, __unused_webpack_exports, __webpack_require__) => {
            var Stack = __webpack_require__("../shared/node_modules/lodash/_Stack.js"), baseIsEqual = __webpack_require__("../shared/node_modules/lodash/_baseIsEqual.js");
            var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
            function baseIsMatch(object, source, matchData, customizer) {
                var index = matchData.length, length = index, noCustomizer = !customizer;
                if (null == object) return !length;
                object = Object(object);
                while (index--) {
                    var data = matchData[index];
                    if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) return false;
                }
                while (++index < length) {
                    data = matchData[index];
                    var key = data[0], objValue = object[key], srcValue = data[1];
                    if (noCustomizer && data[2]) {
                        if (void 0 === objValue && !(key in object)) return false;
                    } else {
                        var stack = new Stack;
                        if (customizer) var result = customizer(objValue, srcValue, key, object, source, stack);
                        if (!(void 0 === result ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) return false;
                    }
                }
                return true;
            }
            module.exports = baseIsMatch;
        },
        "../shared/node_modules/lodash/_baseIteratee.js": (module, __unused_webpack_exports, __webpack_require__) => {
            var baseMatches = __webpack_require__("../shared/node_modules/lodash/_baseMatches.js"), baseMatchesProperty = __webpack_require__("../shared/node_modules/lodash/_baseMatchesProperty.js"), identity = __webpack_require__("../shared/node_modules/lodash/identity.js"), isArray = __webpack_require__("../shared/node_modules/lodash/isArray.js"), property = __webpack_require__("../shared/node_modules/lodash/property.js");
            function baseIteratee(value) {
                if ("function" == typeof value) return value;
                if (null == value) return identity;
                if ("object" == typeof value) return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
                return property(value);
            }
            module.exports = baseIteratee;
        },
        "../shared/node_modules/lodash/_baseMatches.js": (module, __unused_webpack_exports, __webpack_require__) => {
            var baseIsMatch = __webpack_require__("../shared/node_modules/lodash/_baseIsMatch.js"), getMatchData = __webpack_require__("../shared/node_modules/lodash/_getMatchData.js"), matchesStrictComparable = __webpack_require__("../shared/node_modules/lodash/_matchesStrictComparable.js");
            function baseMatches(source) {
                var matchData = getMatchData(source);
                if (1 == matchData.length && matchData[0][2]) return matchesStrictComparable(matchData[0][0], matchData[0][1]);
                return function(object) {
                    return object === source || baseIsMatch(object, source, matchData);
                };
            }
            module.exports = baseMatches;
        },
        "../shared/node_modules/lodash/_baseMatchesProperty.js": (module, __unused_webpack_exports, __webpack_require__) => {
            var baseIsEqual = __webpack_require__("../shared/node_modules/lodash/_baseIsEqual.js"), get = __webpack_require__("../shared/node_modules/lodash/get.js"), hasIn = __webpack_require__("../shared/node_modules/lodash/hasIn.js"), isKey = __webpack_require__("../shared/node_modules/lodash/_isKey.js"), isStrictComparable = __webpack_require__("../shared/node_modules/lodash/_isStrictComparable.js"), matchesStrictComparable = __webpack_require__("../shared/node_modules/lodash/_matchesStrictComparable.js"), toKey = __webpack_require__("../shared/node_modules/lodash/_toKey.js");
            var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
            function baseMatchesProperty(path, srcValue) {
                if (isKey(path) && isStrictComparable(srcValue)) return matchesStrictComparable(toKey(path), srcValue);
                return function(object) {
                    var objValue = get(object, path);
                    return void 0 === objValue && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
                };
            }
            module.exports = baseMatchesProperty;
        },
        "../shared/node_modules/lodash/_cacheHas.js": (module, __unused_webpack_exports, __webpack_require__) => {
            var baseIndexOf = __webpack_require__("../shared/node_modules/lodash/_baseIndexOf.js");
            function arrayIncludes(array, value) {
                var length = null == array ? 0 : array.length;
                return !!length && baseIndexOf(array, value, 0) > -1;
            }
            module.exports = arrayIncludes;
        },
        "../shared/node_modules/lodash/_createFind.js": (module, __unused_webpack_exports, __webpack_require__) => {
            var baseIteratee = __webpack_require__("../shared/node_modules/lodash/_baseIteratee.js"), isArrayLike = __webpack_require__("../shared/node_modules/lodash/isArrayLike.js"), keys = __webpack_require__("../shared/node_modules/lodash/keys.js");
            function createFind(findIndexFunc) {
                return function(collection, predicate, fromIndex) {
                    var iterable = Object(collection);
                    if (!isArrayLike(collection)) {
                        var iteratee = baseIteratee(predicate, 3);
                        collection = keys(collection);
                        predicate = function(key) {
                            return iteratee(iterable[key], key, iterable);
                        };
                    }
                    var index = findIndexFunc(collection, predicate, fromIndex);
                    return index > -1 ? iterable[iteratee ? collection[index] : index] : void 0;
                };
            }
            module.exports = createFind;
        },
        "../shared/node_modules/lodash/_createRound.js": (module, __unused_webpack_exports, __webpack_require__) => {
            var root = __webpack_require__("../shared/node_modules/lodash/_root.js"), toInteger = __webpack_require__("../shared/node_modules/lodash/toInteger.js"), toNumber = __webpack_require__("../shared/node_modules/lodash/toNumber.js"), toString = __webpack_require__("../shared/node_modules/lodash/toString.js");
            var nativeIsFinite = root.isFinite, nativeMin = Math.min;
            function createRound(methodName) {
                var func = Math[methodName];
                return function(number, precision) {
                    number = toNumber(number);
                    precision = null == precision ? 0 : nativeMin(toInteger(precision), 292);
                    if (precision && nativeIsFinite(number)) {
                        var pair = (toString(number) + "e").split("e"), value = func(pair[0] + "e" + (+pair[1] + precision));
                        pair = (toString(value) + "e").split("e");
                        return +(pair[0] + "e" + (+pair[1] - precision));
                    }
                    return func(number);
                };
            }
            module.exports = createRound;
        },
        "../shared/node_modules/lodash/_equalArrays.js": (module, __unused_webpack_exports, __webpack_require__) => {
            var SetCache = __webpack_require__("../shared/node_modules/lodash/_SetCache.js"), arraySome = __webpack_require__("../shared/node_modules/lodash/_arraySome.js"), cacheHas = __webpack_require__("../shared/node_modules/lodash/_cacheHas.js");
            var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
            function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
                var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
                if (arrLength != othLength && !(isPartial && othLength > arrLength)) return false;
                var arrStacked = stack.get(array);
                var othStacked = stack.get(other);
                if (arrStacked && othStacked) return arrStacked == other && othStacked == array;
                var index = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache : void 0;
                stack.set(array, other);
                stack.set(other, array);
                while (++index < arrLength) {
                    var arrValue = array[index], othValue = other[index];
                    if (customizer) var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
                    if (void 0 !== compared) {
                        if (compared) continue;
                        result = false;
                        break;
                    }
                    if (seen) {
                        if (!arraySome(other, (function(othValue, othIndex) {
                            if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) return seen.push(othIndex);
                        }))) {
                            result = false;
                            break;
                        }
                    } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                        result = false;
                        break;
                    }
                }
                stack["delete"](array);
                stack["delete"](other);
                return result;
            }
            module.exports = equalArrays;
        },
        "../shared/node_modules/lodash/_equalByTag.js": module => {
            function eq(value, other) {
                return value === other || value !== value && other !== other;
            }
            module.exports = eq;
        },
        "../shared/node_modules/lodash/_equalObjects.js": (module, __unused_webpack_exports, __webpack_require__) => {
            var getAllKeys = __webpack_require__("../shared/node_modules/lodash/_getAllKeys.js");
            var COMPARE_PARTIAL_FLAG = 1;
            var objectProto = Object.prototype;
            var hasOwnProperty = objectProto.hasOwnProperty;
            function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
                var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
                if (objLength != othLength && !isPartial) return false;
                var index = objLength;
                while (index--) {
                    var key = objProps[index];
                    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) return false;
                }
                var objStacked = stack.get(object);
                var othStacked = stack.get(other);
                if (objStacked && othStacked) return objStacked == other && othStacked == object;
                var result = true;
                stack.set(object, other);
                stack.set(other, object);
                var skipCtor = isPartial;
                while (++index < objLength) {
                    key = objProps[index];
                    var objValue = object[key], othValue = other[key];
                    if (customizer) var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
                    if (!(void 0 === compared ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
                        result = false;
                        break;
                    }
                    skipCtor || (skipCtor = "constructor" == key);
                }
                if (result && !skipCtor) {
                    var objCtor = object.constructor, othCtor = other.constructor;
                    if (objCtor != othCtor && "constructor" in object && "constructor" in other && !("function" == typeof objCtor && objCtor instanceof objCtor && "function" == typeof othCtor && othCtor instanceof othCtor)) result = false;
                }
                stack["delete"](object);
                stack["delete"](other);
                return result;
            }
            module.exports = equalObjects;
        },
        "../shared/node_modules/lodash/_freeGlobal.js": (module, __unused_webpack_exports, __webpack_require__) => {
            var freeGlobal = "object" == typeof __webpack_require__.g && __webpack_require__.g && __webpack_require__.g.Object === Object && __webpack_require__.g;
            module.exports = freeGlobal;
        },
        "../shared/node_modules/lodash/_getAllKeys.js": (module, __unused_webpack_exports, __webpack_require__) => {
            var overArg = __webpack_require__("../shared/node_modules/lodash/_overArg.js");
            var nativeKeys = overArg(Object.keys, Object);
            module.exports = nativeKeys;
        },
        "../shared/node_modules/lodash/_getMatchData.js": (module, __unused_webpack_exports, __webpack_require__) => {
            var isStrictComparable = __webpack_require__("../shared/node_modules/lodash/_isStrictComparable.js"), keys = __webpack_require__("../shared/node_modules/lodash/keys.js");
            function getMatchData(object) {
                var result = keys(object), length = result.length;
                while (length--) {
                    var key = result[length], value = object[key];
                    result[length] = [ key, value, isStrictComparable(value) ];
                }
                return result;
            }
            module.exports = getMatchData;
        },
        "../shared/node_modules/lodash/_getTag.js": module => {
            var objectProto = Object.prototype;
            var nativeObjectToString = objectProto.toString;
            function objectToString(value) {
                return nativeObjectToString.call(value);
            }
            module.exports = objectToString;
        },
        "../shared/node_modules/lodash/_isKey.js": module => {
            function identity(value) {
                return value;
            }
            module.exports = identity;
        },
        "../shared/node_modules/lodash/_isStrictComparable.js": (module, __unused_webpack_exports, __webpack_require__) => {
            var isObject = __webpack_require__("../shared/node_modules/lodash/isObject.js");
            function isStrictComparable(value) {
                return value === value && !isObject(value);
            }
            module.exports = isStrictComparable;
        },
        "../shared/node_modules/lodash/_listCacheClear.js": module => {
            function listCacheClear() {
                this.__data__ = [];
                this.size = 0;
            }
            module.exports = listCacheClear;
        },
        "../shared/node_modules/lodash/_listCacheDelete.js": (module, __unused_webpack_exports, __webpack_require__) => {
            var assocIndexOf = __webpack_require__("../shared/node_modules/lodash/_assocIndexOf.js");
            var arrayProto = Array.prototype;
            var splice = arrayProto.splice;
            function listCacheDelete(key) {
                var data = this.__data__, index = assocIndexOf(data, key);
                if (index < 0) return false;
                var lastIndex = data.length - 1;
                if (index == lastIndex) data.pop(); else splice.call(data, index, 1);
                --this.size;
                return true;
            }
            module.exports = listCacheDelete;
        },
        "../shared/node_modules/lodash/_listCacheGet.js": (module, __unused_webpack_exports, __webpack_require__) => {
            var assocIndexOf = __webpack_require__("../shared/node_modules/lodash/_assocIndexOf.js");
            function listCacheGet(key) {
                var data = this.__data__, index = assocIndexOf(data, key);
                return index < 0 ? void 0 : data[index][1];
            }
            module.exports = listCacheGet;
        },
        "../shared/node_modules/lodash/_listCacheHas.js": (module, __unused_webpack_exports, __webpack_require__) => {
            var assocIndexOf = __webpack_require__("../shared/node_modules/lodash/_assocIndexOf.js");
            function listCacheHas(key) {
                return assocIndexOf(this.__data__, key) > -1;
            }
            module.exports = listCacheHas;
        },
        "../shared/node_modules/lodash/_listCacheSet.js": (module, __unused_webpack_exports, __webpack_require__) => {
            var assocIndexOf = __webpack_require__("../shared/node_modules/lodash/_assocIndexOf.js");
            function listCacheSet(key, value) {
                var data = this.__data__, index = assocIndexOf(data, key);
                if (index < 0) {
                    ++this.size;
                    data.push([ key, value ]);
                } else data[index][1] = value;
                return this;
            }
            module.exports = listCacheSet;
        },
        "../shared/node_modules/lodash/_matchesStrictComparable.js": module => {
            function matchesStrictComparable(key, srcValue) {
                return function(object) {
                    if (null == object) return false;
                    return object[key] === srcValue && (void 0 !== srcValue || key in Object(object));
                };
            }
            module.exports = matchesStrictComparable;
        },
        "../shared/node_modules/lodash/_overArg.js": module => {
            function overArg(func, transform) {
                return function(arg) {
                    return func(transform(arg));
                };
            }
            module.exports = overArg;
        },
        "../shared/node_modules/lodash/_root.js": (module, __unused_webpack_exports, __webpack_require__) => {
            var freeGlobal = __webpack_require__("../shared/node_modules/lodash/_freeGlobal.js");
            var freeSelf = "object" == typeof self && self && self.Object === Object && self;
            var root = freeGlobal || freeSelf || Function("return this")();
            module.exports = root;
        },
        "../shared/node_modules/lodash/_toKey.js": module => {
            function identity(value) {
                return value;
            }
            module.exports = identity;
        },
        "../shared/node_modules/lodash/debounce.js": (module, __unused_webpack_exports, __webpack_require__) => {
            var isObject = __webpack_require__("../shared/node_modules/lodash/isObject.js"), now = __webpack_require__("../shared/node_modules/lodash/now.js"), toNumber = __webpack_require__("../shared/node_modules/lodash/toNumber.js");
            var FUNC_ERROR_TEXT = "Expected a function";
            var nativeMax = Math.max, nativeMin = Math.min;
            function debounce(func, wait, options) {
                var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
                if ("function" != typeof func) throw new TypeError(FUNC_ERROR_TEXT);
                wait = toNumber(wait) || 0;
                if (isObject(options)) {
                    leading = !!options.leading;
                    maxing = "maxWait" in options;
                    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
                    trailing = "trailing" in options ? !!options.trailing : trailing;
                }
                function invokeFunc(time) {
                    var args = lastArgs, thisArg = lastThis;
                    lastArgs = lastThis = void 0;
                    lastInvokeTime = time;
                    result = func.apply(thisArg, args);
                    return result;
                }
                function leadingEdge(time) {
                    lastInvokeTime = time;
                    timerId = setTimeout(timerExpired, wait);
                    return leading ? invokeFunc(time) : result;
                }
                function remainingWait(time) {
                    var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
                    return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
                }
                function shouldInvoke(time) {
                    var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
                    return void 0 === lastCallTime || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
                }
                function timerExpired() {
                    var time = now();
                    if (shouldInvoke(time)) return trailingEdge(time);
                    timerId = setTimeout(timerExpired, remainingWait(time));
                }
                function trailingEdge(time) {
                    timerId = void 0;
                    if (trailing && lastArgs) return invokeFunc(time);
                    lastArgs = lastThis = void 0;
                    return result;
                }
                function cancel() {
                    if (void 0 !== timerId) clearTimeout(timerId);
                    lastInvokeTime = 0;
                    lastArgs = lastCallTime = lastThis = timerId = void 0;
                }
                function flush() {
                    return void 0 === timerId ? result : trailingEdge(now());
                }
                function debounced() {
                    var time = now(), isInvoking = shouldInvoke(time);
                    lastArgs = arguments;
                    lastThis = this;
                    lastCallTime = time;
                    if (isInvoking) {
                        if (void 0 === timerId) return leadingEdge(lastCallTime);
                        if (maxing) {
                            clearTimeout(timerId);
                            timerId = setTimeout(timerExpired, wait);
                            return invokeFunc(lastCallTime);
                        }
                    }
                    if (void 0 === timerId) timerId = setTimeout(timerExpired, wait);
                    return result;
                }
                debounced.cancel = cancel;
                debounced.flush = flush;
                return debounced;
            }
            module.exports = debounce;
        },
        "../shared/node_modules/lodash/eq.js": module => {
            function eq(value, other) {
                return value === other || value !== value && other !== other;
            }
            module.exports = eq;
        },
        "../shared/node_modules/lodash/find.js": (module, __unused_webpack_exports, __webpack_require__) => {
            var createFind = __webpack_require__("../shared/node_modules/lodash/_createFind.js"), findIndex = __webpack_require__("../shared/node_modules/lodash/findIndex.js");
            var find = createFind(findIndex);
            module.exports = find;
        },
        "../shared/node_modules/lodash/findIndex.js": (module, __unused_webpack_exports, __webpack_require__) => {
            var baseFindIndex = __webpack_require__("../shared/node_modules/lodash/_baseFindIndex.js"), baseIteratee = __webpack_require__("../shared/node_modules/lodash/_baseIteratee.js"), toInteger = __webpack_require__("../shared/node_modules/lodash/toInteger.js");
            var nativeMax = Math.max;
            function findIndex(array, predicate, fromIndex) {
                var length = null == array ? 0 : array.length;
                if (!length) return -1;
                var index = null == fromIndex ? 0 : toInteger(fromIndex);
                if (index < 0) index = nativeMax(length + index, 0);
                return baseFindIndex(array, baseIteratee(predicate, 3), index);
            }
            module.exports = findIndex;
        },
        "../shared/node_modules/lodash/get.js": (module, __unused_webpack_exports, __webpack_require__) => {
            var baseGet = __webpack_require__("../shared/node_modules/lodash/_baseGet.js");
            function get(object, path, defaultValue) {
                var result = null == object ? void 0 : baseGet(object, path);
                return void 0 === result ? defaultValue : result;
            }
            module.exports = get;
        },
        "../shared/node_modules/lodash/hasIn.js": module => {
            function baseHasIn(object, key) {
                return null != object && key in Object(object);
            }
            module.exports = baseHasIn;
        },
        "../shared/node_modules/lodash/identity.js": module => {
            function identity(value) {
                return value;
            }
            module.exports = identity;
        },
        "../shared/node_modules/lodash/isArray.js": module => {
            var isArray = Array.isArray;
            module.exports = isArray;
        },
        "../shared/node_modules/lodash/isArrayLike.js": (module, __unused_webpack_exports, __webpack_require__) => {
            var isFunction = __webpack_require__("../shared/node_modules/lodash/isFunction.js"), isLength = __webpack_require__("../shared/node_modules/lodash/isLength.js");
            function isArrayLike(value) {
                return null != value && isLength(value.length) && !isFunction(value);
            }
            module.exports = isArrayLike;
        },
        "../shared/node_modules/lodash/isBuffer.js": module => {
            function stubFalse() {
                return false;
            }
            module.exports = stubFalse;
        },
        "../shared/node_modules/lodash/isFunction.js": (module, __unused_webpack_exports, __webpack_require__) => {
            var baseGetTag = __webpack_require__("../shared/node_modules/lodash/_baseGetTag.js"), isObject = __webpack_require__("../shared/node_modules/lodash/isObject.js");
            var asyncTag = "[object AsyncFunction]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", proxyTag = "[object Proxy]";
            function isFunction(value) {
                if (!isObject(value)) return false;
                var tag = baseGetTag(value);
                return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
            }
            module.exports = isFunction;
        },
        "../shared/node_modules/lodash/isLength.js": module => {
            var MAX_SAFE_INTEGER = 9007199254740991;
            function isLength(value) {
                return "number" == typeof value && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
            }
            module.exports = isLength;
        },
        "../shared/node_modules/lodash/isObject.js": module => {
            function isObject(value) {
                var type = typeof value;
                return null != value && ("object" == type || "function" == type);
            }
            module.exports = isObject;
        },
        "../shared/node_modules/lodash/isObjectLike.js": module => {
            function isObjectLike(value) {
                return null != value && "object" == typeof value;
            }
            module.exports = isObjectLike;
        },
        "../shared/node_modules/lodash/isTypedArray.js": module => {
            function stubFalse() {
                return false;
            }
            module.exports = stubFalse;
        },
        "../shared/node_modules/lodash/keys.js": (module, __unused_webpack_exports, __webpack_require__) => {
            var overArg = __webpack_require__("../shared/node_modules/lodash/_overArg.js");
            var nativeKeys = overArg(Object.keys, Object);
            module.exports = nativeKeys;
        },
        "../shared/node_modules/lodash/now.js": (module, __unused_webpack_exports, __webpack_require__) => {
            var root = __webpack_require__("../shared/node_modules/lodash/_root.js");
            var now = function() {
                return root.Date.now();
            };
            module.exports = now;
        },
        "../shared/node_modules/lodash/property.js": module => {
            function baseProperty(key) {
                return function(object) {
                    return null == object ? void 0 : object[key];
                };
            }
            module.exports = baseProperty;
        },
        "../shared/node_modules/lodash/round.js": (module, __unused_webpack_exports, __webpack_require__) => {
            var createRound = __webpack_require__("../shared/node_modules/lodash/_createRound.js");
            var round = createRound("round");
            module.exports = round;
        },
        "../shared/node_modules/lodash/toInteger.js": module => {
            function identity(value) {
                return value;
            }
            module.exports = identity;
        },
        "../shared/node_modules/lodash/toNumber.js": module => {
            function identity(value) {
                return value;
            }
            module.exports = identity;
        },
        "../shared/node_modules/lodash/toString.js": module => {
            function identity(value) {
                return value;
            }
            module.exports = identity;
        },
        "../shared/node_modules/photoswipe/dist/photoswipe-ui-default.min.js": function(module, exports, __webpack_require__) {
            var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;
            !function(a, b) {
                true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = b, __WEBPACK_AMD_DEFINE_RESULT__ = "function" === typeof __WEBPACK_AMD_DEFINE_FACTORY__ ? __WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module) : __WEBPACK_AMD_DEFINE_FACTORY__, 
                void 0 !== __WEBPACK_AMD_DEFINE_RESULT__ && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0;
            }(0, (function() {
                "use strict";
                var a = function(a, b) {
                    var c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, t, u, v = this, w = !1, x = !0, y = !0, z = {
                        barsSize: {
                            top: 44,
                            bottom: "auto"
                        },
                        closeElClasses: [ "item", "caption", "zoom-wrap", "ui", "top-bar" ],
                        timeToIdle: 4e3,
                        timeToIdleOutside: 1e3,
                        loadingIndicatorDelay: 1e3,
                        addCaptionHTMLFn: function(a, b) {
                            return a.title ? (b.children[0].innerHTML = a.title, !0) : (b.children[0].innerHTML = "", 
                            !1);
                        },
                        closeEl: !0,
                        captionEl: !0,
                        fullscreenEl: !0,
                        zoomEl: !0,
                        shareEl: !0,
                        counterEl: !0,
                        arrowEl: !0,
                        preloaderEl: !0,
                        tapToClose: !1,
                        tapToToggleControls: !0,
                        clickToCloseNonZoomable: !0,
                        shareButtons: [ {
                            id: "facebook",
                            label: "Share on Facebook",
                            url: "https://www.facebook.com/sharer/sharer.php?u={{url}}"
                        }, {
                            id: "twitter",
                            label: "Tweet",
                            url: "https://twitter.com/intent/tweet?text={{text}}&url={{url}}"
                        }, {
                            id: "pinterest",
                            label: "Pin it",
                            url: "http://www.pinterest.com/pin/create/button/?url={{url}}&media={{image_url}}&description={{text}}"
                        }, {
                            id: "download",
                            label: "Download image",
                            url: "{{raw_image_url}}",
                            download: !0
                        } ],
                        getImageURLForShare: function() {
                            return a.currItem.src || "";
                        },
                        getPageURLForShare: function() {
                            return window.location.href;
                        },
                        getTextForShare: function() {
                            return a.currItem.title || "";
                        },
                        indexIndicatorSep: " / ",
                        fitControlsWidth: 1200
                    }, A = function(a) {
                        if (r) return !0;
                        a = a || window.event, q.timeToIdle && q.mouseUsed && !k && K();
                        for (var c, d, e = a.target || a.srcElement, f = e.getAttribute("class") || "", g = 0; g < S.length; g++) c = S[g], 
                        c.onTap && f.indexOf("pswp__" + c.name) > -1 && (c.onTap(), d = !0);
                        if (d) {
                            a.stopPropagation && a.stopPropagation(), r = !0;
                            var h = b.features.isOldAndroid ? 600 : 30;
                            setTimeout((function() {
                                r = !1;
                            }), h);
                        }
                    }, B = function() {
                        return !a.likelyTouchDevice || q.mouseUsed || screen.width > q.fitControlsWidth;
                    }, C = function(a, c, d) {
                        b[(d ? "add" : "remove") + "Class"](a, "pswp__" + c);
                    }, D = function() {
                        var a = 1 === q.getNumItemsFn();
                        a !== p && (C(d, "ui--one-slide", a), p = a);
                    }, E = function() {
                        C(i, "share-modal--hidden", y);
                    }, F = function() {
                        return y = !y, y ? (b.removeClass(i, "pswp__share-modal--fade-in"), setTimeout((function() {
                            y && E();
                        }), 300)) : (E(), setTimeout((function() {
                            y || b.addClass(i, "pswp__share-modal--fade-in");
                        }), 30)), y || H(), !1;
                    }, G = function(b) {
                        b = b || window.event;
                        var c = b.target || b.srcElement;
                        return a.shout("shareLinkClick", b, c), !!c.href && (!!c.hasAttribute("download") || (window.open(c.href, "pswp_share", "scrollbars=yes,resizable=yes,toolbar=no,location=yes,width=550,height=420,top=100,left=" + (window.screen ? Math.round(screen.width / 2 - 275) : 100)), 
                        y || F(), !1));
                    }, H = function() {
                        for (var a, b, c, d, e, f = "", g = 0; g < q.shareButtons.length; g++) a = q.shareButtons[g], 
                        c = q.getImageURLForShare(a), d = q.getPageURLForShare(a), e = q.getTextForShare(a), 
                        b = a.url.replace("{{url}}", encodeURIComponent(d)).replace("{{image_url}}", encodeURIComponent(c)).replace("{{raw_image_url}}", c).replace("{{text}}", encodeURIComponent(e)), 
                        f += '<a href="' + b + '" target="_blank" class="pswp__share--' + a.id + '"' + (a.download ? "download" : "") + ">" + a.label + "</a>", 
                        q.parseShareButtonOut && (f = q.parseShareButtonOut(a, f));
                        i.children[0].innerHTML = f, i.children[0].onclick = G;
                    }, I = function(a) {
                        for (var c = 0; c < q.closeElClasses.length; c++) if (b.hasClass(a, "pswp__" + q.closeElClasses[c])) return !0;
                    }, J = 0, K = function() {
                        clearTimeout(u), J = 0, k && v.setIdle(!1);
                    }, L = function(a) {
                        a = a ? a : window.event;
                        var b = a.relatedTarget || a.toElement;
                        b && "HTML" !== b.nodeName || (clearTimeout(u), u = setTimeout((function() {
                            v.setIdle(!0);
                        }), q.timeToIdleOutside));
                    }, M = function() {
                        q.fullscreenEl && !b.features.isOldAndroid && (c || (c = v.getFullscreenAPI()), 
                        c ? (b.bind(document, c.eventK, v.updateFullscreen), v.updateFullscreen(), b.addClass(a.template, "pswp--supports-fs")) : b.removeClass(a.template, "pswp--supports-fs"));
                    }, N = function() {
                        q.preloaderEl && (O(!0), l("beforeChange", (function() {
                            clearTimeout(o), o = setTimeout((function() {
                                a.currItem && a.currItem.loading ? (!a.allowProgressiveImg() || a.currItem.img && !a.currItem.img.naturalWidth) && O(!1) : O(!0);
                            }), q.loadingIndicatorDelay);
                        })), l("imageLoadComplete", (function(b, c) {
                            a.currItem === c && O(!0);
                        })));
                    }, O = function(a) {
                        n !== a && (C(m, "preloader--active", !a), n = a);
                    }, P = function(a) {
                        var c = a.vGap;
                        if (B()) {
                            var g = q.barsSize;
                            if (q.captionEl && "auto" === g.bottom) if (f || (f = b.createEl("pswp__caption pswp__caption--fake"), 
                            f.appendChild(b.createEl("pswp__caption__center")), d.insertBefore(f, e), b.addClass(d, "pswp__ui--fit")), 
                            q.addCaptionHTMLFn(a, f, !0)) {
                                var h = f.clientHeight;
                                c.bottom = parseInt(h, 10) || 44;
                            } else c.bottom = g.top; else c.bottom = "auto" === g.bottom ? 0 : g.bottom;
                            c.top = g.top;
                        } else c.top = c.bottom = 0;
                    }, Q = function() {
                        q.timeToIdle && l("mouseUsed", (function() {
                            b.bind(document, "mousemove", K), b.bind(document, "mouseout", L), t = setInterval((function() {
                                J++, 2 === J && v.setIdle(!0);
                            }), q.timeToIdle / 2);
                        }));
                    }, R = function() {
                        l("onVerticalDrag", (function(a) {
                            x && a < .95 ? v.hideControls() : !x && a >= .95 && v.showControls();
                        }));
                        var a;
                        l("onPinchClose", (function(b) {
                            x && b < .9 ? (v.hideControls(), a = !0) : a && !x && b > .9 && v.showControls();
                        })), l("zoomGestureEnded", (function() {
                            a = !1, a && !x && v.showControls();
                        }));
                    }, S = [ {
                        name: "caption",
                        option: "captionEl",
                        onInit: function(a) {
                            e = a;
                        }
                    }, {
                        name: "share-modal",
                        option: "shareEl",
                        onInit: function(a) {
                            i = a;
                        },
                        onTap: function() {
                            F();
                        }
                    }, {
                        name: "button--share",
                        option: "shareEl",
                        onInit: function(a) {
                            h = a;
                        },
                        onTap: function() {
                            F();
                        }
                    }, {
                        name: "button--zoom",
                        option: "zoomEl",
                        onTap: a.toggleDesktopZoom
                    }, {
                        name: "counter",
                        option: "counterEl",
                        onInit: function(a) {
                            g = a;
                        }
                    }, {
                        name: "button--close",
                        option: "closeEl",
                        onTap: a.close
                    }, {
                        name: "button--arrow--left",
                        option: "arrowEl",
                        onTap: a.prev
                    }, {
                        name: "button--arrow--right",
                        option: "arrowEl",
                        onTap: a.next
                    }, {
                        name: "button--fs",
                        option: "fullscreenEl",
                        onTap: function() {
                            c.isFullscreen() ? c.exit() : c.enter();
                        }
                    }, {
                        name: "preloader",
                        option: "preloaderEl",
                        onInit: function(a) {
                            m = a;
                        }
                    } ], T = function() {
                        var a, c, e, f = function(d) {
                            if (d) for (var f = d.length, g = 0; g < f; g++) {
                                a = d[g], c = a.className;
                                for (var h = 0; h < S.length; h++) e = S[h], c.indexOf("pswp__" + e.name) > -1 && (q[e.option] ? (b.removeClass(a, "pswp__element--disabled"), 
                                e.onInit && e.onInit(a)) : b.addClass(a, "pswp__element--disabled"));
                            }
                        };
                        f(d.children);
                        var g = b.getChildByClass(d, "pswp__top-bar");
                        g && f(g.children);
                    };
                    v.init = function() {
                        b.extend(a.options, z, !0), q = a.options, d = b.getChildByClass(a.scrollWrap, "pswp__ui"), 
                        l = a.listen, R(), l("beforeChange", v.update), l("doubleTap", (function(b) {
                            var c = a.currItem.initialZoomLevel;
                            a.getZoomLevel() !== c ? a.zoomTo(c, b, 333) : a.zoomTo(q.getDoubleTapZoom(!1, a.currItem), b, 333);
                        })), l("preventDragEvent", (function(a, b, c) {
                            var d = a.target || a.srcElement;
                            d && d.getAttribute("class") && a.type.indexOf("mouse") > -1 && (d.getAttribute("class").indexOf("__caption") > 0 || /(SMALL|STRONG|EM)/i.test(d.tagName)) && (c.prevent = !1);
                        })), l("bindEvents", (function() {
                            b.bind(d, "pswpTap click", A), b.bind(a.scrollWrap, "pswpTap", v.onGlobalTap), a.likelyTouchDevice || b.bind(a.scrollWrap, "mouseover", v.onMouseOver);
                        })), l("unbindEvents", (function() {
                            y || F(), t && clearInterval(t), b.unbind(document, "mouseout", L), b.unbind(document, "mousemove", K), 
                            b.unbind(d, "pswpTap click", A), b.unbind(a.scrollWrap, "pswpTap", v.onGlobalTap), 
                            b.unbind(a.scrollWrap, "mouseover", v.onMouseOver), c && (b.unbind(document, c.eventK, v.updateFullscreen), 
                            c.isFullscreen() && (q.hideAnimationDuration = 0, c.exit()), c = null);
                        })), l("destroy", (function() {
                            q.captionEl && (f && d.removeChild(f), b.removeClass(e, "pswp__caption--empty")), 
                            i && (i.children[0].onclick = null), b.removeClass(d, "pswp__ui--over-close"), b.addClass(d, "pswp__ui--hidden"), 
                            v.setIdle(!1);
                        })), q.showAnimationDuration || b.removeClass(d, "pswp__ui--hidden"), l("initialZoomIn", (function() {
                            q.showAnimationDuration && b.removeClass(d, "pswp__ui--hidden");
                        })), l("initialZoomOut", (function() {
                            b.addClass(d, "pswp__ui--hidden");
                        })), l("parseVerticalMargin", P), T(), q.shareEl && h && i && (y = !0), D(), Q(), 
                        M(), N();
                    }, v.setIdle = function(a) {
                        k = a, C(d, "ui--idle", a);
                    }, v.update = function() {
                        x && a.currItem ? (v.updateIndexIndicator(), q.captionEl && (q.addCaptionHTMLFn(a.currItem, e), 
                        C(e, "caption--empty", !a.currItem.title)), w = !0) : w = !1, y || F(), D();
                    }, v.updateFullscreen = function(d) {
                        d && setTimeout((function() {
                            a.setScrollOffset(0, b.getScrollY());
                        }), 50), b[(c.isFullscreen() ? "add" : "remove") + "Class"](a.template, "pswp--fs");
                    }, v.updateIndexIndicator = function() {
                        q.counterEl && (g.innerHTML = a.getCurrentIndex() + 1 + q.indexIndicatorSep + q.getNumItemsFn());
                    }, v.onGlobalTap = function(c) {
                        c = c || window.event;
                        var d = c.target || c.srcElement;
                        if (!r) if (c.detail && "mouse" === c.detail.pointerType) {
                            if (I(d)) return void a.close();
                            b.hasClass(d, "pswp__img") && (1 === a.getZoomLevel() && a.getZoomLevel() <= a.currItem.fitRatio ? q.clickToCloseNonZoomable && a.close() : a.toggleDesktopZoom(c.detail.releasePoint));
                        } else if (q.tapToToggleControls && (x ? v.hideControls() : v.showControls()), q.tapToClose && (b.hasClass(d, "pswp__img") || I(d))) return void a.close();
                    }, v.onMouseOver = function(a) {
                        a = a || window.event;
                        var b = a.target || a.srcElement;
                        C(d, "ui--over-close", I(b));
                    }, v.hideControls = function() {
                        b.addClass(d, "pswp__ui--hidden"), x = !1;
                    }, v.showControls = function() {
                        x = !0, w || v.update(), b.removeClass(d, "pswp__ui--hidden");
                    }, v.supportsFullscreen = function() {
                        var a = document;
                        return !!(a.exitFullscreen || a.mozCancelFullScreen || a.webkitExitFullscreen || a.msExitFullscreen);
                    }, v.getFullscreenAPI = function() {
                        var b, c = document.documentElement, d = "fullscreenchange";
                        return c.requestFullscreen ? b = {
                            enterK: "requestFullscreen",
                            exitK: "exitFullscreen",
                            elementK: "fullscreenElement",
                            eventK: d
                        } : c.mozRequestFullScreen ? b = {
                            enterK: "mozRequestFullScreen",
                            exitK: "mozCancelFullScreen",
                            elementK: "mozFullScreenElement",
                            eventK: "moz" + d
                        } : c.webkitRequestFullscreen ? b = {
                            enterK: "webkitRequestFullscreen",
                            exitK: "webkitExitFullscreen",
                            elementK: "webkitFullscreenElement",
                            eventK: "webkit" + d
                        } : c.msRequestFullscreen && (b = {
                            enterK: "msRequestFullscreen",
                            exitK: "msExitFullscreen",
                            elementK: "msFullscreenElement",
                            eventK: "MSFullscreenChange"
                        }), b && (b.enter = function() {
                            return j = q.closeOnScroll, q.closeOnScroll = !1, "webkitRequestFullscreen" !== this.enterK ? a.template[this.enterK]() : void a.template[this.enterK](Element.ALLOW_KEYBOARD_INPUT);
                        }, b.exit = function() {
                            return q.closeOnScroll = j, document[this.exitK]();
                        }, b.isFullscreen = function() {
                            return document[this.elementK];
                        }), b;
                    };
                };
                return a;
            }));
        },
        "../shared/node_modules/photoswipe/dist/photoswipe.min.js": function(module, exports, __webpack_require__) {
            var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;
            !function(a, b) {
                true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = b, __WEBPACK_AMD_DEFINE_RESULT__ = "function" === typeof __WEBPACK_AMD_DEFINE_FACTORY__ ? __WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module) : __WEBPACK_AMD_DEFINE_FACTORY__, 
                void 0 !== __WEBPACK_AMD_DEFINE_RESULT__ && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0;
            }(0, (function() {
                "use strict";
                var a = function(a, b, c, d) {
                    var e = {
                        features: null,
                        bind: function(a, b, c, d) {
                            var e = (d ? "remove" : "add") + "EventListener";
                            b = b.split(" ");
                            for (var f = 0; f < b.length; f++) b[f] && a[e](b[f], c, !1);
                        },
                        isArray: function(a) {
                            return a instanceof Array;
                        },
                        createEl: function(a, b) {
                            var c = document.createElement(b || "div");
                            return a && (c.className = a), c;
                        },
                        getScrollY: function() {
                            var a = window.pageYOffset;
                            return void 0 !== a ? a : document.documentElement.scrollTop;
                        },
                        unbind: function(a, b, c) {
                            e.bind(a, b, c, !0);
                        },
                        removeClass: function(a, b) {
                            var c = new RegExp("(\\s|^)" + b + "(\\s|$)");
                            a.className = a.className.replace(c, " ").replace(/^\s\s*/, "").replace(/\s\s*$/, "");
                        },
                        addClass: function(a, b) {
                            e.hasClass(a, b) || (a.className += (a.className ? " " : "") + b);
                        },
                        hasClass: function(a, b) {
                            return a.className && new RegExp("(^|\\s)" + b + "(\\s|$)").test(a.className);
                        },
                        getChildByClass: function(a, b) {
                            for (var c = a.firstChild; c; ) {
                                if (e.hasClass(c, b)) return c;
                                c = c.nextSibling;
                            }
                        },
                        arraySearch: function(a, b, c) {
                            for (var d = a.length; d--; ) if (a[d][c] === b) return d;
                            return -1;
                        },
                        extend: function(a, b, c) {
                            for (var d in b) if (b.hasOwnProperty(d)) {
                                if (c && a.hasOwnProperty(d)) continue;
                                a[d] = b[d];
                            }
                        },
                        easing: {
                            sine: {
                                out: function(a) {
                                    return Math.sin(a * (Math.PI / 2));
                                },
                                inOut: function(a) {
                                    return -(Math.cos(Math.PI * a) - 1) / 2;
                                }
                            },
                            cubic: {
                                out: function(a) {
                                    return --a * a * a + 1;
                                }
                            }
                        },
                        detectFeatures: function() {
                            if (e.features) return e.features;
                            var a = e.createEl(), b = a.style, c = "", d = {};
                            if (d.oldIE = document.all && !document.addEventListener, d.touch = "ontouchstart" in window, 
                            window.requestAnimationFrame && (d.raf = window.requestAnimationFrame, d.caf = window.cancelAnimationFrame), 
                            d.pointerEvent = !!window.PointerEvent || navigator.msPointerEnabled, !d.pointerEvent) {
                                var f = navigator.userAgent;
                                if (/iP(hone|od)/.test(navigator.platform)) {
                                    var g = navigator.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/);
                                    g && g.length > 0 && (g = parseInt(g[1], 10), g >= 1 && g < 8 && (d.isOldIOSPhone = !0));
                                }
                                var h = f.match(/Android\s([0-9\.]*)/), i = h ? h[1] : 0;
                                i = parseFloat(i), i >= 1 && (i < 4.4 && (d.isOldAndroid = !0), d.androidVersion = i), 
                                d.isMobileOpera = /opera mini|opera mobi/i.test(f);
                            }
                            for (var j, k, l = [ "transform", "perspective", "animationName" ], m = [ "", "webkit", "Moz", "ms", "O" ], n = 0; n < 4; n++) {
                                c = m[n];
                                for (var o = 0; o < 3; o++) j = l[o], k = c + (c ? j.charAt(0).toUpperCase() + j.slice(1) : j), 
                                !d[j] && k in b && (d[j] = k);
                                c && !d.raf && (c = c.toLowerCase(), d.raf = window[c + "RequestAnimationFrame"], 
                                d.raf && (d.caf = window[c + "CancelAnimationFrame"] || window[c + "CancelRequestAnimationFrame"]));
                            }
                            if (!d.raf) {
                                var p = 0;
                                d.raf = function(a) {
                                    var b = (new Date).getTime(), c = Math.max(0, 16 - (b - p)), d = window.setTimeout((function() {
                                        a(b + c);
                                    }), c);
                                    return p = b + c, d;
                                }, d.caf = function(a) {
                                    clearTimeout(a);
                                };
                            }
                            return d.svg = !!document.createElementNS && !!document.createElementNS("http://www.w3.org/2000/svg", "svg").createSVGRect, 
                            e.features = d, d;
                        }
                    };
                    e.detectFeatures(), e.features.oldIE && (e.bind = function(a, b, c, d) {
                        b = b.split(" ");
                        for (var e, f = (d ? "detach" : "attach") + "Event", g = function() {
                            c.handleEvent.call(c);
                        }, h = 0; h < b.length; h++) if (e = b[h]) if ("object" == typeof c && c.handleEvent) {
                            if (d) {
                                if (!c["oldIE" + e]) return !1;
                            } else c["oldIE" + e] = g;
                            a[f]("on" + e, c["oldIE" + e]);
                        } else a[f]("on" + e, c);
                    });
                    var f = this, g = 25, h = 3, i = {
                        allowPanToNext: !0,
                        spacing: .12,
                        bgOpacity: 1,
                        mouseUsed: !1,
                        loop: !0,
                        pinchToClose: !0,
                        closeOnScroll: !0,
                        closeOnVerticalDrag: !0,
                        verticalDragRange: .75,
                        hideAnimationDuration: 333,
                        showAnimationDuration: 333,
                        showHideOpacity: !1,
                        focus: !0,
                        escKey: !0,
                        arrowKeys: !0,
                        mainScrollEndFriction: .35,
                        panEndFriction: .35,
                        isClickableElement: function(a) {
                            return "A" === a.tagName;
                        },
                        getDoubleTapZoom: function(a, b) {
                            return a ? 1 : b.initialZoomLevel < .7 ? 1 : 1.33;
                        },
                        maxSpreadZoom: 1.33,
                        modal: !0,
                        scaleMode: "fit"
                    };
                    e.extend(i, d);
                    var j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, $, _, aa, ca, da, ea, fa, ga, ha, ia, ja, ka, la, ma = function() {
                        return {
                            x: 0,
                            y: 0
                        };
                    }, na = ma(), oa = ma(), pa = ma(), qa = {}, ra = 0, sa = {}, ta = ma(), ua = 0, va = !0, wa = [], xa = {}, ya = !1, za = function(a, b) {
                        e.extend(f, b.publicMethods), wa.push(a);
                    }, Aa = function(a) {
                        var b = ac();
                        return a > b - 1 ? a - b : a < 0 ? b + a : a;
                    }, Ba = {}, Ca = function(a, b) {
                        return Ba[a] || (Ba[a] = []), Ba[a].push(b);
                    }, Da = function(a) {
                        var b = Ba[a];
                        if (b) {
                            var c = Array.prototype.slice.call(arguments);
                            c.shift();
                            for (var d = 0; d < b.length; d++) b[d].apply(f, c);
                        }
                    }, Ea = function() {
                        return (new Date).getTime();
                    }, Fa = function(a) {
                        ja = a, f.bg.style.opacity = a * i.bgOpacity;
                    }, Ga = function(a, b, c, d, e) {
                        (!ya || e && e !== f.currItem) && (d /= e ? e.fitRatio : f.currItem.fitRatio), a[E] = u + b + "px, " + c + "px" + v + " scale(" + d + ")";
                    }, Ha = function(a) {
                        ea && (a && (s > f.currItem.fitRatio ? ya || (mc(f.currItem, !1, !0), ya = !0) : ya && (mc(f.currItem), 
                        ya = !1)), Ga(ea, pa.x, pa.y, s));
                    }, Ia = function(a) {
                        a.container && Ga(a.container.style, a.initialPosition.x, a.initialPosition.y, a.initialZoomLevel, a);
                    }, Ja = function(a, b) {
                        b[E] = u + a + "px, 0px" + v;
                    }, Ka = function(a, b) {
                        if (!i.loop && b) {
                            var c = m + (ta.x * ra - a) / ta.x, d = Math.round(a - tb.x);
                            (c < 0 && d > 0 || c >= ac() - 1 && d < 0) && (a = tb.x + d * i.mainScrollEndFriction);
                        }
                        tb.x = a, Ja(a, n);
                    }, La = function(a, b) {
                        var c = ub[a] - sa[a];
                        return oa[a] + na[a] + c - c * (b / t);
                    }, Ma = function(a, b) {
                        a.x = b.x, a.y = b.y, b.id && (a.id = b.id);
                    }, Na = function(a) {
                        a.x = Math.round(a.x), a.y = Math.round(a.y);
                    }, Oa = null, Pa = function() {
                        Oa && (e.unbind(document, "mousemove", Pa), e.addClass(a, "pswp--has_mouse"), i.mouseUsed = !0, 
                        Da("mouseUsed")), Oa = setTimeout((function() {
                            Oa = null;
                        }), 100);
                    }, Qa = function() {
                        e.bind(document, "keydown", f), N.transform && e.bind(f.scrollWrap, "click", f), 
                        i.mouseUsed || e.bind(document, "mousemove", Pa), e.bind(window, "resize scroll orientationchange", f), 
                        Da("bindEvents");
                    }, Ra = function() {
                        e.unbind(window, "resize scroll orientationchange", f), e.unbind(window, "scroll", r.scroll), 
                        e.unbind(document, "keydown", f), e.unbind(document, "mousemove", Pa), N.transform && e.unbind(f.scrollWrap, "click", f), 
                        V && e.unbind(window, p, f), clearTimeout(O), Da("unbindEvents");
                    }, Sa = function(a, b) {
                        var c = ic(f.currItem, qa, a);
                        return b && (da = c), c;
                    }, Ta = function(a) {
                        return a || (a = f.currItem), a.initialZoomLevel;
                    }, Ua = function(a) {
                        return a || (a = f.currItem), a.w > 0 ? i.maxSpreadZoom : 1;
                    }, Va = function(a, b, c, d) {
                        return d === f.currItem.initialZoomLevel ? (c[a] = f.currItem.initialPosition[a], 
                        !0) : (c[a] = La(a, d), c[a] > b.min[a] ? (c[a] = b.min[a], !0) : c[a] < b.max[a] && (c[a] = b.max[a], 
                        !0));
                    }, Wa = function() {
                        if (E) {
                            var b = N.perspective && !G;
                            return u = "translate" + (b ? "3d(" : "("), void (v = N.perspective ? ", 0px)" : ")");
                        }
                        E = "left", e.addClass(a, "pswp--ie"), Ja = function(a, b) {
                            b.left = a + "px";
                        }, Ia = function(a) {
                            var b = a.fitRatio > 1 ? 1 : a.fitRatio, c = a.container.style, d = b * a.w, e = b * a.h;
                            c.width = d + "px", c.height = e + "px", c.left = a.initialPosition.x + "px", c.top = a.initialPosition.y + "px";
                        }, Ha = function() {
                            if (ea) {
                                var a = ea, b = f.currItem, c = b.fitRatio > 1 ? 1 : b.fitRatio, d = c * b.w, e = c * b.h;
                                a.width = d + "px", a.height = e + "px", a.left = pa.x + "px", a.top = pa.y + "px";
                            }
                        };
                    }, Xa = function(a) {
                        var b = "";
                        i.escKey && 27 === a.keyCode ? b = "close" : i.arrowKeys && (37 === a.keyCode ? b = "prev" : 39 === a.keyCode && (b = "next")), 
                        b && (a.ctrlKey || a.altKey || a.shiftKey || a.metaKey || (a.preventDefault ? a.preventDefault() : a.returnValue = !1, 
                        f[b]()));
                    }, Ya = function(a) {
                        a && (Y || X || fa || T) && (a.preventDefault(), a.stopPropagation());
                    }, Za = function() {
                        f.setScrollOffset(0, e.getScrollY());
                    }, $a = {}, _a = 0, ab = function(a) {
                        $a[a] && ($a[a].raf && I($a[a].raf), _a--, delete $a[a]);
                    }, bb = function(a) {
                        $a[a] && ab(a), $a[a] || (_a++, $a[a] = {});
                    }, cb = function() {
                        for (var a in $a) $a.hasOwnProperty(a) && ab(a);
                    }, db = function(a, b, c, d, e, f, g) {
                        var h, i = Ea();
                        bb(a);
                        var j = function() {
                            if ($a[a]) {
                                if (h = Ea() - i, h >= d) return ab(a), f(c), void (g && g());
                                f((c - b) * e(h / d) + b), $a[a].raf = H(j);
                            }
                        };
                        j();
                    }, eb = {
                        shout: Da,
                        listen: Ca,
                        viewportSize: qa,
                        options: i,
                        isMainScrollAnimating: function() {
                            return fa;
                        },
                        getZoomLevel: function() {
                            return s;
                        },
                        getCurrentIndex: function() {
                            return m;
                        },
                        isDragging: function() {
                            return V;
                        },
                        isZooming: function() {
                            return aa;
                        },
                        setScrollOffset: function(a, b) {
                            sa.x = a, M = sa.y = b, Da("updateScrollOffset", sa);
                        },
                        applyZoomPan: function(a, b, c, d) {
                            pa.x = b, pa.y = c, s = a, Ha(d);
                        },
                        init: function() {
                            if (!j && !k) {
                                var c;
                                f.framework = e, f.template = a, f.bg = e.getChildByClass(a, "pswp__bg"), J = a.className, 
                                j = !0, N = e.detectFeatures(), H = N.raf, I = N.caf, E = N.transform, L = N.oldIE, 
                                f.scrollWrap = e.getChildByClass(a, "pswp__scroll-wrap"), f.container = e.getChildByClass(f.scrollWrap, "pswp__container"), 
                                n = f.container.style, f.itemHolders = y = [ {
                                    el: f.container.children[0],
                                    wrap: 0,
                                    index: -1
                                }, {
                                    el: f.container.children[1],
                                    wrap: 0,
                                    index: -1
                                }, {
                                    el: f.container.children[2],
                                    wrap: 0,
                                    index: -1
                                } ], y[0].el.style.display = y[2].el.style.display = "none", Wa(), r = {
                                    resize: f.updateSize,
                                    orientationchange: function() {
                                        clearTimeout(O), O = setTimeout((function() {
                                            qa.x !== f.scrollWrap.clientWidth && f.updateSize();
                                        }), 500);
                                    },
                                    scroll: Za,
                                    keydown: Xa,
                                    click: Ya
                                };
                                var d = N.isOldIOSPhone || N.isOldAndroid || N.isMobileOpera;
                                for (N.animationName && N.transform && !d || (i.showAnimationDuration = i.hideAnimationDuration = 0), 
                                c = 0; c < wa.length; c++) f["init" + wa[c]]();
                                if (b) {
                                    var g = f.ui = new b(f, e);
                                    g.init();
                                }
                                Da("firstUpdate"), m = m || i.index || 0, (isNaN(m) || m < 0 || m >= ac()) && (m = 0), 
                                f.currItem = _b(m), (N.isOldIOSPhone || N.isOldAndroid) && (va = !1), a.setAttribute("aria-hidden", "false"), 
                                i.modal && (va ? a.style.position = "fixed" : (a.style.position = "absolute", a.style.top = e.getScrollY() + "px")), 
                                void 0 === M && (Da("initialLayout"), M = K = e.getScrollY());
                                var l = "pswp--open ";
                                for (i.mainClass && (l += i.mainClass + " "), i.showHideOpacity && (l += "pswp--animate_opacity "), 
                                l += G ? "pswp--touch" : "pswp--notouch", l += N.animationName ? " pswp--css_animation" : "", 
                                l += N.svg ? " pswp--svg" : "", e.addClass(a, l), f.updateSize(), o = -1, ua = null, 
                                c = 0; c < h; c++) Ja((c + o) * ta.x, y[c].el.style);
                                L || e.bind(f.scrollWrap, q, f), Ca("initialZoomInEnd", (function() {
                                    f.setContent(y[0], m - 1), f.setContent(y[2], m + 1), y[0].el.style.display = y[2].el.style.display = "block", 
                                    i.focus && a.focus(), Qa();
                                })), f.setContent(y[1], m), f.updateCurrItem(), Da("afterInit"), va || (w = setInterval((function() {
                                    _a || V || aa || s !== f.currItem.initialZoomLevel || f.updateSize();
                                }), 1e3)), e.addClass(a, "pswp--visible");
                            }
                        },
                        close: function() {
                            j && (j = !1, k = !0, Da("close"), Ra(), cc(f.currItem, null, !0, f.destroy));
                        },
                        destroy: function() {
                            Da("destroy"), Xb && clearTimeout(Xb), a.setAttribute("aria-hidden", "true"), a.className = J, 
                            w && clearInterval(w), e.unbind(f.scrollWrap, q, f), e.unbind(window, "scroll", f), 
                            zb(), cb(), Ba = null;
                        },
                        panTo: function(a, b, c) {
                            c || (a > da.min.x ? a = da.min.x : a < da.max.x && (a = da.max.x), b > da.min.y ? b = da.min.y : b < da.max.y && (b = da.max.y)), 
                            pa.x = a, pa.y = b, Ha();
                        },
                        handleEvent: function(a) {
                            a = a || window.event, r[a.type] && r[a.type](a);
                        },
                        goTo: function(a) {
                            a = Aa(a);
                            var b = a - m;
                            ua = b, m = a, f.currItem = _b(m), ra -= b, Ka(ta.x * ra), cb(), fa = !1, f.updateCurrItem();
                        },
                        next: function() {
                            f.goTo(m + 1);
                        },
                        prev: function() {
                            f.goTo(m - 1);
                        },
                        updateCurrZoomItem: function(a) {
                            if (a && Da("beforeChange", 0), y[1].el.children.length) {
                                var b = y[1].el.children[0];
                                ea = e.hasClass(b, "pswp__zoom-wrap") ? b.style : null;
                            } else ea = null;
                            da = f.currItem.bounds, t = s = f.currItem.initialZoomLevel, pa.x = da.center.x, 
                            pa.y = da.center.y, a && Da("afterChange");
                        },
                        invalidateCurrItems: function() {
                            x = !0;
                            for (var a = 0; a < h; a++) y[a].item && (y[a].item.needsUpdate = !0);
                        },
                        updateCurrItem: function(a) {
                            if (0 !== ua) {
                                var b, c = Math.abs(ua);
                                if (!(a && c < 2)) {
                                    f.currItem = _b(m), ya = !1, Da("beforeChange", ua), c >= h && (o += ua + (ua > 0 ? -h : h), 
                                    c = h);
                                    for (var d = 0; d < c; d++) ua > 0 ? (b = y.shift(), y[h - 1] = b, o++, Ja((o + 2) * ta.x, b.el.style), 
                                    f.setContent(b, m - c + d + 1 + 1)) : (b = y.pop(), y.unshift(b), o--, Ja(o * ta.x, b.el.style), 
                                    f.setContent(b, m + c - d - 1 - 1));
                                    if (ea && 1 === Math.abs(ua)) {
                                        var e = _b(z);
                                        e.initialZoomLevel !== s && (ic(e, qa), mc(e), Ia(e));
                                    }
                                    ua = 0, f.updateCurrZoomItem(), z = m, Da("afterChange");
                                }
                            }
                        },
                        updateSize: function(b) {
                            if (!va && i.modal) {
                                var c = e.getScrollY();
                                if (M !== c && (a.style.top = c + "px", M = c), !b && xa.x === window.innerWidth && xa.y === window.innerHeight) return;
                                xa.x = window.innerWidth, xa.y = window.innerHeight, a.style.height = xa.y + "px";
                            }
                            if (qa.x = f.scrollWrap.clientWidth, qa.y = f.scrollWrap.clientHeight, Za(), ta.x = qa.x + Math.round(qa.x * i.spacing), 
                            ta.y = qa.y, Ka(ta.x * ra), Da("beforeResize"), void 0 !== o) {
                                for (var d, g, j, k = 0; k < h; k++) d = y[k], Ja((k + o) * ta.x, d.el.style), j = m + k - 1, 
                                i.loop && ac() > 2 && (j = Aa(j)), g = _b(j), g && (x || g.needsUpdate || !g.bounds) ? (f.cleanSlide(g), 
                                f.setContent(d, j), 1 === k && (f.currItem = g, f.updateCurrZoomItem(!0)), g.needsUpdate = !1) : -1 === d.index && j >= 0 && f.setContent(d, j), 
                                g && g.container && (ic(g, qa), mc(g), Ia(g));
                                x = !1;
                            }
                            t = s = f.currItem.initialZoomLevel, da = f.currItem.bounds, da && (pa.x = da.center.x, 
                            pa.y = da.center.y, Ha(!0)), Da("resize");
                        },
                        zoomTo: function(a, b, c, d, f) {
                            b && (t = s, ub.x = Math.abs(b.x) - pa.x, ub.y = Math.abs(b.y) - pa.y, Ma(oa, pa));
                            var g = Sa(a, !1), h = {};
                            Va("x", g, h, a), Va("y", g, h, a);
                            var i = s, j = {
                                x: pa.x,
                                y: pa.y
                            };
                            Na(h);
                            var k = function(b) {
                                1 === b ? (s = a, pa.x = h.x, pa.y = h.y) : (s = (a - i) * b + i, pa.x = (h.x - j.x) * b + j.x, 
                                pa.y = (h.y - j.y) * b + j.y), f && f(b), Ha(1 === b);
                            };
                            c ? db("customZoomTo", 0, 1, c, d || e.easing.sine.inOut, k) : k(1);
                        }
                    }, fb = 30, gb = 10, hb = {}, ib = {}, jb = {}, kb = {}, lb = {}, mb = [], nb = {}, ob = [], pb = {}, qb = 0, rb = ma(), sb = 0, tb = ma(), ub = ma(), vb = ma(), wb = function(a, b) {
                        return a.x === b.x && a.y === b.y;
                    }, xb = function(a, b) {
                        return Math.abs(a.x - b.x) < g && Math.abs(a.y - b.y) < g;
                    }, yb = function(a, b) {
                        return pb.x = Math.abs(a.x - b.x), pb.y = Math.abs(a.y - b.y), Math.sqrt(pb.x * pb.x + pb.y * pb.y);
                    }, zb = function() {
                        Z && (I(Z), Z = null);
                    }, Ab = function() {
                        V && (Z = H(Ab), Qb());
                    }, Bb = function() {
                        return !("fit" === i.scaleMode && s === f.currItem.initialZoomLevel);
                    }, Cb = function(a, b) {
                        return !(!a || a === document) && !(a.getAttribute("class") && a.getAttribute("class").indexOf("pswp__scroll-wrap") > -1) && (b(a) ? a : Cb(a.parentNode, b));
                    }, Db = {}, Eb = function(a, b) {
                        return Db.prevent = !Cb(a.target, i.isClickableElement), Da("preventDragEvent", a, b, Db), 
                        Db.prevent;
                    }, Fb = function(a, b) {
                        return b.x = a.pageX, b.y = a.pageY, b.id = a.identifier, b;
                    }, Gb = function(a, b, c) {
                        c.x = .5 * (a.x + b.x), c.y = .5 * (a.y + b.y);
                    }, Hb = function(a, b, c) {
                        if (a - Q > 50) {
                            var d = ob.length > 2 ? ob.shift() : {};
                            d.x = b, d.y = c, ob.push(d), Q = a;
                        }
                    }, Ib = function() {
                        var a = pa.y - f.currItem.initialPosition.y;
                        return 1 - Math.abs(a / (qa.y / 2));
                    }, Jb = {}, Kb = {}, Lb = [], Mb = function(a) {
                        for (;Lb.length > 0; ) Lb.pop();
                        return F ? (la = 0, mb.forEach((function(a) {
                            0 === la ? Lb[0] = a : 1 === la && (Lb[1] = a), la++;
                        }))) : a.type.indexOf("touch") > -1 ? a.touches && a.touches.length > 0 && (Lb[0] = Fb(a.touches[0], Jb), 
                        a.touches.length > 1 && (Lb[1] = Fb(a.touches[1], Kb))) : (Jb.x = a.pageX, Jb.y = a.pageY, 
                        Jb.id = "", Lb[0] = Jb), Lb;
                    }, Nb = function(a, b) {
                        var c, d, e, g, j = pa[a] + b[a], k = b[a] > 0, l = tb.x + b.x, m = tb.x - nb.x;
                        return c = j > da.min[a] || j < da.max[a] ? i.panEndFriction : 1, j = pa[a] + b[a] * c, 
                        !i.allowPanToNext && s !== f.currItem.initialZoomLevel || (ea ? "h" !== ga || "x" !== a || X || (k ? (j > da.min[a] && (c = i.panEndFriction, 
                        da.min[a] - j, d = da.min[a] - oa[a]), (d <= 0 || m < 0) && ac() > 1 ? (g = l, m < 0 && l > nb.x && (g = nb.x)) : da.min.x !== da.max.x && (e = j)) : (j < da.max[a] && (c = i.panEndFriction, 
                        j - da.max[a], d = oa[a] - da.max[a]), (d <= 0 || m > 0) && ac() > 1 ? (g = l, m > 0 && l < nb.x && (g = nb.x)) : da.min.x !== da.max.x && (e = j))) : g = l, 
                        "x" !== a) ? void (fa || $ || s > f.currItem.fitRatio && (pa[a] += b[a] * c)) : (void 0 !== g && (Ka(g, !0), 
                        $ = g !== nb.x), da.min.x !== da.max.x && (void 0 !== e ? pa.x = e : $ || (pa.x += b.x * c)), 
                        void 0 !== g);
                    }, Ob = function(a) {
                        if (!("mousedown" === a.type && a.button > 0)) {
                            if ($b) return void a.preventDefault();
                            if (!U || "mousedown" !== a.type) {
                                if (Eb(a, !0) && a.preventDefault(), Da("pointerDown"), F) {
                                    var b = e.arraySearch(mb, a.pointerId, "id");
                                    b < 0 && (b = mb.length), mb[b] = {
                                        x: a.pageX,
                                        y: a.pageY,
                                        id: a.pointerId
                                    };
                                }
                                var c = Mb(a), d = c.length;
                                _ = null, cb(), V && 1 !== d || (V = ha = !0, e.bind(window, p, f), S = ka = ia = T = $ = Y = W = X = !1, 
                                ga = null, Da("firstTouchStart", c), Ma(oa, pa), na.x = na.y = 0, Ma(kb, c[0]), 
                                Ma(lb, kb), nb.x = ta.x * ra, ob = [ {
                                    x: kb.x,
                                    y: kb.y
                                } ], Q = P = Ea(), Sa(s, !0), zb(), Ab()), !aa && d > 1 && !fa && !$ && (t = s, 
                                X = !1, aa = W = !0, na.y = na.x = 0, Ma(oa, pa), Ma(hb, c[0]), Ma(ib, c[1]), Gb(hb, ib, vb), 
                                ub.x = Math.abs(vb.x) - pa.x, ub.y = Math.abs(vb.y) - pa.y, ca = yb(hb, ib));
                            }
                        }
                    }, Pb = function(a) {
                        if (a.preventDefault(), F) {
                            var b = e.arraySearch(mb, a.pointerId, "id");
                            if (b > -1) {
                                var c = mb[b];
                                c.x = a.pageX, c.y = a.pageY;
                            }
                        }
                        if (V) {
                            var d = Mb(a);
                            if (ga || Y || aa) _ = d; else if (tb.x !== ta.x * ra) ga = "h"; else {
                                var f = Math.abs(d[0].x - kb.x) - Math.abs(d[0].y - kb.y);
                                Math.abs(f) >= gb && (ga = f > 0 ? "h" : "v", _ = d);
                            }
                        }
                    }, Qb = function() {
                        if (_) {
                            var a = _.length;
                            if (0 !== a) if (Ma(hb, _[0]), jb.x = hb.x - kb.x, jb.y = hb.y - kb.y, aa && a > 1) {
                                if (kb.x = hb.x, kb.y = hb.y, !jb.x && !jb.y && wb(_[1], ib)) return;
                                Ma(ib, _[1]), X || (X = !0, Da("zoomGestureStarted"));
                                var b = yb(hb, ib), c = Vb(b);
                                c > f.currItem.initialZoomLevel + f.currItem.initialZoomLevel / 15 && (ka = !0);
                                var d = 1, e = Ta(), g = Ua();
                                if (c < e) if (i.pinchToClose && !ka && t <= f.currItem.initialZoomLevel) {
                                    var h = e - c, j = 1 - h / (e / 1.2);
                                    Fa(j), Da("onPinchClose", j), ia = !0;
                                } else d = (e - c) / e, d > 1 && (d = 1), c = e - d * (e / 3); else c > g && (d = (c - g) / (6 * e), 
                                d > 1 && (d = 1), c = g + d * e);
                                d < 0 && (d = 0), b, Gb(hb, ib, rb), na.x += rb.x - vb.x, na.y += rb.y - vb.y, Ma(vb, rb), 
                                pa.x = La("x", c), pa.y = La("y", c), S = c > s, s = c, Ha();
                            } else {
                                if (!ga) return;
                                if (ha && (ha = !1, Math.abs(jb.x) >= gb && (jb.x -= _[0].x - lb.x), Math.abs(jb.y) >= gb && (jb.y -= _[0].y - lb.y)), 
                                kb.x = hb.x, kb.y = hb.y, 0 === jb.x && 0 === jb.y) return;
                                if ("v" === ga && i.closeOnVerticalDrag && !Bb()) {
                                    na.y += jb.y, pa.y += jb.y;
                                    var k = Ib();
                                    return T = !0, Da("onVerticalDrag", k), Fa(k), void Ha();
                                }
                                Hb(Ea(), hb.x, hb.y), Y = !0, da = f.currItem.bounds;
                                var l = Nb("x", jb);
                                l || (Nb("y", jb), Na(pa), Ha());
                            }
                        }
                    }, Rb = function(a) {
                        if (N.isOldAndroid) {
                            if (U && "mouseup" === a.type) return;
                            a.type.indexOf("touch") > -1 && (clearTimeout(U), U = setTimeout((function() {
                                U = 0;
                            }), 600));
                        }
                        Da("pointerUp"), Eb(a, !1) && a.preventDefault();
                        var b;
                        if (F) {
                            var c = e.arraySearch(mb, a.pointerId, "id");
                            if (c > -1) if (b = mb.splice(c, 1)[0], navigator.msPointerEnabled) {
                                var d = {
                                    4: "mouse",
                                    2: "touch",
                                    3: "pen"
                                };
                                b.type = d[a.pointerType], b.type || (b.type = a.pointerType || "mouse");
                            } else b.type = a.pointerType || "mouse";
                        }
                        var g, h = Mb(a), j = h.length;
                        if ("mouseup" === a.type && (j = 0), 2 === j) return _ = null, !0;
                        1 === j && Ma(lb, h[0]), 0 !== j || ga || fa || (b || ("mouseup" === a.type ? b = {
                            x: a.pageX,
                            y: a.pageY,
                            type: "mouse"
                        } : a.changedTouches && a.changedTouches[0] && (b = {
                            x: a.changedTouches[0].pageX,
                            y: a.changedTouches[0].pageY,
                            type: "touch"
                        })), Da("touchRelease", a, b));
                        var k = -1;
                        if (0 === j && (V = !1, e.unbind(window, p, f), zb(), aa ? k = 0 : -1 !== sb && (k = Ea() - sb)), 
                        sb = 1 === j ? Ea() : -1, g = -1 !== k && k < 150 ? "zoom" : "swipe", aa && j < 2 && (aa = !1, 
                        1 === j && (g = "zoomPointerUp"), Da("zoomGestureEnded")), _ = null, Y || X || fa || T) if (cb(), 
                        R || (R = Sb()), R.calculateSwipeSpeed("x"), T) {
                            var l = Ib();
                            if (l < i.verticalDragRange) f.close(); else {
                                var m = pa.y, n = ja;
                                db("verticalDrag", 0, 1, 300, e.easing.cubic.out, (function(a) {
                                    pa.y = (f.currItem.initialPosition.y - m) * a + m, Fa((1 - n) * a + n), Ha();
                                })), Da("onVerticalDrag", 1);
                            }
                        } else {
                            if (($ || fa) && 0 === j) {
                                var o = Ub(g, R);
                                if (o) return;
                                g = "zoomPointerUp";
                            }
                            if (!fa) return "swipe" !== g ? void Wb() : void (!$ && s > f.currItem.fitRatio && Tb(R));
                        }
                    }, Sb = function() {
                        var a, b, c = {
                            lastFlickOffset: {},
                            lastFlickDist: {},
                            lastFlickSpeed: {},
                            slowDownRatio: {},
                            slowDownRatioReverse: {},
                            speedDecelerationRatio: {},
                            speedDecelerationRatioAbs: {},
                            distanceOffset: {},
                            backAnimDestination: {},
                            backAnimStarted: {},
                            calculateSwipeSpeed: function(d) {
                                ob.length > 1 ? (a = Ea() - Q + 50, b = ob[ob.length - 2][d]) : (a = Ea() - P, b = lb[d]), 
                                c.lastFlickOffset[d] = kb[d] - b, c.lastFlickDist[d] = Math.abs(c.lastFlickOffset[d]), 
                                c.lastFlickDist[d] > 20 ? c.lastFlickSpeed[d] = c.lastFlickOffset[d] / a : c.lastFlickSpeed[d] = 0, 
                                Math.abs(c.lastFlickSpeed[d]) < .1 && (c.lastFlickSpeed[d] = 0), c.slowDownRatio[d] = .95, 
                                c.slowDownRatioReverse[d] = 1 - c.slowDownRatio[d], c.speedDecelerationRatio[d] = 1;
                            },
                            calculateOverBoundsAnimOffset: function(a, b) {
                                c.backAnimStarted[a] || (pa[a] > da.min[a] ? c.backAnimDestination[a] = da.min[a] : pa[a] < da.max[a] && (c.backAnimDestination[a] = da.max[a]), 
                                void 0 !== c.backAnimDestination[a] && (c.slowDownRatio[a] = .7, c.slowDownRatioReverse[a] = 1 - c.slowDownRatio[a], 
                                c.speedDecelerationRatioAbs[a] < .05 && (c.lastFlickSpeed[a] = 0, c.backAnimStarted[a] = !0, 
                                db("bounceZoomPan" + a, pa[a], c.backAnimDestination[a], b || 300, e.easing.sine.out, (function(b) {
                                    pa[a] = b, Ha();
                                })))));
                            },
                            calculateAnimOffset: function(a) {
                                c.backAnimStarted[a] || (c.speedDecelerationRatio[a] = c.speedDecelerationRatio[a] * (c.slowDownRatio[a] + c.slowDownRatioReverse[a] - c.slowDownRatioReverse[a] * c.timeDiff / 10), 
                                c.speedDecelerationRatioAbs[a] = Math.abs(c.lastFlickSpeed[a] * c.speedDecelerationRatio[a]), 
                                c.distanceOffset[a] = c.lastFlickSpeed[a] * c.speedDecelerationRatio[a] * c.timeDiff, 
                                pa[a] += c.distanceOffset[a]);
                            },
                            panAnimLoop: function() {
                                if ($a.zoomPan && ($a.zoomPan.raf = H(c.panAnimLoop), c.now = Ea(), c.timeDiff = c.now - c.lastNow, 
                                c.lastNow = c.now, c.calculateAnimOffset("x"), c.calculateAnimOffset("y"), Ha(), 
                                c.calculateOverBoundsAnimOffset("x"), c.calculateOverBoundsAnimOffset("y"), c.speedDecelerationRatioAbs.x < .05 && c.speedDecelerationRatioAbs.y < .05)) return pa.x = Math.round(pa.x), 
                                pa.y = Math.round(pa.y), Ha(), void ab("zoomPan");
                            }
                        };
                        return c;
                    }, Tb = function(a) {
                        return a.calculateSwipeSpeed("y"), da = f.currItem.bounds, a.backAnimDestination = {}, 
                        a.backAnimStarted = {}, Math.abs(a.lastFlickSpeed.x) <= .05 && Math.abs(a.lastFlickSpeed.y) <= .05 ? (a.speedDecelerationRatioAbs.x = a.speedDecelerationRatioAbs.y = 0, 
                        a.calculateOverBoundsAnimOffset("x"), a.calculateOverBoundsAnimOffset("y"), !0) : (bb("zoomPan"), 
                        a.lastNow = Ea(), void a.panAnimLoop());
                    }, Ub = function(a, b) {
                        var c;
                        fa || (qb = m);
                        var d;
                        if ("swipe" === a) {
                            var g = kb.x - lb.x, h = b.lastFlickDist.x < 10;
                            g > fb && (h || b.lastFlickOffset.x > 20) ? d = -1 : g < -fb && (h || b.lastFlickOffset.x < -20) && (d = 1);
                        }
                        var j;
                        d && (m += d, m < 0 ? (m = i.loop ? ac() - 1 : 0, j = !0) : m >= ac() && (m = i.loop ? 0 : ac() - 1, 
                        j = !0), j && !i.loop || (ua += d, ra -= d, c = !0));
                        var k, l = ta.x * ra, n = Math.abs(l - tb.x);
                        return c || l > tb.x == b.lastFlickSpeed.x > 0 ? (k = Math.abs(b.lastFlickSpeed.x) > 0 ? n / Math.abs(b.lastFlickSpeed.x) : 333, 
                        k = Math.min(k, 400), k = Math.max(k, 250)) : k = 333, qb === m && (c = !1), fa = !0, 
                        Da("mainScrollAnimStart"), db("mainScroll", tb.x, l, k, e.easing.cubic.out, Ka, (function() {
                            cb(), fa = !1, qb = -1, (c || qb !== m) && f.updateCurrItem(), Da("mainScrollAnimComplete");
                        })), c && f.updateCurrItem(!0), c;
                    }, Vb = function(a) {
                        return 1 / ca * a * t;
                    }, Wb = function() {
                        var a = s, b = Ta(), c = Ua();
                        s < b ? a = b : s > c && (a = c);
                        var d, g = 1, h = ja;
                        return ia && !S && !ka && s < b ? (f.close(), !0) : (ia && (d = function(a) {
                            Fa((g - h) * a + h);
                        }), f.zoomTo(a, 0, 200, e.easing.cubic.out, d), !0);
                    };
                    za("Gestures", {
                        publicMethods: {
                            initGestures: function() {
                                var a = function(a, b, c, d, e) {
                                    A = a + b, B = a + c, C = a + d, D = e ? a + e : "";
                                };
                                F = N.pointerEvent, F && N.touch && (N.touch = !1), F ? navigator.msPointerEnabled ? a("MSPointer", "Down", "Move", "Up", "Cancel") : a("pointer", "down", "move", "up", "cancel") : N.touch ? (a("touch", "start", "move", "end", "cancel"), 
                                G = !0) : a("mouse", "down", "move", "up"), p = B + " " + C + " " + D, q = A, F && !G && (G = navigator.maxTouchPoints > 1 || navigator.msMaxTouchPoints > 1), 
                                f.likelyTouchDevice = G, r[A] = Ob, r[B] = Pb, r[C] = Rb, D && (r[D] = r[C]), N.touch && (q += " mousedown", 
                                p += " mousemove mouseup", r.mousedown = r[A], r.mousemove = r[B], r.mouseup = r[C]), 
                                G || (i.allowPanToNext = !1);
                            }
                        }
                    });
                    var Xb, Yb, Zb, $b, _b, ac, cc = function(b, c, d, g) {
                        Xb && clearTimeout(Xb), $b = !0, Zb = !0;
                        var h;
                        b.initialLayout ? (h = b.initialLayout, b.initialLayout = null) : h = i.getThumbBoundsFn && i.getThumbBoundsFn(m);
                        var j = d ? i.hideAnimationDuration : i.showAnimationDuration, k = function() {
                            ab("initialZoom"), d ? (f.template.removeAttribute("style"), f.bg.removeAttribute("style")) : (Fa(1), 
                            c && (c.style.display = "block"), e.addClass(a, "pswp--animated-in"), Da("initialZoom" + (d ? "OutEnd" : "InEnd"))), 
                            g && g(), $b = !1;
                        };
                        if (!j || !h || void 0 === h.x) return Da("initialZoom" + (d ? "Out" : "In")), s = b.initialZoomLevel, 
                        Ma(pa, b.initialPosition), Ha(), a.style.opacity = d ? 0 : 1, Fa(1), void (j ? setTimeout((function() {
                            k();
                        }), j) : k());
                        var n = function() {
                            var c = l, g = !f.currItem.src || f.currItem.loadError || i.showHideOpacity;
                            b.miniImg && (b.miniImg.style.webkitBackfaceVisibility = "hidden"), d || (s = h.w / b.w, 
                            pa.x = h.x, pa.y = h.y - K, f[g ? "template" : "bg"].style.opacity = .001, Ha()), 
                            bb("initialZoom"), d && !c && e.removeClass(a, "pswp--animated-in"), g && (d ? e[(c ? "remove" : "add") + "Class"](a, "pswp--animate_opacity") : setTimeout((function() {
                                e.addClass(a, "pswp--animate_opacity");
                            }), 30)), Xb = setTimeout((function() {
                                if (Da("initialZoom" + (d ? "Out" : "In")), d) {
                                    var f = h.w / b.w, i = {
                                        x: pa.x,
                                        y: pa.y
                                    }, l = s, m = ja, n = function(b) {
                                        1 === b ? (s = f, pa.x = h.x, pa.y = h.y - M) : (s = (f - l) * b + l, pa.x = (h.x - i.x) * b + i.x, 
                                        pa.y = (h.y - M - i.y) * b + i.y), Ha(), g ? a.style.opacity = 1 - b : Fa(m - b * m);
                                    };
                                    c ? db("initialZoom", 0, 1, j, e.easing.cubic.out, n, k) : (n(1), Xb = setTimeout(k, j + 20));
                                } else s = b.initialZoomLevel, Ma(pa, b.initialPosition), Ha(), Fa(1), g ? a.style.opacity = 1 : Fa(1), 
                                Xb = setTimeout(k, j + 20);
                            }), d ? 25 : 90);
                        };
                        n();
                    }, dc = {}, ec = [], fc = {
                        index: 0,
                        errorMsg: '<div class="pswp__error-msg"><a href="%url%" target="_blank">The image</a> could not be loaded.</div>',
                        forceProgressiveLoading: !1,
                        preload: [ 1, 1 ],
                        getNumItemsFn: function() {
                            return Yb.length;
                        }
                    }, gc = function() {
                        return {
                            center: {
                                x: 0,
                                y: 0
                            },
                            max: {
                                x: 0,
                                y: 0
                            },
                            min: {
                                x: 0,
                                y: 0
                            }
                        };
                    }, hc = function(a, b, c) {
                        var d = a.bounds;
                        d.center.x = Math.round((dc.x - b) / 2), d.center.y = Math.round((dc.y - c) / 2) + a.vGap.top, 
                        d.max.x = b > dc.x ? Math.round(dc.x - b) : d.center.x, d.max.y = c > dc.y ? Math.round(dc.y - c) + a.vGap.top : d.center.y, 
                        d.min.x = b > dc.x ? 0 : d.center.x, d.min.y = c > dc.y ? a.vGap.top : d.center.y;
                    }, ic = function(a, b, c) {
                        if (a.src && !a.loadError) {
                            var d = !c;
                            if (d && (a.vGap || (a.vGap = {
                                top: 0,
                                bottom: 0
                            }), Da("parseVerticalMargin", a)), dc.x = b.x, dc.y = b.y - a.vGap.top - a.vGap.bottom, 
                            d) {
                                var e = dc.x / a.w, f = dc.y / a.h;
                                a.fitRatio = e < f ? e : f;
                                var g = i.scaleMode;
                                "orig" === g ? c = 1 : "fit" === g && (c = a.fitRatio), c > 1 && (c = 1), a.initialZoomLevel = c, 
                                a.bounds || (a.bounds = gc());
                            }
                            if (!c) return;
                            return hc(a, a.w * c, a.h * c), d && c === a.initialZoomLevel && (a.initialPosition = a.bounds.center), 
                            a.bounds;
                        }
                        return a.w = a.h = 0, a.initialZoomLevel = a.fitRatio = 1, a.bounds = gc(), a.initialPosition = a.bounds.center, 
                        a.bounds;
                    }, jc = function(a, b, c, d, e, g) {
                        b.loadError || d && (b.imageAppended = !0, mc(b, d, b === f.currItem && ya), c.appendChild(d), 
                        g && setTimeout((function() {
                            b && b.loaded && b.placeholder && (b.placeholder.style.display = "none", b.placeholder = null);
                        }), 500));
                    }, kc = function(a) {
                        a.loading = !0, a.loaded = !1;
                        var b = a.img = e.createEl("pswp__img", "img"), c = function() {
                            a.loading = !1, a.loaded = !0, a.loadComplete ? a.loadComplete(a) : a.img = null, 
                            b.onload = b.onerror = null, b = null;
                        };
                        return b.onload = c, b.onerror = function() {
                            a.loadError = !0, c();
                        }, b.src = a.src, b;
                    }, lc = function(a, b) {
                        if (a.src && a.loadError && a.container) return b && (a.container.innerHTML = ""), 
                        a.container.innerHTML = i.errorMsg.replace("%url%", a.src), !0;
                    }, mc = function(a, b, c) {
                        if (a.src) {
                            b || (b = a.container.lastChild);
                            var d = c ? a.w : Math.round(a.w * a.fitRatio), e = c ? a.h : Math.round(a.h * a.fitRatio);
                            a.placeholder && !a.loaded && (a.placeholder.style.width = d + "px", a.placeholder.style.height = e + "px"), 
                            b.style.width = d + "px", b.style.height = e + "px";
                        }
                    }, nc = function() {
                        if (ec.length) {
                            for (var a, b = 0; b < ec.length; b++) a = ec[b], a.holder.index === a.index && jc(a.index, a.item, a.baseDiv, a.img, !1, a.clearPlaceholder);
                            ec = [];
                        }
                    };
                    za("Controller", {
                        publicMethods: {
                            lazyLoadItem: function(a) {
                                a = Aa(a);
                                var b = _b(a);
                                b && (!b.loaded && !b.loading || x) && (Da("gettingData", a, b), b.src && kc(b));
                            },
                            initController: function() {
                                e.extend(i, fc, !0), f.items = Yb = c, _b = f.getItemAt, ac = i.getNumItemsFn, i.loop, 
                                ac() < 3 && (i.loop = !1), Ca("beforeChange", (function(a) {
                                    var b, c = i.preload, d = null === a || a >= 0, e = Math.min(c[0], ac()), g = Math.min(c[1], ac());
                                    for (b = 1; b <= (d ? g : e); b++) f.lazyLoadItem(m + b);
                                    for (b = 1; b <= (d ? e : g); b++) f.lazyLoadItem(m - b);
                                })), Ca("initialLayout", (function() {
                                    f.currItem.initialLayout = i.getThumbBoundsFn && i.getThumbBoundsFn(m);
                                })), Ca("mainScrollAnimComplete", nc), Ca("initialZoomInEnd", nc), Ca("destroy", (function() {
                                    for (var a, b = 0; b < Yb.length; b++) a = Yb[b], a.container && (a.container = null), 
                                    a.placeholder && (a.placeholder = null), a.img && (a.img = null), a.preloader && (a.preloader = null), 
                                    a.loadError && (a.loaded = a.loadError = !1);
                                    ec = null;
                                }));
                            },
                            getItemAt: function(a) {
                                return a >= 0 && void 0 !== Yb[a] && Yb[a];
                            },
                            allowProgressiveImg: function() {
                                return i.forceProgressiveLoading || !G || i.mouseUsed || screen.width > 1200;
                            },
                            setContent: function(a, b) {
                                i.loop && (b = Aa(b));
                                var c = f.getItemAt(a.index);
                                c && (c.container = null);
                                var d, g = f.getItemAt(b);
                                if (!g) return void (a.el.innerHTML = "");
                                Da("gettingData", b, g), a.index = b, a.item = g;
                                var h = g.container = e.createEl("pswp__zoom-wrap");
                                if (!g.src && g.html && (g.html.tagName ? h.appendChild(g.html) : h.innerHTML = g.html), 
                                lc(g), ic(g, qa), !g.src || g.loadError || g.loaded) g.src && !g.loadError && (d = e.createEl("pswp__img", "img"), 
                                d.style.opacity = 1, d.src = g.src, mc(g, d), jc(b, g, h, d, !0)); else {
                                    if (g.loadComplete = function(c) {
                                        if (j) {
                                            if (a && a.index === b) {
                                                if (lc(c, !0)) return c.loadComplete = c.img = null, ic(c, qa), Ia(c), void (a.index === m && f.updateCurrZoomItem());
                                                c.imageAppended ? !$b && c.placeholder && (c.placeholder.style.display = "none", 
                                                c.placeholder = null) : N.transform && (fa || $b) ? ec.push({
                                                    item: c,
                                                    baseDiv: h,
                                                    img: c.img,
                                                    index: b,
                                                    holder: a,
                                                    clearPlaceholder: !0
                                                }) : jc(b, c, h, c.img, fa || $b, !0);
                                            }
                                            c.loadComplete = null, c.img = null, Da("imageLoadComplete", b, c);
                                        }
                                    }, e.features.transform) {
                                        var k = "pswp__img pswp__img--placeholder";
                                        k += g.msrc ? "" : " pswp__img--placeholder--blank";
                                        var l = e.createEl(k, g.msrc ? "img" : "");
                                        g.msrc && (l.src = g.msrc), mc(g, l), h.appendChild(l), g.placeholder = l;
                                    }
                                    g.loading || kc(g), f.allowProgressiveImg() && (!Zb && N.transform ? ec.push({
                                        item: g,
                                        baseDiv: h,
                                        img: g.img,
                                        index: b,
                                        holder: a
                                    }) : jc(b, g, h, g.img, !0, !0));
                                }
                                Zb || b !== m ? Ia(g) : (ea = h.style, cc(g, d || g.img)), a.el.innerHTML = "", 
                                a.el.appendChild(h);
                            },
                            cleanSlide: function(a) {
                                a.img && (a.img.onload = a.img.onerror = null), a.loaded = a.loading = a.img = a.imageAppended = !1;
                            }
                        }
                    });
                    var oc, pc = {}, qc = function(a, b, c) {
                        var d = document.createEvent("CustomEvent"), e = {
                            origEvent: a,
                            target: a.target,
                            releasePoint: b,
                            pointerType: c || "touch"
                        };
                        d.initCustomEvent("pswpTap", !0, !0, e), a.target.dispatchEvent(d);
                    };
                    za("Tap", {
                        publicMethods: {
                            initTap: function() {
                                Ca("firstTouchStart", f.onTapStart), Ca("touchRelease", f.onTapRelease), Ca("destroy", (function() {
                                    pc = {}, oc = null;
                                }));
                            },
                            onTapStart: function(a) {
                                a.length > 1 && (clearTimeout(oc), oc = null);
                            },
                            onTapRelease: function(a, b) {
                                if (b && !Y && !W && !_a) {
                                    var c = b;
                                    if (oc && (clearTimeout(oc), oc = null, xb(c, pc))) return void Da("doubleTap", c);
                                    if ("mouse" === b.type) return void qc(a, b, "mouse");
                                    var d = a.target.tagName.toUpperCase();
                                    if ("BUTTON" === d || e.hasClass(a.target, "pswp__single-tap")) return void qc(a, b);
                                    Ma(pc, c), oc = setTimeout((function() {
                                        qc(a, b), oc = null;
                                    }), 300);
                                }
                            }
                        }
                    });
                    var rc;
                    za("DesktopZoom", {
                        publicMethods: {
                            initDesktopZoom: function() {
                                L || (G ? Ca("mouseUsed", (function() {
                                    f.setupDesktopZoom();
                                })) : f.setupDesktopZoom(!0));
                            },
                            setupDesktopZoom: function(b) {
                                rc = {};
                                var c = "wheel mousewheel DOMMouseScroll";
                                Ca("bindEvents", (function() {
                                    e.bind(a, c, f.handleMouseWheel);
                                })), Ca("unbindEvents", (function() {
                                    rc && e.unbind(a, c, f.handleMouseWheel);
                                })), f.mouseZoomedIn = !1;
                                var d, g = function() {
                                    f.mouseZoomedIn && (e.removeClass(a, "pswp--zoomed-in"), f.mouseZoomedIn = !1), 
                                    s < 1 ? e.addClass(a, "pswp--zoom-allowed") : e.removeClass(a, "pswp--zoom-allowed"), 
                                    h();
                                }, h = function() {
                                    d && (e.removeClass(a, "pswp--dragging"), d = !1);
                                };
                                Ca("resize", g), Ca("afterChange", g), Ca("pointerDown", (function() {
                                    f.mouseZoomedIn && (d = !0, e.addClass(a, "pswp--dragging"));
                                })), Ca("pointerUp", h), b || g();
                            },
                            handleMouseWheel: function(a) {
                                if (s <= f.currItem.fitRatio) return i.modal && (!i.closeOnScroll || _a || V ? a.preventDefault() : E && Math.abs(a.deltaY) > 2 && (l = !0, 
                                f.close())), !0;
                                if (a.stopPropagation(), rc.x = 0, "deltaX" in a) 1 === a.deltaMode ? (rc.x = 18 * a.deltaX, 
                                rc.y = 18 * a.deltaY) : (rc.x = a.deltaX, rc.y = a.deltaY); else if ("wheelDelta" in a) a.wheelDeltaX && (rc.x = -.16 * a.wheelDeltaX), 
                                a.wheelDeltaY ? rc.y = -.16 * a.wheelDeltaY : rc.y = -.16 * a.wheelDelta; else {
                                    if (!("detail" in a)) return;
                                    rc.y = a.detail;
                                }
                                Sa(s, !0);
                                var b = pa.x - rc.x, c = pa.y - rc.y;
                                (i.modal || b <= da.min.x && b >= da.max.x && c <= da.min.y && c >= da.max.y) && a.preventDefault(), 
                                f.panTo(b, c);
                            },
                            toggleDesktopZoom: function(b) {
                                b = b || {
                                    x: qa.x / 2 + sa.x,
                                    y: qa.y / 2 + sa.y
                                };
                                var c = i.getDoubleTapZoom(!0, f.currItem), d = s === c;
                                f.mouseZoomedIn = !d, f.zoomTo(d ? f.currItem.initialZoomLevel : c, b, 333), e[(d ? "remove" : "add") + "Class"](a, "pswp--zoomed-in");
                            }
                        }
                    });
                    var sc, tc, uc, vc, wc, xc, yc, zc, Ac, Bc, Cc, Dc, Ec = {
                        history: !0,
                        galleryUID: 1
                    }, Fc = function() {
                        return Cc.hash.substring(1);
                    }, Gc = function() {
                        sc && clearTimeout(sc), uc && clearTimeout(uc);
                    }, Hc = function() {
                        var a = Fc(), b = {};
                        if (a.length < 5) return b;
                        var c, d = a.split("&");
                        for (c = 0; c < d.length; c++) if (d[c]) {
                            var e = d[c].split("=");
                            e.length < 2 || (b[e[0]] = e[1]);
                        }
                        if (i.galleryPIDs) {
                            var f = b.pid;
                            for (b.pid = 0, c = 0; c < Yb.length; c++) if (Yb[c].pid === f) {
                                b.pid = c;
                                break;
                            }
                        } else b.pid = parseInt(b.pid, 10) - 1;
                        return b.pid < 0 && (b.pid = 0), b;
                    }, Ic = function() {
                        if (uc && clearTimeout(uc), _a || V) return void (uc = setTimeout(Ic, 500));
                        vc ? clearTimeout(tc) : vc = !0;
                        var a = m + 1, b = _b(m);
                        b.hasOwnProperty("pid") && (a = b.pid);
                        var c = yc + "&gid=" + i.galleryUID + "&pid=" + a;
                        zc || -1 === Cc.hash.indexOf(c) && (Bc = !0);
                        var d = Cc.href.split("#")[0] + "#" + c;
                        Dc ? "#" + c !== window.location.hash && history[zc ? "replaceState" : "pushState"]("", document.title, d) : zc ? Cc.replace(d) : Cc.hash = c, 
                        zc = !0, tc = setTimeout((function() {
                            vc = !1;
                        }), 60);
                    };
                    za("History", {
                        publicMethods: {
                            initHistory: function() {
                                if (e.extend(i, Ec, !0), i.history) {
                                    Cc = window.location, Bc = !1, Ac = !1, zc = !1, yc = Fc(), Dc = "pushState" in history, 
                                    yc.indexOf("gid=") > -1 && (yc = yc.split("&gid=")[0], yc = yc.split("?gid=")[0]), 
                                    Ca("afterChange", f.updateURL), Ca("unbindEvents", (function() {
                                        e.unbind(window, "hashchange", f.onHashChange);
                                    }));
                                    var a = function() {
                                        xc = !0, Ac || (Bc ? history.back() : yc ? Cc.hash = yc : Dc ? history.pushState("", document.title, Cc.pathname + Cc.search) : Cc.hash = ""), 
                                        Gc();
                                    };
                                    Ca("unbindEvents", (function() {
                                        l && a();
                                    })), Ca("destroy", (function() {
                                        xc || a();
                                    })), Ca("firstUpdate", (function() {
                                        m = Hc().pid;
                                    }));
                                    var b = yc.indexOf("pid=");
                                    b > -1 && (yc = yc.substring(0, b), "&" === yc.slice(-1) && (yc = yc.slice(0, -1))), 
                                    setTimeout((function() {
                                        j && e.bind(window, "hashchange", f.onHashChange);
                                    }), 40);
                                }
                            },
                            onHashChange: function() {
                                return Fc() === yc ? (Ac = !0, void f.close()) : void (vc || (wc = !0, f.goTo(Hc().pid), 
                                wc = !1));
                            },
                            updateURL: function() {
                                Gc(), wc || (zc ? sc = setTimeout(Ic, 800) : Ic());
                            }
                        }
                    }), e.extend(f, eb);
                };
                return a;
            }));
        },
        "../shared/node_modules/query-string/index.js": (__unused_webpack_module, exports, __webpack_require__) => {
            "use strict";
            const strictUriEncode = __webpack_require__("../shared/node_modules/strict-uri-encode/index.js");
            const decodeComponent = __webpack_require__("../shared/node_modules/decode-uri-component/index.js");
            const splitOnFirst = __webpack_require__("../shared/node_modules/split-on-first/index.js");
            const filterObject = __webpack_require__("../shared/node_modules/filter-obj/index.js");
            const isNullOrUndefined = value => null === value || void 0 === value;
            const encodeFragmentIdentifier = Symbol("encodeFragmentIdentifier");
            function encoderForArrayFormat(options) {
                switch (options.arrayFormat) {
                  case "index":
                    return key => (result, value) => {
                        const index = result.length;
                        if (void 0 === value || options.skipNull && null === value || options.skipEmptyString && "" === value) return result;
                        if (null === value) return [ ...result, [ encode(key, options), "[", index, "]" ].join("") ];
                        return [ ...result, [ encode(key, options), "[", encode(index, options), "]=", encode(value, options) ].join("") ];
                    };

                  case "bracket":
                    return key => (result, value) => {
                        if (void 0 === value || options.skipNull && null === value || options.skipEmptyString && "" === value) return result;
                        if (null === value) return [ ...result, [ encode(key, options), "[]" ].join("") ];
                        return [ ...result, [ encode(key, options), "[]=", encode(value, options) ].join("") ];
                    };

                  case "colon-list-separator":
                    return key => (result, value) => {
                        if (void 0 === value || options.skipNull && null === value || options.skipEmptyString && "" === value) return result;
                        if (null === value) return [ ...result, [ encode(key, options), ":list=" ].join("") ];
                        return [ ...result, [ encode(key, options), ":list=", encode(value, options) ].join("") ];
                    };

                  case "comma":
                  case "separator":
                  case "bracket-separator":
                    {
                        const keyValueSep = "bracket-separator" === options.arrayFormat ? "[]=" : "=";
                        return key => (result, value) => {
                            if (void 0 === value || options.skipNull && null === value || options.skipEmptyString && "" === value) return result;
                            value = null === value ? "" : value;
                            if (0 === result.length) return [ [ encode(key, options), keyValueSep, encode(value, options) ].join("") ];
                            return [ [ result, encode(value, options) ].join(options.arrayFormatSeparator) ];
                        };
                    }

                  default:
                    return key => (result, value) => {
                        if (void 0 === value || options.skipNull && null === value || options.skipEmptyString && "" === value) return result;
                        if (null === value) return [ ...result, encode(key, options) ];
                        return [ ...result, [ encode(key, options), "=", encode(value, options) ].join("") ];
                    };
                }
            }
            function parserForArrayFormat(options) {
                let result;
                switch (options.arrayFormat) {
                  case "index":
                    return (key, value, accumulator) => {
                        result = /\[(\d*)\]$/.exec(key);
                        key = key.replace(/\[\d*\]$/, "");
                        if (!result) {
                            accumulator[key] = value;
                            return;
                        }
                        if (void 0 === accumulator[key]) accumulator[key] = {};
                        accumulator[key][result[1]] = value;
                    };

                  case "bracket":
                    return (key, value, accumulator) => {
                        result = /(\[\])$/.exec(key);
                        key = key.replace(/\[\]$/, "");
                        if (!result) {
                            accumulator[key] = value;
                            return;
                        }
                        if (void 0 === accumulator[key]) {
                            accumulator[key] = [ value ];
                            return;
                        }
                        accumulator[key] = [].concat(accumulator[key], value);
                    };

                  case "colon-list-separator":
                    return (key, value, accumulator) => {
                        result = /(:list)$/.exec(key);
                        key = key.replace(/:list$/, "");
                        if (!result) {
                            accumulator[key] = value;
                            return;
                        }
                        if (void 0 === accumulator[key]) {
                            accumulator[key] = [ value ];
                            return;
                        }
                        accumulator[key] = [].concat(accumulator[key], value);
                    };

                  case "comma":
                  case "separator":
                    return (key, value, accumulator) => {
                        const isArray = "string" === typeof value && value.includes(options.arrayFormatSeparator);
                        const isEncodedArray = "string" === typeof value && !isArray && decode(value, options).includes(options.arrayFormatSeparator);
                        value = isEncodedArray ? decode(value, options) : value;
                        const newValue = isArray || isEncodedArray ? value.split(options.arrayFormatSeparator).map((item => decode(item, options))) : null === value ? value : decode(value, options);
                        accumulator[key] = newValue;
                    };

                  case "bracket-separator":
                    return (key, value, accumulator) => {
                        const isArray = /(\[\])$/.test(key);
                        key = key.replace(/\[\]$/, "");
                        if (!isArray) {
                            accumulator[key] = value ? decode(value, options) : value;
                            return;
                        }
                        const arrayValue = null === value ? [] : value.split(options.arrayFormatSeparator).map((item => decode(item, options)));
                        if (void 0 === accumulator[key]) {
                            accumulator[key] = arrayValue;
                            return;
                        }
                        accumulator[key] = [].concat(accumulator[key], arrayValue);
                    };

                  default:
                    return (key, value, accumulator) => {
                        if (void 0 === accumulator[key]) {
                            accumulator[key] = value;
                            return;
                        }
                        accumulator[key] = [].concat(accumulator[key], value);
                    };
                }
            }
            function validateArrayFormatSeparator(value) {
                if ("string" !== typeof value || 1 !== value.length) throw new TypeError("arrayFormatSeparator must be single character string");
            }
            function encode(value, options) {
                if (options.encode) return options.strict ? strictUriEncode(value) : encodeURIComponent(value);
                return value;
            }
            function decode(value, options) {
                if (options.decode) return decodeComponent(value);
                return value;
            }
            function keysSorter(input) {
                if (Array.isArray(input)) return input.sort();
                if ("object" === typeof input) return keysSorter(Object.keys(input)).sort(((a, b) => Number(a) - Number(b))).map((key => input[key]));
                return input;
            }
            function removeHash(input) {
                const hashStart = input.indexOf("#");
                if (-1 !== hashStart) input = input.slice(0, hashStart);
                return input;
            }
            function getHash(url) {
                let hash = "";
                const hashStart = url.indexOf("#");
                if (-1 !== hashStart) hash = url.slice(hashStart);
                return hash;
            }
            function extract(input) {
                input = removeHash(input);
                const queryStart = input.indexOf("?");
                if (-1 === queryStart) return "";
                return input.slice(queryStart + 1);
            }
            function parseValue(value, options) {
                if (options.parseNumbers && !Number.isNaN(Number(value)) && "string" === typeof value && "" !== value.trim()) value = Number(value); else if (options.parseBooleans && null !== value && ("true" === value.toLowerCase() || "false" === value.toLowerCase())) value = "true" === value.toLowerCase();
                return value;
            }
            function parse(query, options) {
                options = Object.assign({
                    decode: true,
                    sort: true,
                    arrayFormat: "none",
                    arrayFormatSeparator: ",",
                    parseNumbers: false,
                    parseBooleans: false
                }, options);
                validateArrayFormatSeparator(options.arrayFormatSeparator);
                const formatter = parserForArrayFormat(options);
                const ret = Object.create(null);
                if ("string" !== typeof query) return ret;
                query = query.trim().replace(/^[?#&]/, "");
                if (!query) return ret;
                for (const param of query.split("&")) {
                    if ("" === param) continue;
                    let [key, value] = splitOnFirst(options.decode ? param.replace(/\+/g, " ") : param, "=");
                    value = void 0 === value ? null : [ "comma", "separator", "bracket-separator" ].includes(options.arrayFormat) ? value : decode(value, options);
                    formatter(decode(key, options), value, ret);
                }
                for (const key of Object.keys(ret)) {
                    const value = ret[key];
                    if ("object" === typeof value && null !== value) for (const k of Object.keys(value)) value[k] = parseValue(value[k], options); else ret[key] = parseValue(value, options);
                }
                if (false === options.sort) return ret;
                return (true === options.sort ? Object.keys(ret).sort() : Object.keys(ret).sort(options.sort)).reduce(((result, key) => {
                    const value = ret[key];
                    if (Boolean(value) && "object" === typeof value && !Array.isArray(value)) result[key] = keysSorter(value); else result[key] = value;
                    return result;
                }), Object.create(null));
            }
            exports.extract = extract;
            exports.parse = parse;
            exports.stringify = (object, options) => {
                if (!object) return "";
                options = Object.assign({
                    encode: true,
                    strict: true,
                    arrayFormat: "none",
                    arrayFormatSeparator: ","
                }, options);
                validateArrayFormatSeparator(options.arrayFormatSeparator);
                const shouldFilter = key => options.skipNull && isNullOrUndefined(object[key]) || options.skipEmptyString && "" === object[key];
                const formatter = encoderForArrayFormat(options);
                const objectCopy = {};
                for (const key of Object.keys(object)) if (!shouldFilter(key)) objectCopy[key] = object[key];
                const keys = Object.keys(objectCopy);
                if (false !== options.sort) keys.sort(options.sort);
                return keys.map((key => {
                    const value = object[key];
                    if (void 0 === value) return "";
                    if (null === value) return encode(key, options);
                    if (Array.isArray(value)) {
                        if (0 === value.length && "bracket-separator" === options.arrayFormat) return encode(key, options) + "[]";
                        return value.reduce(formatter(key), []).join("&");
                    }
                    return encode(key, options) + "=" + encode(value, options);
                })).filter((x => x.length > 0)).join("&");
            };
            exports.parseUrl = (url, options) => {
                options = Object.assign({
                    decode: true
                }, options);
                const [url_, hash] = splitOnFirst(url, "#");
                return Object.assign({
                    url: url_.split("?")[0] || "",
                    query: parse(extract(url), options)
                }, options && options.parseFragmentIdentifier && hash ? {
                    fragmentIdentifier: decode(hash, options)
                } : {});
            };
            exports.stringifyUrl = (object, options) => {
                options = Object.assign({
                    encode: true,
                    strict: true,
                    [encodeFragmentIdentifier]: true
                }, options);
                const url = removeHash(object.url).split("?")[0] || "";
                const queryFromUrl = exports.extract(object.url);
                const parsedQueryFromUrl = exports.parse(queryFromUrl, {
                    sort: false
                });
                const query = Object.assign(parsedQueryFromUrl, object.query);
                let queryString = exports.stringify(query, options);
                if (queryString) queryString = `?${queryString}`;
                let hash = getHash(object.url);
                if (object.fragmentIdentifier) hash = `#${options[encodeFragmentIdentifier] ? encode(object.fragmentIdentifier, options) : object.fragmentIdentifier}`;
                return `${url}${queryString}${hash}`;
            };
            exports.pick = (input, filter, options) => {
                options = Object.assign({
                    parseFragmentIdentifier: true,
                    [encodeFragmentIdentifier]: false
                }, options);
                const {url, query, fragmentIdentifier} = exports.parseUrl(input, options);
                return exports.stringifyUrl({
                    url,
                    query: filterObject(query, filter),
                    fragmentIdentifier
                }, options);
            };
            exports.exclude = (input, filter, options) => {
                const exclusionFilter = Array.isArray(filter) ? key => !filter.includes(key) : (key, value) => !filter(key, value);
                return exports.pick(input, exclusionFilter, options);
            };
        },
        "../shared/node_modules/split-on-first/index.js": module => {
            "use strict";
            module.exports = (string, separator) => {
                if (!("string" === typeof string && "string" === typeof separator)) throw new TypeError("Expected the arguments to be of type `string`");
                if ("" === separator) return [ string ];
                const separatorIndex = string.indexOf(separator);
                if (-1 === separatorIndex) return [ string ];
                return [ string.slice(0, separatorIndex), string.slice(separatorIndex + separator.length) ];
            };
        },
        "../shared/node_modules/strict-uri-encode/index.js": module => {
            "use strict";
            module.exports = str => encodeURIComponent(str).replace(/[!'()*]/g, (x => `%${x.charCodeAt(0).toString(16).toUpperCase()}`));
        },
        "../shared/node_modules/uuid/index.js": (module, __unused_webpack_exports, __webpack_require__) => {
            var v1 = __webpack_require__("../shared/node_modules/uuid/v1.js");
            var v4 = __webpack_require__("../shared/node_modules/uuid/v4.js");
            var uuid = v4;
            uuid.v1 = v1;
            uuid.v4 = v4;
            module.exports = uuid;
        },
        "../shared/node_modules/uuid/lib/bytesToUuid.js": module => {
            var byteToHex = [];
            for (var i = 0; i < 256; ++i) byteToHex[i] = (i + 256).toString(16).substr(1);
            function bytesToUuid(buf, offset) {
                var i = offset || 0;
                var bth = byteToHex;
                return [ bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], "-", bth[buf[i++]], bth[buf[i++]], "-", bth[buf[i++]], bth[buf[i++]], "-", bth[buf[i++]], bth[buf[i++]], "-", bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]] ].join("");
            }
            module.exports = bytesToUuid;
        },
        "../shared/node_modules/uuid/lib/rng-browser.js": module => {
            var getRandomValues = "undefined" != typeof crypto && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || "undefined" != typeof msCrypto && "function" == typeof window.msCrypto.getRandomValues && msCrypto.getRandomValues.bind(msCrypto);
            if (getRandomValues) {
                var rnds8 = new Uint8Array(16);
                module.exports = function() {
                    getRandomValues(rnds8);
                    return rnds8;
                };
            } else {
                var rnds = new Array(16);
                module.exports = function() {
                    for (var r, i = 0; i < 16; i++) {
                        if (0 === (3 & i)) r = 4294967296 * Math.random();
                        rnds[i] = r >>> ((3 & i) << 3) & 255;
                    }
                    return rnds;
                };
            }
        },
        "../shared/node_modules/uuid/v1.js": (module, __unused_webpack_exports, __webpack_require__) => {
            var rng = __webpack_require__("../shared/node_modules/uuid/lib/rng-browser.js");
            var bytesToUuid = __webpack_require__("../shared/node_modules/uuid/lib/bytesToUuid.js");
            var _nodeId;
            var _clockseq;
            var _lastMSecs = 0;
            var _lastNSecs = 0;
            function v1(options, buf, offset) {
                var i = buf && offset || 0;
                var b = buf || [];
                options = options || {};
                var node = options.node || _nodeId;
                var clockseq = void 0 !== options.clockseq ? options.clockseq : _clockseq;
                if (null == node || null == clockseq) {
                    var seedBytes = rng();
                    if (null == node) node = _nodeId = [ 1 | seedBytes[0], seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5] ];
                    if (null == clockseq) clockseq = _clockseq = 16383 & (seedBytes[6] << 8 | seedBytes[7]);
                }
                var msecs = void 0 !== options.msecs ? options.msecs : (new Date).getTime();
                var nsecs = void 0 !== options.nsecs ? options.nsecs : _lastNSecs + 1;
                var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 1e4;
                if (dt < 0 && void 0 === options.clockseq) clockseq = clockseq + 1 & 16383;
                if ((dt < 0 || msecs > _lastMSecs) && void 0 === options.nsecs) nsecs = 0;
                if (nsecs >= 1e4) throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
                _lastMSecs = msecs;
                _lastNSecs = nsecs;
                _clockseq = clockseq;
                msecs += 122192928e5;
                var tl = (1e4 * (268435455 & msecs) + nsecs) % 4294967296;
                b[i++] = tl >>> 24 & 255;
                b[i++] = tl >>> 16 & 255;
                b[i++] = tl >>> 8 & 255;
                b[i++] = 255 & tl;
                var tmh = msecs / 4294967296 * 1e4 & 268435455;
                b[i++] = tmh >>> 8 & 255;
                b[i++] = 255 & tmh;
                b[i++] = tmh >>> 24 & 15 | 16;
                b[i++] = tmh >>> 16 & 255;
                b[i++] = clockseq >>> 8 | 128;
                b[i++] = 255 & clockseq;
                for (var n = 0; n < 6; ++n) b[i + n] = node[n];
                return buf ? buf : bytesToUuid(b);
            }
            module.exports = v1;
        },
        "../shared/node_modules/uuid/v4.js": (module, __unused_webpack_exports, __webpack_require__) => {
            var rng = __webpack_require__("../shared/node_modules/uuid/lib/rng-browser.js");
            var bytesToUuid = __webpack_require__("../shared/node_modules/uuid/lib/bytesToUuid.js");
            function v4(options, buf, offset) {
                var i = buf && offset || 0;
                if ("string" == typeof options) {
                    buf = "binary" === options ? new Array(16) : null;
                    options = null;
                }
                options = options || {};
                var rnds = options.random || (options.rng || rng)();
                rnds[6] = 15 & rnds[6] | 64;
                rnds[8] = 63 & rnds[8] | 128;
                if (buf) for (var ii = 0; ii < 16; ++ii) buf[i + ii] = rnds[ii];
                return buf || bytesToUuid(rnds);
            }
            module.exports = v4;
        },
        "../shared/node_modules/yt-player/index.js": (module, __unused_webpack_exports, __webpack_require__) => {
            const EventEmitter = __webpack_require__("./node_modules/events/events.js").EventEmitter;
            const loadScript = __webpack_require__("../shared/node_modules/load-script2/index.js");
            const YOUTUBE_IFRAME_API_SRC = "https://www.youtube.com/iframe_api";
            const YOUTUBE_STATES = {
                "-1": "unstarted",
                0: "ended",
                1: "playing",
                2: "paused",
                3: "buffering",
                5: "cued"
            };
            const YOUTUBE_ERROR = {
                INVALID_PARAM: 2,
                HTML5_ERROR: 5,
                NOT_FOUND: 100,
                UNPLAYABLE_1: 101,
                UNPLAYABLE_2: 150
            };
            const loadIframeAPICallbacks = [];
            class YouTubePlayer extends EventEmitter {
                constructor(element, opts) {
                    super();
                    const elem = "string" === typeof element ? document.querySelector(element) : element;
                    if (elem.id) this._id = elem.id; else this._id = elem.id = "ytplayer-" + Math.random().toString(16).slice(2, 8);
                    this._opts = Object.assign({
                        width: 640,
                        height: 360,
                        autoplay: false,
                        captions: void 0,
                        controls: true,
                        keyboard: true,
                        fullscreen: true,
                        annotations: true,
                        modestBranding: false,
                        related: true,
                        timeupdateFrequency: 1e3,
                        playsInline: true,
                        start: 0
                    }, opts);
                    this.videoId = null;
                    this.destroyed = false;
                    this._api = null;
                    this._autoplay = false;
                    this._player = null;
                    this._ready = false;
                    this._queue = [];
                    this._interval = null;
                    this._startInterval = this._startInterval.bind(this);
                    this._stopInterval = this._stopInterval.bind(this);
                    this.on("playing", this._startInterval);
                    this.on("unstarted", this._stopInterval);
                    this.on("ended", this._stopInterval);
                    this.on("paused", this._stopInterval);
                    this.on("buffering", this._stopInterval);
                    this._loadIframeAPI(((err, api) => {
                        if (err) return this._destroy(new Error("YouTube Iframe API failed to load"));
                        this._api = api;
                        if (this.videoId) this.load(this.videoId, this._autoplay, this._start);
                    }));
                }
                load(videoId, autoplay = false, start = 0) {
                    if (this.destroyed) return;
                    this.videoId = videoId;
                    this._autoplay = autoplay;
                    this._start = start;
                    if (!this._api) return;
                    if (!this._player) {
                        this._createPlayer(videoId);
                        return;
                    }
                    if (!this._ready) return;
                    if (autoplay) this._player.loadVideoById(videoId, start); else this._player.cueVideoById(videoId, start);
                }
                play() {
                    if (this._ready) this._player.playVideo(); else this._queueCommand("play");
                }
                pause() {
                    if (this._ready) this._player.pauseVideo(); else this._queueCommand("pause");
                }
                stop() {
                    if (this._ready) this._player.stopVideo(); else this._queueCommand("stop");
                }
                seek(seconds) {
                    if (this._ready) this._player.seekTo(seconds, true); else this._queueCommand("seek", seconds);
                }
                setVolume(volume) {
                    if (this._ready) this._player.setVolume(volume); else this._queueCommand("setVolume", volume);
                }
                getVolume() {
                    return this._ready && this._player.getVolume() || 0;
                }
                mute() {
                    if (this._ready) this._player.mute(); else this._queueCommand("mute");
                }
                unMute() {
                    if (this._ready) this._player.unMute(); else this._queueCommand("unMute");
                }
                isMuted() {
                    return this._ready && this._player.isMuted() || false;
                }
                setSize(width, height) {
                    if (this._ready) this._player.setSize(width, height); else this._queueCommand("setSize", width, height);
                }
                setPlaybackRate(rate) {
                    if (this._ready) this._player.setPlaybackRate(rate); else this._queueCommand("setPlaybackRate", rate);
                }
                setPlaybackQuality(suggestedQuality) {
                    if (this._ready) this._player.setPlaybackQuality(suggestedQuality); else this._queueCommand("setPlaybackQuality", suggestedQuality);
                }
                getPlaybackRate() {
                    return this._ready && this._player.getPlaybackRate() || 1;
                }
                getAvailablePlaybackRates() {
                    return this._ready && this._player.getAvailablePlaybackRates() || [ 1 ];
                }
                getDuration() {
                    return this._ready && this._player.getDuration() || 0;
                }
                getProgress() {
                    return this._ready && this._player.getVideoLoadedFraction() || 0;
                }
                getState() {
                    return this._ready && YOUTUBE_STATES[this._player.getPlayerState()] || "unstarted";
                }
                getCurrentTime() {
                    return this._ready && this._player.getCurrentTime() || 0;
                }
                destroy() {
                    this._destroy();
                }
                _destroy(err) {
                    if (this.destroyed) return;
                    this.destroyed = true;
                    if (this._player) {
                        this._player.stopVideo && this._player.stopVideo();
                        this._player.destroy();
                    }
                    this.videoId = null;
                    this._id = null;
                    this._opts = null;
                    this._api = null;
                    this._player = null;
                    this._ready = false;
                    this._queue = null;
                    this._stopInterval();
                    this.removeListener("playing", this._startInterval);
                    this.removeListener("paused", this._stopInterval);
                    this.removeListener("buffering", this._stopInterval);
                    this.removeListener("unstarted", this._stopInterval);
                    this.removeListener("ended", this._stopInterval);
                    if (err) this.emit("error", err);
                }
                _queueCommand(command, ...args) {
                    if (this.destroyed) return;
                    this._queue.push([ command, args ]);
                }
                _flushQueue() {
                    while (this._queue.length) {
                        const command = this._queue.shift();
                        this[command[0]].apply(this, command[1]);
                    }
                }
                _loadIframeAPI(cb) {
                    if (window.YT && "function" === typeof window.YT.Player) return cb(null, window.YT);
                    loadIframeAPICallbacks.push(cb);
                    const scripts = Array.from(document.getElementsByTagName("script"));
                    const isLoading = scripts.some((script => script.src === YOUTUBE_IFRAME_API_SRC));
                    if (!isLoading) loadScript(YOUTUBE_IFRAME_API_SRC).catch((err => {
                        while (loadIframeAPICallbacks.length) {
                            const loadCb = loadIframeAPICallbacks.shift();
                            loadCb(err);
                        }
                    }));
                    const prevOnYouTubeIframeAPIReady = window.onYouTubeIframeAPIReady;
                    window.onYouTubeIframeAPIReady = () => {
                        if ("function" === typeof prevOnYouTubeIframeAPIReady) prevOnYouTubeIframeAPIReady();
                        while (loadIframeAPICallbacks.length) {
                            const loadCb = loadIframeAPICallbacks.shift();
                            loadCb(null, window.YT);
                        }
                    };
                }
                _createPlayer(videoId) {
                    if (this.destroyed) return;
                    const opts = this._opts;
                    this._player = new this._api.Player(this._id, {
                        width: opts.width,
                        height: opts.height,
                        videoId,
                        host: opts.host,
                        playerVars: {
                            autoplay: opts.autoplay ? 1 : 0,
                            cc_load_policy: null != opts.captions ? false !== opts.captions ? 1 : 0 : void 0,
                            hl: null != opts.captions && false !== opts.captions ? opts.captions : void 0,
                            cc_lang_pref: null != opts.captions && false !== opts.captions ? opts.captions : void 0,
                            controls: opts.controls ? 2 : 0,
                            disablekb: opts.keyboard ? 0 : 1,
                            enablejsapi: 1,
                            fs: opts.fullscreen ? 1 : 0,
                            iv_load_policy: opts.annotations ? 1 : 3,
                            modestbranding: opts.modestBranding ? 1 : 0,
                            origin: window.location.origin,
                            playsinline: opts.playsInline ? 1 : 0,
                            rel: opts.related ? 1 : 0,
                            wmode: "opaque",
                            start: opts.start
                        },
                        events: {
                            onReady: () => this._onReady(videoId),
                            onStateChange: data => this._onStateChange(data),
                            onPlaybackQualityChange: data => this._onPlaybackQualityChange(data),
                            onPlaybackRateChange: data => this._onPlaybackRateChange(data),
                            onError: data => this._onError(data)
                        }
                    });
                }
                _onReady(videoId) {
                    if (this.destroyed) return;
                    this._ready = true;
                    this.load(this.videoId, this._autoplay, this._start);
                    this._flushQueue();
                }
                _onStateChange(data) {
                    if (this.destroyed) return;
                    const state = YOUTUBE_STATES[data.data];
                    if (state) {
                        if ([ "paused", "buffering", "ended" ].includes(state)) this._onTimeupdate();
                        this.emit(state);
                        if ([ "unstarted", "playing", "cued" ].includes(state)) this._onTimeupdate();
                    } else throw new Error("Unrecognized state change: " + data);
                }
                _onPlaybackQualityChange(data) {
                    if (this.destroyed) return;
                    this.emit("playbackQualityChange", data.data);
                }
                _onPlaybackRateChange(data) {
                    if (this.destroyed) return;
                    this.emit("playbackRateChange", data.data);
                }
                _onError(data) {
                    if (this.destroyed) return;
                    const code = data.data;
                    if (code === YOUTUBE_ERROR.HTML5_ERROR) return;
                    if (code === YOUTUBE_ERROR.UNPLAYABLE_1 || code === YOUTUBE_ERROR.UNPLAYABLE_2 || code === YOUTUBE_ERROR.NOT_FOUND || code === YOUTUBE_ERROR.INVALID_PARAM) return this.emit("unplayable", this.videoId);
                    this._destroy(new Error("YouTube Player Error. Unknown error code: " + code));
                }
                _onTimeupdate() {
                    this.emit("timeupdate", this.getCurrentTime());
                }
                _startInterval() {
                    this._interval = setInterval((() => this._onTimeupdate()), this._opts.timeupdateFrequency);
                }
                _stopInterval() {
                    clearInterval(this._interval);
                    this._interval = null;
                }
            }
            module.exports = YouTubePlayer;
        },
        "./node_modules/axios/package.json": module => {
            "use strict";
            module.exports = JSON.parse('{"name":"axios","version":"0.21.4","description":"Promise based HTTP client for the browser and node.js","main":"index.js","scripts":{"test":"grunt test","start":"node ./sandbox/server.js","build":"NODE_ENV=production grunt build","preversion":"npm test","version":"npm run build && grunt version && git add -A dist && git add CHANGELOG.md bower.json package.json","postversion":"git push && git push --tags","examples":"node ./examples/server.js","coveralls":"cat coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js","fix":"eslint --fix lib/**/*.js"},"repository":{"type":"git","url":"https://github.com/axios/axios.git"},"keywords":["xhr","http","ajax","promise","node"],"author":"Matt Zabriskie","license":"MIT","bugs":{"url":"https://github.com/axios/axios/issues"},"homepage":"https://axios-http.com","devDependencies":{"coveralls":"^3.0.0","es6-promise":"^4.2.4","grunt":"^1.3.0","grunt-banner":"^0.6.0","grunt-cli":"^1.2.0","grunt-contrib-clean":"^1.1.0","grunt-contrib-watch":"^1.0.0","grunt-eslint":"^23.0.0","grunt-karma":"^4.0.0","grunt-mocha-test":"^0.13.3","grunt-ts":"^6.0.0-beta.19","grunt-webpack":"^4.0.2","istanbul-instrumenter-loader":"^1.0.0","jasmine-core":"^2.4.1","karma":"^6.3.2","karma-chrome-launcher":"^3.1.0","karma-firefox-launcher":"^2.1.0","karma-jasmine":"^1.1.1","karma-jasmine-ajax":"^0.1.13","karma-safari-launcher":"^1.0.0","karma-sauce-launcher":"^4.3.6","karma-sinon":"^1.0.5","karma-sourcemap-loader":"^0.3.8","karma-webpack":"^4.0.2","load-grunt-tasks":"^3.5.2","minimist":"^1.2.0","mocha":"^8.2.1","sinon":"^4.5.0","terser-webpack-plugin":"^4.2.3","typescript":"^4.0.5","url-search-params":"^0.10.0","webpack":"^4.44.2","webpack-dev-server":"^3.11.0"},"browser":{"./lib/adapters/http.js":"./lib/adapters/xhr.js"},"jsdelivr":"dist/axios.min.js","unpkg":"dist/axios.min.js","typings":"./index.d.ts","dependencies":{"follow-redirects":"^1.14.0"},"bundlesize":[{"path":"./dist/axios.min.js","threshold":"5kB"}]}');
        },
        "../shared/node_modules/axios/package.json": module => {
            "use strict";
            module.exports = JSON.parse('{"name":"axios","version":"0.21.4","description":"Promise based HTTP client for the browser and node.js","main":"index.js","scripts":{"test":"grunt test","start":"node ./sandbox/server.js","build":"NODE_ENV=production grunt build","preversion":"npm test","version":"npm run build && grunt version && git add -A dist && git add CHANGELOG.md bower.json package.json","postversion":"git push && git push --tags","examples":"node ./examples/server.js","coveralls":"cat coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js","fix":"eslint --fix lib/**/*.js"},"repository":{"type":"git","url":"https://github.com/axios/axios.git"},"keywords":["xhr","http","ajax","promise","node"],"author":"Matt Zabriskie","license":"MIT","bugs":{"url":"https://github.com/axios/axios/issues"},"homepage":"https://axios-http.com","devDependencies":{"coveralls":"^3.0.0","es6-promise":"^4.2.4","grunt":"^1.3.0","grunt-banner":"^0.6.0","grunt-cli":"^1.2.0","grunt-contrib-clean":"^1.1.0","grunt-contrib-watch":"^1.0.0","grunt-eslint":"^23.0.0","grunt-karma":"^4.0.0","grunt-mocha-test":"^0.13.3","grunt-ts":"^6.0.0-beta.19","grunt-webpack":"^4.0.2","istanbul-instrumenter-loader":"^1.0.0","jasmine-core":"^2.4.1","karma":"^6.3.2","karma-chrome-launcher":"^3.1.0","karma-firefox-launcher":"^2.1.0","karma-jasmine":"^1.1.1","karma-jasmine-ajax":"^0.1.13","karma-safari-launcher":"^1.0.0","karma-sauce-launcher":"^4.3.6","karma-sinon":"^1.0.5","karma-sourcemap-loader":"^0.3.8","karma-webpack":"^4.0.2","load-grunt-tasks":"^3.5.2","minimist":"^1.2.0","mocha":"^8.2.1","sinon":"^4.5.0","terser-webpack-plugin":"^4.2.3","typescript":"^4.0.5","url-search-params":"^0.10.0","webpack":"^4.44.2","webpack-dev-server":"^3.11.0"},"browser":{"./lib/adapters/http.js":"./lib/adapters/xhr.js"},"jsdelivr":"dist/axios.min.js","unpkg":"dist/axios.min.js","typings":"./index.d.ts","dependencies":{"follow-redirects":"^1.14.0"},"bundlesize":[{"path":"./dist/axios.min.js","threshold":"5kB"}]}');
        }
    };
    var __webpack_module_cache__ = {};
    function __webpack_require__(moduleId) {
        var cachedModule = __webpack_module_cache__[moduleId];
        if (void 0 !== cachedModule) return cachedModule.exports;
        var module = __webpack_module_cache__[moduleId] = {
            id: moduleId,
            loaded: false,
            exports: {}
        };
        __webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
        module.loaded = true;
        return module.exports;
    }
    (() => {
        __webpack_require__.n = module => {
            var getter = module && module.__esModule ? () => module["default"] : () => module;
            __webpack_require__.d(getter, {
                a: getter
            });
            return getter;
        };
    })();
    (() => {
        __webpack_require__.d = (exports, definition) => {
            for (var key in definition) if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) Object.defineProperty(exports, key, {
                enumerable: true,
                get: definition[key]
            });
        };
    })();
    (() => {
        __webpack_require__.g = function() {
            if ("object" === typeof globalThis) return globalThis;
            try {
                return this || new Function("return this")();
            } catch (e) {
                if ("object" === typeof window) return window;
            }
        }();
    })();
    (() => {
        __webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);
    })();
    (() => {
        __webpack_require__.nmd = module => {
            module.paths = [];
            if (!module.children) module.children = [];
            return module;
        };
    })();
    var __webpack_exports__ = {};
    (() => {
        "use strict";
        function _defineProperty(obj, key, value) {
            if (key in obj) Object.defineProperty(obj, key, {
                value,
                enumerable: true,
                configurable: true,
                writable: true
            }); else obj[key] = value;
            return obj;
        }
        class SectionsLoad {
            constructor() {
                _defineProperty(this, "sectionInstances", new Map);
                _defineProperty(this, "constructorMap", new Map);
                window.document.addEventListener("shopline:section:load", this._onSectionLoad.bind(this));
                window.document.addEventListener("shopline:section:unload", this._onSectionUnload.bind(this));
            }
            _createInstace(container, constructorParam) {
                const id = container.data("section-id");
                if (!id) return;
                const constructor = constructorParam || this.constructorMap.get(container.data("section-type"));
                if ("function" !== typeof constructor) return;
                this.sectionInstances.set(id, new constructor(container));
            }
            _onSectionLoad(e) {
                const {sectionId} = e.detail;
                if (this.sectionInstances.has(sectionId)) {
                    const instance = this.sectionInstances.get(sectionId);
                    if ("function" === typeof instance.onUnload) instance.onUnload.call(instance);
                }
                const $container = $(`[data-section-id='${sectionId}']`);
                this._createInstace($container);
            }
            _onSectionUnload(e) {
                const {sectionId} = e.detail;
                if (this.sectionInstances.has(sectionId)) {
                    const instance = this.sectionInstances.get(sectionId);
                    if ("function" === typeof instance.onUnload) {
                        instance.onUnload.call(instance);
                        this.sectionInstances.delete(sectionId);
                    }
                }
            }
        }
        window.__section_load__ = new SectionsLoad;
        const registrySectionConstructor = (type, constructor) => {
            if (window.__section_load__.constructorMap.get(type)) return;
            window.__section_load__.constructorMap.set(type, constructor);
            const $sections = $(`[data-section-type='${type}']`);
            $sections.each((function() {
                const $container = $(this);
                window.__section_load__._createInstace($container, constructor);
            }));
        };
        class Player {}
        const libraries = {
            youtubeSdk: {
                tagId: "youtube-sdk",
                src: "https://www.youtube.com/iframe_api",
                type: "script"
            },
            vimeo: {
                tagId: "vimeo-api",
                src: "https://player.vimeo.com/api/player.js",
                type: "script"
            }
        };
        const LibraryLoader_status = {
            requested: "requested",
            loaded: "loaded"
        };
        function createScriptTag(library, callback) {
            const tag = document.createElement("script");
            tag.src = library.src;
            tag.addEventListener("load", (function() {
                Object.assign(library, {
                    status: LibraryLoader_status.loaded
                });
                callback();
            }));
            return tag;
        }
        function load(libraryName, _callback) {
            const library = libraries[libraryName];
            if (!library) return;
            if (library.status === LibraryLoader_status.requested) return;
            const callback = _callback || function() {};
            if (library.status === LibraryLoader_status.loaded) {
                callback();
                return;
            }
            library.status = LibraryLoader_status.requested;
            const tag = createScriptTag(library, callback);
            tag.id = library.tagId;
            library.element = tag;
            const firstScriptTag = document.getElementsByTagName(library.type)[0];
            firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
        }
        const LibraryLoader = {
            load
        };
        const utils_LibraryLoader = LibraryLoader;
        if ("undefined" === typeof window.__YOUTUBE_IFRAME_API_LOADED__) window.__YOUTUBE_IFRAME_API_LOADED__ = false;
        const prevOnYouTubeIframeAPIReady = window.onYouTubeIframeAPIReady;
        window.onYouTubeIframeAPIReady = function() {
            if ("function" === typeof prevOnYouTubeIframeAPIReady) prevOnYouTubeIframeAPIReady();
            if (!window.__YOUTUBE_IFRAME_API_LOADED__) {
                window.SL_EventBus.emit("stage:youTubeReady");
                window.__YOUTUBE_IFRAME_API_LOADED__ = true;
            }
        };
        const videoOptions = {
            ratio: 16 / 9,
            scrollAnimationDuration: 400,
            playerVars: {
                autohide: 0,
                autoplay: void 0,
                cc_load_policy: 0,
                controls: 1,
                fs: 0,
                iv_load_policy: 3,
                modestbranding: 1,
                playsinline: 1,
                rel: 0
            },
            events: {
                onReady: event => {
                    console.log(event);
                },
                onStateChange: event => {
                    console.log("change", event);
                },
                onError: event => {
                    console.log("onError", event);
                }
            }
        };
        class YouTube extends Player {
            constructor(containerId, options = {}) {
                super();
                this.containerId = containerId;
                this.options = {
                    ...videoOptions,
                    ...options
                };
                if (window.__YOUTUBE_IFRAME_API_LOADED__) this.init(); else {
                    utils_LibraryLoader.load("youtubeSdk");
                    window.SL_EventBus.on("stage:youTubeReady", this.init.bind(this));
                }
            }
            init() {
                window.__YOUTUBE_IFRAME_API_LOADED__ = true;
                this.player = new window.YT.Player(this.containerId, this.options);
            }
            playVideo() {
                var _this$player;
                null === (_this$player = this.player) || void 0 === _this$player ? void 0 : _this$player.playVideo();
            }
            mute() {
                var _this$player2;
                null === (_this$player2 = this.player) || void 0 === _this$player2 ? void 0 : _this$player2.mute();
            }
            unMute() {
                var _this$player3;
                null === (_this$player3 = this.player) || void 0 === _this$player3 ? void 0 : _this$player3.unMute();
            }
            destroy() {
                var _this$player4;
                null === (_this$player4 = this.player) || void 0 === _this$player4 ? void 0 : _this$player4.destroy();
            }
        }
        let vimeoReady = false;
        const defaults = {
            byline: false,
            controls: true,
            loop: false,
            muted: true,
            playsinline: true,
            portrait: false,
            responsive: true,
            transparent: false,
            title: "vedio",
            autoplay: false
        };
        class VimeoPlayer extends Player {
            constructor(containerId, options) {
                super();
                this.el = $(containerId).get(0);
                this.options = {
                    ...defaults,
                    ...options,
                    id: options.videoId
                };
                if (vimeoReady) this.init(); else {
                    utils_LibraryLoader.load("vimeo", window.vimeoApiReady);
                    window.SL_EventBus.on("stage:vimeoReady", this.init.bind(this));
                }
            }
            init() {
                vimeoReady = true;
                console.log(this.options);
                this.player = new window.Vimeo.Player(this.el, this.options);
                this.player.ready().then(this.playerReady.bind(this));
            }
            playVideo() {
                this.player.play();
            }
            mute() {
                this.player.setMuted(true);
            }
            unMute() {
                this.player.setMuted(false);
            }
            destroy() {
                this.player.destroy();
            }
            playerReady() {
                this.options.events.onReady();
            }
        }
        function initWhenVisible(options) {
            const threshold = options.threshold ? options.threshold : 0;
            const observer = new IntersectionObserver(((entries, _observer) => {
                entries.forEach((entry => {
                    if (entry.isIntersecting) if ("function" === typeof options.callback) {
                        options.callback();
                        _observer.unobserve(entry.target);
                    }
                }));
            }), {
                rootMargin: `0px 0px ${threshold}px 0px`
            });
            observer.observe(options.element[0]);
        }
        function video_defineProperty(obj, key, value) {
            if (key in obj) Object.defineProperty(obj, key, {
                value,
                enumerable: true,
                configurable: true,
                writable: true
            }); else obj[key] = value;
            return obj;
        }
        window.vimeoApiReady = function() {
            window.SL_EventBus.emit("stage:vimeoReady");
        };
        const selectors = {
            playVideoBtn: ".video-overlay__button",
            videoData: ".video-data"
        };
        const classes = {
            playing: "video--playing"
        };
        class Video {
            constructor(container, options = {}) {
                video_defineProperty(this, "container", null);
                video_defineProperty(this, "sectionId", "");
                video_defineProperty(this, "config", {
                    id: ""
                });
                video_defineProperty(this, "settings", {});
                this.container = container;
                this.options = options;
                this.sectionId = container.data("id");
                try {
                    this.settings = JSON.parse(container.find(`#Video-data-${this.sectionId}`).text());
                } catch (err) {}
                this.initEvent();
                initWhenVisible({
                    element: container,
                    callback: this.init.bind(this),
                    threshold: 500
                });
            }
            init() {
                var _dataDiv$data;
                const {container: video} = this;
                const {settings} = this;
                this.config = {
                    id: video.attr("id"),
                    videoKey: `Video-${video.data("id")}`,
                    videoId: video.data("id")
                };
                const dataDiv = this.container.find(selectors.videoData);
                const type = dataDiv.data("type");
                const videoId = dataDiv.data("video-id");
                const aspectRatios = (null === (_dataDiv$data = dataDiv.data("aspect-ratio")) || void 0 === _dataDiv$data ? void 0 : _dataDiv$data.split(":")) || [ 16, 9 ];
                const events = {
                    onReady: this.onVideoPlayerReady.bind(this)
                };
                switch (type) {
                  case "youtube":
                    this.initYoutubeVideo(dataDiv.attr("id"), {
                        videoId,
                        ratio: aspectRatios[0] / aspectRatios[1],
                        autoplay: settings.autoplay ? 1 : 0,
                        muted: !!settings.quiet,
                        events
                    });
                    break;

                  case "vimeo":
                    this.initVimeoVideo(dataDiv.attr("id"), {
                        videoId,
                        ratio: aspectRatios[0] / aspectRatios[1],
                        autoplay: !!settings.autoplay,
                        muted: !!settings.quiet,
                        events
                    });
                }
            }
            initYoutubeVideo(videoId, options) {
                this.player = new YouTube(videoId, options);
            }
            initVimeoVideo(videoId, options) {
                this.player = new VimeoPlayer(`#${videoId}`, options);
            }
            initEvent() {
                this.container.find(selectors.playVideoBtn).on("click", (() => {
                    var _this$options, _this$options$clickCa;
                    this.startVideoOnClick();
                    null === (_this$options = this.options) || void 0 === _this$options ? void 0 : null === (_this$options$clickCa = _this$options.clickCallback) || void 0 === _this$options$clickCa ? void 0 : _this$options$clickCa.call(_this$options);
                }));
            }
            onVideoPlayerReady() {
                if (this.settings.autoplay) {
                    this.player.playVideo();
                    if (this.settings.quiet) this.player.mute(); else {
                        this.player.unMute();
                        this.player.playVideo();
                    }
                }
            }
            initAutoplay() {}
            startVideoOnClick() {
                this.container.addClass(classes.playing);
                const {player} = this;
                player.playVideo();
            }
            onUnload() {
                var _this$player, _this$player$destroy;
                null === (_this$player = this.player) || void 0 === _this$player ? void 0 : null === (_this$player$destroy = _this$player.destroy) || void 0 === _this$player$destroy ? void 0 : _this$player$destroy.call(_this$player);
            }
        }
        video_defineProperty(Video, "type", "video");
        var round = __webpack_require__("../shared/node_modules/lodash/round.js");
        var round_default = __webpack_require__.n(round);
        var findIndex = __webpack_require__("../shared/node_modules/lodash/findIndex.js");
        var findIndex_default = __webpack_require__.n(findIndex);
        var find = __webpack_require__("../shared/node_modules/lodash/find.js");
        var find_default = __webpack_require__.n(find);
        var eventemitter3 = __webpack_require__("../shared/node_modules/eventemitter3/index.js");
        var eventemitter3_default = __webpack_require__.n(eventemitter3);
        if (!window.SL_EventBus) {
            window.SL_EventBus = new (eventemitter3_default());
            window.SL_EventEmitter = eventemitter3_default();
        }
        const {SL_EventBus} = window;
        const {SL_EventEmitter} = window;
        window.SL_EventBus, window.SL_EventEmitter;
        function parsePathToArray(path) {
            if ("string" !== typeof path) throw new TypeError("path must be string");
            return path.replace(/\]/, "").split(/[.[]/);
        }
        const utils_parsePathToArray = parsePathToArray;
        class SLState {
            constructor(state) {
                this.bus = new SL_EventEmitter;
                this.rootState = state;
            }
            get(path) {
                const keys = utils_parsePathToArray(path);
                const value = keys.reduce(((prev, current) => {
                    if (!prev) return;
                    return prev[current];
                }), this.rootState);
                return value;
            }
            set(path, newValue) {
                if ("function" === typeof newValue) throw TypeError("newValue must not be a function");
                const keys = utils_parsePathToArray(path);
                let oldValue;
                keys.reduce(((prev, current, index) => {
                    if (index === keys.length - 1) {
                        const key = prev;
                        oldValue = key[current];
                        key[current] = newValue;
                    }
                    return prev[current];
                }), this.rootState);
                this.bus.emit(path, newValue, oldValue);
            }
            on(...args) {
                return this.bus.on(...args);
            }
            off(...args) {
                return this.bus.off(...args);
            }
        }
        const __PRELOAD_STATE__ = window.__PRELOAD_STATE__ || {};
        if (!window.SL_State) window.SL_State = new SLState(__PRELOAD_STATE__);
        const {SL_State} = window;
        const covertCalc = (value, from, to, dataSource = {}) => {
            var _dataSource$to, _dataSource$from;
            if (from === to) return value;
            return value * (null !== (_dataSource$to = null === dataSource || void 0 === dataSource ? void 0 : dataSource[to]) && void 0 !== _dataSource$to ? _dataSource$to : 1) / (null !== (_dataSource$from = null === dataSource || void 0 === dataSource ? void 0 : dataSource[from]) && void 0 !== _dataSource$from ? _dataSource$from : 1);
        };
        const convertFormat = (value, options = {}) => {
            const fromDefault = SL_State.get("storeInfo.currency");
            const toDefault = SL_State.get("currencyCode");
            const locale = SL_State.get("request.locale");
            const {from = fromDefault, to = toDefault, lang = locale} = options;
            const data = SL_State.get("currencyRates");
            const rst = covertCalc(value, from, to, data);
            return currency.format(rst, {
                code: to,
                lang
            });
        };
        const HARD_CODE_CONFIG = [ {
            code: "TWD",
            digit: 0
        }, {
            code: "HUF",
            digit: 0
        }, {
            code: "RUB",
            digit: 0
        }, {
            code: "CVE",
            digit: 0
        }, {
            code: "AFN",
            digit: 2
        }, {
            code: "ALL",
            digit: 2
        }, {
            code: "IRR",
            digit: 2
        }, {
            code: "KPW",
            digit: 2
        }, {
            code: "LAK",
            digit: 2
        }, {
            code: "LBP",
            digit: 2
        }, {
            code: "MMK",
            digit: 2
        }, {
            code: "RSD",
            digit: 2
        }, {
            code: "SLL",
            digit: 2
        }, {
            code: "SOS",
            digit: 2
        }, {
            code: "SYP",
            digit: 2
        }, {
            code: "UYU",
            digit: 2
        }, {
            code: "YER",
            digit: 2
        }, {
            code: "KWD",
            digit: 2
        }, {
            code: "OMR",
            digit: 2
        }, {
            code: "BHD",
            digit: 2
        }, {
            code: "IDR",
            digit: 0
        } ];
        const SYMBOL_HARD_CODE_CONFIG = {
            AUD: {
                en: "zh-hans-cn"
            },
            TWD: {
                "zh-hant-tw": "zh-hant-hk"
            },
            MXN: {
                es: "en"
            },
            CLP: {
                es: "es-CL"
            }
        };
        const CURRENCY_DISPLAY_HARDCODE = {
            PHP: {
                currencyDisplay: "code"
            }
        };
        const storeCurrency = SL_State.get("storeInfo.currency");
        const storeLang = SL_State.get("request.locale");
        const currencyRates = SL_State.get("currencyRates");
        const defaultCurrency = "CNY";
        const defaultCurrencyDigit = 2;
        const defaultPresentDigit = 2;
        const defaultLang = "zh-hans-cn";
        const digitsMap = new Map;
        const formatUtilMap = new Map;
        const symbolsMap = new Map;
        const hardcoreConfigs = HARD_CODE_CONFIG;
        const hardcodeDigit = code => {
            var _hardcoreConfig$digit, _hardcoreConfig$digit2;
            const hardcoreConfig = hardcoreConfigs.find((config => config.code === code));
            return {
                minimumFractionDigits: null !== (_hardcoreConfig$digit = null === hardcoreConfig || void 0 === hardcoreConfig ? void 0 : hardcoreConfig.digit) && void 0 !== _hardcoreConfig$digit ? _hardcoreConfig$digit : void 0,
                maximumFractionDigits: null !== (_hardcoreConfig$digit2 = null === hardcoreConfig || void 0 === hardcoreConfig ? void 0 : hardcoreConfig.digit) && void 0 !== _hardcoreConfig$digit2 ? _hardcoreConfig$digit2 : void 0
            };
        };
        const hardCodeCurrencyDisplay = code => {
            var _CURRENCY_DISPLAY_HAR;
            return null !== (_CURRENCY_DISPLAY_HAR = CURRENCY_DISPLAY_HARDCODE[code]) && void 0 !== _CURRENCY_DISPLAY_HAR ? _CURRENCY_DISPLAY_HAR : {};
        };
        const hardCodeSymbol = (code, lang) => {
            var _SYMBOL_HARD_CODE_CON, _SYMBOL_HARD_CODE_CON2;
            return null !== (_SYMBOL_HARD_CODE_CON = null === (_SYMBOL_HARD_CODE_CON2 = SYMBOL_HARD_CODE_CONFIG[code]) || void 0 === _SYMBOL_HARD_CODE_CON2 ? void 0 : _SYMBOL_HARD_CODE_CON2[lang]) && void 0 !== _SYMBOL_HARD_CODE_CON ? _SYMBOL_HARD_CODE_CON : lang;
        };
        const formatGenerator = (code, lang) => {
            const realLang = hardCodeSymbol(code, lang);
            return new Intl.NumberFormat(realLang, {
                style: "currency",
                currency: code,
                ...hardCodeCurrencyDisplay(code),
                ...hardcodeDigit(code)
            });
        };
        const cacheKeyGenerator = ({code, lang}) => {
            const countryCode = null === code || void 0 === code ? void 0 : code.toUpperCase();
            const language = null === lang || void 0 === lang ? void 0 : lang.toUpperCase();
            if (countryCode && language) return `${countryCode}-${language}`;
            if (countryCode) return countryCode;
            if (language) return language;
        };
        const format = (value, options = {}) => {
            const decimalDigits = defaultCurrencyDigit;
            const code = (null === options || void 0 === options ? void 0 : options.code) || storeCurrency || defaultCurrency;
            const lang = (null === options || void 0 === options ? void 0 : options.lang) || storeLang || defaultLang;
            const digits = 10 ** decimalDigits;
            let f = null;
            if (formatUtilMap.get(cacheKeyGenerator({
                code,
                lang
            }))) f = formatUtilMap.get(cacheKeyGenerator({
                code,
                lang
            })); else {
                f = formatGenerator(code, lang);
                formatUtilMap.set(cacheKeyGenerator({
                    code,
                    lang
                }), f);
                digitsMap.set(code, f.resolvedOptions().maximumFractionDigits);
            }
            return f.format(value / digits);
        };
        const getDigitsByCode = code => {
            if ("number" === typeof digitsMap.get(cacheKeyGenerator({
                code
            }))) return digitsMap.get(cacheKeyGenerator({
                code
            }));
            const digit = formatGenerator(code, "zh-cn").resolvedOptions().maximumFractionDigits;
            digitsMap.set(cacheKeyGenerator({
                code
            }), digit);
            return digit;
        };
        const getSymbolByCode = (code, lang = "zh-cn") => {
            if (symbolsMap.get(cacheKeyGenerator({
                code,
                lang
            }))) return symbolsMap.get(cacheKeyGenerator({
                code,
                lang
            }));
            let symbol = "";
            const format = formatGenerator(code, lang);
            if (format.formatToParts) {
                var _find2;
                symbol = null === (_find2 = find_default()(format.formatToParts(), [ "type", "currency" ])) || void 0 === _find2 ? void 0 : _find2.value;
            } else {
                var _intl$format$replace;
                const realLang = hardCodeSymbol(code, lang);
                const intl = new Intl.NumberFormat(realLang, {
                    style: "currency",
                    currency: code,
                    ...hardCodeCurrencyDisplay(code),
                    minimumFractionDigits: 0,
                    maximumFractionDigits: 0
                });
                symbol = null === (_intl$format$replace = intl.format(0).replace("0", "")) || void 0 === _intl$format$replace ? void 0 : _intl$format$replace.trim();
            }
            symbolsMap.set(cacheKeyGenerator({
                code,
                lang
            }), symbol);
            return symbol;
        };
        const getSymbolOrderByCode = (code, lang = "zh-cn") => {
            let order = 0;
            const format = formatGenerator(code, lang);
            if (format.formatToParts) order = findIndex_default()(format.formatToParts(), [ "type", "currency" ]);
            return order > 0 ? "suffix" : "prefix";
        };
        const unformatNumber = (value, decimalDigits = defaultCurrencyDigit) => {
            const v = round_default()(("number" !== typeof value ? Number(value) : value) * 10 ** decimalDigits, 0);
            return v;
        };
        const unformatCurrency = value => unformatNumber(value, defaultCurrencyDigit);
        const unformatPercent = value => unformatNumber(value, defaultPresentDigit);
        const formatNumber = (value, decimalDigits = defaultCurrencyDigit) => {
            const v = "number" !== typeof value ? Number(value) : value;
            return v / 10 ** decimalDigits;
        };
        const formatCurrency = value => formatNumber(value, defaultCurrencyDigit);
        const formatPercent = value => formatNumber(value, defaultPresentDigit);
        const getDecimalSymbolByCode = (code, lang) => {
            let decimal = "";
            const format = formatGenerator(code, lang);
            if (format.formatToParts) {
                var _find3;
                decimal = null === (_find3 = find_default()(format.formatToParts(1), [ "type", "decimal" ])) || void 0 === _find3 ? void 0 : _find3.value;
            } else {
                const realLang = hardCodeSymbol(code, lang);
                const intl = new Intl.NumberFormat(realLang, {
                    currency: code,
                    ...hardCodeCurrencyDisplay(code),
                    useGrouping: false
                });
                decimal = intl.format(.1).replace(/[0-9]*/g, "");
            }
            return decimal;
        };
        const getGroupSymbolByCode = (code, lang) => {
            let group = "";
            const format = formatGenerator(code, lang);
            if (format.formatToParts) {
                var _find4;
                group = null === (_find4 = find_default()(format.formatToParts(1e4), [ "type", "group" ])) || void 0 === _find4 ? void 0 : _find4.value;
            } else {
                const realLang = hardCodeSymbol(code, lang);
                const decimal = getDecimalSymbolByCode(code, realLang);
                group = "." === decimal ? "," : ".";
            }
            return group;
        };
        const getFormatParts = (value, options) => {
            const {code, lang} = options;
            const format = formatGenerator(code, lang);
            if (format.formatToParts) return format.formatToParts(value);
            const formatStr = format.format(value);
            const group = getGroupSymbolByCode(code, lang);
            const decimal = getDecimalSymbolByCode(code, lang);
            const symbolOrder = getSymbolOrderByCode(code, lang);
            const symbol = getSymbolByCode(code, lang);
            const rst = [];
            const [integerValue, fraction] = formatStr.replace(symbol, "").split(decimal);
            integerValue.split(group).forEach(((item, index) => {
                rst.push({
                    type: "integer",
                    value: item
                });
                if (index !== integerValue.length - 1) rst.push({
                    type: "group",
                    value: group
                });
            }));
            rst.push({
                type: "decimal",
                value: decimal
            });
            rst.push({
                type: "fraction",
                value: fraction.trim()
            });
            if ("prefix" === symbolOrder) rst.unshift({
                type: "currency",
                value: symbol
            }); else rst.push({
                type: "currency",
                value: symbol
            });
            return rst;
        };
        const getConvertPrice = (money, options) => {
            const fromCurrencyCode = storeCurrency;
            const toCurrencyCode = null === options || void 0 === options ? void 0 : options.code;
            const lang = null === options || void 0 === options ? void 0 : options.lang;
            const covertMoneyByRate = covertCalc(money, fromCurrencyCode, toCurrencyCode, currencyRates);
            const covertMoney = formatCurrency(covertMoneyByRate);
            const formatPartsResult = getFormatParts(covertMoney, {
                code: toCurrencyCode,
                lang
            });
            const convertResult = {
                group: "",
                integer: "",
                decimal: "",
                fraction: "",
                symbolOrder: "",
                currencySymbol: ""
            };
            convertResult.symbolOrder = getSymbolOrderByCode(toCurrencyCode, lang);
            formatPartsResult.forEach((item => {
                if ("currency" === (null === item || void 0 === item ? void 0 : item.type)) convertResult.currencySymbol = item.value;
                if ("integer" === (null === item || void 0 === item ? void 0 : item.type)) if (convertResult.integer) convertResult.integer = `${convertResult.integer}${convertResult.group || ""}${item.value}`; else convertResult.integer = item.value;
                if ("group" === (null === item || void 0 === item ? void 0 : item.type)) convertResult.group = item.value;
                if ("decimal" === (null === item || void 0 === item ? void 0 : item.type)) convertResult.decimal = item.value;
                if ("fraction" === (null === item || void 0 === item ? void 0 : item.type)) convertResult.fraction = item.value;
            }));
            return convertResult;
        };
        const currency = {
            format,
            unformatNumber,
            formatNumber,
            unformatCurrency,
            unformatPercent,
            formatCurrency,
            formatPercent,
            getDigitsByCode,
            getSymbolByCode,
            getSymbolOrderByCode,
            getDecimalSymbolByCode,
            getGroupSymbolByCode,
            getFormatParts,
            getConvertPrice,
            convertFormat,
            covertCalc
        };
        function i18n_parsePathToArray(path) {
            if ("string" !== typeof path) throw new TypeError("path must be string");
            return path.replace(/\]/, "").split(/[.[]/);
        }
        function t(path, hash) {
            var _value$replace, _value$replace2;
            const keys = i18n_parsePathToArray(path);
            const value = keys.reduce(((prev, current) => {
                if (!prev) return;
                return null !== prev && void 0 !== prev && prev.string ? prev.string[current] : prev[current];
            }), window.__I18N__);
            const regExp = new RegExp(/\{\{([^{}]+)\}\}/g);
            return null !== (_value$replace = null === value || void 0 === value ? void 0 : null === (_value$replace2 = value.replace) || void 0 === _value$replace2 ? void 0 : _value$replace2.call(value, regExp, ((...args) => (null === hash || void 0 === hash ? void 0 : hash[args[1]]) || args[0]))) && void 0 !== _value$replace ? _value$replace : path;
        }
        const pageMapping = {
            Home: "homepage",
            Products: "product_list",
            ProductsDetail: "pdp",
            ProductsSearch: "product_search",
            OneShop: "expresscheckout",
            Cart: "cart",
            Checkout: "order_check_out",
            Comfirm: "transaction",
            Center: "user_page",
            Activity: "addon",
            Page: {
                custom_page: 124,
                smart_landing_page: 125
            }
        };
        var axios = __webpack_require__("./node_modules/axios/index.js");
        var axios_default = __webpack_require__.n(axios);
        var browser = __webpack_require__("../shared/node_modules/debug/src/browser.js");
        var browser_default = __webpack_require__.n(browser);
        function getEnv(key) {
            const ENV = window.__ENV__ || {};
            if (key) return ENV[key];
            return ENV;
        }
        const isFunction = fn => "function" === typeof fn;
        const createLogger = (name, description) => {
            const logger = {
                debug: console.debug,
                error: console.error,
                info: console.info,
                log: console.log
            };
            if ("undefined" === typeof window) return logger;
            if ([ "product" ].includes(getEnv().APP_ENV)) null === browser_default() || void 0 === browser_default() ? void 0 : browser_default().disable();
            if (!isFunction(browser_default())) return;
            const desc = description ? ` - ${description}` : "";
            logger.error = browser_default()(`${name}:error${desc}`).bind(console);
            logger.debug = browser_default()(`${name}:debug${desc}`).bind(console);
            logger.info = browser_default()(`${name}:info${desc}`).bind(console);
            logger.log = browser_default()(`${name}:log${desc}`).bind(console);
            return logger;
        };
        const utils_createLogger = createLogger;
        const api_logger = apiName => utils_createLogger("developer-api", `[${apiName}]`);
        var _window;
        const EVENT_NAME = {
            OPEN_QUICKVIEW_EVENT: "Product::OpenQuickView",
            CLOSE_QUICKVIEW_EVENT: "Product::CloseQuickView",
            OPEN_QUICKVIEW_ADDTOCART: "Product::OpenQuickView::AddToCart",
            CLOSE_QUICKVIEW_ADDTOCART: "Product::CloseQuickView::AddToCart"
        };
        const external = null === (_window = window) || void 0 === _window ? void 0 : _window.Shopline.event;
        const quickViewClick = data => {
            const logger = api_logger(EVENT_NAME[data.eventName]);
            quickViewClick.apiName = EVENT_NAME[data.eventName];
            logger.info(`[emit]`, data);
            return external.emit(EVENT_NAME[data.eventName], {
                data,
                onSuccess: result => {
                    logger.info("success", result);
                },
                onError: error => {
                    logger.error(error);
                }
            });
        };
        const quickView_click = quickViewClick;
        function gen(name, mods) {
            if (!mods) return "";
            if ("string" === typeof mods) return ` ${name}--${mods}`;
            if (Array.isArray(mods)) return mods.reduce(((ret, item) => ret + gen(name, item)), "");
            return Object.keys(mods).reduce(((ret, key) => ret + (mods[key] ? gen(name, key) : "")), "");
        }
        function createBEM(name) {
            return (el, mods) => {
                if (el && "string" !== typeof el) {
                    mods = el;
                    el = "";
                }
                el = el ? `${name}__${el}` : name;
                return `${el}${gen(el, mods)}`;
            };
        }
        function createNamespace(commonName, name) {
            name = `${commonName}-${name}`;
            return createBEM(name);
        }
        var scroll_lock = __webpack_require__("./node_modules/scroll-lock/dist/scroll-lock.js");
        const bem = createNamespace("mp", "modal");
        const DEFAULT_MODAL_ID_PRE = "MpModal";
        const VISIBLE = "visible";
        const HIDDEN = "hidden";
        const animationClassMap = {
            visible: bem("visibleAnimation"),
            hidden: bem("notVisibleAnimation")
        };
        const visibleClassName = bem("visible");
        const maskClosableClass = bem("closable");
        class Modal {
            constructor({modalId = ""} = {}) {
                this.modalId = `${DEFAULT_MODAL_ID_PRE}${modalId}`;
                this.$modal = $(`#${this.modalId}`);
                this.$modalBody = this.$modal.find(`.${bem("body")}`);
                this.$modalContainer = this.$modal.find(`.${bem("container")}`);
                this.isMobile = SL_State.get("request.is_mobile");
                this.maskClosable = this.$modal.data("maskclosable");
                this.visibleState = HIDDEN;
                this.eventsBinded = false;
                this.init();
            }
            init() {
                if (!this.eventsBinded) {
                    this.bindEvents();
                    this.eventsBinded = true;
                }
            }
            show() {
                this.visibleState = VISIBLE;
                (0, scroll_lock.disablePageScroll)(this.$modalBody.get(0));
                this.$modal.addClass([ visibleClassName, animationClassMap.visible ]).removeClass(animationClassMap.hidden);
                this.toggleMaskClassName();
            }
            hide(force) {
                this.visibleState = HIDDEN;
                (0, scroll_lock.enablePageScroll)(this.$modalBody.get(0));
                this.toggleMaskClassName();
                this.$modal.addClass(animationClassMap.hidden).removeClass(animationClassMap.visible);
                if (force) this.afterAnimation();
            }
            toggleMaskClassName() {
                if (this.maskClosable) this.$modal.find(`.${bem("mask")}`).toggleClass(maskClosableClass, this.visibleState === VISIBLE);
            }
            afterAnimation() {
                this.$modal.toggleClass(visibleClassName, this.visibleState === VISIBLE);
            }
            bindEvents() {
                this.$modal.on("click", `.${bem("close")}`, this.hide.bind(this, false));
                if (this.isMobile) this.$modal.on("touchstart", `.${bem("close")}`, this.hide.bind(this, false));
                if (this.maskClosable) this.$modal.on("click", `.${bem("mask")}`, this.hide.bind(this, false));
                this.$modalContainer.on("animationend", this.afterAnimation.bind(this));
            }
        }
        function isInvalid(param) {
            return !param || "string" !== typeof param;
        }
        function isJqueryInstance(dom) {
            return dom && dom instanceof $ && dom.length > 0;
        }
        function getEventHandlerName(event, selector, namepsace) {
            if (!selector) return [ event, namepsace ].join("-");
            if (isJqueryInstance(selector)) return selector;
            return [ selector, event, namepsace ].join("-");
        }
        function getNamespace(event, namespace) {
            if (isInvalid(event) && isInvalid(namespace)) throw new Error("one of these two parameters must be provided!");
            if (isInvalid(event)) return `.${namespace}`;
            return [ event, namespace ].join(".");
        }
        const eventInvalidErrorMessage = "event param must be provided and it must be a string type";
        function on({eventName, handler, selector, scope} = {}) {
            if (isInvalid(eventName)) throw new Error(eventInvalidErrorMessage);
            if (!isJqueryInstance(scope)) throw new Error("scope must be a jQuery Object");
            if ("function" !== typeof handler) throw new TypeError("handler must be a function");
            if (selector) {
                if (isInvalid(selector)) throw new TypeError("selector must be a string!");
                scope.on(eventName, selector, handler);
            } else scope.on(eventName, handler);
        }
        function off({eventName, selector, handler, scope} = {}) {
            if (isInvalid(eventName)) throw new Error(eventInvalidErrorMessage);
            if (!isJqueryInstance(scope)) throw new Error("scope must be a jQuery Object");
            if (selector) {
                if (isInvalid(selector)) throw new TypeError("selector must be a string!");
                if ("function" === typeof handler) scope.off(eventName, selector, handler); else scope.off(eventName, selector);
            } else scope.off(eventName);
        }
        function onConsistent(event, selector, handler) {
            if (isInvalid(event)) throw new Error(eventInvalidErrorMessage);
            if (!handler) {
                handler = selector;
                selector = null;
            }
            const eventHandlerKey = this.getEventHandlerName(event, selector);
            const ns = this.getEventNamespace(event);
            this.$eventHandlers.set(eventHandlerKey, handler);
            return scope => {
                on({
                    eventName: ns,
                    selector,
                    handler,
                    scope
                });
            };
        }
        function offConsistent(event, selector) {
            if (isInvalid(event)) throw new Error(eventInvalidErrorMessage);
            const eventHandlerName = this.getEventHandlerName(event, selector);
            const handler = this.$eventHandlers.get(eventHandlerName);
            const ns = this.getEventNamespace(event);
            return scope => {
                off({
                    eventName: ns,
                    selector,
                    handler,
                    scope
                });
                if (handler) this.$eventHandlers.delete(eventHandlerName);
            };
        }
        class EventManager {
            constructor(namespace = "", portals) {
                this.$win = $(window);
                this.$doc = $(document);
                this.$portals = portals ? $(portals) : null;
                this.namespace = "string" === typeof namespace ? namespace : "";
                this.$eventHandlers = new Map;
                this.$winEventHandlers = new Map;
            }
            getEventNamespace(event) {
                return getNamespace(event, this.namespace);
            }
            getEventHandlerName(event, selector) {
                return getEventHandlerName(event, selector, this.namespace);
            }
            getPortals() {
                return isJqueryInstance(this.$portals) ? this.$portals : this.$doc;
            }
            $setNamespace(namespace) {
                this.namespace = namespace;
            }
            $setPortals(portals) {
                this.$portals = portals ? $(portals) : null;
            }
            $on(event, selector, handler) {
                const onEvent = onConsistent.call(this, event, selector, handler);
                onEvent(this.$doc);
            }
            $onPortals(event, selector, handler) {
                const $dom = this.getPortals();
                const onEvent = onConsistent.call(this, event, selector, handler);
                onEvent($dom);
            }
            $onWin(event, handler) {
                this.$winEventHandlers.set(this.getEventHandlerName(event), handler);
                this.$win.on(this.getEventNamespace(event), handler);
            }
            $off(event, selector) {
                const offEvent = offConsistent.call(this, event, selector);
                offEvent(this.$doc);
            }
            $offPortals(event, selector) {
                const $dom = this.getPortals();
                const offEvent = offConsistent.call(this, event, selector);
                offEvent($dom);
            }
            $offWin(event) {
                const eventHandlerName = this.getEventHandlerName(event);
                const handler = this.$winEventHandlers.get(eventHandlerName);
                this.$win.off(this.getEventNamespace(event));
                if (handler) this.$winEventHandlers.delete(eventHandlerName);
            }
            $offAll() {
                const ns = this.getEventNamespace();
                this.$win.off(ns);
                this.$doc.off(ns);
                if (isJqueryInstance(this.$portals)) this.$portals.off(ns);
                this.$eventHandlers.clear();
                this.$winEventHandlers.clear();
            }
            prepareTransition($el, callback, endCallback) {
                function removeClass() {
                    $el.removeClass("is-transitioning");
                    $el.off("transitionend", removeClass);
                    if (endCallback) endCallback();
                }
                $el.on("transitionend", removeClass);
                $el.addClass("is-transitioning");
                $el.width();
                if ("function" === typeof callback) callback();
            }
        }
        let uuid = 0;
        class ModalWithHtml extends EventManager {
            constructor(options = {}) {
                super("mp:modal:full");
                const config = {
                    zIndex: 1e3,
                    containerClassName: "",
                    closable: true,
                    maskClosable: true,
                    bodyClassName: "",
                    content: "",
                    destroyedOnClosed: false,
                    afterClose: () => {},
                    closeCallback: () => {},
                    ...options
                };
                this.modalId = config.id || `${DEFAULT_MODAL_ID_PRE}${++uuid}`;
                this.zIndex = config.zIndex;
                this.config = config;
                this.destroyed = false;
                this.init();
            }
            init() {
                const $modal = $(`#${this.modalId}`);
                if ($modal.length > 0) {
                    this.$modal = $modal;
                    this.$setPortals($modal);
                    return;
                }
                this.$modal = this.buildModalHtml();
                this.$setPortals(this.$modal);
                this.bindEvents();
            }
            buildModalHtml() {
                const {zIndex, closable, containerClassName, bodyClassName, content, children} = this.config;
                const modalHtml = `\n      <div id="${this.modalId}" class="${bem("wrapper")}">\n        <div class="${bem("mask")}"></div>\n        <div class="${bem("container")}">\n          ${closable ? `<span class="${bem("close")}">\n            <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">\n              <path d="M19.1998 4.80005L4.7998 19.2" stroke="currentColor" stroke-width="2"/>\n              <path d="M4.7998 4.79995L19.1998 19.2" stroke="currentColor" stroke-width="2"/>\n            </svg>          \n          </span>` : ""}\n          <div class="${bem("body")} ${bodyClassName}">\n            ${content}\n          </div>\n        </div>\n      </div>\n    `;
                const $modal = $(modalHtml);
                if (containerClassName) $modal.find(`.${bem("container")}`).addClass(containerClassName);
                if (bodyClassName) $modal.find(`.${bem("body")}`).addClass(bodyClassName);
                if (children) $modal.find(`.${bem("body")}`).append(children);
                if (("number" === typeof zIndex || "string" === typeof zIndex) && "" !== zIndex) $modal.css("z-index", zIndex);
                return $modal;
            }
            setContent(content) {
                this.config.content = content;
                this.$modal.find(`.${bem("body")}`).html(content);
            }
            show() {
                if (this.destroyed) {
                    this.destroyed = false;
                    this.bindEvents();
                }
                const $modalBody = this.$modal.find(`.${bem("body")}`);
                this.$modal.appendTo(document.body);
                (0, scroll_lock.disablePageScroll)($modalBody.get(0));
                this.visibleState = VISIBLE;
                this.$modal.addClass([ visibleClassName, animationClassMap.visible ]).removeClass(animationClassMap.hidden);
                this.toggleMaskClassName();
            }
            hide(force) {
                const $modalBody = this.$modal.find(`.${bem("body")}`);
                this.visibleState = HIDDEN;
                (0, scroll_lock.enablePageScroll)($modalBody.get(0));
                window.SL_EventBus.emit("global:popup:close");
                this.toggleMaskClassName();
                this.$modal.addClass(animationClassMap.hidden).removeClass(animationClassMap.visible);
                if (force) this.afterAnimation();
                if ("function" === typeof this.config.closeCallback) this.config.closeCallback(this.$modal);
            }
            toggleMaskClassName() {
                if (this.config.maskClosable) this.$modal.find(`.${bem("mask")}`).toggleClass(maskClosableClass, this.visibleState === VISIBLE);
            }
            afterAnimation() {
                this.$modal.toggleClass(visibleClassName, this.visibleState === VISIBLE);
                if ("function" === typeof this.config.afterClose) this.config.afterClose(this.$modal);
                this.destroy();
            }
            destroy() {
                if (this.config.destroyedOnClosed && this.visibleState === HIDDEN) {
                    this.$modal.remove();
                    this.detachEvents();
                    this.destroyed = true;
                }
            }
            bindEvents() {
                this.$onPortals("click", `.${bem("close")}`, this.hide.bind(this, false));
                if (this.config.maskClosable) this.$onPortals("click", `.${bem("mask")}`, this.hide.bind(this, false));
                this.$onPortals("animationend", `.${bem("container")}`, this.afterAnimation.bind(this));
            }
            detachEvents() {
                this.$offAll();
            }
        }
        function toast_defineProperty(obj, key, value) {
            if (key in obj) Object.defineProperty(obj, key, {
                value,
                enumerable: true,
                configurable: true,
                writable: true
            }); else obj[key] = value;
            return obj;
        }
        const toast_LOADING = "loading";
        const toast_getTemplate = (options, type = "default") => {
            const loadingColor = options.loadingColor || "black";
            const templates = {
                [toast_LOADING]: `\n      <div class="mp-toast mp-toast--loading mp-toast--loading-style2 mp-toast__hidden ${options.fullscreen && "mp-toast__fullscreen"} ${options.className || ""}">\n        <div class="mp-loading mp-loading--circular mp-toast__loading">\n          <span class="mp-loading__spinner mp-loading__spinner--circular">\n            <svg class="mp-loading__circular" width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">\n              <path d="M18.3333 9.99999C18.3333 14.6024 14.6024 18.3333 10 18.3333C5.39762 18.3333 1.66666 14.6024 1.66666 9.99999C1.66666 5.39762 5.39762 1.66666 10 1.66666" stroke="${loadingColor}" stroke-width="2.5" stroke-linecap="round"/>\n            </svg>\n          </span>\n        </div>\n        <div class="mp-toast__content mp-toast__text">${options.content}</div>\n      </div>\n    `,
                default: `\n      <div class="mp-toast mp-toast__hidden ${options.fullscreen && "mp-toast__fullscreen"} ${options.className || ""}">\n        <div class="mp-toast__content mp-toast__inner">${options.content}</div>\n      </div>\n    `
            };
            return templates[type];
        };
        const OPTION_TARGET = "body";
        const defaultOptions = {
            duration: 1500,
            content: "",
            target: OPTION_TARGET
        };
        const toast_HIDDEN_CLASSNAME = "mp-toast__hidden";
        const CONTENT_CLASSNAME = "mp-toast__content";
        class Toast {
            constructor(options = {}) {
                this.options = {
                    ...defaultOptions,
                    fullscreen: !options.target || options.target === OPTION_TARGET,
                    ...options
                };
                this.$toast = null;
                this.$target = null;
                this.timer = null;
                this.instance = null;
                this.render();
            }
            static init(options) {
                return this.getSingleton(options);
            }
            static loading(options) {
                return this.getSingleton(options, toast_LOADING);
            }
            static getSingleton(options = {}, type) {
                let {instance} = this;
                if (!instance) {
                    instance = new Toast(options);
                    this.instance = instance;
                }
                if (instance.type !== type) {
                    instance.type = type;
                    if (instance.$toast) instance.$toast.remove();
                    instance.render();
                }
                instance.open(options.content || "", options.duration);
                return instance;
            }
            render() {
                const template = toast_getTemplate(this.options, this.type || this.options.type);
                this.$toast = $(template);
                this.$target = $(this.options.target);
                const {$target} = this;
                if ("static" === $target.css("position")) $target.css("position", "relative");
                $target.append(this.$toast);
            }
            open(content = "", duration) {
                const {options, $target} = this;
                if ("static" === $target.css("position")) $target.css("position", "relative");
                if (this.timer) {
                    clearTimeout(this.timer);
                    this.timer = null;
                }
                const {$toast} = this;
                const $text = $toast.find(`.${CONTENT_CLASSNAME}`);
                $text.html(content || this.options.content || "");
                $toast.removeClass(toast_HIDDEN_CLASSNAME);
                const durationTime = "number" === typeof duration ? duration : options.duration;
                if (0 !== durationTime) this.timer = setTimeout(this.close.bind(this), durationTime);
            }
            close() {
                if (this.timer) {
                    clearTimeout(this.timer);
                    this.timer = null;
                }
                this.$toast.addClass(toast_HIDDEN_CLASSNAME);
                if ("function" === typeof this.options.onClose) this.options.onClose();
                this.$target.css("position", "");
            }
        }
        toast_defineProperty(Toast, "type", null);
        const loading_OPTION_TARGET = "body";
        class Loading {
            constructor(options = {}) {
                this.options = {
                    duration: 1500,
                    fullscreen: !options.target || options.target === loading_OPTION_TARGET,
                    ...options
                };
                this.$loading = null;
                this.$target = null;
                this.timer = null;
                this.init();
            }
            init() {
                const template = toast_getTemplate(this.options, toast_LOADING);
                this.$target = $(this.options.target || document.body);
                this.$loading = $(template);
            }
            open() {
                const {$target} = this;
                const originPosition = $target.css("position");
                if ("static" === originPosition) $target.css("position", "relative");
                this.$loading.appendTo($target).removeClass(toast_HIDDEN_CLASSNAME);
                if (this.options.duration > 0) this.timer = setTimeout(this.close.bind(this), this.options.duration);
            }
            close() {
                if (this.timer) {
                    clearTimeout(this.timer);
                    this.timer = null;
                }
                this.$loading.remove();
                this.$loading = null;
                this.$target.css("position", "");
            }
        }
        class DataWatcher {
            constructor() {
                Object.defineProperty(this, "$watcher", {
                    value: {}
                });
                Object.defineProperty(this, "$afterWatcher", {
                    value: {}
                });
                Object.defineProperty(this, "$data", {
                    value: {}
                });
                const bindWatcher = type => (keys, callback) => {
                    const props = {};
                    keys.forEach((key => {
                        if (!this.$watcher[key]) this.$watcher[key] = [];
                        if (!this.$afterWatcher[key]) this.$afterWatcher[key] = [];
                        if ("watch" === type) this.$watcher[key].push(callback); else if ("watchAfter" === type) this.$afterWatcher[key].push(callback);
                        if (Object.prototype.hasOwnProperty.call(this.$data, key)) return;
                        this.$data[key] = this[key];
                        delete this[key];
                        props[key] = {
                            set: value => {
                                this.$data[key] = value;
                                this.$watcher[key].forEach((w => {
                                    try {
                                        null === w || void 0 === w ? void 0 : w(value, key);
                                    } catch (e) {
                                        console.error(e);
                                    }
                                }));
                                this.$afterWatcher[key].forEach((w => {
                                    try {
                                        null === w || void 0 === w ? void 0 : w(value, key);
                                    } catch (e) {
                                        console.error(e);
                                    }
                                }));
                            },
                            get: () => this.$data[key]
                        };
                    }));
                    Object.defineProperties(this, props);
                };
                Object.defineProperty(this, "watch", {
                    value: bindWatcher("watch")
                });
                Object.defineProperty(this, "watchAfter", {
                    value: bindWatcher("watchAfter")
                });
            }
        }
        var sku_change_window;
        const sku_change_EVENT_NAME = "Product::SkuChange";
        const logger = api_logger(sku_change_EVENT_NAME);
        const sku_change_external = null === (sku_change_window = window) || void 0 === sku_change_window ? void 0 : sku_change_window.Shopline.event;
        const skuChange = data => {
            logger.info(`[emit]`, data);
            return sku_change_external.emit(sku_change_EVENT_NAME, {
                data,
                onSuccess: result => {
                    logger.info("success", result);
                },
                onError: error => {
                    logger.error(error);
                }
            });
        };
        skuChange.apiName = sku_change_EVENT_NAME;
        const sku_change = skuChange;
        var sku_changed_window;
        const sku_changed_EVENT_NAME = "Product::SkuChanged";
        const sku_changed_logger = api_logger(sku_changed_EVENT_NAME);
        const sku_changed_external = null === (sku_changed_window = window) || void 0 === sku_changed_window ? void 0 : sku_changed_window.Shopline.event;
        const skuChanged = data => {
            sku_changed_logger.info(`[emit]`, data);
            return sku_changed_external.emit(sku_changed_EVENT_NAME, {
                data,
                onSuccess: result => {
                    sku_changed_logger.info("success", result);
                },
                onError: error => {
                    sku_changed_logger.error(error);
                }
            });
        };
        skuChanged.apiName = sku_changed_EVENT_NAME;
        const sku_changed = skuChanged;
        const ADD_TO_CART = "DataReport::AddToCart";
        const VIEW_CONTENT = "DataReport::ViewContent";
        var view_content_window;
        const view_content_logger = api_logger(`${VIEW_CONTENT} - EMIT`);
        const view_content_external = null === (view_content_window = window) || void 0 === view_content_window ? void 0 : view_content_window.Shopline.event;
        const viewContent = data => {
            view_content_logger.info(data);
            return view_content_external.emit(VIEW_CONTENT, {
                data,
                onSuccess: result => {
                    view_content_logger.info("success", result);
                },
                onError: error => {
                    view_content_logger.error(error);
                }
            });
        };
        viewContent.apiName = VIEW_CONTENT;
        const view_content = viewContent;
        function toast_toast_defineProperty(obj, key, value) {
            if (key in obj) Object.defineProperty(obj, key, {
                value,
                enumerable: true,
                configurable: true,
                writable: true
            }); else obj[key] = value;
            return obj;
        }
        const toast_toast_LOADING = "loading";
        const toast_toast_getTemplate = (options, type = "default") => {
            const templates = {
                [toast_toast_LOADING]: `\n      <div class="comment-toast mp-toast mp-toast--loading mp-toast--loading-style2 mp-toast__hidden ${options.fullscreen && "mp-toast__fullscreen"} ${options.className || ""}">\n        <div class="mp-loading mp-loading--circular mp-toast__loading">\n          <span class="mp-loading__spinner mp-loading__spinner--circular">\n            <svg class="mp-loading__circular" width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">\n              <path d="M18.3333 9.99999C18.3333 14.6024 14.6024 18.3333 10 18.3333C5.39762 18.3333 1.66666 14.6024 1.66666 9.99999C1.66666 5.39762 5.39762 1.66666 10 1.66666" stroke="black" stroke-width="2.5" stroke-linecap="round"/>\n            </svg>\n          </span>\n        </div>\n        <div class="mp-toast__content mp-toast__text">${options.content}</div>\n      </div>\n    `,
                default: `\n      <div class="comment-toast mp-toast mp-toast__hidden ${options.fullscreen && "mp-toast__fullscreen"} ${options.className || ""}">\n        <div class="mp-toast__content mp-toast__inner">${options.content}</div>\n      </div>\n    `
            };
            return templates[type];
        };
        const toast_OPTION_TARGET = "body";
        const toast_defaultOptions = {
            duration: 1500,
            content: "",
            target: toast_OPTION_TARGET
        };
        const toast_toast_HIDDEN_CLASSNAME = "mp-toast__hidden";
        const toast_CONTENT_CLASSNAME = "mp-toast__content";
        class toast_Toast {
            constructor(options = {}) {
                this.options = {
                    ...toast_defaultOptions,
                    fullscreen: !options.target || options.target === toast_OPTION_TARGET,
                    ...options
                };
                this.$toast = null;
                this.$target = null;
                this.timer = null;
                this.instance = null;
                this.render();
            }
            static init(options) {
                return this.getSingleton(options);
            }
            static loading(options) {
                return this.getSingleton(options, toast_toast_LOADING);
            }
            static getSingleton(options = {}, type) {
                let {instance} = this;
                if (!instance) {
                    instance = new toast_Toast(options);
                    this.instance = instance;
                }
                if (instance.type !== type) {
                    instance.type = type;
                    if (instance.$toast) instance.$toast.remove();
                    instance.render();
                }
                instance.open(options.content || "", options.duration);
                return instance;
            }
            render() {
                const template = toast_toast_getTemplate(this.options, this.type || this.options.type);
                this.$toast = $(template);
                this.$target = $(this.options.target);
                const {$target} = this;
                if ("static" === $target.css("position")) $target.css("position", "relative");
                $target.append(this.$toast);
            }
            open(content = "", duration) {
                const {options, $target} = this;
                if ("static" === $target.css("position")) $target.css("position", "relative");
                if (this.timer) {
                    clearTimeout(this.timer);
                    this.timer = null;
                }
                const {$toast} = this;
                const $text = $toast.find(`.${toast_CONTENT_CLASSNAME}`);
                $text.html(content || this.options.content || "");
                $toast.removeClass(toast_toast_HIDDEN_CLASSNAME);
                const durationTime = "number" === typeof duration ? duration : options.duration;
                if (0 !== durationTime) this.timer = setTimeout(this.close.bind(this), durationTime);
            }
            close() {
                if (this.timer) {
                    clearTimeout(this.timer);
                    this.timer = null;
                }
                this.$toast.addClass(toast_toast_HIDDEN_CLASSNAME);
                if ("function" === typeof this.options.onClose) this.options.onClose();
                this.$target.css("position", "");
            }
        }
        toast_toast_defineProperty(toast_Toast, "type", null);
        const EVENT_BUS = {
            QUANTITY_ADD_EVENT: "product:quantity:add",
            QUANTITY_MINUS_EVENT: "product:quantity:minus",
            QUANTITY_MODIFY_EVENT: "product:quantity:modify",
            SKU_INIT_EVENT: "product:sku:init",
            SKU_CHANGE_EVENT: "product:sku:change"
        };
        const TOAST_TYPE = {
            ACTIVE_PURCHASE_LIMIITED: 1,
            PRODUCT_PURCHASE_LIMIITED: 2,
            ACTIVE_NOSTOCK: -1
        };
        const template = saleBuyLimitConfig => {
            switch (null === saleBuyLimitConfig || void 0 === saleBuyLimitConfig ? void 0 : saleBuyLimitConfig.userLimitedType) {
              case TOAST_TYPE.ACTIVE_PURCHASE_LIMIITED:
                return t("productDetail.activityToast.product-limit", {
                    stock: (null === saleBuyLimitConfig || void 0 === saleBuyLimitConfig ? void 0 : saleBuyLimitConfig.acquirePerUserLimit) > 0 ? null === saleBuyLimitConfig || void 0 === saleBuyLimitConfig ? void 0 : saleBuyLimitConfig.acquirePerUserLimit : "0"
                });

              case TOAST_TYPE.PRODUCT_PURCHASE_LIMIITED:
                return t("productDetail.activityToast.price-limit", {
                    num: (null === saleBuyLimitConfig || void 0 === saleBuyLimitConfig ? void 0 : saleBuyLimitConfig.acquirePerUserLimit) > 0 ? null === saleBuyLimitConfig || void 0 === saleBuyLimitConfig ? void 0 : saleBuyLimitConfig.acquirePerUserLimit : "0"
                });

              case TOAST_TYPE.ACTIVE_NOSTOCK:
                return t("productDetail.activityToast.title-limit");

              default:
                return "";
            }
        };
        const defaultOption = {
            id: "",
            productInfo: {}
        };
        class FlashSale {
            constructor(option = {}) {
                this.option = {
                    ...defaultOption,
                    ...option
                };
                this.option.productInfo[this.option.id] = {};
                this.init();
            }
            init() {
                this.toast = new toast_Toast;
                this.bindEventListener();
            }
            bindEventListener() {
                window.SL_EventBus.on(EVENT_BUS.QUANTITY_ADD_EVENT, (([value, selector]) => {
                    if (this.checkData({
                        selector
                    })) {
                        this.getProductNum(value);
                        this.showTips(value);
                    }
                }));
                window.SL_EventBus.on(EVENT_BUS.QUANTITY_MINUS_EVENT, (([value, selector]) => {
                    if (this.checkData({
                        selector
                    })) {
                        this.getProductNum(value);
                        this.showTips(value);
                    }
                }));
                window.SL_EventBus.on(EVENT_BUS.QUANTITY_MODIFY_EVENT, (([value, overStockLimit, selector]) => {
                    if (this.checkData({
                        selector
                    })) {
                        this.getProductNum(value);
                        if (!overStockLimit) this.showTips(value);
                    }
                }));
                window.SL_EventBus.on(EVENT_BUS.SKU_INIT_EVENT, (([sku, id]) => {
                    if (this.checkData({
                        id
                    })) this.dataProcess(sku);
                }));
                window.SL_EventBus.on(EVENT_BUS.SKU_CHANGE_EVENT, (([sku, id]) => {
                    if (this.checkData({
                        id
                    })) {
                        this.dataProcess(sku);
                        this.showTips(this.option.productInfo[this.option.id].productNum);
                        this.compareStock(sku);
                    }
                }));
            }
            compareStock(sku) {
                if ((null === sku || void 0 === sku ? void 0 : sku.stock) <= this.option.productInfo[this.option.id].productNum) this.option.productInfo[this.option.id].productNum = sku.stock;
            }
            checkData(data) {
                var _data$selector, _data$selector$attr;
                if ((null === data || void 0 === data ? void 0 : data.id) === this.option.id || (null === data || void 0 === data ? void 0 : null === (_data$selector = data.selector) || void 0 === _data$selector ? void 0 : null === (_data$selector$attr = _data$selector.attr("id")) || void 0 === _data$selector$attr ? void 0 : _data$selector$attr.indexOf(this.option.id)) > -1) return true;
                return false;
            }
            getProductNum(value) {
                this.option.productInfo[this.option.id].productNum = value;
            }
            dataProcess(sku) {
                var _sku$saleActivityResp;
                const prdInfo = this.option.productInfo[this.option.id];
                if (!(null !== sku && void 0 !== sku && sku.saleActivityResponseList)) {
                    this.option.productInfo[this.option.id] = {};
                    return;
                }
                null === sku || void 0 === sku ? void 0 : null === (_sku$saleActivityResp = sku.saleActivityResponseList) || void 0 === _sku$saleActivityResp ? void 0 : _sku$saleActivityResp.forEach((item => {
                    if (1 === (null === item || void 0 === item ? void 0 : item.promotionType) && 1 === (null === item || void 0 === item ? void 0 : item.promotionSubType)) {
                        var _item$saleBuyLimitCon, _item$skuPromotionPro, _item$skuPromotionPro2;
                        this.option.productInfo[this.option.id].activeTip = !(null !== item && void 0 !== item && null !== (_item$saleBuyLimitCon = item.saleBuyLimitConfig) && void 0 !== _item$saleBuyLimitCon && _item$saleBuyLimitCon.allowBuyOverLimit) ? template(null === item || void 0 === item ? void 0 : item.saleBuyLimitConfig) : "";
                        prdInfo.promotionRemainStock = null === item || void 0 === item ? void 0 : null === (_item$skuPromotionPro = item.skuPromotionProduct) || void 0 === _item$skuPromotionPro ? void 0 : _item$skuPromotionPro.promotionRemainStock;
                        prdInfo.userRemainBuyCount = null === item || void 0 === item ? void 0 : null === (_item$skuPromotionPro2 = item.skuPromotionProduct) || void 0 === _item$skuPromotionPro2 ? void 0 : _item$skuPromotionPro2.userRemainBuyCount;
                    }
                }));
                prdInfo.stock = null === sku || void 0 === sku ? void 0 : sku.stock;
            }
            showTips(value) {
                const prdInfo = this.option.productInfo[this.option.id];
                if (null !== prdInfo && void 0 !== prdInfo && prdInfo.activeTip && -1 !== (null === prdInfo || void 0 === prdInfo ? void 0 : prdInfo.promotionRemainStock) && (null === prdInfo || void 0 === prdInfo ? void 0 : prdInfo.promotionRemainStock) < value) this.toast.open(template({
                    userLimitedType: -1
                })); else if (null !== prdInfo && void 0 !== prdInfo && prdInfo.activeTip && (null === prdInfo || void 0 === prdInfo ? void 0 : prdInfo.userRemainBuyCount) < value) this.toast.open(null === prdInfo || void 0 === prdInfo ? void 0 : prdInfo.activeTip);
            }
        }
        const flashSale = FlashSale;
        class SkuStepper {
            constructor({root, value, min, max, domReady, disabled, onChange}) {
                this.root = root;
                this.data = {
                    min,
                    max,
                    disabled,
                    value
                };
                this.onChange = onChange;
                this.init(domReady);
            }
            init(domReady) {
                if (domReady) {
                    this.$stepper = $(this.root);
                    this.initEvent();
                } else this.createAndInitDom();
                this.toast = new Toast;
            }
            initEvent() {
                if (this.data.disabled) return;
                this.$stepper.children(".stepper-before").on("click", (() => {
                    if (this.data.min < this.data.value) {
                        this.data.value -= 1;
                        this.render();
                        window.SL_EventBus.emit("product:quantity:minus", [ this.data.value, this.root ]);
                    }
                }));
                this.$stepper.children(".stepper-after").on("click", (() => {
                    if (this.data.value < this.data.max) {
                        this.data.value += 1;
                        this.render();
                        window.SL_EventBus.emit("product:quantity:add", [ this.data.value, this.root ]);
                    }
                }));
                this.$stepper.children(".stepper-input").on("input", (e => {
                    const filerValue = e.target.value.replace(/[^\d]/g, "");
                    const value = filerValue ? Number(filerValue) : filerValue;
                    this.data.value = value;
                    this.render();
                }));
                this.$stepper.children(".stepper-input").on("blur", (e => {
                    const value = Number(e.target.value);
                    let overStockLimit = 0;
                    let isReset = 1;
                    if (value > this.data.max) {
                        this.data.value = this.data.max;
                        if (!this.data.disabled) {
                            overStockLimit = 1;
                            this.toast.open(t("common.stock-limit", {
                                stock: this.data.max
                            }), 1e3);
                        }
                    } else if (this.data.min > value) this.data.value = this.data.min; else isReset = 0;
                    window.SL_EventBus.emit("product:quantity:modify", [ this.data.value, overStockLimit, this.root ]);
                    if (isReset) this.render();
                }));
            }
            createAndInitDom() {
                $(this.root).html(`<div>stepper</div>`);
            }
            setSingleDisabled(position, disabled) {
                if (disabled) this.$stepper.children(`.stepper-${position}`).addClass("disabled"); else this.$stepper.children(`.stepper-${position}`).removeClass("disabled");
            }
            setStepperDisabled() {
                if (this.data.disabled) this.$stepper.addClass("disabled"); else this.$stepper.removeClass("disabled");
            }
            setStepperData(obj) {
                this.data = {
                    ...this.data,
                    ...obj
                };
                this.render();
            }
            render() {
                if (this.data.value) {
                    this.setSingleDisabled("before", this.data.min >= this.data.value);
                    this.setSingleDisabled("after", this.data.max <= this.data.value);
                }
                this.$stepper.children(".stepper-input").val(this.data.value);
                this.onChange(this.data.value);
            }
        }
        const sku_stepper = SkuStepper;
        const initValue = 1;
        class SkuQuality {
            constructor({sku, spu, activeSku, id, onChange, dataPool}) {
                this.activeSku = activeSku;
                this.sku = sku;
                this.spu = spu;
                this.id = id;
                this.root = `#product-detail-sku-quantity_${id}`;
                this.dataPool = dataPool || new DataWatcher;
                this.onChange = onChange;
                this.init();
            }
            getMax() {
                if (!this.activeSku) return 999;
                if (this.isTrackStock()) {
                    var _this$activeSku;
                    return (null === (_this$activeSku = this.activeSku) || void 0 === _this$activeSku ? void 0 : _this$activeSku.stock) > 0 ? Math.min(999, this.activeSku.stock) : 1;
                }
                return 999;
            }
            isTrackStock() {
                var _this$activeSku2, _this$activeSku3;
                return !(null !== (_this$activeSku2 = this.activeSku) && void 0 !== _this$activeSku2 && _this$activeSku2.infiniteStock) && !(null !== (_this$activeSku3 = this.activeSku) && void 0 !== _this$activeSku3 && _this$activeSku3.allowOversold);
            }
            init() {
                var _this$spu, _this$activeSku4;
                this.skuStepper = new sku_stepper({
                    domReady: true,
                    root: $(`#product-detail-sku-stepper_${this.id}`),
                    max: this.getMax(),
                    value: initValue,
                    min: 1,
                    disabled: (null === (_this$spu = this.spu) || void 0 === _this$spu ? void 0 : _this$spu.soldOut) || this.isTrackStock() && this.activeSku && (null === (_this$activeSku4 = this.activeSku) || void 0 === _this$activeSku4 ? void 0 : _this$activeSku4.stock) < 1,
                    onChange: num => {
                        var _this$onChange;
                        if (num !== this.dataPool.quantity) this.dataPool.quantity = num;
                        null === (_this$onChange = this.onChange) || void 0 === _this$onChange ? void 0 : _this$onChange.call(this, num);
                    }
                });
                new flashSale({
                    id: `${this.id}`
                }).init();
                this.dataPool.quantity = initValue;
                this.dataPool.watch([ "quantity" ], (() => {
                    this.setCurrentNum(this.dataPool.quantity);
                }));
            }
            render() {
                var _this$activeSku5, _this$activeSku6;
                const showTips = this.isTrackStock() && this.activeSku && (null === (_this$activeSku5 = this.activeSku) || void 0 === _this$activeSku5 ? void 0 : _this$activeSku5.stock) < 10 && (null === (_this$activeSku6 = this.activeSku) || void 0 === _this$activeSku6 ? void 0 : _this$activeSku6.stock) > 0;
                if (showTips) {
                    const content = t(`common.stock-limit`, {
                        stock: this.activeSku.stock
                    });
                    this.setErrorTips(showTips, content);
                } else this.setErrorTips(showTips);
            }
            setErrorTips(show, content) {
                if (show) $(this.root).children(".stepper-tip").html(content).removeClass("hide"); else $(this.root).children(".stepper-tip").addClass("hide");
            }
            setCurrentNum(num) {
                const data = {
                    ...this.skuStepper.data,
                    value: num
                };
                this.skuStepper.setStepperData(data);
            }
            setActiveSku(sku) {
                var _this$activeSku7;
                let current = this.skuStepper.data.value < 0 ? 1 : this.skuStepper.data.value;
                if (!sku) {
                    this.activeSku = null;
                    const stepperData = {
                        value: current,
                        max: 999,
                        disabled: false
                    };
                    this.skuStepper.setStepperData(stepperData);
                    this.render();
                    return;
                }
                this.activeSku = sku;
                if (current > this.getMax()) {
                    current = this.getMax();
                    if (!sku.soldOut) this.skuStepper.toast.open(t(`common.stock-limit`, {
                        stock: current
                    }), 1e3);
                }
                const stepperData = {
                    value: current,
                    max: this.getMax(),
                    disabled: this.spu.soldOut || this.isTrackStock() && this.activeSku && (null === (_this$activeSku7 = this.activeSku) || void 0 === _this$activeSku7 ? void 0 : _this$activeSku7.stock) < 1
                };
                this.skuStepper.setStepperData(stepperData);
                this.render();
            }
        }
        var dist = __webpack_require__("../shared/node_modules/@payment/gateway-sdk/dist/index.js");
        var dist_default = __webpack_require__.n(dist);
        var query_string = __webpack_require__("../shared/node_modules/query-string/index.js");
        const queryStringConfig = {
            options: {
                skipNull: true,
                skipEmptyString: true
            }
        };
        const adaptor = (url, {query, fragmentIdentifier, fullQuery = true} = {}) => {
            const currentUrl = query_string.parseUrl(window.location.href, {
                ...queryStringConfig.options,
                parseFragmentIdentifier: true
            });
            const allQuery = fullQuery ? {
                ...currentUrl.query || {},
                ...query || {}
            } : {
                ...query
            };
            const passUrl = query_string.stringifyUrl({
                url,
                query: allQuery,
                fragmentIdentifier: fragmentIdentifier || currentUrl.fragmentIdentifier
            }, queryStringConfig.options);
            const wholeUrl = `${window.location.protocol}//${window.location.host}${passUrl}`;
            return {
                originUrl: url,
                ...currentUrl,
                query: allQuery,
                url: passUrl,
                wholeUrl
            };
        };
        var logger_dist = __webpack_require__("../shared/node_modules/@funnyecho/logger/dist/index.js");
        var logger_dist_default = __webpack_require__.n(logger_dist);
        var transports = __webpack_require__("../shared/node_modules/@funnyecho/logger/dist/transports/index.js");
        var transports_default = __webpack_require__.n(transports);
        const envConst = {
            DEBUG: "DEBUG",
            APP_ENV: "APP_ENV",
            APP_ENV__DEVELOP: "develop",
            APP_ENV__STAGING: "staging",
            APP_ENV__PREVIEW: "preview",
            APP_ENV__PRODUCT: "product"
        };
        function get(key) {
            return getEnv()[key];
        }
        function isDebugMode() {
            const value = get(envConst.DEBUG);
            return "true" === value || "1" === value;
        }
        function appEnvQuery() {
            return get(envConst.APP_ENV) || "";
        }
        function appEnvInDevelop() {
            return appEnvQuery() === envConst.APP_ENV__DEVELOP;
        }
        function appEnvInStaging() {
            return appEnvQuery() === envConst.APP_ENV__STAGING;
        }
        const env = {
            isDebugMode,
            appEnvQuery,
            appEnvInDevelop,
            appEnvInStaging
        };
        function withShoplineTrackingTransport() {
            const breadCrumbs = [];
            const addBreadCrumbs = payload => {
                breadCrumbs.push(payload);
            };
            const getBreadCrumbs = _breadCrumbs => _breadCrumbs.map((bs => {
                const {category: type, message, eventId} = bs;
                return {
                    type,
                    message,
                    eventId
                };
            }));
            function bubble() {
                return {
                    bubble: (ctx, entry) => {
                        const {owner, level, fields} = entry;
                        const message = `${entry.message}`;
                        const extra = logger_dist_default().mapFieldList(fields);
                        let data = {};
                        switch (level) {
                          case logger_dist_default().LevelEnum.error:
                          case logger_dist_default().LevelEnum.fatal:
                            data = {
                                message,
                                breadCrumbs: getBreadCrumbs(breadCrumbs),
                                owner,
                                extra
                            };
                            window.__SL_Track__.error(owner, data);
                            breadCrumbs.length = 0;
                            break;

                          case logger_dist_default().LevelEnum.info:
                            data = {
                                message,
                                breadCrumbs: getBreadCrumbs(breadCrumbs),
                                owner,
                                extra
                            };
                            window.__SL_Track__.info(owner, data);
                            breadCrumbs.length = 0;
                            break;

                          case logger_dist_default().LevelEnum.debug:
                          default:
                            addBreadCrumbs({
                                message: `${message} ${Object.keys(extra).length ? JSON.stringify(extra) : ""}`,
                                category: "debug",
                                eventId: Date.now()
                            });
                        }
                    }
                };
            }
            if (true) return [ bubble() ];
            return [];
        }
        function withStdoutTransport() {
            if (!(env.appEnvInDevelop() || env.appEnvInStaging())) return [];
            return [ transports_default().withStdout() ];
        }
        function withSentryTransport() {
            if (false) ;
            return [];
        }
        const loggerGetter = function() {
            let _logger;
            return function() {
                if (_logger) return _logger;
                _logger = logger_dist_default().withLogger(null, logger_dist_default().pipeTransport(...withShoplineTrackingTransport(), ...withSentryTransport(), ...withStdoutTransport()));
                logger_dist_default().withGlobalLogger(_logger);
                return _logger;
            };
        }();
        const utils_logger = {
            get logger() {
                return loggerGetter();
            },
            pipeOwner(data) {
                if ("object" !== typeof data) {
                    console.warn("[logger.pipeOwner]的入参需为object");
                    return;
                }
                const {owner, base = loggerGetter(), onTag} = data;
                if (false) ;
                return logger_dist_default().withLogger(base, logger_dist_default().pipeOwner(owner));
            }
        };
        var js_cookie = __webpack_require__("../shared/node_modules/js-cookie/src/js.cookie.js");
        var js_cookie_default = __webpack_require__.n(js_cookie);
        const isProd = [ "product", "preview" ].includes(getEnv().APP_ENV);
        const conversion = error => {
            let content;
            switch (true) {
              case /0401/.test(error.code):
              case /0402/.test(error.code):
                content = t("paypal.error-expired");
                break;

              case /0403/.test(error.code):
                content = t("paypal.error-sold-out");
                break;

              case /0404/.test(error.code):
                content = t("paypal.error-product-limit");
                break;

              case /0005/.test(error.code):
                content = t("paypal.error-network-error");
                break;

              case /0703/.test(error.code):
                content = t("paypal.error-shop-not-exit");
                break;

              default:
                content = (null === error || void 0 === error ? void 0 : error.message) || t("paypal.error-network-error");
            }
            return content;
        };
        const getPaypalNacosConfig = () => {
            var _window$__ENV__;
            return null === (_window$__ENV__ = window.__ENV__) || void 0 === _window$__ENV__ ? void 0 : _window$__ENV__.PAYPAL_CONFIG_V2;
        };
        const getPayPalServerConfig = () => {
            const {enterAccountConfig = {}, ...rest} = SL_State.get("tradeCollectionConfig") || {};
            const intent = enterAccountConfig.manualEnterAccount ? "authorize" : "capture";
            const manualCapture = enterAccountConfig.manualEnterAccount;
            return {
                ...rest,
                intent,
                manualCapture
            };
        };
        const getConfigCommit = config => !!config.commit;
        const paypalConfigKey = [ "paypalMerchantId", "clientId" ];
        const canTrustedPaypalConfig = paypalConfig => {
            const servicesConfig = paypalConfigKey.map((key => paypalConfig[key]));
            if (servicesConfig.some(Boolean) && !servicesConfig.every(Boolean)) return true;
            return false;
        };
        const getQueryParams = (config, {isContinueMode, paypalConfig}) => {
            const {intent} = getPayPalServerConfig();
            const commit = getConfigCommit(config);
            const nacosConfig = getPaypalNacosConfig();
            let queryParams = `intent=${intent}&commit=${commit}`;
            if (config.queryParams) queryParams += `&${config.queryParams}`;
            if (canTrustedPaypalConfig(paypalConfig) && paypalConfig.paypalMerchantId) queryParams += `&merchant-id=${paypalConfig.paypalMerchantId}`;
            if (Array.isArray(nacosConfig)) {
                const setQueryParams = item => {
                    const {key, value, isCoverAll, whitelist, blacklist} = item;
                    const {storeId} = window.Shopline;
                    if (isCoverAll) {
                        if (Array.isArray(blacklist) && !blacklist.includes(storeId)) queryParams += `&${key}=${value}`;
                    } else if (Array.isArray(whitelist) && whitelist.includes(storeId)) queryParams += `&${key}=${value}`;
                };
                nacosConfig.forEach((item => {
                    if ("all" === item.scope) setQueryParams(item); else {
                        if (isContinueMode && "continue" === item.scope) setQueryParams(item);
                        if (!isContinueMode && "payNow" === item.scope) setQueryParams(item);
                    }
                }));
            } else {
                var _window$__ENV__2;
                const {disableFunding} = (null === (_window$__ENV__2 = window.__ENV__) || void 0 === _window$__ENV__2 ? void 0 : _window$__ENV__2.PAYPAL_CONFIG) || {};
                if (isContinueMode) if (disableFunding) queryParams += `&disable-funding=${disableFunding}`;
            }
            return queryParams;
        };
        const SLClientKey = {
            DEV: "AZ-NwCL9u55EJ7x0kR61XcKTCZtMuel8VBMG1dx4T_iJzABABfvw13UeXJAYHOscUNHHsIjLNLoh-pYv",
            PROD: "AYVtr8kMzEyRCw725vQM_-hheFyo1FuWeaup4KPSvU1gg44L-NG5e2PNcwGnMo2MLCzGRg4eVHJhuqBP"
        };
        const slPublicKey = isProd ? SLClientKey.PROD : SLClientKey.DEV;
        const getPaypalKey = paypalConfig => {
            const merchantKey = canTrustedPaypalConfig(paypalConfig) ? paypalConfig.clientId : null;
            return {
                key: merchantKey || slPublicKey,
                expand: {
                    currency: js_cookie_default().get("currency_code") || "USD"
                }
            };
        };
        const Env = {
            Dev: "dev",
            Prod: "prod"
        };
        const SDKName = {
            paypalSPB: "paypalSPB"
        };
        const initialData = {
            env: isProd ? Env.Prod : Env.Dev,
            sdkName: SDKName.paypalSPB,
            domId: "shopline-paypal",
            styleOption: {
                commonStyle: {
                    paypalSPBStyle: {
                        layout: "horizontal",
                        color: "gold",
                        shape: "rect",
                        label: "paypal",
                        tagline: false,
                        height: 55
                    }
                }
            },
            initTimeout: 5e3,
            beforeCreateOrder: async instance => ({
                products: instance.products
            })
        };
        var node_modules_axios = __webpack_require__("../shared/node_modules/axios/index.js");
        var node_modules_axios_default = __webpack_require__.n(node_modules_axios);
        const instance = node_modules_axios_default().create({
            baseURL: "/leproxy/api",
            timeout: 3e4,
            withCredentials: true,
            paramsSerializer(params) {
                return query_string.stringify(params);
            }
        });
        instance.interceptors.response.use((res => {
            const {status, data, config} = res;
            if ("/leproxy" === config.baseURL) {
                if (200 !== status || "0" !== data.rescode) return Promise.reject({
                    message: data.resmsg,
                    ...data
                });
            } else if (200 !== status || !(data.success || "SUCCESS" === data.code)) return Promise.reject(data);
            return data;
        }), (error => Promise.reject(error)));
        const request = instance;
        const legalUrl = "undefined" === typeof window ? "" : window.location.href.replace(/(&?\w+={.*?})|{|}/g, "");
        const extChannelInfo = {
            shopper_action: "CONTINUE",
            sub_channel: "SPB",
            cancel_url: legalUrl,
            landing_page: "LOGIN",
            locale: ""
        };
        const preparePay = params => {
            const {extChannelInfo: ext, ...rest} = params;
            return request.post("/trade/center/pay/pay-pal/prepare-pay", {
                extChannelInfo: JSON.stringify({
                    ...extChannelInfo,
                    ...ext || {}
                }),
                ...rest
            });
        };
        const getPaypalConfig = () => request.get("/trade/pay/payment/paypal/config/data");
        const const_PageType = {
            Home: 0,
            ProductCategory: 1,
            ProductAll: 2,
            ProductDetail: 3,
            ProductSearch: 4,
            MiniCart: 5,
            Cart: 6,
            CheckoutProgress: 7,
            CheckoutConfirm: 8,
            OrderConfirm: 9,
            SignIn: 10,
            SignInSuccess: 11,
            SignUp: 12,
            SignUpSuccess: 13,
            ProductPage: 14,
            UserCenter: 15,
            SalesPromotion: 16,
            OrderDetail: 17,
            OneShop: 18
        };
        const ClickType = {
            SelectContent_Product: 0,
            AddToCart: 1,
            RemoveFromCart: 2,
            CheckoutToCart: 3,
            BeginCheckout: 4,
            CheckoutProgress: 5,
            PlaceOrder: 6,
            Login: 7
        };
        const const_isProd = [ "product", "preview" ].includes(getEnv().APP_ENV);
        const salvageURLMap = {
            stg: {
                single: "https://websdkentmaster0923.myshoplinestg.com/action/event/salvage",
                batch: "https://websdkentmaster0923.myshoplinestg.com/action/event/batchSalvage"
            },
            prd: {
                single: "https://websdkentmaster0923.myshopline.com/action/event/salvage",
                batch: "https://websdkentmaster0923.myshopline.com/action/event/batchSalvage"
            }
        };
        const_isProd ? salvageURLMap.prd : salvageURLMap.stg;
        class GoogleAnalysis {
            constructor(config) {
                this.config = config;
            }
            sendEventLog(eventType, data) {
                const params = {
                    ...data
                };
                if (params && !params.currency) params.currency = js_cookie_default().get("currency_code");
                return [ "event", eventType, params ];
            }
            clickForEnhancedEcom(page, clickType, params) {
                let event;
                let value;
                let res = [];
                switch (clickType) {
                  case const_PageType.CheckoutProgress:
                  case const_PageType.PlaceOrder:
                    event = "set_checkout_option";
                    value = {
                        value: params.amount,
                        checkout_step: params.step
                    };
                    break;

                  default:
                    return res;
                }
                res = this.sendEventLog(event, value);
                return res;
            }
            click(page, type, params) {
                let value;
                let event;
                const res = [];
                switch (type) {
                  case ClickType.SelectContent:
                    event = "select_content";
                    value = {
                        content_type: "product",
                        items: [ {
                            id: params.skuId,
                            name: params.name,
                            price: params.price,
                            variant: params.variant
                        } ]
                    };
                    break;

                  case ClickType.AddToCart:
                    event = "add_to_cart";
                    value = {
                        items: [ {
                            id: skuId,
                            name: params.name,
                            price: params.price
                        } ]
                    };
                    break;

                  case ClickType.RemoveFromCart:
                    event = "remove_from_cart";
                    value = {
                        items: []
                    };
                    if (Array.isArray(params.productItems)) params.productItems.forEach((({skuId, name, price, quantity, variant}) => {
                        value.items.push({
                            id: skuId,
                            name,
                            price,
                            quantity,
                            variant: variant || ""
                        });
                    }));
                    break;

                  default:
                    return [];
                }
                res.push(this.sendEventLog(event, value));
                if (this.config.enableEnhancedEcom) res.push(this.clickForEnhancedEcom(page, type, params));
                return res;
            }
        }
        const ga = new GoogleAnalysis({});
        const dataReport_ga = ga;
        const sendConversion = data => {
            const params = {
                ...data
            };
            if (params && !params.currency) params.currency = js_cookie_default().get("currency_code");
            return [ "event", "conversion", params ];
        };
        const clickAdsData = (page, type) => {
            const res = [];
            switch (page) {
              case const_PageType.ProductDetail:
                switch (type) {
                  case ClickType.AddToCart:
                  case ClickType.BeginCheckout:
                    break;

                  default:
                    return res;
                }
                break;

              case const_PageType.MiniCart:
              case const_PageType.Cart:
                if (type === ClickType.BeginCheckout) ; else return res;
                break;

              case const_PageType.CheckoutProgress:
                if (type === ClickType.CheckoutProgress) ; else return res;
                break;

              case const_PageType.CheckoutConfirm:
                if (type === ClickType.PlaceOrder) ; else return res;
                break;

              case const_PageType.OneShop:
                if (type === ClickType.BeginCheckout) ; else return res;
                break;

              default:
                return res;
            }
            res.push(sendConversion());
            return res;
        };
        const clickFbData = (type, params) => {
            var _params$currency;
            let value = null;
            let event = null;
            let evid = null;
            let res = [];
            if (type === ClickType.AddToCart) {
                value = {
                    content_type: "product_group",
                    content_category: null === params || void 0 === params ? void 0 : params.category,
                    content_ids: null === params || void 0 === params ? void 0 : params.skuId,
                    content_name: null === params || void 0 === params ? void 0 : params.name,
                    value: null === params || void 0 === params ? void 0 : params.price,
                    currency: null !== (_params$currency = null === params || void 0 === params ? void 0 : params.currency) && void 0 !== _params$currency ? _params$currency : js_cookie.get("currency_code")
                };
                event = "AddToCart";
                evid = {
                    eventID: null === params || void 0 === params ? void 0 : params.eventId
                };
                res.push([ "track", event, value, evid ]);
            } else res = [];
            return res;
        };
        var node_modules_uuid = __webpack_require__("../shared/node_modules/uuid/index.js");
        function getEventID() {
            return `${Date.now()}_${(0, node_modules_uuid.v4)().replace(/-/g, "")}`;
        }
        const pageMap = {
            Cart: 60006254,
            MiniCart: 60006262
        };
        const cartPage = {
            Cart: "Cart",
            MiniCart: "MiniCart",
            FilterModal: "FilterModal"
        };
        const hiidoEventStatus = {
            SUCCESS: 1,
            ERROR: 0
        };
        Symbol("REPORT_ADD_CART");
        Symbol("PAYPAL_CLICK");
        const encode = str => {
            var _window, _window2;
            if ("undefined" === typeof window) return "";
            const ec = null === (_window = window) || void 0 === _window ? void 0 : _window.encodeURI(str);
            return null === (_window2 = window) || void 0 === _window2 ? void 0 : _window2.btoa(ec);
        };
        const isFn = object => "function" === typeof object;
        const templateAlias = window.Shopline.uri.alias;
        class TradeReport {
            constructor() {
                this.eventBus = SL_EventBus;
                this.storeCurrency = js_cookie.get("currency_code");
                this.hdPage = {
                    Cart: "cart",
                    MiniCart: "cart"
                };
            }
            touch(data) {
                var _this$eventBus;
                const {pageType, actionType, value} = data;
                const val = {
                    ...value,
                    currency: this.storeCurrency
                };
                const gaParam = dataReport_ga.click(pageType, actionType, val);
                const adsParams = clickAdsData(pageType, actionType, val);
                const fbParams = clickFbData(actionType, val);
                const params = {
                    GAAds: adsParams,
                    GA: gaParam,
                    FBPixel: fbParams
                };
                null === (_this$eventBus = this.eventBus) || void 0 === _this$eventBus ? void 0 : _this$eventBus.emit("global:thirdPartReport", params);
            }
        }
        const setAddtoCart = (payAmount, currency, eventID) => {
            const params = {
                payAmount,
                currency,
                eventId: eventID || `addToCart${getEventID()}`,
                eventTime: Date.now(),
                eventName: "AddToCart"
            };
            return params;
        };
        const hdRpCheckout = (data, id) => {
            var _window$HdSdk, _window$HdSdk$shopTra;
            const products = null === data || void 0 === data ? void 0 : data.map((item => ({
                product_id: item.productSeq,
                variantion_id: item.productSku,
                quantity: item.productNum,
                price: currency.formatNumber(Number(null === item || void 0 === item ? void 0 : item.productPrice) || 0).toString(),
                product_name: item.productName
            })));
            null === (_window$HdSdk = window.HdSdk) || void 0 === _window$HdSdk ? void 0 : null === (_window$HdSdk$shopTra = _window$HdSdk.shopTracker) || void 0 === _window$HdSdk$shopTra ? void 0 : _window$HdSdk$shopTra.report(id, {
                event_name: "105",
                page: "cart",
                products
            });
        };
        const setIniiateCheckout = (seq, needReport) => {
            let eventID;
            if (isFn(needReport)) eventID = needReport();
            const cookieMap = js_cookie.get();
            Object.keys(cookieMap).forEach((key => {
                if (/^\d+_fb_data$/.test(key)) js_cookie.remove(key);
            }));
            js_cookie.set(`${seq}_fb_data`, {
                tp: eventID ? 2 : 1,
                et: Date.now(),
                ed: eventID || getEventID()
            });
        };
        const reportCheckout = data => {
            const {isCart, report, products} = data;
            if (isCart) {
                const event_id = pageMap[templateAlias] ? pageMap[templateAlias] : pageMap.MiniCart;
                hdRpCheckout(products, event_id);
            }
            if (isFn(report)) report();
            sessionStorage.setItem(encode("checkout_track"), "[]");
        };
        new TradeReport;
        function isJsonParse(str) {
            try {
                JSON.parse(str);
            } catch (e) {
                return false;
            }
            return true;
        }
        const checkout_logger = {
            checkout: utils_createLogger("checkout")
        };
        const services = {
            save: async (products, {associateCart = false, useMemberPoint = null, discountCode = null, bundledActivitySeq = null} = {}) => request.post("/trade/center/order/abandoned/save", {
                products,
                associateCart,
                discountCode,
                bundledActivitySeq,
                useMemberPoint
            })
        };
        const RouterPath = {
            SignIn: "/user/signIn",
            Checkout: "/trade/checkout"
        };
        const ADD_TO_CART_EVENT_KEY = "Symbol(ADD_TO_CART)";
        const getCheckoutUrl = (seq, {query = {}, associateCart, abandonedOrderMark = ""} = {}) => {
            const urlPrefix = `${window.location.protocol}//${window.location.host}`;
            const {url} = adaptor(`${urlPrefix}${RouterPath.Checkout}/${seq}`, {
                query: {
                    buyScence: associateCart ? "cart" : "detail",
                    ...query,
                    mark: abandonedOrderMark
                },
                fullQuery: false
            });
            return url;
        };
        const save = async (products, extra = {}) => {
            const {stage, query = {}, associateCart = false} = extra;
            try {
                var _response$data;
                const settleConfig = SL_State.get("tradeSettleConfig");
                const isLogin = SL_State.get("request.cookie.osudb_uid");
                const {onBeforeJump, report, needReport, abandonedOrderSeq, abandonedOrderMark} = extra;
                const needLogin = "ONLY_LOGIN" === (null === settleConfig || void 0 === settleConfig ? void 0 : settleConfig.loginType);
                const {discountCode, ...rest} = extra;
                let _discountCode = discountCode;
                if (!associateCart) {
                    var _tradeExtraInfo$disco;
                    const tradeExtraInfoStr = sessionStorage.getItem("tradeExtraInfo");
                    const tradeExtraInfo = isJsonParse(tradeExtraInfoStr) ? JSON.parse(tradeExtraInfoStr) : {};
                    _discountCode = null === tradeExtraInfo || void 0 === tradeExtraInfo ? void 0 : null === (_tradeExtraInfo$disco = tradeExtraInfo.discountCode) || void 0 === _tradeExtraInfo$disco ? void 0 : _tradeExtraInfo$disco.value;
                }
                const response = abandonedOrderSeq ? await Promise.resolve({
                    data: {
                        seq: abandonedOrderSeq,
                        mark: abandonedOrderMark
                    }
                }) : await services.save(products, {
                    associateCart,
                    discountCode: _discountCode,
                    ...rest
                });
                checkout_logger.checkout.info(response.data);
                const redirectToSignIn = !isLogin && needLogin;
                const checkoutUrl = getCheckoutUrl(response.data.seq, {
                    query: {
                        ...query,
                        spb: redirectToSignIn ? null : query.spb
                    },
                    abandonedOrderMark,
                    associateCart
                });
                SL_EventBus.emit("trade:goToCheckout:report", {
                    data: {
                        event_status: null !== response && void 0 !== response && null !== (_response$data = response.data) && void 0 !== _response$data && _response$data.seq ? hiidoEventStatus.SUCCESS : hiidoEventStatus.ERROR,
                        stage,
                        isCart: associateCart,
                        products,
                        spb: null === query || void 0 === query ? void 0 : query.spb
                    }
                });
                setIniiateCheckout(response.data.seq, needReport);
                const urlPrefix = `${window.location.protocol}//${window.location.host}`;
                if (redirectToSignIn) {
                    const {url} = adaptor(`${urlPrefix}${RouterPath.SignIn}`, {
                        query: {
                            redirectUrl: checkoutUrl
                        },
                        fullQuery: false
                    });
                    "function" === typeof onBeforeJump && onBeforeJump();
                    try {
                        reportCheckout({
                            products,
                            isCart: associateCart,
                            report
                        });
                        if (associateCart) {
                            var _window$SL_EventBus;
                            null === (_window$SL_EventBus = window.SL_EventBus) || void 0 === _window$SL_EventBus ? void 0 : _window$SL_EventBus.emit("global:hdReport:exit", [ "60006254", {
                                event_name: "999",
                                page_dest: `${window.location.href}`
                            } ]);
                        }
                    } catch (e) {
                        console.log(e);
                    }
                    return Promise.resolve({
                        ...response.data,
                        url,
                        needLogin
                    });
                }
                "function" === typeof onBeforeJump && onBeforeJump();
                try {
                    var _window$location;
                    reportCheckout({
                        products,
                        isCart: associateCart,
                        report,
                        needReport
                    });
                    if (associateCart && "/cart" === (null === (_window$location = window.location) || void 0 === _window$location ? void 0 : _window$location.pathname)) {
                        var _window$SL_EventBus2;
                        null === (_window$SL_EventBus2 = window.SL_EventBus) || void 0 === _window$SL_EventBus2 ? void 0 : _window$SL_EventBus2.emit("global:hdReport:exit", [ "60006254", {
                            event_name: "999",
                            page_dest: `${window.location.href}`
                        } ]);
                    }
                } catch (e) {
                    checkout_logger.checkout.info(e);
                }
                return Promise.resolve({
                    url: checkoutUrl,
                    needLogin: false,
                    abandonedInfo: response.data
                });
            } catch (error) {
                SL_EventBus.emit("trade:goToCheckout:report", {
                    data: {
                        event_status: 0,
                        stage,
                        isCart: associateCart,
                        products,
                        spb: null === query || void 0 === query ? void 0 : query.spb
                    }
                });
                return Promise.reject(error);
            }
        };
        const jump = async (products, extra = {}) => {
            const {url} = await save(products, extra);
            window.location.href = url;
        };
        let hasBoundAddToCartEvent = false;
        let addToCartEventName;
        const getAddToCartEventName = () => {
            if (addToCartEventName) return addToCartEventName;
            const eventNameList = window.SL_EventBus.eventNames() || [];
            return eventNameList.find((name => name.toString() === ADD_TO_CART_EVENT_KEY));
        };
        const addToCart = data => window.SL_EventBus.emit(getAddToCartEventName(), data);
        if (!hasBoundAddToCartEvent) {
            hasBoundAddToCartEvent = true;
            window.__SL_TRADE_EVENT__ = window.__SL_TRADE_EVENT__ || {};
            window.__SL_TRADE_EVENT__.addToCart = window.__SL_TRADE_EVENT__.addToCart || addToCart;
        }
        const checkout = {
            jump,
            save
        };
        var isObject = __webpack_require__("../shared/node_modules/lodash/isObject.js");
        var isObject_default = __webpack_require__.n(isObject);
        const loadScript = (src, options) => new Promise((resolve => {
            const scriptTag = document.createElement("script");
            scriptTag.src = src;
            if (options && isObject_default()(options)) Object.entries(options).forEach((([key, value]) => {
                scriptTag[key] = value;
            }));
            const handler = () => {
                scriptTag.removeEventListener("load", handler);
                resolve();
            };
            scriptTag.addEventListener("load", handler);
            if (document.head) document.head.appendChild(scriptTag);
        }));
        const load_script = loadScript;
        const paypal_logger = utils_logger.pipeOwner({
            owner: "PayPal",
            onTag: key => {
                switch (key) {
                  case "abandonedSeq":
                  case "code":
                    return true;

                  default:
                    return false;
                }
            }
        });
        const splitter = ({k, v}) => v ? `[${k}: ${v}]` : "";
        function getPaypalSDK() {
            return dist_default();
        }
        let PayPalReturnUrl = window.location.href;
        const dynamicCallBackName = "rememberedCb";
        const PayPalRememberedScript = callbackName => `https://www.paypal.com/checkoutnow/remembered?callback=${callbackName}`;
        const noop = () => {};
        const paypal_isFn = object => "function" === typeof object;
        const dynamicRemembered = {
            loadingStatus: 0,
            info: {},
            cbFnList: []
        };
        let renderObserver;
        class PayPalSmartPayButton {
            constructor(config) {
                var _document$body, _document$body$datase, _config$timeout;
                const btnShape = "rounded" === (null === (_document$body = document.body) || void 0 === _document$body ? void 0 : null === (_document$body$datase = _document$body.dataset) || void 0 === _document$body$datase ? void 0 : _document$body$datase.button_style) ? "pill" : "rect";
                this.loggerPrefix = `[PayPal][当前dom为:${config.domId}]`;
                this.payMode = config.payMode || "continue";
                this.config = {
                    ...this.config,
                    ...initialData,
                    timeout: {
                        switch: false
                    },
                    commit: getConfigCommit(config),
                    disableFunding: config.disableFunding,
                    domId: config.domId,
                    pageType: config.pageType,
                    stage: config.stage,
                    needReport: config.needReport,
                    styleOption: {
                        commonStyle: {
                            paypalSPBStyle: {
                                ...initialData.styleOption.commonStyle.paypalSPBStyle,
                                ...config.paypalStyle || {},
                                height: this.getDomHeight(config.height),
                                shape: btnShape
                            }
                        }
                    },
                    paypalScriptParams: config.scriptParams || {}
                };
                const {switch: timeoutSwitch, delay} = null !== (_config$timeout = config.timeout) && void 0 !== _config$timeout ? _config$timeout : {};
                if (timeoutSwitch) {
                    this.config.timeout.switch = timeoutSwitch;
                    this.config.timeout.delay = delay && "number" === typeof delay ? delay : initialData.initTimeout;
                }
                this.wrapperClass = config.wrapperClass;
                this.wrapperStyle = config.wrapperStyle;
                this.style = {
                    height: this.getDomHeight(config.height)
                };
                this.products = null;
                this.dynamic = config.dynamic;
                this.jsonpCallback = this.jsonpCallback.bind(this);
                this.onToast = paypal_isFn(config.onToast) ? config.onToast : noop;
                this.onDynamicNotify = paypal_isFn(config.onDynamicNotify) ? config.onDynamicNotify : noop;
                this.onInit = paypal_isFn(config.onInit) ? config.onInit : noop;
                this.beforeCreateOrder = paypal_isFn(config.beforeCreateOrder) ? config.beforeCreateOrder : initialData.beforeCreateOrder;
                this.createOrder = paypal_isFn(config.createOrder) ? config.createOrder : noop;
                this.beforeContinue = paypal_isFn(config.beforeContinue) ? config.beforeContinue : noop;
                this.onError = paypal_isFn(config.onError) ? config.onError : noop;
                this.payNowMode = this.payNowMode.bind(this);
                this.continueMode = this.continueMode.bind(this);
                this.onCancel = paypal_isFn(config.onCancel) ? config.onCancel : noop;
                this.configBeforeRender = paypal_isFn(config.beforeRender) ? config.beforeRender : noop;
                this.afterRender = paypal_isFn(config.afterRender) ? config.afterRender : noop;
                this.preparePayParams = null;
            }
            getDomHeight(height = 45) {
                if (height > 55) {
                    paypal_logger.error(`${this.loggerPrefix}[按钮高度传入异常]`, {
                        height
                    });
                    return 55;
                }
                if (height < 25) {
                    paypal_logger.error(`${this.loggerPrefix}[按钮高度传入异常]`, {
                        height
                    });
                    return 25;
                }
                return height;
            }
            get isContinueMode() {
                return "continue" === this.payMode;
            }
            get isVerticalLayout() {
                return "vertical" === this.config.styleOption.commonStyle.paypalSPBStyle.layout;
            }
            transProducts(products) {
                return products.map((item => ({
                    productNum: item.num,
                    productSeq: item.spuId,
                    productSku: item.skuId,
                    productPrice: item.price
                })));
            }
            onPayPalError(error, type) {
                if ("caught" !== (null === error || void 0 === error ? void 0 : error.message)) {
                    paypal_logger.error(`${this.loggerPrefix}[onError]${splitter({
                        k: "code",
                        v: null === error || void 0 === error ? void 0 : error.code
                    })}${splitter({
                        k: "message",
                        v: (null === error || void 0 === error ? void 0 : error.message) || (null === error || void 0 === error ? void 0 : error.msg)
                    })}`, {
                        ...error,
                        code: null === error || void 0 === error ? void 0 : error.code,
                        message: null === error || void 0 === error ? void 0 : error.message
                    });
                    const text = conversion(error);
                    this.onToast({
                        message: text
                    });
                }
                this.onError(error, type);
            }
            async continueMode() {
                let dataReportReq;
                try {
                    if (paypal_isFn(this.config.needReport)) {
                        var _window;
                        const eventID = this.config.needReport();
                        let price = 0;
                        this.products.forEach((item => {
                            price += item.productPrice * item.productNum;
                        }));
                        dataReportReq = setAddtoCart(price, null === (_window = window) || void 0 === _window ? void 0 : _window.SL_State.get("storeInfo.currency"), `addToCart${eventID}`);
                    }
                } catch (error) {
                    this.onPayPalError(error);
                }
                const {originUrl, query} = adaptor(this.createOrderParams.returnUrl);
                const {engineType, preview, themeId, ignoreRedirect} = query;
                const {url: wrapperUrl} = adaptor(originUrl, {
                    query: {
                        engineType,
                        preview,
                        themeId,
                        ignoreRedirect
                    },
                    fullQuery: false
                });
                const {manualCapture} = getPayPalServerConfig();
                const params = {
                    payMethod: "Paypal",
                    dataReportReq,
                    abandonedOrderInfo: this.preparePayParams,
                    returnUrl: wrapperUrl,
                    extChannelInfo: {
                        manualCapture
                    }
                };
                try {
                    var _this$config$stage;
                    const {data = {}} = await preparePay(params);
                    const {chDealId, returnUrl: continueRedirectUrl} = data;
                    SL_EventBus.emit("trade:spb:report", {
                        data: {
                            event_status: chDealId ? 1 : 0,
                            stage: null !== (_this$config$stage = this.config.stage) && void 0 !== _this$config$stage ? _this$config$stage : this.config.pageType,
                            product: this.products
                        }
                    });
                    PayPalReturnUrl = continueRedirectUrl;
                    paypal_logger.debug(`${this.loggerPrefix}[唤起弹窗成功][createOrder][拿chDealId][${chDealId ? "成功" : "失败"}]`, chDealId ? {
                        ...data
                    } : null);
                    return chDealId;
                } catch (error) {
                    var _this$config$stage2;
                    paypal_logger.debug(`${this.loggerPrefix}[唤起弹窗成功][createOrder][拿chDealId][失败]${splitter({
                        k: "code",
                        v: null === error || void 0 === error ? void 0 : error.code
                    })}${splitter({
                        k: "message",
                        v: (null === error || void 0 === error ? void 0 : error.msg) || (null === error || void 0 === error ? void 0 : error.message)
                    })}`, {
                        ...error
                    });
                    SL_EventBus.emit("trade:spb:report", {
                        data: {
                            event_status: 0,
                            stage: null !== (_this$config$stage2 = this.config.stage) && void 0 !== _this$config$stage2 ? _this$config$stage2 : this.config.pageType,
                            product: this.products
                        }
                    });
                }
            }
            async payNowMode() {
                try {
                    const {chDealId, returnUrl: payNowReturnUrl} = await this.createOrder(this.createOrderParams);
                    PayPalReturnUrl = payNowReturnUrl;
                    paypal_logger.debug(`${this.loggerPrefix}[唤起弹窗成功][createOrder][拿chDealId][${chDealId ? "成功" : "失败"}]`, chDealId ? {
                        chDealId,
                        returnUrl: payNowReturnUrl
                    } : null);
                    return chDealId;
                } catch (error) {
                    const text = conversion(error);
                    this.onToast({
                        message: text
                    });
                    this.onPayPalError(error);
                    return Promise.reject({
                        message: text
                    });
                }
            }
            async onUserCancel(data, {redirect}) {
                paypal_logger.info(`${this.loggerPrefix}[用户关闭PayPal弹窗]`, {
                    abandonedSeq: this.abandonedSeq
                });
                const redirectUrl = await this.onCancel(data);
                if (redirectUrl) redirect(redirectUrl);
            }
            async onCurrentInit(data, actions) {
                if (this.initTimer) clearTimeout(this.initTimer);
                this.initActions = actions;
                paypal_logger.debug(`${this.loggerPrefix}[初始化成功]`);
                this.onInit(data, actions);
            }
            async onClick({fundingSource} = {}, actions) {
                var _this$beforeCreateOrd, _orderParams;
                paypal_logger.info(`${this.loggerPrefix}[按钮点击][点击了${fundingSource}]`);
                let orderParams = await (null === (_this$beforeCreateOrd = this.beforeCreateOrder(this)) || void 0 === _this$beforeCreateOrd ? void 0 : _this$beforeCreateOrd.catch((error => {
                    this.onPayPalError(error);
                    return actions.reject();
                })));
                paypal_logger.debug(`${this.loggerPrefix}[准备唤起弹窗][beforeCreateOrder][参数拼接完成]`);
                if (false === (null === (_orderParams = orderParams) || void 0 === _orderParams ? void 0 : _orderParams.valid)) return actions.reject();
                this.initActions.enable();
                orderParams = orderParams || {
                    products: this.products
                };
                this.createOrderParams = orderParams;
                const {products, ...extra} = orderParams;
                if (!products || products.length <= 0) {
                    this.onPayPalError({
                        message: `products empty, request aborted: ${products}`
                    });
                    return actions.reject();
                }
                if (!this.isContinueMode) return;
                this.products = products;
                const {url: returnUrl, needLogin, abandonedInfo} = await checkout.save(products, {
                    ...extra,
                    stage: this.config.stage,
                    query: {
                        ...extra.query,
                        spb: true
                    }
                });
                this.createOrderParams.returnUrl = returnUrl;
                this.preparePayParams = abandonedInfo;
                if (needLogin) {
                    window.location.href = returnUrl;
                    return actions.reject();
                }
            }
            async onCreateOrder() {
                paypal_logger.debug(`${this.loggerPrefix}[唤起弹窗成功][createOrder][拿chDealId]`);
                try {
                    if (this.isContinueMode) return this.continueMode();
                    return this.payNowMode();
                } catch {
                    return "";
                }
            }
            get abandonedSeq() {
                var _this$createOrderPara, _this$createOrderPara2;
                if (this.isContinueMode) {
                    var _this$preparePayParam;
                    return null === (_this$preparePayParam = this.preparePayParams) || void 0 === _this$preparePayParam ? void 0 : _this$preparePayParam.seq;
                }
                return null === (_this$createOrderPara = this.createOrderParams) || void 0 === _this$createOrderPara ? void 0 : null === (_this$createOrderPara2 = _this$createOrderPara.abandonedOrderSeqInfo) || void 0 === _this$createOrderPara2 ? void 0 : _this$createOrderPara2.seq;
            }
            onContinue() {
                const tipsTxt = this.isContinueMode ? "继续" : "支付";
                paypal_logger.info(`${this.loggerPrefix}[点击${tipsTxt}][准备跳转][onContinue][${PayPalReturnUrl}]`, {
                    jumpUrl: PayPalReturnUrl,
                    abandonedSeq: this.abandonedSeq
                });
                paypal_isFn(this.beforeContinue) && this.beforeContinue({
                    returnUrl: PayPalReturnUrl
                });
                window.location.href = PayPalReturnUrl;
                paypal_logger.info(`${this.loggerPrefix}[点击${tipsTxt}][跳转已触发]`, {
                    abandonedSeq: this.abandonedSeq
                });
                return false;
            }
            setProducts(products) {
                paypal_logger.debug(`${this.loggerPrefix}[更新PayPal商品信息]`, {
                    products
                });
                this.products = this.transProducts(products);
            }
            setDisabled(disabled) {
                if (!this.node) return;
                this.disabled = disabled;
                try {
                    var _this$initActions2;
                    if (disabled) {
                        var _this$initActions;
                        null === (_this$initActions = this.initActions) || void 0 === _this$initActions ? void 0 : _this$initActions.disable();
                        this.createDisabledStyle(this.node);
                        return;
                    }
                    null === (_this$initActions2 = this.initActions) || void 0 === _this$initActions2 ? void 0 : _this$initActions2.enable();
                    this.disabledStyleTag && this.node.parentElement && this.node.parentElement.removeChild(this.disabledStyleTag);
                } catch (err) {
                    console.log("此处报错不影响功能，无需关注", err);
                }
            }
            createStyle(node) {
                const skeleton = document.createElement("div");
                this.skeleton = skeleton;
                skeleton.classList.add("paypal__skeleton--animated");
                const styleTag = document.createElement("style");
                const linearGradient = [ `90deg`, `hsla(0, 0%, 74.5%, 0.2) 25%`, `hsla(0, 0%, 50.6%, 0.24) 37%`, `hsla(0, 0%, 74.5%, 0.2) 63%` ].join(", ");
                const skeletonAnimated = `\n      @keyframes skeleton {\n        0% {\n          background-position: 100% 50%;\n        }\n        100% {\n          background-position: 0 50%;\n        }\n      }\n    `;
                styleTag.innerHTML = this.isContinueMode && !this.isVerticalLayout ? `\n      #${this.config.domId} {\n        overflow: hidden;\n        text-align: center;\n        height: ${this.style.height}px;\n      }\n      /** 背景底色 */\n      #${this.config.domId}.paypal__bg::before,\n      #${this.config.domId}.paypal__bg::after {\n        content:'';\n        position: absolute;\n        top: 0;\n        bottom: 0;\n        left: 0;\n        width: calc(50% - 3px);\n        border-radius: 4px;\n        background-color: #ffc439;\n      }\n      #${this.config.domId}.paypal__bg::after {\n        left: unset;\n        right: 0;\n      }\n      [data-button_style=square] .paypal__bg::before,\n      [data-button_style=square] .paypal__bg::after{\n        border-radius: 0 !important;\n      }\n      [data-button_style=rounded] .paypal__bg::before,\n      [data-button_style=rounded] .paypal__bg::after{\n        border-radius: 9999px !important;\n      }\n    ` : `\n      #${this.config.domId} {\n        min-height: ${this.style.height}px;\n      }\n      `;
                styleTag.innerHTML += `\n\n    #${this.config.domId} {\n      position: relative;\n    }\n    #${this.config.domId} .paypal__skeleton--animated {\n      margin: 0 auto;\n      border-radius: 4px;\n      width: 100%;\n      height: ${this.style.height}px;\n      position: absolute;\n    }\n\n    .paypal__skeleton--animated {\n      background: linear-gradient(${linearGradient});\n      background-size: 400% 100%;\n      animation: skeleton 2s linear infinite;\n    }\n\n    ${skeletonAnimated}\n    `;
                if (!node) return;
                if (this.wrapperClass) node.classList.add(this.wrapperClass);
                if (this.wrapperStyle) {
                    let wrapperStyle = {};
                    const nodeStyleAttr = node.getAttribute("style").replace(/\s+/g, "");
                    const convertInputStyle = stringTypeStyle => {
                        const style = {};
                        const input = stringTypeStyle.split(";");
                        input.forEach((s => {
                            const [k, v] = s.split(":");
                            const key = k.replace(/-[^0-9]/g, (v => v.charAt(1).toUpperCase()));
                            style[key] = v;
                        }));
                        return style;
                    };
                    const convertOutputStyle = cssObjectStyle => {
                        if ("object" !== typeof cssObjectStyle) return "";
                        return Object.entries(cssObjectStyle).map((o => o.join(":"))).join(";").replace(/[A-Z]/g, (v => `-${v.charAt(0).toLowerCase()}`));
                    };
                    if ("string" === typeof this.wrapperStyle) wrapperStyle = {
                        ...convertInputStyle(nodeStyleAttr),
                        ...convertInputStyle(this.wrapperStyle)
                    }; else if ("object" === typeof this.wrapperStyle) wrapperStyle = {
                        ...convertInputStyle(nodeStyleAttr),
                        ...this.wrapperStyle
                    };
                    node.style = convertOutputStyle(wrapperStyle);
                }
                node.parentElement.prepend(styleTag);
                node.appendChild(skeleton);
            }
            createDisabledStyle(node) {
                const styleTag = document.createElement("style");
                this.disabledStyleTag = styleTag;
                styleTag.innerHTML = `\n      #${this.config.domId || "shopline-paypal"}::before {\n        width: 0 !important;\n      }\n      #${this.config.domId || "shopline-paypal"}::after {\n        content: '';\n        display: block;\n        z-index: 100;\n        width: 100% !important;\n        height: ${this.style.height}px;\n        border-radius: 4px;\n        cursor: not-allowed;\n        position: absolute;\n        top: 0;\n        left: 0 !important;\n        background: transparent !important;\n      }\n\n      #${this.config.domId} {\n        opacity: ${this.disabled ? .3 : 1};\n      }\n    `;
                if (!node) return;
                node.parentElement.prepend(styleTag);
            }
            removeSkeleton(node) {
                const {skeleton} = this;
                clearTimeout(this.removeSkeletonTimer);
                this.removeSkeletonTimer = setTimeout((() => {
                    if (node) {
                        node.removeChild(skeleton);
                        if (this.isContinueMode) node.classList.add("paypal__bg");
                    }
                }), 300);
            }
            dynamicNotify(remembered) {
                const {paypal} = remembered || {};
                this.isHidePayPalButton = !paypal;
                if (!paypal && this.onDynamicNotify) this.onDynamicNotify({
                    ...remembered,
                    isHidePayPalButton: !paypal
                });
            }
            jsonpCallback(remembered) {
                paypal_logger.debug(`${this.loggerPrefix}[是否有登录cookie][remembered]`, {
                    remembered
                });
                dynamicRemembered.info = remembered;
                dynamicRemembered.loadingStatus = 2;
                this.dynamicNotify(remembered);
                if (dynamicRemembered.cbFnList) try {
                    dynamicRemembered.cbFnList.forEach((cbFn => cbFn(remembered)));
                    dynamicRemembered.cbFnList = [];
                } catch (e) {
                    dynamicRemembered.cbFnList = [];
                }
            }
            async beforeRender() {
                try {
                    this.configBeforeRender();
                } catch (error) {
                    this.onPayPalError({
                        message: "[beforeRender调用失败]",
                        error
                    });
                }
                let paypalConfig = {};
                try {
                    const {data} = await getPaypalConfig();
                    paypalConfig = data || {};
                } catch (error) {
                    this.onPayPalError({
                        message: "[获取paypal配置失败]",
                        error
                    });
                }
                return {
                    clientKey: getPaypalKey(paypalConfig),
                    paypalQueryParams: getQueryParams(this.config, {
                        isContinueMode: this.isContinueMode,
                        paypalConfig
                    })
                };
            }
            async render() {
                var _this$config$timeout;
                if (this.dynamic) if (2 !== dynamicRemembered.loadingStatus) {
                    if (1 === dynamicRemembered.loadingStatus) {
                        dynamicRemembered.cbFnList.push(this.render.bind(this));
                        return;
                    }
                    dynamicRemembered.loadingStatus = 1;
                    window[dynamicCallBackName] = this.jsonpCallback;
                    try {
                        await load_script(PayPalRememberedScript(dynamicCallBackName));
                        paypal_logger.debug(`${this.loggerPrefix}[加载登录态判定 script]: ${dynamicCallBackName}`);
                    } catch (error) {
                        this.onPayPalError(error);
                    }
                } else this.dynamicNotify(dynamicRemembered.info);
                if (void 0 !== this.isHidePayPalButton && this.isHidePayPalButton) return null;
                if (!this.config.domId || this.rendered) return null;
                const node = document.getElementById(this.config.domId);
                if (!node) {
                    paypal_logger.error(`${this.loggerPrefix}[onError][初始化失败][找不到挂载的DOM]`);
                    return null;
                }
                this.node = node;
                if (null !== (_this$config$timeout = this.config.timeout) && void 0 !== _this$config$timeout && _this$config$timeout.switch) {
                    if (renderObserver) {
                        renderObserver.disconnect();
                        renderObserver = null;
                    }
                    this.initTimer = setTimeout((() => {
                        this.node.innerHTML = "";
                        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver;
                        renderObserver = new MutationObserver((mutations => {
                            mutations.forEach((() => {
                                this.node.innerHTML = "";
                            }));
                        }));
                        const config = {
                            childList: true,
                            attributes: false,
                            subtree: false
                        };
                        node && renderObserver.observe(node, config);
                        setTimeout((() => {
                            if (!renderObserver) return;
                            renderObserver.disconnect();
                            renderObserver = null;
                        }), 5e3);
                        this.initError = true;
                        this.onPayPalError(new Error(`[初始化渲染失败][超时未调用onInit][当前超时时间:${this.config.timeout.delay}ms]`), "initRender");
                        throw new Error(`[初始化渲染失败][超时未调用onInit][当前超时时间:${this.config.timeout.delay}ms]`);
                    }), this.config.timeout.delay);
                }
                this.createStyle(node);
                const {clientKey, paypalQueryParams} = await this.beforeRender();
                const paypalSdkInitParams = {
                    ...this.config,
                    paypalQueryParams,
                    createOrder: this.onCreateOrder.bind(this),
                    createToken: this.onContinue.bind(this),
                    paypalProps: {
                        onClick: this.onClick.bind(this),
                        onError: this.onPayPalError.bind(this),
                        onInit: this.onCurrentInit.bind(this),
                        onCancel: this.onUserCancel.bind(this)
                    }
                };
                const PayPalInstance = new (getPaypalSDK())(clientKey, paypalSdkInitParams);
                PayPalInstance && this.removeSkeleton(node);
                this.rendered = true;
                this.afterRender({
                    dynamicInfo: dynamicRemembered.info
                });
                paypal_logger.debug(`${this.loggerPrefix}[初始化SDK]`, {
                    ...paypalSdkInitParams
                });
                return PayPalInstance;
            }
        }
        const paypal = PayPalSmartPayButton;
        function checkedEvent_defineProperty(obj, key, value) {
            if (key in obj) Object.defineProperty(obj, key, {
                value,
                enumerable: true,
                configurable: true,
                writable: true
            }); else obj[key] = value;
            return obj;
        }
        class EventAddCheckoutEnd {
            constructor(name) {
                checkedEvent_defineProperty(this, "index", 0);
                checkedEvent_defineProperty(this, "name", "event_add_checkout_by_le");
                if (name) this.name = name;
            }
            static getUuid() {
                return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (function(c) {
                    const r = 16 * Math.random() | 0;
                    const v = "x" === c ? r : 3 & r | 8;
                    return v.toString(16);
                }));
            }
            getCheckoutKey() {
                this.index += 1;
                return `${this.name}_${EventAddCheckoutEnd.getUuid()}_${this.index}`;
            }
            getUuidAndMonitorCheckoutEnd(eventName, callback) {
                var _window;
                const key = this.getCheckoutKey();
                null === (_window = window) || void 0 === _window ? void 0 : _window.SL_EventBus.on(eventName, (data => {
                    var _data$data;
                    const {event_status, stage} = null !== (_data$data = data.data) && void 0 !== _data$data ? _data$data : {};
                    if (stage === key) callback(event_status);
                }));
                return key;
            }
        }
        const checkoutEnd = new EventAddCheckoutEnd;
        const OPEN_MINI_CART = Symbol("OPEN_MINI_CART");
        const interior_event_ADD_TO_CART = Symbol("ADD_TO_CART");
        const CONTROL_CART_BASIS = Symbol("CONTROL_CART_BASIS");
        Symbol("TRADE_UPDATE_DETAIL");
        const eventName = {
            view: "101",
            additem: "102",
            updateitem: "103",
            removeitem: "104",
            checkout: "105",
            recommenditem: "106",
            proceed_to_checkout: "107",
            place_order: "108",
            click_component: "109",
            product_view: "110",
            product_share: "111",
            buy_now: "112",
            select_product: "113",
            deselect_product: "114",
            menu_view: "115",
            menu_click: "116",
            catalog_view: "117",
            catalog_click: "118",
            sku_click: "119",
            component_view: "120",
            display_click: "121",
            sort_click: "122",
            select_bundling: "123",
            add_wishlist: "124",
            cancel_wishlist: "125",
            proceed_to_delivery_payment: "126",
            proceed_to_pay: "127",
            proceed_to_delivery: "128",
            quick_payment: "129",
            click_product: "130",
            search_suggest: "131",
            paypal: "132",
            input: "133",
            modify: "134",
            select_shipping: "135",
            select_payment: "136",
            inventory_shortage: "137",
            login_success: "138",
            view_cart: "139",
            leave: "999"
        };
        const eventCategory = {
            order: "101",
            cart: "102",
            email: "103",
            expresscheckoutpage: "104"
        };
        const productType = {
            product: "101",
            addon: "102",
            subscription: "103"
        };
        const hd_const_status = {
            soldout: "101",
            selling: "102"
        };
        const purchaseSource = {
            common_store: "101",
            one_page_store: "102"
        };
        const page = {
            homepage: "101",
            pdp: "102",
            cart: "103",
            order_check_out: "104",
            transaction: "105",
            product_search: "106",
            product_list: "107",
            user_page: "108",
            email: "109",
            expresscheckout: "110",
            "404page": "111",
            call_to_action: "112",
            consumer_home: "113",
            onepage_checkout: "114",
            address_confirm: "115",
            delivery_payment_confirm: "116",
            delivery_confirm: "117",
            payment_confirm: "118",
            addon: "119",
            other: "120",
            landing_page: "121"
        };
        const generalComponent = {
            catalog: "101",
            logo: "102",
            search: "103",
            sign_in_bottom: "104",
            message: "105",
            cart: "106",
            store_language: "107",
            currency: "108",
            search_product: "109",
            H1: "110",
            paragraph: "111",
            single_image: "112",
            slider: "113",
            poster: "114",
            gallery: "115",
            media_lr: "116",
            media_ud: "117",
            end_payment: "118",
            end_email: "119",
            end_fb: "120",
            end_ins: "121",
            end_twitter: "122",
            end_snapchat: "123",
            end_pinterest: "124",
            end_line: "125",
            theme: "126",
            free_layout: "127",
            search_pop: "128",
            search_bar: "129"
        };
        const customComponent = {
            sign_up_tab: "101",
            sign_in_tab: "102",
            line_signin: "103",
            fb_signin: "104",
            sign_in_105: "105",
            sign_up: "106",
            title_component: "107",
            content_component: "108",
            productmoduel_component: "109",
            productlist_component: "110",
            QRcode_component: "111",
            ins_component: "112",
            googlemap_component: "113",
            facebook_component: "114",
            video_component: "115",
            pic_component: "116",
            product_menu: "117",
            pre_order: "118",
            gotoamazon: "119",
            wishlist: "120",
            product_descri: "121",
            deliver_payment: "122",
            score: "123",
            reviews: "123",
            share: "124",
            recommendation: "125",
            checkout: "126",
            removement: "127",
            sign_in_128: "128",
            proceed_to_checkout: "129",
            select_all: "130",
            deselect_all: "131",
            select: "132",
            deselect: "133",
            product_edit: "134",
            subscribe_line: "135",
            back_to_cart: "136",
            place_order: "137",
            buy_now: "138",
            view_more: "139",
            play_video: "140",
            more_bundling: "141",
            rec_turn_page: "142",
            arrival_notice: "143",
            more_reviews: "144",
            consumer_info: "145",
            message: "146",
            order: "147",
            return_order: "148",
            wishlist_149: "149",
            wishlist_turn_page: "150",
            use_coupon: "151",
            sign_in: "152",
            subscription: "153",
            back: "154",
            continue: "155"
        };
        const displayIterm = {
            24: "101",
            48: "102",
            72: "103"
        };
        const sortBy = {
            newestToOldest: "101",
            oldestToNewest: "102",
            priceHighToLow: "103",
            priceLowToHigh: "104",
            default: "999"
        };
        const proListType = {
            category: "101",
            all_product: "102",
            chosen_product: "103"
        };
        const shareDest = {
            line: "101",
            fb: "102",
            message: "103",
            link: "104",
            whatsapp: "105",
            twitter: "106"
        };
        const signinSource = {
            sign_in_bottom: "101",
            order_edit: "102"
        };
        const searchType = {
            user_search: "101",
            suggest_ai: "102",
            suggest_search: "103"
        };
        const inputBox = {
            email: "101",
            first_name: "102",
            last_name: "103",
            country: "104",
            province: "105",
            city: "106",
            district: "107",
            address1: "108",
            address2: "108",
            postcode: "109",
            phone: "110",
            same_address: "111",
            another_address: "112",
            remark: "113"
        };
        const objectType = {
            info: "101",
            address: "102",
            shipping: "103"
        };
        const isFirst = {
            yes: "1",
            no: "0"
        };
        const loginResult = {
            success: "1",
            fail: "0"
        };
        const paramsMapping = {
            event_name: eventName,
            event_category: eventCategory,
            product_type: productType,
            status: hd_const_status,
            purchase_source: purchaseSource,
            page,
            general_component: generalComponent,
            custom_component: customComponent,
            display_iterm: displayIterm,
            sort_by: sortBy,
            pro_list_type: proListType,
            share_dest: shareDest,
            signin_source: signinSource,
            search_type: searchType,
            input_box: inputBox,
            object: objectType,
            isFirst,
            loginResult
        };
        const paramsMappingToArrayKeys = [ "general_component", "custom_component", "status", "product_type" ];
        class TradeHdReport {
            constructor() {
                this.paramsMapping = paramsMapping;
                this.paramsMappingToArrayKeys = paramsMappingToArrayKeys;
            }
            setReportContent(params) {
                const reportContent = {
                    ...params
                };
                const that = this;
                if (reportContent.products && Array.isArray(reportContent.products)) {
                    const keys = [ "product_type", "product_id", "variantion_id", "product_name", "product_price", "position", "status", "quantity", "update_quantity", "price" ];
                    reportContent.products.forEach((spu => {
                        keys.forEach((key => {
                            if (spu[key]) {
                                if (!reportContent[key]) reportContent[key] = [];
                                reportContent[key].push(spu[key]);
                            }
                        }));
                    }));
                    delete reportContent.products;
                }
                Object.entries(reportContent).forEach((([key, value]) => {
                    let trueValue = value;
                    if (key in that.paramsMapping) if (Array.isArray(value)) {
                        if (that.paramsMappingToArrayKeys.indexOf(key) > -1) trueValue = (value || []).map((v => that.paramsMapping[key][v])).join(",");
                    } else trueValue = that.paramsMapping[key][value] || value;
                    if (Array.isArray(trueValue)) trueValue = trueValue.join(",");
                    reportContent[key] = trueValue;
                }));
                const data = {
                    ...null !== reportContent && void 0 !== reportContent ? reportContent : {}
                };
                return data;
            }
            event(reportContent, id) {
                var _window$HdSdk, _window$HdSdk$shopTra;
                const data = this.setReportContent(reportContent);
                null === (_window$HdSdk = window.HdSdk) || void 0 === _window$HdSdk ? void 0 : null === (_window$HdSdk$shopTra = _window$HdSdk.shopTracker) || void 0 === _window$HdSdk$shopTra ? void 0 : _window$HdSdk$shopTra.report(id, data);
            }
        }
        const hidooRp = new TradeHdReport;
        const reportPaypal = (data, cid, ext = {}) => {
            const products = null === data || void 0 === data ? void 0 : data.map((item => ({
                product_id: item.productSeq,
                variantion_id: item.productSku,
                quantity: item.productNum,
                price: currency.formatNumber(Number(null === item || void 0 === item ? void 0 : item.productPrice) || 0).toString(),
                product_name: item.productName
            })));
            const page = "cart";
            hidooRp.event({
                event_name: "quick_payment",
                page,
                products,
                ...ext
            }, cid);
        };
        const proceedToCheckout = ({cid, event_status}) => {
            hidooRp.event({
                event_name: "click_component",
                custom_component: [ "proceed_to_checkout" ]
            }, cid);
            hidooRp.event({
                event_name: "proceed_to_checkout",
                event_status
            }, cid);
        };
        const reportBuyNow = () => {
            SL_EventBus.on("trade:goToCheckout:report", (({data}) => {
                const {event_status, isCart, stage} = data;
                if (isCart) {
                    const cid = pageMap[stage];
                    if (cid) proceedToCheckout({
                        cid,
                        event_status
                    });
                }
            }));
        };
        const quickPayment = () => {
            SL_EventBus.on("trade:spb:report", (({data}) => {
                const {event_status, product, stage} = data;
                if (cartPage[stage]) {
                    const cid = pageMap[stage];
                    reportPaypal(product, cid, {
                        event_status
                    });
                }
            }));
        };
        const listenCartReport = () => {
            reportBuyNow();
            quickPayment();
        };
        const const_DRAWER_EVENT_NAME = "stage:topDrawer";
        const const_DRAWER_OPERATORS = {
            OPEN: "open",
            CLOSE: "close"
        };
        null && Base;
        null && TopDrawer;
        const presetConfig = {
            ai: null,
            t(key) {
                return key;
            },
            lang: "zh-hans-cn"
        };
        function getLangConfig(config) {
            return (null === config || void 0 === config ? void 0 : config.lang) || presetConfig.lang;
        }
        function getRequest(config) {
            return config.ai;
        }
        const config = {
            getLangConfig,
            getRequest
        };
        function catchBizErr(fn) {
            return async function(...args) {
                try {
                    return await fn(...args);
                } catch (e) {
                    if (Reflect.has(e, "code") && Reflect.has(e, "success")) return e;
                    throw e;
                }
            };
        }
        const requestMethodsList = [ "get", "post", "put", "delete", "head", "options", "patch" ];
        function wrapAxios(axiosInstance) {
            const wrapped = catchBizErr(axiosInstance);
            requestMethodsList.forEach((method => {
                wrapped[method] = catchBizErr(axiosInstance[method].bind(axiosInstance));
            }));
            return wrapped;
        }
        function newTransport(axiosInstance) {
            if (!axiosInstance) throw new Error("failed to new transport without AxiosInstance");
            return Object.freeze({
                request: wrapAxios(axiosInstance)
            });
        }
        const transport = {
            newTransport
        };
        class Svc {
            constructor(svcConfig) {
                this._config = svcConfig;
                this._transport = transport.newTransport(config.getRequest(svcConfig));
            }
            get transport() {
                return this._transport;
            }
            get lang() {
                return config.getLangConfig(this._config);
            }
            get request() {
                return this.transport.request;
            }
        }
        let globalSvc;
        function withSvc(svcConfig) {
            globalSvc = new Svc(svcConfig);
        }
        function takeSvc() {
            return globalSvc;
        }
        const svc = {
            withSvc,
            takeSvc
        };
        const KEY_PREFIX = "sl.trade.cart";
        const constant = {
            KEY_PREFIX,
            KEY_CART_ABANDON_INFO: "cartAbOrderSeqInfo"
        };
        class Storage {
            constructor(config) {
                this.prefix = constant.KEY_PREFIX;
                this.config = config;
            }
            setItem(key, value) {
                if (null == value) localStorage.removeItem(this.withKey(key)); else localStorage.setItem(this.withKey(key), value);
            }
            getItem(key) {
                return localStorage.getItem(this.withKey(key));
            }
            withKey(key) {
                return `${this.prefix}.${key}`;
            }
        }
        let globalStorage = new Storage;
        function withStorage(config) {
            globalStorage = new Storage(config);
        }
        function takeStorage() {
            return globalStorage;
        }
        const storage = {
            withStorage,
            takeStorage
        };
        const emitLogger = utils_createLogger("emit");
        const emitter = SL_EventBus;
        const oriEmit = emitter.emit;
        emitter.emit = function(event, data) {
            emitLogger.log(event, data);
            oriEmit.apply(emitter, arguments);
        };
        const utils_event_bus = emitter;
        const internal_constant = {
            endpointCart: "/carts/cart",
            endpointCartItemRemove: "carts/cart/items",
            endpointCartVerify: "/carts/cart/check",
            endpointCartItemNumReduce: "/carts/cart/items_num_reduce",
            endpointVoucher: "/carts/cart/shopping_money",
            endpointCoupon: "/carts/cart/promotion_code",
            memberPoint: "/carts/cart/member-point",
            endpointCouponCode: "/carts/cart/use/promotion-code",
            endpointOrderSaveAbandonOrder: "/trade/center/order/abandoned/save"
        };
        async function getCart(svc, abandonedOrderMark, abandonedOrderSeq) {
            return svc.request.get(internal_constant.endpointCart, {
                params: {
                    abandonedOrderMark,
                    abandonedOrderSeq
                }
            });
        }
        async function deleteCartItemList(svc, skuList) {
            return svc.request.post(internal_constant.endpointCartItemNumReduce, skuList || []);
        }
        async function putCartItem(svc, skuInfo) {
            return svc.request.put(internal_constant.endpointCart, skuInfo);
        }
        async function addCartItem(svc, spuId, skuId, num, dataReportReq) {
            return svc.request.post(internal_constant.endpointCart, {
                item: {
                    spuId,
                    skuId,
                    num
                },
                dataReportReq
            });
        }
        async function verifyCartItemList(svc, itemList) {
            return svc.request.post(internal_constant.endpointCartVerify, itemList || []);
        }
        async function memberPoint(svc, use) {
            return svc.request.get(internal_constant.memberPoint, {
                params: {
                    use
                }
            });
        }
        const cart = {
            getCart,
            deleteCartItemList,
            verifyCartItemList,
            putCartItem,
            addCartItem,
            memberPoint
        };
        async function toggleVoucher(svc, used) {
            return svc.request.get(internal_constant.endpointVoucher, {
                params: {
                    selected: used
                }
            });
        }
        const voucher = {
            toggleVoucher
        };
        async function applyCoupon(svc, couponCode) {
            return svc.request.post(internal_constant.endpointCouponCode, {
                code: couponCode
            });
        }
        async function withdrawCoupon(svc, couponCode) {
            return svc.request.delete(internal_constant.endpointCoupon, {
                data: couponCode
            });
        }
        const coupon = {
            applyCoupon,
            withdrawCoupon
        };
        function reducer(source) {
            function reduce(ctx) {
                const cal = () => ctx;
                cal.next = (extractor, ...args) => {
                    if (!extractor) return reduce(ctx);
                    return reduce(extractor(ctx, ...args));
                };
                return cal;
            }
            return reduce(source);
        }
        function memo() {
            let deps;
            let result;
            return function(getter, ...args) {
                if (null == deps || !compare(deps, args)) {
                    result = getter(...args);
                    deps = args;
                }
                return result;
            };
        }
        function merge(source, target) {
            if (!source) source = {};
            if (!target) return source;
            return {
                ...source,
                ...target
            };
        }
        const helpers = {
            reducer,
            memo,
            merge
        };
        function compare(v1, v2) {
            if (v1 === v2) return true;
            if (null == v1 || null == v2) return false;
            const t1 = typeof v1;
            const t2 = typeof v2;
            if (t1 !== t2) return false;
            if ("function" === t1) return false;
            if (Array.isArray(v1) && Array.isArray(v2)) {
                const l1 = v1.length;
                const l2 = v2.length;
                if (l1 !== l2) return false;
                let i = 0;
                for (;i < l1; ++i) {
                    const i1 = v1[i];
                    const i2 = v2[i];
                    if (!compare(i1, i2)) return false;
                }
                return i === l2;
            }
            return false;
        }
        async function saveAbandonOrder(svc, config) {
            return svc.request.post(internal_constant.endpointOrderSaveAbandonOrder, {
                associateCart: true,
                abandonedOrderSeqInfo: config.abandonedOrderSeqInfo || null,
                discountCode: config.discountCode || null,
                products: config.products || []
            });
        }
        function withAbandonOrderInfo(config, seq, mark) {
            if (!seq) return config;
            return helpers.merge(config, {
                abandonedOrderSeqInfo: {
                    seq,
                    mark
                }
            });
        }
        function withAbandonOrderDiscountCode(config, discountCode) {
            if (!discountCode) return config;
            return helpers.merge(config, {
                discountCode
            });
        }
        function withAbandonOrderProductList(config, productList) {
            if (!productList) return config;
            return helpers.merge(config, {
                products: productList
            });
        }
        const order = {
            saveAbandonOrder,
            withAbandonOrderInfo,
            withAbandonOrderDiscountCode,
            withAbandonOrderProductList
        };
        const responseCode = {
            SUCCESS: "SUCCESS",
            FA_INVALID_PARAMS: "FA_INVALID_PARAMS",
            FA_COUPON_INVALID_CODE: "FA_COUPON_INVALID_CODE",
            FA_PRODUCT_VALIDATE: "FA_PRODUCT_VALIDATE",
            FA_PRODUCT_CHANGED: "FA_PRODUCT_CHANGED",
            FA_PRODUCT_OVERFLOW: "FA_PRODUCT_OVERFLOW",
            FA_PRODUCT_ACTIVE_EMPTY: "FA_PRODUCT_ACTIVE_EMPTY",
            FA_PRODUCT_SOLD_OUT: "FA_PRODUCT_SOLD_OUT",
            FA_PRODUCT_QUANTITY: "FA_PRODUCT_QUANTITY",
            FA_CHECKOUT_CANCELED: "FA_CHECKOUT_CANCELED"
        };
        const cartQuantity = {
            MAX_CART_ITEM_LIST_QUANTITY: 99,
            MAX_CART_ITEM_QUANTITY: 999
        };
        function getActiveCartItemList(model) {
            const activeItems = model.activeItems || [];
            return activeItems.reduce(((list, item) => list.concat(item.itemList || [])), []);
        }
        function getInactiveCartItemList(model) {
            return model.inactiveItems || [];
        }
        function getCartItemList(model) {
            return [ ...getActiveCartItemList(model), ...getInactiveCartItemList(model) ];
        }
        function getActiveCartItemListQuantity(model) {
            return getActiveCartItemList(model).length;
        }
        function getInactiveCartItemListQuantity(model) {
            return getInactiveCartItemList(model).length;
        }
        function getCartItemListQuantity(model) {
            return getActiveCartItemListQuantity(model) + getInactiveCartItemListQuantity(model);
        }
        function isCartItemListQuantityOverflow(model) {
            return getCartItemListQuantity(model) > cartQuantity.MAX_CART_ITEM_LIST_QUANTITY;
        }
        function isActiveCartItemListQuantityOverflow(model) {
            return getActiveCartItemListQuantity(model) > cartQuantity.MAX_CART_ITEM_LIST_QUANTITY;
        }
        function getSkuQuantity(model) {
            if (!model) return 0;
            return model.count || 0;
        }
        function getPromotionInfo(model) {
            return null === model || void 0 === model ? void 0 : model.promotionCodeDTO;
        }
        function getVoucherInfo(model) {
            return null === model || void 0 === model ? void 0 : model.shoppingMoneyDTO;
        }
        const model_cart = {
            getActiveCartItemList,
            getInactiveCartItemList,
            getCartItemList,
            getActiveCartItemListQuantity,
            getInactiveCartItemListQuantity,
            getCartItemListQuantity,
            isCartItemListQuantityOverflow,
            isActiveCartItemListQuantityOverflow,
            getSkuQuantity,
            getPromotionInfo,
            getVoucherInfo
        };
        const stockType = {
            LIMITED: 0,
            UNLIMITED: 1,
            OVERSOLD: 2
        };
        function isProductOnSale(vo) {
            if (!vo) return false;
            if (vo.stock > 0) return true;
            return vo.stockType === stockType.OVERSOLD || vo.stockType === stockType.UNLIMITED;
        }
        function isStockNotLimited(vo) {
            if (!vo) return false;
            return vo.stockType === stockType.OVERSOLD || vo.stockType === stockType.UNLIMITED;
        }
        const productStock = {
            isProductOnSale,
            isStockNotLimited
        };
        const priceType = {
            NORMAL: 0,
            MEMBER: 1,
            SEC_KILL: 2,
            NTH_DISCOUNT: 3
        };
        function isNthDiscount(vo) {
            if (!vo) return false;
            return vo.priceType === priceType.NTH_DISCOUNT;
        }
        const productPriceType = {
            isNthDiscount
        };
        function has(o, k) {
            if (!o || !k) return false;
            return Object.prototype.hasOwnProperty.call(o, k);
        }
        function isNilObject(o) {
            if (!o) return true;
            return 0 === Object.keys(o).length;
        }
        const object = {
            has,
            isNilObject
        };
        function getSpuId(model) {
            if (!model) return "";
            return model.spuId || "";
        }
        function getSkuId(model) {
            if (!model) return "";
            return model.skuId || "";
        }
        function getGroupId(model) {
            if (!model) return "";
            return model.groupId || "";
        }
        function getParentSkuId(model) {
            if (!model) return "";
            return model.parentSkuId || "";
        }
        function getProductSource(model) {
            if (!model) return "";
            return model.productSource || "";
        }
        function getQuantity(model) {
            if (!model) return 0;
            return model.num || 0;
        }
        function getStock(model) {
            if (!model) return 0;
            return model.stock || 0;
        }
        function getPriceType(model) {
            if (!model) return priceType.NORMAL;
            return model.priceType;
        }
        function cartItem_isProductOnSale(model) {
            return productStock.isProductOnSale(model);
        }
        function isProductQuantityAvailable(model) {
            if (!model) return false;
            const quantity = getQuantity(model);
            if (quantity <= 0) return false;
            if (quantity > cartQuantity.MAX_CART_ITEM_QUANTITY) return false;
            const stock = getStock(model);
            if (quantity <= stock) return true;
            return productStock.isStockNotLimited(model);
        }
        function isProductQuantityOverflow(model) {
            return getQuantity(model) > cartQuantity.MAX_CART_ITEM_QUANTITY;
        }
        function getUniqueID(model) {
            if (!model) return "";
            return `${model.groupId}${model.spuId}.${model.skuId}`;
        }
        function filterOnSaleProduct(list) {
            return filter(list, productStock.isProductOnSale);
        }
        function mergeNthProduct(list) {
            if (!list) return [];
            const productIndexMap = {};
            const result = [];
            for (let i = 0; i < list.length; ++i) {
                const item = list[i];
                if (object.has(productIndexMap, `${item.groupId}${item.skuId}`)) {
                    const pushedItem = result[productIndexMap[`${item.groupId}${item.skuId}`]];
                    if (productPriceType.isNthDiscount(item)) {
                        item.num += pushedItem.num;
                        result[productIndexMap[`${item.groupId}${item.skuId}`]] = item;
                    } else pushedItem.num += item.num;
                } else {
                    productIndexMap[`${item.groupId}${item.skuId}`] = result.length;
                    result.push({
                        ...item
                    });
                }
            }
            return result;
        }
        function isCartItemListOverflow(list) {
            if (!list) return false;
            return list.length > cartQuantity.MAX_CART_ITEM_LIST_QUANTITY;
        }
        function filterProductInGroup(list, groupId) {
            if (!list || !groupId) return [];
            return filter(list, (model => getGroupId(model) === groupId));
        }
        function groupProductsWithSkuId(list, skuId) {
            if (!list || !skuId) return [];
            return filter(list, (model => {
                if (getSkuId(model) === skuId) return true;
                return getParentSkuId(model) === skuId;
            }));
        }
        function filterProductsWithParentSkuId(list, skuId) {
            if (!list || !skuId) return [];
            return filter(list, (model => {
                if (getSkuId(model) === skuId) return false;
                return getParentSkuId(model) === skuId;
            }));
        }
        function findProductWithGroupIdAndSkuId(list, groupId, skuId) {
            if (!list || !skuId) return [];
            if (!groupId) groupId = "0";
            return cartItem_find(list, (model => {
                if (getSkuId(model) !== skuId) return false;
                let targetGroupId = getGroupId(model);
                if (!targetGroupId) targetGroupId = "0";
                return targetGroupId === groupId;
            }));
        }
        const cartItem = {
            getUniqueID,
            getPriceType,
            getSpuId,
            getSkuId,
            getGroupId,
            getProductSource,
            getQuantity,
            isProductOnSale: cartItem_isProductOnSale,
            isProductQuantityAvailable,
            isProductQuantityOverflow,
            isCartItemListOverflow,
            mergeNthProduct,
            filterOnSaleProduct,
            filterProductInGroup,
            groupProductsWithSkuId,
            filterProductsWithParentSkuId,
            findProductWithGroupIdAndSkuId
        };
        function filter(list, filterFn) {
            if (!list || "function" !== typeof filterFn) return [];
            return list.filter(filterFn);
        }
        function cartItem_find(list, filterFn) {
            if (!list || "function" !== typeof filterFn) return [];
            return list.find(filterFn);
        }
        function isOk(vo) {
            if (!vo) return false;
            return vo.code === responseCode.SUCCESS;
        }
        function is(vo, code) {
            if (!vo || !code) return false;
            return vo.code === code;
        }
        function batchIs(vo, code) {
            if (!vo || !code) return false;
            try {
                return code.split(",").includes(vo.code);
            } catch {
                return false;
            }
        }
        const vo_responseCode = {
            is,
            isOk,
            batchIs
        };
        function getCode(model) {
            if (!model) return "";
            return model.code;
        }
        function getData(model) {
            if (!model) return null;
            return model.data;
        }
        function isResolved(model) {
            if (!model) return false;
            return true === model.success && vo_responseCode.isOk(model);
        }
        function rejectWithCode(code = "") {
            return {
                code,
                success: false
            };
        }
        function resolveWithData(data = void 0) {
            return {
                code: responseCode.SUCCESS,
                success: true,
                data
            };
        }
        const response = {
            getCode,
            getData,
            isResolved,
            rejectWithCode,
            resolveWithData
        };
        function promotionCode_getCode(model) {
            if (!model) return;
            return model.promotionCode || "";
        }
        const promotionCode = {
            getCode: promotionCode_getCode
        };
        const verifyType = {
            NIL: 0,
            SOLD_OUT: 1,
            UNDER_STOCK: 2,
            OFF_SHELVED: 3,
            DELETED: 4,
            PRODUCT_LIMIT: 5,
            USER_LIMIT: 6,
            PRODUCT_UNDER_STOCK: 7
        };
        const ErrorTypeEnum = {
            SOLD_OUT: "SOLD_OUT",
            STOCK_OVER: "STOCK_OVER",
            SHELF_OFF: "SHELF_OFF",
            DELETE: "DELETE",
            LIMITED_ACTIVE_SKU_OVER: "LIMITED_ACTIVE_SKU_OVER",
            LIMITED_ACTIVE_OVER: "LIMITED_ACTIVE_OVER",
            LIMITED_ACTIVE_STOCK_OVER: "LIMITED_ACTIVE_STOCK_OVER",
            MAIN_PRODUCT_ERROR: "MAIN_PRODUCT_ERROR",
            PURCHASE_LESS_MOQ: "PURCHASE_LESS_MOQ",
            GIFT_INVALID: "GIFT_INVALID"
        };
        function cartChangeItem_getSkuId(model) {
            if (!model) return "";
            return model.skuId || "";
        }
        function cartChangeItem_getGroupId(model) {
            if (!model) return "";
            return model.groupId || "";
        }
        function cartChangeItem_getStock(model) {
            if (!model) return 0;
            return model.stock || 0;
        }
        function getVerifyType(model) {
            if (!model) return verifyType.NIL;
            switch (model.errorInfo.errorType) {
              case ErrorTypeEnum.SOLD_OUT:
                return verifyType.SOLD_OUT;

              case ErrorTypeEnum.STOCK_OVER:
                return verifyType.UNDER_STOCK;

              case ErrorTypeEnum.SHELF_OFF:
              case ErrorTypeEnum.GIFT_INVALID:
                return verifyType.OFF_SHELVED;

              case ErrorTypeEnum.DELETE:
                return verifyType.DELETED;

              case ErrorTypeEnum.LIMITED_ACTIVE_SKU_OVER:
                return verifyType.PRODUCT_LIMIT;

              case ErrorTypeEnum.LIMITED_ACTIVE_OVER:
                return verifyType.USER_LIMIT;

              case ErrorTypeEnum.LIMITED_ACTIVE_STOCK_OVER:
                return verifyType.PRODUCT_UNDER_STOCK;

              default:
                return verifyType.NIL;
            }
        }
        const cartChangeItem = {
            getSkuId: cartChangeItem_getSkuId,
            getStock: cartChangeItem_getStock,
            getVerifyType,
            getGroupId: cartChangeItem_getGroupId
        };
        function noError(vo) {
            return !vo || !vo.verifyType || vo.verifyType === verifyType.NIL;
        }
        function hasError(vo) {
            return !noError(vo);
        }
        function isUnderStock(vo) {
            return (null === vo || void 0 === vo ? void 0 : vo.verifyType) === verifyType.UNDER_STOCK;
        }
        const productVerifyType = {
            noError,
            hasError,
            isUnderStock
        };
        function makeVerifyList(cartItemList, checkList) {
            const checkItemMap = (checkList || []).reduce(((result, item) => {
                result[`${cartChangeItem.getGroupId(item)}-${cartChangeItem.getSkuId(item)}`] = item;
                return result;
            }), {});
            const results = [];
            (cartItemList || []).forEach((item => {
                if (item) {
                    const changeItem = checkItemMap[`${cartItem.getGroupId(item)}-${cartItem.getSkuId(item)}`];
                    results.push({
                        verifyType: cartChangeItem.getVerifyType(changeItem),
                        cartItem: item,
                        cartChangeItem: changeItem
                    });
                }
            }));
            return results;
        }
        function isVerifyFailed(list) {
            if (!Array.isArray(list)) return false;
            if (list.length <= 0) return false;
            return list.find((item => productVerifyType.hasError(item)));
        }
        function filterFailedList(list) {
            if (!Array.isArray(list)) return [];
            if (list.length <= 0) return [];
            return list.filter((item => productVerifyType.hasError(item)));
        }
        function getVerifiedCartItemList(list) {
            if (!list || list.length <= 0) return [];
            return list.map((verifyItem => {
                const {cartItem, cartChangeItem} = verifyItem;
                const {errorInfo} = cartChangeItem || {};
                if (!errorInfo) return {
                    ...cartItem
                };
                const {targetNum} = errorInfo;
                if (targetNum > 0) return {
                    ...cartItem,
                    num: targetNum
                };
                return null;
            })).filter((v => !!v));
        }
        const cartVerifyItem = {
            makeVerifyList,
            isVerifyFailed,
            filterFailedList,
            getVerifiedCartItemList
        };
        var hamon_dist = __webpack_require__("./node_modules/@funnyecho/hamon/dist/index.js");
        const verifyingProductOverflow = new hamon_dist.AsyncSeriesBailHook;
        const verifyingActiveProductEmpty = new hamon_dist.AsyncSeriesBailHook;
        const verifyingProductSoldOut = new hamon_dist.AsyncSeriesBailHook((item => cartItem.getUniqueID(item)));
        const verifyingProductQuantityInvalid = new hamon_dist.AsyncSeriesBailHook((item => cartItem.getUniqueID(item)));
        const productVerified = new hamon_dist.AsyncSeriesBailHook;
        const hooks = {
            verifyingProductOverflow,
            verifyingActiveProductEmpty,
            verifyingProductSoldOut,
            verifyingProductQuantityInvalid,
            productVerified
        };
        const CartEventBusEnum = {
            UPDATE: "cart:update"
        };
        const CartInfoKey = "cartInfo";
        class CartService {
            constructor(svcAdapter, storageAdapter) {
                this._svc = svcAdapter;
                this._storage = storageAdapter;
                this._cartDetail = SL_State.get(CartInfoKey) || null;
                this._inactiveCartItemListMemo = helpers.memo();
                this._activeCartItemListMemo = helpers.memo();
                this._cartItemListMemo = helpers.memo();
                utils_event_bus.on(CartEventBusEnum.UPDATE, (data => {
                    this._cartDetail = data;
                }));
            }
            get inactiveCartItemList() {
                return this._inactiveCartItemListMemo((cartDetail => helpers.reducer(cartDetail).next(model_cart.getInactiveCartItemList).next(cartItem.mergeNthProduct)()), this.cartDetail);
            }
            get activeCartItemList() {
                return this._activeCartItemListMemo((cartDetail => helpers.reducer(cartDetail).next(model_cart.getActiveCartItemList).next(cartItem.mergeNthProduct)()), this.cartDetail);
            }
            get cartItemList() {
                return this._cartItemListMemo((cartDetail => helpers.reducer(cartDetail).next(model_cart.getCartItemList).next(cartItem.mergeNthProduct)()), this.cartDetail);
            }
            get cartDetail() {
                return this._cartDetail;
            }
            async getCartDetail() {
                const res = await cart.getCart(this._svc);
                if (response.isResolved(res)) {
                    const {data} = res;
                    this._cartDetail = data;
                    SL_State.set(CartInfoKey, data);
                    utils_event_bus.emit(CartEventBusEnum.UPDATE, data);
                }
                return res;
            }
            async updateCartState() {
                const res = await cart.getCart(this._svc);
                if (response.isResolved(res)) {
                    const {data} = res;
                    this._cartDetail = data;
                    SL_State.set(CartInfoKey, data);
                }
                return res;
            }
            async rerenderCartDom() {
                await utils_event_bus.emit(CartEventBusEnum.UPDATE, this._cartDetail);
            }
            async addSku(spuId, skuId, quantity, dataReportReq) {
                if (!spuId || !skuId || quantity < 0) return response.rejectWithCode(responseCode.FA_INVALID_PARAMS);
                const res = await cart.addCartItem(this._svc, spuId, skuId, quantity, dataReportReq);
                if (response.isResolved(res)) await this.getCartDetail();
                return res;
            }
            async editSku(spuId, skuId, num, groupId, productSource) {
                if (!spuId || !skuId || num < 0) return response.rejectWithCode(responseCode.FA_INVALID_PARAMS);
                const skuInfo = {
                    spuId,
                    skuId,
                    num,
                    groupId,
                    productSource
                };
                const res = await cart.putCartItem(this._svc, skuInfo);
                if (response.isResolved(res)) await this.getCartDetail();
                return res;
            }
            async removeSkuList(skuInfoList) {
                if (Array.isArray(skuInfoList) && skuInfoList.length) {
                    const res = await cart.deleteCartItemList(this._svc, skuInfoList || []);
                    if (response.isResolved(res)) await this.getCartDetail();
                    return res;
                }
                return response.resolveWithData();
            }
            getCheckoutParams(itemList) {
                var _this$cartDetail, _this$cartDetail$memb;
                const discountCode = helpers.reducer(this.cartDetail).next(model_cart.getPromotionInfo).next(promotionCode.getCode)();
                const useMemberPoint = null === (_this$cartDetail = this.cartDetail) || void 0 === _this$cartDetail ? void 0 : null === (_this$cartDetail$memb = _this$cartDetail.memberPointInfo) || void 0 === _this$cartDetail$memb ? void 0 : _this$cartDetail$memb.use;
                let abandonSeq = null;
                let abandonMark = null;
                const rawAbandonInfoFromCache = this._storage.getItem(constant.KEY_CART_ABANDON_INFO);
                if (rawAbandonInfoFromCache) ({mark: abandonMark, seq: abandonSeq} = JSON.parse(rawAbandonInfoFromCache));
                return helpers.reducer({
                    associateCart: true,
                    useMemberPoint
                }).next(discountCode ? order.withAbandonOrderDiscountCode : null, discountCode).next(abandonSeq ? order.withAbandonOrderInfo : null, abandonSeq, abandonMark).next(order.withAbandonOrderProductList, (itemList || []).map((item => ({
                    productSku: item.skuId,
                    productSeq: item.spuId,
                    productNum: item.num,
                    productPrice: item.price,
                    productName: item.name,
                    groupId: item.groupId,
                    productSource: item.productSource
                }))))();
            }
            async toggleVoucher(used) {
                const res = await voucher.toggleVoucher(this._svc, !!used);
                if (response.isResolved(res)) await this.getCartDetail();
                return res;
            }
            async applyCoupon(couponCode) {
                if (!couponCode) return response.rejectWithCode(responseCode.FA_COUPON_INVALID_CODE);
                const res = await coupon.applyCoupon(this._svc, couponCode);
                if (response.isResolved(res)) await this.getCartDetail();
                return res;
            }
            async withdrawCoupon() {
                const couponCode = helpers.reducer(this._cartDetail).next(model_cart.getPromotionInfo).next(promotionCode.getCode)();
                if (!couponCode) return response.rejectWithCode(responseCode.FA_COUPON_INVALID_CODE);
                const res = await coupon.withdrawCoupon(this._svc, couponCode);
                if (response.isResolved(res)) await this.getCartDetail();
                return res;
            }
            async verifyCartItemList(cartItemList) {
                if (!cartItemList) cartItemList = this.cartItemList;
                return this._verifyCartItemList(cartItemList);
            }
            async _verifyCartItemList(cartItemList) {
                if (!Array.isArray(cartItemList)) return response.rejectWithCode(responseCode.FA_INVALID_PARAMS);
                if (cartItemList.length <= 0) if (false !== await hooks.verifyingActiveProductEmpty.callPromise()) return response.rejectWithCode(responseCode.FA_PRODUCT_ACTIVE_EMPTY);
                const checkRes = await cart.verifyCartItemList(this._svc, cartItemList.map((item => ({
                    spuId: cartItem.getSpuId(item),
                    skuId: cartItem.getSkuId(item),
                    num: cartItem.getQuantity(item),
                    groupId: cartItem.getGroupId(item),
                    productSource: cartItem.getProductSource(item)
                }))).filter((i => !!i.spuId && !!i.skuId)));
                if (!response.isResolved(checkRes)) return checkRes;
                return response.resolveWithData(cartVerifyItem.makeVerifyList(cartItemList, response.getData(checkRes).checkItemList));
            }
            async getMemberPoint(use) {
                const res = await cart.memberPoint(this._svc, use);
                return res;
            }
        }
        const service = {
            CartService,
            CartEventBusEnum,
            cartEventBus: utils_event_bus
        };
        function withCartService(svcAdapter, storageAdapter) {
            window._sl_cart__cart_service__ = new service.CartService(svcAdapter, storageAdapter);
        }
        function takeCartService() {
            return window._sl_cart__cart_service__;
        }
        const service_cart = {
            withCartService,
            takeCartService,
            eventBusEnum: service.CartEventBusEnum,
            eventBus: service.cartEventBus
        };
        let initialized = false;
        function init() {
            if (initialized) return;
            initialized = true;
            svc.withSvc({
                ai: request
            });
            service_cart.withCartService(svc.takeSvc(), storage.takeStorage());
        }
        const script_service = {
            init
        };
        let miniCartScriptPromise;
        const dynamicImportMiniCart = async () => {
            if (miniCartScriptPromise) return miniCartScriptPromise;
            miniCartScriptPromise = new Promise(((resolve, reject) => {
                const script = document.createElement("script");
                const {js} = window.__CHUNK_URL__.miniCart;
                document.body.appendChild(script);
                script.onload = () => {
                    resolve();
                };
                script.onerror = reject;
                script.src = js;
            }));
            return miniCartScriptPromise;
        };
        const CLOSE_MINI_CART = Symbol("CLOSE_MINI_CART");
        const OPEN_TOP_CART = Symbol("OPEN_TOP_CART");
        const cartOpenType = SL_State.get("theme.settings.cart_open_type");
        script_service.init();
        if (window.location.pathname.includes("/cart")) dynamicImportMiniCart(); else if ("newpage" !== cartOpenType) setTimeout(dynamicImportMiniCart, 6e3);
        const interior = window.SL_EventBus;
        const globalEvent_noop = () => {};
        listenCartReport();
        interior.on(OPEN_MINI_CART, (async ({data = {}, onSuccess = globalEvent_noop} = {}) => {
            null === onSuccess || void 0 === onSuccess ? void 0 : onSuccess(data);
            window.location.href = "/cart";
        }));
        window.SL_EventBus.on(OPEN_TOP_CART, (async () => {
            await dynamicImportMiniCart();
            window.SL_EventBus.emit(const_DRAWER_EVENT_NAME, {
                id: "cart-select",
                operator: const_DRAWER_OPERATORS.OPEN
            });
        }));
        const closeMiniCart = () => {
            window.SL_EventBus.emit(const_DRAWER_EVENT_NAME, {
                id: "cart-select",
                operator: const_DRAWER_OPERATORS.CLOSE
            });
        };
        window.SL_EventBus.on(CLOSE_MINI_CART, closeMiniCart);
        window.SL_EventBus.on(interior_event_ADD_TO_CART, (async ({spuId, skuId, num, price, success, error, complete, eventID}) => {
            try {
                var _window;
                if ("newpage" !== cartOpenType) {
                    closeMiniCart();
                    await dynamicImportMiniCart();
                    window.SL_EventBus.emit("NEED_OPEN_TOP_CART", {
                        spuId,
                        skuId,
                        num
                    });
                }
                const dataReportReq = setAddtoCart(price, null === (_window = window) || void 0 === _window ? void 0 : _window.SL_State.get("storeInfo.currency"), eventID);
                const res = await service_cart.takeCartService().addSku(spuId, skuId, num, dataReportReq);
                if (!vo_responseCode.isOk(res)) {
                    let errMsg = res.msg;
                    if (vo_responseCode.is(res, "TCAT0109")) errMsg = t("modal.exceedCartTitle");
                    if (vo_responseCode.batchIs(res, "TCAT0107,TCAT0112")) errMsg = t("cart.active-stock-limit-2", {
                        stock: res.data.maxPurchaseTotalNum > 0 ? res.data.maxPurchaseTotalNum : "0"
                    });
                    if (vo_responseCode.is(res, "TCAT0111")) errMsg = t("cart.active-stock-limit-1", {
                        stock: res.data.maxPurchaseTotalNum > 0 ? res.data.maxPurchaseTotalNum : "0"
                    });
                    (new Toast).open(errMsg, 1500);
                    if ("function" === typeof error) error();
                } else {
                    if ("newpage" !== cartOpenType) window.SL_EventBus.emit(OPEN_TOP_CART); else interior.emit(OPEN_MINI_CART);
                    if ("function" === typeof success) success();
                }
            } catch (e) {
                console.warn("add to cart fail:", e);
            } finally {
                if ("function" === typeof complete) complete();
            }
        }));
        window.SL_EventBus.on(CONTROL_CART_BASIS, (async ({options, success, error}) => {
            const paramsEnum = {
                switchSideBar: "switchSideBar",
                updateState: "updateState",
                rerenderDom: "rerenderDom",
                cartDetail: "cartDetail"
            };
            const sideBarStatusEnum = {
                open: "open",
                close: "close"
            };
            const paramsFilter = () => {
                do {
                    const eventName = "Cart::ControlCartBasis Event: ";
                    if (!options || !Object.keys(options).length) {
                        console.warn(eventName, "params missing");
                        break;
                    }
                    if (!!Object.hasOwnProperty.call(options, paramsEnum.switchSideBar) && !Object.values(sideBarStatusEnum).includes(options.switchSideBar)) {
                        console.warn(eventName, `【switchSideBar: ${options.switchSideBar}】 is invalid`);
                        break;
                    }
                    if (!!Object.hasOwnProperty.call(options, paramsEnum.updateState) && "boolean" !== typeof options.updateState) {
                        console.warn(eventName, `【updateState: ${options.updateState}】 is invalid`);
                        break;
                    }
                    if (!!Object.hasOwnProperty.call(options, paramsEnum.rerenderDom) && "boolean" !== typeof options.rerenderDom) {
                        console.warn(eventName, `【rerenderDom: ${options.rerenderDom}】 is invalid`);
                        break;
                    }
                    if (!!Object.hasOwnProperty.call(options, paramsEnum.cartDetail) && "boolean" !== typeof options.cartDetail) {
                        console.warn(eventName, `【cartDetail: ${options.cartDetail}】 is invalid`);
                        break;
                    }
                    if (Object.keys(options).some((item => !Object.hasOwnProperty.call(paramsEnum, item)))) {
                        console.warn(eventName, "params has invalid key");
                        break;
                    }
                    return true;
                } while (false);
                return false;
            };
            try {
                if (paramsFilter()) {
                    const {switchSideBar, updateState, rerenderDom, cartDetail} = options;
                    const cartId = "cart-drawer";
                    let cartInfo;
                    if (switchSideBar) interior.emit(const_DRAWER_EVENT_NAME, {
                        id: cartId,
                        status: switchSideBar
                    });
                    if (updateState) await service_cart.takeCartService().updateCartState();
                    if (rerenderDom) await service_cart.takeCartService().rerenderCartDom();
                    if (cartDetail) {
                        const CartInfoKey = "cartInfo";
                        cartInfo = SL_State.get(CartInfoKey) || null;
                        null === success || void 0 === success ? void 0 : success(cartInfo);
                        return;
                    }
                    null === success || void 0 === success ? void 0 : success();
                    return;
                }
            } catch (e) {
                null === error || void 0 === error ? void 0 : error();
                console.warn(`${CONTROL_CART_BASIS} FAIL:`, e);
            }
        }));
        function debounce(wait, callback, immediate) {
            let timeout;
            return function(...args) {
                const context = this;
                const later = function() {
                    timeout = null;
                    if (!immediate) callback.apply(context, args);
                };
                const callNow = immediate && !timeout;
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
                if (callNow) callback.apply(context, args);
            };
        }
        var add_to_cart_window;
        const add_to_cart_logger = api_logger(`${ADD_TO_CART} - EMIT`);
        const add_to_cart_external = null === (add_to_cart_window = window) || void 0 === add_to_cart_window ? void 0 : add_to_cart_window.Shopline.event;
        const add_to_cart_addToCart = data => {
            add_to_cart_logger.info(data);
            return add_to_cart_external.emit(ADD_TO_CART, {
                data,
                interior: ADD_TO_CART,
                onSuccess: result => {
                    add_to_cart_logger.info("success", result);
                },
                onError: error => {
                    add_to_cart_logger.error(error);
                }
            });
        };
        add_to_cart_addToCart.apiName = ADD_TO_CART;
        const add_to_cart = add_to_cart_addToCart;
        const {formatCurrency: product_button_report_formatCurrency} = currency;
        function reportAddToCartEvent(data) {
            try {
                add_to_cart(data);
            } catch (e) {
                console.error(e);
            }
        }
        function addToCartThirdReport({spuId, name, price, skuId, num, eventID = getEventID(), variant}) {
            var _window, _window$SL_State;
            window.SL_EventBus.emit("global:thirdPartReport", {
                GA: [ [ "event", "add_to_cart", {
                    items: [ {
                        id: skuId,
                        name,
                        price: product_button_report_formatCurrency(price),
                        quantity: num,
                        variant
                    } ]
                } ] ],
                GAAds: [ [ "event", "conversion", {
                    value: product_button_report_formatCurrency(price * (num || 1)),
                    currency: window.SL_State.get("storeInfo.currency")
                }, "ADD-TO-CART" ] ],
                FBPixel: [ [ "track", "AddToCart", {
                    content_ids: spuId,
                    content_name: name || "",
                    content_category: "",
                    content_type: "product_group",
                    currency: window.SL_State.get("storeInfo.currency"),
                    value: product_button_report_formatCurrency(price)
                }, {
                    eventID: `addToCart${eventID}`
                } ] ],
                GAR: [ [ "event", "add_to_cart", {
                    value: product_button_report_formatCurrency(price * (num || 1)),
                    items: [ {
                        id: skuId,
                        google_business_vertical: "retail"
                    } ]
                } ] ],
                GARemarketing: [ [ "event", "add_to_cart", {
                    ecomm_prodid: skuId,
                    ecomm_pagetype: "cart",
                    ecomm_totalvalue: product_button_report_formatCurrency(price * (num || 1))
                } ] ]
            });
            reportAddToCartEvent({
                content_spu_id: spuId,
                content_sku_id: skuId,
                content_category: "",
                content_name: name,
                currency: null === (_window = window) || void 0 === _window ? void 0 : null === (_window$SL_State = _window.SL_State) || void 0 === _window$SL_State ? void 0 : _window$SL_State.get("storeInfo.currency"),
                price: product_button_report_formatCurrency(price || 0),
                value: product_button_report_formatCurrency(price || 0),
                quantity: num
            });
            return eventID;
        }
        function addToCartHdReport({spuId, skuId, num, price, name, page, event_status}) {
            var _window$HdSdk;
            null === (_window$HdSdk = window.HdSdk) || void 0 === _window$HdSdk ? void 0 : _window$HdSdk.shopTracker.report("60006263", {
                page,
                event_name: "additem",
                event_category: "cart",
                product_type: "product",
                product_id: spuId,
                variantion_id: skuId,
                quantity: num,
                price: product_button_report_formatCurrency(price),
                product_name: name,
                event_status
            });
        }
        function buyNowHdReport({spuId, skuId, num, price, name, page, event_status}) {
            var _window$HdSdk2;
            null === (_window$HdSdk2 = window.HdSdk) || void 0 === _window$HdSdk2 ? void 0 : _window$HdSdk2.shopTracker.report("60006263", {
                page,
                event_name: "buy_now",
                product_id: spuId,
                variantion_id: skuId,
                quantity: num,
                price: product_button_report_formatCurrency(price),
                product_name: name,
                event_category: "cart",
                event_status
            });
        }
        function paypalHdReport(data) {
            var _window$HdSdk3;
            null === (_window$HdSdk3 = window.HdSdk) || void 0 === _window$HdSdk3 ? void 0 : _window$HdSdk3.shopTracker.report("60006263", data);
        }
        const {formatCurrency: product_button_formatCurrency} = currency;
        const getVariant = (skuAttributeIds, skuAttributeMap) => {
            var _skuAttributeIds$map;
            return null === skuAttributeIds || void 0 === skuAttributeIds ? void 0 : null === (_skuAttributeIds$map = skuAttributeIds.map((item => {
                var _skuAttributeMap$item, _skuAttributeMap$item2, _skuAttributeMap$item3;
                return null === skuAttributeMap || void 0 === skuAttributeMap ? void 0 : null === (_skuAttributeMap$item = skuAttributeMap[null === item || void 0 === item ? void 0 : item.id]) || void 0 === _skuAttributeMap$item ? void 0 : null === (_skuAttributeMap$item2 = _skuAttributeMap$item.skuAttributeValueMap) || void 0 === _skuAttributeMap$item2 ? void 0 : null === (_skuAttributeMap$item3 = _skuAttributeMap$item2[null === item || void 0 === item ? void 0 : item.valueId]) || void 0 === _skuAttributeMap$item3 ? void 0 : _skuAttributeMap$item3.defaultValue;
            }))) || void 0 === _skuAttributeIds$map ? void 0 : _skuAttributeIds$map.toString();
        };
        class ButtonEvent {
            constructor({id, cartRoot, buyNowRoot, payPayId, soldOutRoot, spu, onAddSuccess, onAddError, sku}) {
                this.addButton = cartRoot;
                this.buyButton = buyNowRoot;
                this.payPayId = payPayId;
                this.soldOutRoot = soldOutRoot;
                this.onAddSuccess = onAddSuccess;
                this.onAddError = onAddError;
                this.spu = spu;
                this.sku = sku;
                this.initPaypal(id);
                this.initEvent();
                this.toast = new Toast;
                this.initLoading();
                this.num = 1;
                this.page = String(id).startsWith("productRecommendModal") ? "123" : pageMapping[window.SL_State.get("templateAlias")];
            }
            initLoading() {
                this.addLoading = new Toast({
                    duration: 0,
                    target: this.addButton,
                    type: "loading",
                    className: "product_add_loading"
                });
                this.addLoading.close();
                this.buyLoading = new Toast({
                    duration: 0,
                    target: this.buyButton,
                    type: "loading",
                    className: "product_buy_loading"
                });
                this.buyLoading.close();
            }
            initPaypal() {
                var _this$buttonConfig, _this$buttonConfig$or;
                if (0 === $(`#${this.payPayId}`).length) return;
                this.buttonConfig = window.SL_State.get("productSettleButtonConfig");
                const stage = checkoutEnd.getUuidAndMonitorCheckoutEnd("trade:spb:report", (status => {
                    const {name, price, spuSeq: spuId, skuSeq: skuId} = this.activeSku;
                    paypalHdReport({
                        event_name: "quick_payment",
                        product_id: spuId,
                        variantion_id: skuId,
                        quantity: this.num,
                        price: product_button_formatCurrency(price),
                        product_name: name,
                        page: this.page,
                        event_status: status
                    });
                }));
                this.PayPalButton = new paypal({
                    stage,
                    needReport: () => {
                        var _this$activeSku, _this$sku;
                        const {name, price, spuSeq: spuId, skuSeq: skuId} = this.activeSku;
                        return addToCartThirdReport({
                            spuId,
                            name,
                            price,
                            num: this.num,
                            skuId,
                            variant: getVariant(null === (_this$activeSku = this.activeSku) || void 0 === _this$activeSku ? void 0 : _this$activeSku.skuAttributeIds, null === (_this$sku = this.sku) || void 0 === _this$sku ? void 0 : _this$sku.skuAttributeMap)
                        });
                    },
                    beforeCreateOrder: () => {},
                    domId: this.payPayId,
                    height: $(`#${this.payPayId}`).height(),
                    dynamic: null === (_this$buttonConfig = this.buttonConfig) || void 0 === _this$buttonConfig ? void 0 : null === (_this$buttonConfig$or = _this$buttonConfig.originConfig) || void 0 === _this$buttonConfig$or ? void 0 : _this$buttonConfig$or.system,
                    onToast: ({message}) => this.toast.open(message),
                    onDynamicNotify: () => {
                        if (!this.buttonConfig.buyNow) this.extraBuyNow();
                        $(`#${this.payPayId}`).remove();
                        $(this.buyButton).filter(".product-more-payment-button").remove();
                    },
                    afterRender: () => {
                        if (!this.activeSku) this.setPaypalDisabled();
                    },
                    onInit: () => {
                        $(this.buyButton).filter(".product-more-payment-button").html(t("productDetail.morePaymentOptions"));
                    }
                });
                this.PayPalButton.render();
                $(document).on("click", `#${this.payPayId} .product-button-paypal-preview-mask`, (() => {
                    this.toast.open(t("productDetail.previewLinkToast"));
                }));
            }
            extraBuyNow() {
                const buyNow = `<button data-ssr-plugin-pdp-button-buy-now class="buy-now btn btn-primary btn-lg ${this.buyButton.substr(1)} __sl-custom-track-product-detail-buy-now paypalAddBuyNow">\n        <span class="pdp_button_text fw-bold">${t("common.buy-now")}</span>\n      </button>`;
                $(`#${this.payPayId}`).before(buyNow);
                this.bindBuyNow();
                this.setTradeButtonHide(this.activeSku ? !this.activeSku.available : this.spu.soldOut);
            }
            setLoading(button, loading) {
                let dom = this.addButton;
                if ("buy" === button) dom = this.buyButton;
                const loadingName = `${button}Loading`;
                if (loading) {
                    $(dom).find(".pdp_button_text").addClass("loading");
                    this[loadingName].open();
                    $(`.product_${button}_loading`).find(".mp-loading__circular path").css({
                        stroke: $(dom).css("color")
                    });
                } else {
                    this[loadingName].close();
                    $(dom).find(".pdp_button_text").removeClass("loading");
                }
            }
            initEvent() {
                const $this = this;
                $(this.addButton).on("click", debounce(300, (() => {
                    if ($this.isPreview()) {
                        this.toast.open(t("productDetail.previewLinkToast"));
                        return;
                    }
                    if (!this.activeSku) {
                        this.toast.open(t("productList.container.tradePopup.error4"));
                        return;
                    }
                    this.setLoading("add", true);
                    const {spuSeq: spuId, skuSeq: skuId, name, price} = this.activeSku;
                    const {num} = this;
                    const eventID = getEventID();
                    const hdReportData = {
                        page: this.page,
                        spuId,
                        skuId,
                        num,
                        price,
                        name
                    };
                    window.SL_EventBus.emit(interior_event_ADD_TO_CART, {
                        spuId,
                        skuId,
                        num,
                        price,
                        name,
                        eventID: `addToCart${eventID}`,
                        error: (...e) => {
                            addToCartHdReport({
                                ...hdReportData,
                                event_status: 0
                            });
                            this.onAddError(...e);
                        },
                        success: () => {
                            var _this$activeSku2, _this$sku2, _this$onAddSuccess;
                            addToCartHdReport({
                                ...hdReportData,
                                event_status: 1
                            });
                            addToCartThirdReport({
                                spuId,
                                name,
                                price,
                                skuId,
                                num,
                                eventID,
                                variant: getVariant(null === (_this$activeSku2 = this.activeSku) || void 0 === _this$activeSku2 ? void 0 : _this$activeSku2.skuAttributeIds, null === (_this$sku2 = this.sku) || void 0 === _this$sku2 ? void 0 : _this$sku2.skuAttributeMap)
                            });
                            null === (_this$onAddSuccess = this.onAddSuccess) || void 0 === _this$onAddSuccess ? void 0 : _this$onAddSuccess.call(this);
                        },
                        complete: () => {
                            this.setLoading("add", false);
                        }
                    });
                })));
                $this.bindBuyNow();
            }
            bindBuyNow() {
                const stage = checkoutEnd.getUuidAndMonitorCheckoutEnd("trade:goToCheckout:report", (status => {
                    const {name, price, spuSeq: spuId, skuSeq: skuId} = this.activeSku;
                    const {num} = this;
                    const hdReportData = {
                        page: this.page,
                        spuId,
                        skuId,
                        num,
                        price,
                        name
                    };
                    buyNowHdReport({
                        ...hdReportData,
                        event_status: status
                    });
                }));
                const $this = this;
                $(this.buyButton).on("click", debounce(300, (() => {
                    if ($this.isPreview()) {
                        this.toast.open(t("productDetail.previewLinkToast"));
                        return;
                    }
                    if (!this.activeSku) {
                        this.toast.open(t("productList.container.tradePopup.error4"));
                        return;
                    }
                    this.setLoading("buy", true);
                    const product = [ {
                        productSeq: this.activeSku.spuSeq,
                        productSku: this.activeSku.skuSeq,
                        productNum: this.num,
                        productPrice: this.activeSku.price,
                        productName: this.activeSku.name
                    } ];
                    const {name, price, spuSeq: spuId, skuSeq: skuId} = this.activeSku;
                    const {num} = this;
                    checkout.jump(product, {
                        stage,
                        needReport: () => {
                            var _this$activeSku3, _this$sku3;
                            return addToCartThirdReport({
                                spuId,
                                name,
                                price,
                                skuId,
                                num,
                                variant: getVariant(null === (_this$activeSku3 = this.activeSku) || void 0 === _this$activeSku3 ? void 0 : _this$activeSku3.skuAttributeIds, null === (_this$sku3 = this.sku) || void 0 === _this$sku3 ? void 0 : _this$sku3.skuAttributeMap)
                            });
                        }
                    }).catch((() => {
                        this.setLoading("buy", false);
                    }));
                })));
            }
            setActiveSku(sku) {
                this.activeSku = sku ? {
                    ...sku,
                    name: this.spu.title
                } : null;
                this.setPayPalProduct();
                this.setPaypalDisabled();
                if (sku) this.setTradeButtonHide(sku.soldOut);
            }
            setActiveSkuNum(num) {
                this.num = num;
                if (!this.activeSku) return;
                this.setPayPalProduct();
            }
            setPaypalDisabled() {
                var _this$PayPalButton2;
                if (!this.activeSku) {
                    var _this$PayPalButton;
                    null === (_this$PayPalButton = this.PayPalButton) || void 0 === _this$PayPalButton ? void 0 : _this$PayPalButton.setDisabled(true);
                    return;
                }
                null === (_this$PayPalButton2 = this.PayPalButton) || void 0 === _this$PayPalButton2 ? void 0 : _this$PayPalButton2.setDisabled(false);
            }
            setPayPalProduct() {
                if (0 === $(`#${this.payPayId}`).length || !this.activeSku) return;
                const product = [ {
                    spuId: this.activeSku.spuSeq,
                    skuId: this.activeSku.skuSeq,
                    num: this.num,
                    name: this.spu.title,
                    price: this.activeSku.price
                } ];
                this.PayPalButton.setProducts(product);
            }
            setTradeButtonHide(show) {
                var _$2, _$$filter2;
                if (!show) {
                    var _$, _$$filter;
                    $(this.addButton).removeClass("hide");
                    $(this.buyButton).removeClass("hide");
                    null === (_$ = $(`#${this.payPayId}`)) || void 0 === _$ ? void 0 : _$.removeClass("hide");
                    null === (_$$filter = $(this.buyButton).filter(".product-more-payment-button")) || void 0 === _$$filter ? void 0 : _$$filter.removeClass("hide");
                    $(this.soldOutRoot).addClass("hide");
                    return;
                }
                $(this.addButton).addClass("hide");
                $(this.buyButton).addClass("hide");
                null === (_$2 = $(`#${this.payPayId}`)) || void 0 === _$2 ? void 0 : _$2.addClass("hide");
                null === (_$$filter2 = $(this.buyButton).filter(".product-more-payment-button")) || void 0 === _$$filter2 ? void 0 : _$$filter2.addClass("hide");
                $(this.soldOutRoot).removeClass("hide");
            }
            isPreview() {
                const currentUrl = window.location.pathname;
                return /^[/（]preview[/）].*/.test(currentUrl);
            }
        }
        const product_button = ButtonEvent;
        const useSuperScriptDecimals = window.SL_State.get("theme.settings.superscript_decimals");
        const {convertFormat: convertPrice_convertFormat, getConvertPrice: convertPrice_getConvertPrice} = currency;
        function convertPrice(price, {code, lang}) {
            const formattedPrice = convertPrice_convertFormat(price);
            code || (code = window.SL_State.get("currencyCode"));
            lang || (lang = window.SL_State.get("request.locale"));
            const {symbolOrder, currencySymbol, integer, decimal, fraction} = convertPrice_getConvertPrice(price, {
                code,
                lang
            });
            return {
                symbolIsPrefix: "prefix" === symbolOrder,
                symbol: currencySymbol,
                integer,
                decimal,
                fraction,
                origin: formattedPrice
            };
        }
        function processPrice($el, price, {isSavePrice, code, lang} = {}, decimalBuilders = (decimal => `<sup class="body6">${decimal}</sup>`)) {
            const {symbolIsPrefix, symbol, fraction, integer, origin} = convertPrice(price, {
                code,
                lang
            });
            const _integer = null !== integer && void 0 !== integer ? integer : "";
            const _decimal = null !== fraction && void 0 !== fraction ? fraction : "";
            let content = "";
            const currencySymbolHtml = `<span class="notranslate">${symbol}</span>`;
            const renderSuperDecimal = () => {
                const shouldShowDecimal = _decimal.length > 0;
                const noSymbolCurrency = `<span>${_integer}</span>${shouldShowDecimal ? decimalBuilders(_decimal) : ""}`;
                return symbolIsPrefix ? `${currencySymbolHtml}${noSymbolCurrency}` : `${noSymbolCurrency}${currencySymbolHtml}`;
            };
            const renderSavePrice = () => {
                const zeroRE = /^0+$/g;
                if (zeroRE.test(_decimal)) return symbolIsPrefix ? `${currencySymbolHtml}<span class="notranslate">${_integer}</span>` : `<span class="notranslate">${_integer}</span>${currencySymbolHtml}`;
                return `<span class="notranslate">${origin}</span>`;
            };
            if (useSuperScriptDecimals) content = renderSuperDecimal(); else content = `<span class="notranslate">${origin}</span>`;
            if (isSavePrice) content = renderSavePrice();
            return {
                render: () => {
                    $el.html(content);
                },
                get: () => content
            };
        }
        let uniqueId = "";
        const priceWrap = ".product-info-price_";
        const priceSellWrap = ".product-price-sales_";
        const priceOriginWrap = ".product-price-origin_";
        const priceVipWrap = ".product-price-vip_";
        const priceDiscountWrap = ".product-price-discount_";
        function getDiscount(showDiscount, sku) {
            const $el = $(`${priceDiscountWrap}${uniqueId}`);
            const discountSettingStyle = null === $el || void 0 === $el ? void 0 : $el.attr("product_discount_style");
            const ratioCalc = Math.round(100 * (1 - sku.price / sku.originPrice));
            const discountText = "number" === discountSettingStyle ? sku.originPrice - sku.price : ratioCalc;
            let isHidden = true;
            if (showDiscount && discountText > 0) if ("number" === discountSettingStyle) {
                const discount = sku.originPrice - sku.price;
                if (discount > 0) {
                    const {get: getPriceContent} = processPrice($el, discount, {
                        isSavePrice: true
                    });
                    isHidden = false;
                    $el.html(t("productList.container.listItem.saveByJs", {
                        priceDom: getPriceContent()
                    }));
                } else isHidden = true;
            } else {
                isHidden = false;
                $el.html(t("productList.container.listItem.saveRatio", {
                    price: ratioCalc
                }));
            } else isHidden = true;
            $el.toggleClass("hide", isHidden);
        }
        const setSkuPrice = (spuSoldout, activeSku = {}) => {
            var _$;
            const discountSetting = null === (_$ = $(`${priceWrap}${uniqueId}`)) || void 0 === _$ ? void 0 : _$.attr("product_discount");
            const {originPrice: oriPrice, price, showMemberMark} = activeSku;
            const originPrice = oriPrice > price ? oriPrice : "";
            const showDiscount = discountSetting && !spuSoldout;
            const $priceWrapperEl = $(`.price.product-info-price_${uniqueId}`);
            if (oriPrice > price) {
                if (!$priceWrapperEl.hasClass("product-info-price_hasDiscount")) $priceWrapperEl.addClass("product-info-price_hasDiscount");
            } else $priceWrapperEl.removeClass("product-info-price_hasDiscount");
            processPrice($(`${priceSellWrap}${uniqueId}`), price).render();
            if (showMemberMark) $(`${priceVipWrap}${uniqueId}`).removeClass("hide"); else $(`${priceVipWrap}${uniqueId}`).addClass("hide");
            if (originPrice) {
                processPrice($(`${priceOriginWrap}${uniqueId}`), originPrice).render();
                $(`${priceOriginWrap}${uniqueId}`).removeClass("hide");
            } else $(`${priceOriginWrap}${uniqueId}`).addClass("hide");
            getDiscount(showDiscount, activeSku);
        };
        const getHighOriginPrice = (min, item) => {
            if (min.price === item.price) return min.originPrice > item.originPrice ? min : item;
            return min.price > item.price ? item : min;
        };
        const checkActive = item => {
            var _item$saleActivityRes;
            return null === item || void 0 === item ? void 0 : null === (_item$saleActivityRes = item.saleActivityResponseList) || void 0 === _item$saleActivityRes ? void 0 : _item$saleActivityRes.some((activity => 1 === activity.promotionType && 1 === activity.promotionSubType));
        };
        const getMinPrice = (soldOut, skuList) => null === skuList || void 0 === skuList ? void 0 : skuList.reduce(((min, item) => {
            if (null === min) return item;
            if (checkActive(min)) {
                if (checkActive(item)) return getHighOriginPrice(min, item);
                return min;
            }
            if (checkActive(item)) return item;
            if (null !== min && void 0 !== min && min.showMemberMark) {
                if (null !== item && void 0 !== item && item.showMemberMark) return getHighOriginPrice(min, item);
                return min;
            }
            if (null !== item && void 0 !== item && item.showMemberMark) return item;
            return getHighOriginPrice(min, item);
        }), null);
        const setMinPrice = (soldOut, skuList) => {
            const minSku = getMinPrice(soldOut, skuList);
            setSkuPrice(soldOut, minSku);
        };
        const setProductPrice = (id, statePath, activeSku) => {
            uniqueId = id;
            const {skuList} = window.SL_State.get(`${statePath}.sku`);
            const {soldOut} = window.SL_State.get(`${statePath}.spu`);
            if (activeSku) setSkuPrice(soldOut, activeSku); else setMinPrice(soldOut, skuList);
        };
        const product_info = setProductPrice;
        function ssr_window_esm_isObject(obj) {
            return null !== obj && "object" === typeof obj && "constructor" in obj && obj.constructor === Object;
        }
        function extend(target, src) {
            if (void 0 === target) target = {};
            if (void 0 === src) src = {};
            Object.keys(src).forEach((function(key) {
                if ("undefined" === typeof target[key]) target[key] = src[key]; else if (ssr_window_esm_isObject(src[key]) && ssr_window_esm_isObject(target[key]) && Object.keys(src[key]).length > 0) extend(target[key], src[key]);
            }));
        }
        var ssrDocument = {
            body: {},
            addEventListener: function() {},
            removeEventListener: function() {},
            activeElement: {
                blur: function() {},
                nodeName: ""
            },
            querySelector: function() {
                return null;
            },
            querySelectorAll: function() {
                return [];
            },
            getElementById: function() {
                return null;
            },
            createEvent: function() {
                return {
                    initEvent: function() {}
                };
            },
            createElement: function() {
                return {
                    children: [],
                    childNodes: [],
                    style: {},
                    setAttribute: function() {},
                    getElementsByTagName: function() {
                        return [];
                    }
                };
            },
            createElementNS: function() {
                return {};
            },
            importNode: function() {
                return null;
            },
            location: {
                hash: "",
                host: "",
                hostname: "",
                href: "",
                origin: "",
                pathname: "",
                protocol: "",
                search: ""
            }
        };
        function getDocument() {
            var doc = "undefined" !== typeof document ? document : {};
            extend(doc, ssrDocument);
            return doc;
        }
        var ssrWindow = {
            document: ssrDocument,
            navigator: {
                userAgent: ""
            },
            location: {
                hash: "",
                host: "",
                hostname: "",
                href: "",
                origin: "",
                pathname: "",
                protocol: "",
                search: ""
            },
            history: {
                replaceState: function() {},
                pushState: function() {},
                go: function() {},
                back: function() {}
            },
            CustomEvent: function() {
                return this;
            },
            addEventListener: function() {},
            removeEventListener: function() {},
            getComputedStyle: function() {
                return {
                    getPropertyValue: function() {
                        return "";
                    }
                };
            },
            Image: function() {},
            Date: function() {},
            screen: {},
            setTimeout: function() {},
            clearTimeout: function() {},
            matchMedia: function() {
                return {};
            },
            requestAnimationFrame: function(callback) {
                if ("undefined" === typeof setTimeout) {
                    callback();
                    return null;
                }
                return setTimeout(callback, 0);
            },
            cancelAnimationFrame: function(id) {
                if ("undefined" === typeof setTimeout) return;
                clearTimeout(id);
            }
        };
        function ssr_window_esm_getWindow() {
            var win = "undefined" !== typeof window ? window : {};
            extend(win, ssrWindow);
            return win;
        }
        function _inheritsLoose(subClass, superClass) {
            subClass.prototype = Object.create(superClass.prototype);
            subClass.prototype.constructor = subClass;
            subClass.__proto__ = superClass;
        }
        function _getPrototypeOf(o) {
            _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
            };
            return _getPrototypeOf(o);
        }
        function _setPrototypeOf(o, p) {
            _setPrototypeOf = Object.setPrototypeOf || function(o, p) {
                o.__proto__ = p;
                return o;
            };
            return _setPrototypeOf(o, p);
        }
        function _isNativeReflectConstruct() {
            if ("undefined" === typeof Reflect || !Reflect.construct) return false;
            if (Reflect.construct.sham) return false;
            if ("function" === typeof Proxy) return true;
            try {
                Date.prototype.toString.call(Reflect.construct(Date, [], (function() {})));
                return true;
            } catch (e) {
                return false;
            }
        }
        function _construct(Parent, args, Class) {
            if (_isNativeReflectConstruct()) _construct = Reflect.construct; else _construct = function(Parent, args, Class) {
                var a = [ null ];
                a.push.apply(a, args);
                var Constructor = Function.bind.apply(Parent, a);
                var instance = new Constructor;
                if (Class) _setPrototypeOf(instance, Class.prototype);
                return instance;
            };
            return _construct.apply(null, arguments);
        }
        function _isNativeFunction(fn) {
            return -1 !== Function.toString.call(fn).indexOf("[native code]");
        }
        function _wrapNativeSuper(Class) {
            var _cache = "function" === typeof Map ? new Map : void 0;
            _wrapNativeSuper = function(Class) {
                if (null === Class || !_isNativeFunction(Class)) return Class;
                if ("function" !== typeof Class) throw new TypeError("Super expression must either be null or a function");
                if ("undefined" !== typeof _cache) {
                    if (_cache.has(Class)) return _cache.get(Class);
                    _cache.set(Class, Wrapper);
                }
                function Wrapper() {
                    return _construct(Class, arguments, _getPrototypeOf(this).constructor);
                }
                Wrapper.prototype = Object.create(Class.prototype, {
                    constructor: {
                        value: Wrapper,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                return _setPrototypeOf(Wrapper, Class);
            };
            return _wrapNativeSuper(Class);
        }
        function _assertThisInitialized(self) {
            if (void 0 === self) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return self;
        }
        function makeReactive(obj) {
            var proto = obj.__proto__;
            Object.defineProperty(obj, "__proto__", {
                get: function() {
                    return proto;
                },
                set: function(value) {
                    proto.__proto__ = value;
                }
            });
        }
        var Dom7 = function(_Array) {
            _inheritsLoose(Dom7, _Array);
            function Dom7(items) {
                var _this;
                _this = _Array.call.apply(_Array, [ this ].concat(items)) || this;
                makeReactive(_assertThisInitialized(_this));
                return _this;
            }
            return Dom7;
        }(_wrapNativeSuper(Array));
        function arrayFlat(arr) {
            if (void 0 === arr) arr = [];
            var res = [];
            arr.forEach((function(el) {
                if (Array.isArray(el)) res.push.apply(res, arrayFlat(el)); else res.push(el);
            }));
            return res;
        }
        function arrayFilter(arr, callback) {
            return Array.prototype.filter.call(arr, callback);
        }
        function arrayUnique(arr) {
            var uniqueArray = [];
            for (var i = 0; i < arr.length; i += 1) if (-1 === uniqueArray.indexOf(arr[i])) uniqueArray.push(arr[i]);
            return uniqueArray;
        }
        function qsa(selector, context) {
            if ("string" !== typeof selector) return [ selector ];
            var a = [];
            var res = context.querySelectorAll(selector);
            for (var i = 0; i < res.length; i += 1) a.push(res[i]);
            return a;
        }
        function dom7_esm_$(selector, context) {
            var window = ssr_window_esm_getWindow();
            var document = getDocument();
            var arr = [];
            if (!context && selector instanceof Dom7) return selector;
            if (!selector) return new Dom7(arr);
            if ("string" === typeof selector) {
                var html = selector.trim();
                if (html.indexOf("<") >= 0 && html.indexOf(">") >= 0) {
                    var toCreate = "div";
                    if (0 === html.indexOf("<li")) toCreate = "ul";
                    if (0 === html.indexOf("<tr")) toCreate = "tbody";
                    if (0 === html.indexOf("<td") || 0 === html.indexOf("<th")) toCreate = "tr";
                    if (0 === html.indexOf("<tbody")) toCreate = "table";
                    if (0 === html.indexOf("<option")) toCreate = "select";
                    var tempParent = document.createElement(toCreate);
                    tempParent.innerHTML = html;
                    for (var i = 0; i < tempParent.childNodes.length; i += 1) arr.push(tempParent.childNodes[i]);
                } else arr = qsa(selector.trim(), context || document);
            } else if (selector.nodeType || selector === window || selector === document) arr.push(selector); else if (Array.isArray(selector)) {
                if (selector instanceof Dom7) return selector;
                arr = selector;
            }
            return new Dom7(arrayUnique(arr));
        }
        dom7_esm_$.fn = Dom7.prototype;
        function addClass() {
            for (var _len = arguments.length, classes = new Array(_len), _key = 0; _key < _len; _key++) classes[_key] = arguments[_key];
            var classNames = arrayFlat(classes.map((function(c) {
                return c.split(" ");
            })));
            this.forEach((function(el) {
                var _el$classList;
                (_el$classList = el.classList).add.apply(_el$classList, classNames);
            }));
            return this;
        }
        function removeClass() {
            for (var _len2 = arguments.length, classes = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) classes[_key2] = arguments[_key2];
            var classNames = arrayFlat(classes.map((function(c) {
                return c.split(" ");
            })));
            this.forEach((function(el) {
                var _el$classList2;
                (_el$classList2 = el.classList).remove.apply(_el$classList2, classNames);
            }));
            return this;
        }
        function toggleClass() {
            for (var _len3 = arguments.length, classes = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) classes[_key3] = arguments[_key3];
            var classNames = arrayFlat(classes.map((function(c) {
                return c.split(" ");
            })));
            this.forEach((function(el) {
                classNames.forEach((function(className) {
                    el.classList.toggle(className);
                }));
            }));
        }
        function hasClass() {
            for (var _len4 = arguments.length, classes = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) classes[_key4] = arguments[_key4];
            var classNames = arrayFlat(classes.map((function(c) {
                return c.split(" ");
            })));
            return arrayFilter(this, (function(el) {
                return classNames.filter((function(className) {
                    return el.classList.contains(className);
                })).length > 0;
            })).length > 0;
        }
        function attr(attrs, value) {
            if (1 === arguments.length && "string" === typeof attrs) {
                if (this[0]) return this[0].getAttribute(attrs);
                return;
            }
            for (var i = 0; i < this.length; i += 1) if (2 === arguments.length) this[i].setAttribute(attrs, value); else for (var attrName in attrs) {
                this[i][attrName] = attrs[attrName];
                this[i].setAttribute(attrName, attrs[attrName]);
            }
            return this;
        }
        function removeAttr(attr) {
            for (var i = 0; i < this.length; i += 1) this[i].removeAttribute(attr);
            return this;
        }
        function transform(transform) {
            for (var i = 0; i < this.length; i += 1) this[i].style.transform = transform;
            return this;
        }
        function transition(duration) {
            for (var i = 0; i < this.length; i += 1) this[i].style.transitionDuration = "string" !== typeof duration ? duration + "ms" : duration;
            return this;
        }
        function dom7_esm_on() {
            for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) args[_key5] = arguments[_key5];
            var eventType = args[0], targetSelector = args[1], listener = args[2], capture = args[3];
            if ("function" === typeof args[1]) {
                eventType = args[0];
                listener = args[1];
                capture = args[2];
                targetSelector = void 0;
            }
            if (!capture) capture = false;
            function handleLiveEvent(e) {
                var target = e.target;
                if (!target) return;
                var eventData = e.target.dom7EventData || [];
                if (eventData.indexOf(e) < 0) eventData.unshift(e);
                if (dom7_esm_$(target).is(targetSelector)) listener.apply(target, eventData); else {
                    var _parents = dom7_esm_$(target).parents();
                    for (var k = 0; k < _parents.length; k += 1) if (dom7_esm_$(_parents[k]).is(targetSelector)) listener.apply(_parents[k], eventData);
                }
            }
            function handleEvent(e) {
                var eventData = e && e.target ? e.target.dom7EventData || [] : [];
                if (eventData.indexOf(e) < 0) eventData.unshift(e);
                listener.apply(this, eventData);
            }
            var events = eventType.split(" ");
            var j;
            for (var i = 0; i < this.length; i += 1) {
                var el = this[i];
                if (!targetSelector) for (j = 0; j < events.length; j += 1) {
                    var event = events[j];
                    if (!el.dom7Listeners) el.dom7Listeners = {};
                    if (!el.dom7Listeners[event]) el.dom7Listeners[event] = [];
                    el.dom7Listeners[event].push({
                        listener,
                        proxyListener: handleEvent
                    });
                    el.addEventListener(event, handleEvent, capture);
                } else for (j = 0; j < events.length; j += 1) {
                    var _event = events[j];
                    if (!el.dom7LiveListeners) el.dom7LiveListeners = {};
                    if (!el.dom7LiveListeners[_event]) el.dom7LiveListeners[_event] = [];
                    el.dom7LiveListeners[_event].push({
                        listener,
                        proxyListener: handleLiveEvent
                    });
                    el.addEventListener(_event, handleLiveEvent, capture);
                }
            }
            return this;
        }
        function dom7_esm_off() {
            for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) args[_key6] = arguments[_key6];
            var eventType = args[0], targetSelector = args[1], listener = args[2], capture = args[3];
            if ("function" === typeof args[1]) {
                eventType = args[0];
                listener = args[1];
                capture = args[2];
                targetSelector = void 0;
            }
            if (!capture) capture = false;
            var events = eventType.split(" ");
            for (var i = 0; i < events.length; i += 1) {
                var event = events[i];
                for (var j = 0; j < this.length; j += 1) {
                    var el = this[j];
                    var handlers = void 0;
                    if (!targetSelector && el.dom7Listeners) handlers = el.dom7Listeners[event]; else if (targetSelector && el.dom7LiveListeners) handlers = el.dom7LiveListeners[event];
                    if (handlers && handlers.length) for (var k = handlers.length - 1; k >= 0; k -= 1) {
                        var handler = handlers[k];
                        if (listener && handler.listener === listener) {
                            el.removeEventListener(event, handler.proxyListener, capture);
                            handlers.splice(k, 1);
                        } else if (listener && handler.listener && handler.listener.dom7proxy && handler.listener.dom7proxy === listener) {
                            el.removeEventListener(event, handler.proxyListener, capture);
                            handlers.splice(k, 1);
                        } else if (!listener) {
                            el.removeEventListener(event, handler.proxyListener, capture);
                            handlers.splice(k, 1);
                        }
                    }
                }
            }
            return this;
        }
        function trigger() {
            var window = ssr_window_esm_getWindow();
            for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) args[_key9] = arguments[_key9];
            var events = args[0].split(" ");
            var eventData = args[1];
            for (var i = 0; i < events.length; i += 1) {
                var event = events[i];
                for (var j = 0; j < this.length; j += 1) {
                    var el = this[j];
                    if (window.CustomEvent) {
                        var evt = new window.CustomEvent(event, {
                            detail: eventData,
                            bubbles: true,
                            cancelable: true
                        });
                        el.dom7EventData = args.filter((function(data, dataIndex) {
                            return dataIndex > 0;
                        }));
                        el.dispatchEvent(evt);
                        el.dom7EventData = [];
                        delete el.dom7EventData;
                    }
                }
            }
            return this;
        }
        function transitionEnd(callback) {
            var dom = this;
            function fireCallBack(e) {
                if (e.target !== this) return;
                callback.call(this, e);
                dom.off("transitionend", fireCallBack);
            }
            if (callback) dom.on("transitionend", fireCallBack);
            return this;
        }
        function dom7_esm_outerWidth(includeMargins) {
            if (this.length > 0) {
                if (includeMargins) {
                    var _styles = this.styles();
                    return this[0].offsetWidth + parseFloat(_styles.getPropertyValue("margin-right")) + parseFloat(_styles.getPropertyValue("margin-left"));
                }
                return this[0].offsetWidth;
            }
            return null;
        }
        function dom7_esm_outerHeight(includeMargins) {
            if (this.length > 0) {
                if (includeMargins) {
                    var _styles2 = this.styles();
                    return this[0].offsetHeight + parseFloat(_styles2.getPropertyValue("margin-top")) + parseFloat(_styles2.getPropertyValue("margin-bottom"));
                }
                return this[0].offsetHeight;
            }
            return null;
        }
        function offset() {
            if (this.length > 0) {
                var window = ssr_window_esm_getWindow();
                var document = getDocument();
                var el = this[0];
                var box = el.getBoundingClientRect();
                var body = document.body;
                var clientTop = el.clientTop || body.clientTop || 0;
                var clientLeft = el.clientLeft || body.clientLeft || 0;
                var scrollTop = el === window ? window.scrollY : el.scrollTop;
                var scrollLeft = el === window ? window.scrollX : el.scrollLeft;
                return {
                    top: box.top + scrollTop - clientTop,
                    left: box.left + scrollLeft - clientLeft
                };
            }
            return null;
        }
        function styles() {
            var window = ssr_window_esm_getWindow();
            if (this[0]) return window.getComputedStyle(this[0], null);
            return {};
        }
        function css(props, value) {
            var window = ssr_window_esm_getWindow();
            var i;
            if (1 === arguments.length) if ("string" === typeof props) {
                if (this[0]) return window.getComputedStyle(this[0], null).getPropertyValue(props);
            } else {
                for (i = 0; i < this.length; i += 1) for (var _prop in props) this[i].style[_prop] = props[_prop];
                return this;
            }
            if (2 === arguments.length && "string" === typeof props) {
                for (i = 0; i < this.length; i += 1) this[i].style[props] = value;
                return this;
            }
            return this;
        }
        function each(callback) {
            if (!callback) return this;
            this.forEach((function(el, index) {
                callback.apply(el, [ el, index ]);
            }));
            return this;
        }
        function dom7_esm_filter(callback) {
            var result = arrayFilter(this, callback);
            return dom7_esm_$(result);
        }
        function html(html) {
            if ("undefined" === typeof html) return this[0] ? this[0].innerHTML : null;
            for (var i = 0; i < this.length; i += 1) this[i].innerHTML = html;
            return this;
        }
        function dom7_esm_text(text) {
            if ("undefined" === typeof text) return this[0] ? this[0].textContent.trim() : null;
            for (var i = 0; i < this.length; i += 1) this[i].textContent = text;
            return this;
        }
        function dom7_esm_is(selector) {
            var window = ssr_window_esm_getWindow();
            var document = getDocument();
            var el = this[0];
            var compareWith;
            var i;
            if (!el || "undefined" === typeof selector) return false;
            if ("string" === typeof selector) {
                if (el.matches) return el.matches(selector);
                if (el.webkitMatchesSelector) return el.webkitMatchesSelector(selector);
                if (el.msMatchesSelector) return el.msMatchesSelector(selector);
                compareWith = dom7_esm_$(selector);
                for (i = 0; i < compareWith.length; i += 1) if (compareWith[i] === el) return true;
                return false;
            }
            if (selector === document) return el === document;
            if (selector === window) return el === window;
            if (selector.nodeType || selector instanceof Dom7) {
                compareWith = selector.nodeType ? [ selector ] : selector;
                for (i = 0; i < compareWith.length; i += 1) if (compareWith[i] === el) return true;
                return false;
            }
            return false;
        }
        function index() {
            var child = this[0];
            var i;
            if (child) {
                i = 0;
                while (null !== (child = child.previousSibling)) if (1 === child.nodeType) i += 1;
                return i;
            }
            return;
        }
        function eq(index) {
            if ("undefined" === typeof index) return this;
            var length = this.length;
            if (index > length - 1) return dom7_esm_$([]);
            if (index < 0) {
                var returnIndex = length + index;
                if (returnIndex < 0) return dom7_esm_$([]);
                return dom7_esm_$([ this[returnIndex] ]);
            }
            return dom7_esm_$([ this[index] ]);
        }
        function append() {
            var newChild;
            var document = getDocument();
            for (var k = 0; k < arguments.length; k += 1) {
                newChild = k < 0 || arguments.length <= k ? void 0 : arguments[k];
                for (var i = 0; i < this.length; i += 1) if ("string" === typeof newChild) {
                    var tempDiv = document.createElement("div");
                    tempDiv.innerHTML = newChild;
                    while (tempDiv.firstChild) this[i].appendChild(tempDiv.firstChild);
                } else if (newChild instanceof Dom7) for (var j = 0; j < newChild.length; j += 1) this[i].appendChild(newChild[j]); else this[i].appendChild(newChild);
            }
            return this;
        }
        function prepend(newChild) {
            var document = getDocument();
            var i;
            var j;
            for (i = 0; i < this.length; i += 1) if ("string" === typeof newChild) {
                var tempDiv = document.createElement("div");
                tempDiv.innerHTML = newChild;
                for (j = tempDiv.childNodes.length - 1; j >= 0; j -= 1) this[i].insertBefore(tempDiv.childNodes[j], this[i].childNodes[0]);
            } else if (newChild instanceof Dom7) for (j = 0; j < newChild.length; j += 1) this[i].insertBefore(newChild[j], this[i].childNodes[0]); else this[i].insertBefore(newChild, this[i].childNodes[0]);
            return this;
        }
        function next(selector) {
            if (this.length > 0) {
                if (selector) {
                    if (this[0].nextElementSibling && dom7_esm_$(this[0].nextElementSibling).is(selector)) return dom7_esm_$([ this[0].nextElementSibling ]);
                    return dom7_esm_$([]);
                }
                if (this[0].nextElementSibling) return dom7_esm_$([ this[0].nextElementSibling ]);
                return dom7_esm_$([]);
            }
            return dom7_esm_$([]);
        }
        function nextAll(selector) {
            var nextEls = [];
            var el = this[0];
            if (!el) return dom7_esm_$([]);
            while (el.nextElementSibling) {
                var _next = el.nextElementSibling;
                if (selector) {
                    if (dom7_esm_$(_next).is(selector)) nextEls.push(_next);
                } else nextEls.push(_next);
                el = _next;
            }
            return dom7_esm_$(nextEls);
        }
        function prev(selector) {
            if (this.length > 0) {
                var el = this[0];
                if (selector) {
                    if (el.previousElementSibling && dom7_esm_$(el.previousElementSibling).is(selector)) return dom7_esm_$([ el.previousElementSibling ]);
                    return dom7_esm_$([]);
                }
                if (el.previousElementSibling) return dom7_esm_$([ el.previousElementSibling ]);
                return dom7_esm_$([]);
            }
            return dom7_esm_$([]);
        }
        function prevAll(selector) {
            var prevEls = [];
            var el = this[0];
            if (!el) return dom7_esm_$([]);
            while (el.previousElementSibling) {
                var _prev = el.previousElementSibling;
                if (selector) {
                    if (dom7_esm_$(_prev).is(selector)) prevEls.push(_prev);
                } else prevEls.push(_prev);
                el = _prev;
            }
            return dom7_esm_$(prevEls);
        }
        function dom7_esm_parent(selector) {
            var parents = [];
            for (var i = 0; i < this.length; i += 1) if (null !== this[i].parentNode) if (selector) {
                if (dom7_esm_$(this[i].parentNode).is(selector)) parents.push(this[i].parentNode);
            } else parents.push(this[i].parentNode);
            return dom7_esm_$(parents);
        }
        function parents(selector) {
            var parents = [];
            for (var i = 0; i < this.length; i += 1) {
                var _parent = this[i].parentNode;
                while (_parent) {
                    if (selector) {
                        if (dom7_esm_$(_parent).is(selector)) parents.push(_parent);
                    } else parents.push(_parent);
                    _parent = _parent.parentNode;
                }
            }
            return dom7_esm_$(parents);
        }
        function closest(selector) {
            var closest = this;
            if ("undefined" === typeof selector) return dom7_esm_$([]);
            if (!closest.is(selector)) closest = closest.parents(selector).eq(0);
            return closest;
        }
        function dom7_esm_find(selector) {
            var foundElements = [];
            for (var i = 0; i < this.length; i += 1) {
                var found = this[i].querySelectorAll(selector);
                for (var j = 0; j < found.length; j += 1) foundElements.push(found[j]);
            }
            return dom7_esm_$(foundElements);
        }
        function children(selector) {
            var children = [];
            for (var i = 0; i < this.length; i += 1) {
                var childNodes = this[i].children;
                for (var j = 0; j < childNodes.length; j += 1) if (!selector || dom7_esm_$(childNodes[j]).is(selector)) children.push(childNodes[j]);
            }
            return dom7_esm_$(children);
        }
        function remove() {
            for (var i = 0; i < this.length; i += 1) if (this[i].parentNode) this[i].parentNode.removeChild(this[i]);
            return this;
        }
        var noTrigger = "resize scroll".split(" ");
        function shortcut(name) {
            function eventHandler() {
                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) args[_key] = arguments[_key];
                if ("undefined" === typeof args[0]) {
                    for (var i = 0; i < this.length; i += 1) if (noTrigger.indexOf(name) < 0) if (name in this[i]) this[i][name](); else dom7_esm_$(this[i]).trigger(name);
                    return this;
                }
                return this.on.apply(this, [ name ].concat(args));
            }
            return eventHandler;
        }
        shortcut("click");
        shortcut("blur");
        shortcut("focus");
        shortcut("focusin");
        shortcut("focusout");
        shortcut("keyup");
        shortcut("keydown");
        shortcut("keypress");
        shortcut("submit");
        shortcut("change");
        shortcut("mousedown");
        shortcut("mousemove");
        shortcut("mouseup");
        shortcut("mouseenter");
        shortcut("mouseleave");
        shortcut("mouseout");
        shortcut("mouseover");
        shortcut("touchstart");
        shortcut("touchend");
        shortcut("touchmove");
        shortcut("resize");
        shortcut("scroll");
        var Methods = {
            addClass,
            removeClass,
            hasClass,
            toggleClass,
            attr,
            removeAttr,
            transform,
            transition,
            on: dom7_esm_on,
            off: dom7_esm_off,
            trigger,
            transitionEnd,
            outerWidth: dom7_esm_outerWidth,
            outerHeight: dom7_esm_outerHeight,
            styles,
            offset,
            css,
            each,
            html,
            text: dom7_esm_text,
            is: dom7_esm_is,
            index,
            eq,
            append,
            prepend,
            next,
            nextAll,
            prev,
            prevAll,
            parent: dom7_esm_parent,
            parents,
            closest,
            find: dom7_esm_find,
            children,
            filter: dom7_esm_filter,
            remove
        };
        Object.keys(Methods).forEach((function(methodName) {
            Object.defineProperty(dom7_esm_$.fn, methodName, {
                value: Methods[methodName],
                writable: true
            });
        }));
        const dom = dom7_esm_$;
        function deleteProps(obj) {
            var object = obj;
            Object.keys(object).forEach((function(key) {
                try {
                    object[key] = null;
                } catch (e) {}
                try {
                    delete object[key];
                } catch (e) {}
            }));
        }
        function nextTick(callback, delay) {
            if (void 0 === delay) delay = 0;
            return setTimeout(callback, delay);
        }
        function now() {
            return Date.now();
        }
        function utils_getComputedStyle(el) {
            var window = ssr_window_esm_getWindow();
            var style;
            if (window.getComputedStyle) style = window.getComputedStyle(el, null);
            if (!style && el.currentStyle) style = el.currentStyle;
            if (!style) style = el.style;
            return style;
        }
        function getTranslate(el, axis) {
            if (void 0 === axis) axis = "x";
            var window = ssr_window_esm_getWindow();
            var matrix;
            var curTransform;
            var transformMatrix;
            var curStyle = utils_getComputedStyle(el, null);
            if (window.WebKitCSSMatrix) {
                curTransform = curStyle.transform || curStyle.webkitTransform;
                if (curTransform.split(",").length > 6) curTransform = curTransform.split(", ").map((function(a) {
                    return a.replace(",", ".");
                })).join(", ");
                transformMatrix = new window.WebKitCSSMatrix("none" === curTransform ? "" : curTransform);
            } else {
                transformMatrix = curStyle.MozTransform || curStyle.OTransform || curStyle.MsTransform || curStyle.msTransform || curStyle.transform || curStyle.getPropertyValue("transform").replace("translate(", "matrix(1, 0, 0, 1,");
                matrix = transformMatrix.toString().split(",");
            }
            if ("x" === axis) if (window.WebKitCSSMatrix) curTransform = transformMatrix.m41; else if (16 === matrix.length) curTransform = parseFloat(matrix[12]); else curTransform = parseFloat(matrix[4]);
            if ("y" === axis) if (window.WebKitCSSMatrix) curTransform = transformMatrix.m42; else if (16 === matrix.length) curTransform = parseFloat(matrix[13]); else curTransform = parseFloat(matrix[5]);
            return curTransform || 0;
        }
        function utils_isObject(o) {
            return "object" === typeof o && null !== o && o.constructor && "Object" === Object.prototype.toString.call(o).slice(8, -1);
        }
        function isNode(node) {
            if ("undefined" !== typeof window && "undefined" !== typeof window.HTMLElement) return node instanceof HTMLElement;
            return node && (1 === node.nodeType || 11 === node.nodeType);
        }
        function utils_extend() {
            var to = Object(arguments.length <= 0 ? void 0 : arguments[0]);
            var noExtend = [ "__proto__", "constructor", "prototype" ];
            for (var i = 1; i < arguments.length; i += 1) {
                var nextSource = i < 0 || arguments.length <= i ? void 0 : arguments[i];
                if (void 0 !== nextSource && null !== nextSource && !isNode(nextSource)) {
                    var keysArray = Object.keys(Object(nextSource)).filter((function(key) {
                        return noExtend.indexOf(key) < 0;
                    }));
                    for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex += 1) {
                        var nextKey = keysArray[nextIndex];
                        var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);
                        if (void 0 !== desc && desc.enumerable) if (utils_isObject(to[nextKey]) && utils_isObject(nextSource[nextKey])) if (nextSource[nextKey].__swiper__) to[nextKey] = nextSource[nextKey]; else utils_extend(to[nextKey], nextSource[nextKey]); else if (!utils_isObject(to[nextKey]) && utils_isObject(nextSource[nextKey])) {
                            to[nextKey] = {};
                            if (nextSource[nextKey].__swiper__) to[nextKey] = nextSource[nextKey]; else utils_extend(to[nextKey], nextSource[nextKey]);
                        } else to[nextKey] = nextSource[nextKey];
                    }
                }
            }
            return to;
        }
        function bindModuleMethods(instance, obj) {
            Object.keys(obj).forEach((function(key) {
                if (utils_isObject(obj[key])) Object.keys(obj[key]).forEach((function(subKey) {
                    if ("function" === typeof obj[key][subKey]) obj[key][subKey] = obj[key][subKey].bind(instance);
                }));
                instance[key] = obj[key];
            }));
        }
        function createElementIfNotDefined($container, params, createElements, checkProps) {
            var document = getDocument();
            if (createElements) Object.keys(checkProps).forEach((function(key) {
                if (!params[key] && true === params.auto) {
                    var element = document.createElement("div");
                    element.className = checkProps[key];
                    $container.append(element);
                    params[key] = element;
                }
            }));
            return params;
        }
        var support;
        function calcSupport() {
            var window = ssr_window_esm_getWindow();
            var document = getDocument();
            return {
                touch: !!("ontouchstart" in window || window.DocumentTouch && document instanceof window.DocumentTouch),
                pointerEvents: !!window.PointerEvent && "maxTouchPoints" in window.navigator && window.navigator.maxTouchPoints >= 0,
                observer: function() {
                    return "MutationObserver" in window || "WebkitMutationObserver" in window;
                }(),
                passiveListener: function() {
                    var supportsPassive = false;
                    try {
                        var opts = Object.defineProperty({}, "passive", {
                            get: function() {
                                supportsPassive = true;
                            }
                        });
                        window.addEventListener("testPassiveListener", null, opts);
                    } catch (e) {}
                    return supportsPassive;
                }(),
                gestures: function() {
                    return "ongesturestart" in window;
                }()
            };
        }
        function getSupport() {
            if (!support) support = calcSupport();
            return support;
        }
        var device;
        function calcDevice(_temp) {
            var _ref = void 0 === _temp ? {} : _temp, userAgent = _ref.userAgent;
            var support = getSupport();
            var window = ssr_window_esm_getWindow();
            var platform = window.navigator.platform;
            var ua = userAgent || window.navigator.userAgent;
            var device = {
                ios: false,
                android: false
            };
            var screenWidth = window.screen.width;
            var screenHeight = window.screen.height;
            var android = ua.match(/(Android);?[\s\/]+([\d.]+)?/);
            var ipad = ua.match(/(iPad).*OS\s([\d_]+)/);
            var ipod = ua.match(/(iPod)(.*OS\s([\d_]+))?/);
            var iphone = !ipad && ua.match(/(iPhone\sOS|iOS)\s([\d_]+)/);
            var windows = "Win32" === platform;
            var macos = "MacIntel" === platform;
            var iPadScreens = [ "1024x1366", "1366x1024", "834x1194", "1194x834", "834x1112", "1112x834", "768x1024", "1024x768", "820x1180", "1180x820", "810x1080", "1080x810" ];
            if (!ipad && macos && support.touch && iPadScreens.indexOf(screenWidth + "x" + screenHeight) >= 0) {
                ipad = ua.match(/(Version)\/([\d.]+)/);
                if (!ipad) ipad = [ 0, 1, "13_0_0" ];
                macos = false;
            }
            if (android && !windows) {
                device.os = "android";
                device.android = true;
            }
            if (ipad || iphone || ipod) {
                device.os = "ios";
                device.ios = true;
            }
            return device;
        }
        function getDevice(overrides) {
            if (void 0 === overrides) overrides = {};
            if (!device) device = calcDevice(overrides);
            return device;
        }
        var get_browser_browser;
        function calcBrowser() {
            var window = ssr_window_esm_getWindow();
            function isSafari() {
                var ua = window.navigator.userAgent.toLowerCase();
                return ua.indexOf("safari") >= 0 && ua.indexOf("chrome") < 0 && ua.indexOf("android") < 0;
            }
            return {
                isEdge: !!window.navigator.userAgent.match(/Edge/g),
                isSafari: isSafari(),
                isWebView: /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(window.navigator.userAgent)
            };
        }
        function getBrowser() {
            if (!get_browser_browser) get_browser_browser = calcBrowser();
            return get_browser_browser;
        }
        var supportsResizeObserver = function() {
            var window = ssr_window_esm_getWindow();
            return "undefined" !== typeof window.ResizeObserver;
        };
        const resize_resize = {
            name: "resize",
            create: function() {
                var swiper = this;
                utils_extend(swiper, {
                    resize: {
                        observer: null,
                        createObserver: function() {
                            if (!swiper || swiper.destroyed || !swiper.initialized) return;
                            swiper.resize.observer = new ResizeObserver((function(entries) {
                                var width = swiper.width, height = swiper.height;
                                var newWidth = width;
                                var newHeight = height;
                                entries.forEach((function(_ref) {
                                    var contentBoxSize = _ref.contentBoxSize, contentRect = _ref.contentRect, target = _ref.target;
                                    if (target && target !== swiper.el) return;
                                    newWidth = contentRect ? contentRect.width : (contentBoxSize[0] || contentBoxSize).inlineSize;
                                    newHeight = contentRect ? contentRect.height : (contentBoxSize[0] || contentBoxSize).blockSize;
                                }));
                                if (newWidth !== width || newHeight !== height) swiper.resize.resizeHandler();
                            }));
                            swiper.resize.observer.observe(swiper.el);
                        },
                        removeObserver: function() {
                            if (swiper.resize.observer && swiper.resize.observer.unobserve && swiper.el) {
                                swiper.resize.observer.unobserve(swiper.el);
                                swiper.resize.observer = null;
                            }
                        },
                        resizeHandler: function() {
                            if (!swiper || swiper.destroyed || !swiper.initialized) return;
                            swiper.emit("beforeResize");
                            swiper.emit("resize");
                        },
                        orientationChangeHandler: function() {
                            if (!swiper || swiper.destroyed || !swiper.initialized) return;
                            swiper.emit("orientationchange");
                        }
                    }
                });
            },
            on: {
                init: function(swiper) {
                    var window = ssr_window_esm_getWindow();
                    if (swiper.params.resizeObserver && supportsResizeObserver()) {
                        swiper.resize.createObserver();
                        return;
                    }
                    window.addEventListener("resize", swiper.resize.resizeHandler);
                    window.addEventListener("orientationchange", swiper.resize.orientationChangeHandler);
                },
                destroy: function(swiper) {
                    var window = ssr_window_esm_getWindow();
                    swiper.resize.removeObserver();
                    window.removeEventListener("resize", swiper.resize.resizeHandler);
                    window.removeEventListener("orientationchange", swiper.resize.orientationChangeHandler);
                }
            }
        };
        function _extends() {
            _extends = Object.assign || function(target) {
                for (var i = 1; i < arguments.length; i++) {
                    var source = arguments[i];
                    for (var key in source) if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
                }
                return target;
            };
            return _extends.apply(this, arguments);
        }
        var Observer = {
            attach: function(target, options) {
                if (void 0 === options) options = {};
                var window = ssr_window_esm_getWindow();
                var swiper = this;
                var ObserverFunc = window.MutationObserver || window.WebkitMutationObserver;
                var observer = new ObserverFunc((function(mutations) {
                    if (1 === mutations.length) {
                        swiper.emit("observerUpdate", mutations[0]);
                        return;
                    }
                    var observerUpdate = function() {
                        swiper.emit("observerUpdate", mutations[0]);
                    };
                    if (window.requestAnimationFrame) window.requestAnimationFrame(observerUpdate); else window.setTimeout(observerUpdate, 0);
                }));
                observer.observe(target, {
                    attributes: "undefined" === typeof options.attributes ? true : options.attributes,
                    childList: "undefined" === typeof options.childList ? true : options.childList,
                    characterData: "undefined" === typeof options.characterData ? true : options.characterData
                });
                swiper.observer.observers.push(observer);
            },
            init: function() {
                var swiper = this;
                if (!swiper.support.observer || !swiper.params.observer) return;
                if (swiper.params.observeParents) {
                    var containerParents = swiper.$el.parents();
                    for (var i = 0; i < containerParents.length; i += 1) swiper.observer.attach(containerParents[i]);
                }
                swiper.observer.attach(swiper.$el[0], {
                    childList: swiper.params.observeSlideChildren
                });
                swiper.observer.attach(swiper.$wrapperEl[0], {
                    attributes: false
                });
            },
            destroy: function() {
                var swiper = this;
                swiper.observer.observers.forEach((function(observer) {
                    observer.disconnect();
                }));
                swiper.observer.observers = [];
            }
        };
        const observer = {
            name: "observer",
            params: {
                observer: false,
                observeParents: false,
                observeSlideChildren: false
            },
            create: function() {
                var swiper = this;
                bindModuleMethods(swiper, {
                    observer: _extends({}, Observer, {
                        observers: []
                    })
                });
            },
            on: {
                init: function(swiper) {
                    swiper.observer.init();
                },
                destroy: function(swiper) {
                    swiper.observer.destroy();
                }
            }
        };
        const modular = {
            useParams: function(instanceParams) {
                var instance = this;
                if (!instance.modules) return;
                Object.keys(instance.modules).forEach((function(moduleName) {
                    var module = instance.modules[moduleName];
                    if (module.params) utils_extend(instanceParams, module.params);
                }));
            },
            useModules: function(modulesParams) {
                if (void 0 === modulesParams) modulesParams = {};
                var instance = this;
                if (!instance.modules) return;
                Object.keys(instance.modules).forEach((function(moduleName) {
                    var module = instance.modules[moduleName];
                    var moduleParams = modulesParams[moduleName] || {};
                    if (module.on && instance.on) Object.keys(module.on).forEach((function(moduleEventName) {
                        instance.on(moduleEventName, module.on[moduleEventName]);
                    }));
                    if (module.create) module.create.bind(instance)(moduleParams);
                }));
            }
        };
        const events_emitter = {
            on: function(events, handler, priority) {
                var self = this;
                if ("function" !== typeof handler) return self;
                var method = priority ? "unshift" : "push";
                events.split(" ").forEach((function(event) {
                    if (!self.eventsListeners[event]) self.eventsListeners[event] = [];
                    self.eventsListeners[event][method](handler);
                }));
                return self;
            },
            once: function(events, handler, priority) {
                var self = this;
                if ("function" !== typeof handler) return self;
                function onceHandler() {
                    self.off(events, onceHandler);
                    if (onceHandler.__emitterProxy) delete onceHandler.__emitterProxy;
                    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) args[_key] = arguments[_key];
                    handler.apply(self, args);
                }
                onceHandler.__emitterProxy = handler;
                return self.on(events, onceHandler, priority);
            },
            onAny: function(handler, priority) {
                var self = this;
                if ("function" !== typeof handler) return self;
                var method = priority ? "unshift" : "push";
                if (self.eventsAnyListeners.indexOf(handler) < 0) self.eventsAnyListeners[method](handler);
                return self;
            },
            offAny: function(handler) {
                var self = this;
                if (!self.eventsAnyListeners) return self;
                var index = self.eventsAnyListeners.indexOf(handler);
                if (index >= 0) self.eventsAnyListeners.splice(index, 1);
                return self;
            },
            off: function(events, handler) {
                var self = this;
                if (!self.eventsListeners) return self;
                events.split(" ").forEach((function(event) {
                    if ("undefined" === typeof handler) self.eventsListeners[event] = []; else if (self.eventsListeners[event]) self.eventsListeners[event].forEach((function(eventHandler, index) {
                        if (eventHandler === handler || eventHandler.__emitterProxy && eventHandler.__emitterProxy === handler) self.eventsListeners[event].splice(index, 1);
                    }));
                }));
                return self;
            },
            emit: function() {
                var self = this;
                if (!self.eventsListeners) return self;
                var events;
                var data;
                var context;
                for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) args[_key2] = arguments[_key2];
                if ("string" === typeof args[0] || Array.isArray(args[0])) {
                    events = args[0];
                    data = args.slice(1, args.length);
                    context = self;
                } else {
                    events = args[0].events;
                    data = args[0].data;
                    context = args[0].context || self;
                }
                data.unshift(context);
                var eventsArray = Array.isArray(events) ? events : events.split(" ");
                eventsArray.forEach((function(event) {
                    if (self.eventsAnyListeners && self.eventsAnyListeners.length) self.eventsAnyListeners.forEach((function(eventHandler) {
                        eventHandler.apply(context, [ event ].concat(data));
                    }));
                    if (self.eventsListeners && self.eventsListeners[event]) self.eventsListeners[event].forEach((function(eventHandler) {
                        eventHandler.apply(context, data);
                    }));
                }));
                return self;
            }
        };
        function updateSize() {
            var swiper = this;
            var width;
            var height;
            var $el = swiper.$el;
            if ("undefined" !== typeof swiper.params.width && null !== swiper.params.width) width = swiper.params.width; else width = $el[0].clientWidth;
            if ("undefined" !== typeof swiper.params.height && null !== swiper.params.height) height = swiper.params.height; else height = $el[0].clientHeight;
            if (0 === width && swiper.isHorizontal() || 0 === height && swiper.isVertical()) return;
            width = width - parseInt($el.css("padding-left") || 0, 10) - parseInt($el.css("padding-right") || 0, 10);
            height = height - parseInt($el.css("padding-top") || 0, 10) - parseInt($el.css("padding-bottom") || 0, 10);
            if (Number.isNaN(width)) width = 0;
            if (Number.isNaN(height)) height = 0;
            utils_extend(swiper, {
                width,
                height,
                size: swiper.isHorizontal() ? width : height
            });
        }
        function updateSlides() {
            var swiper = this;
            function getDirectionLabel(property) {
                if (swiper.isHorizontal()) return property;
                return {
                    width: "height",
                    "margin-top": "margin-left",
                    "margin-bottom ": "margin-right",
                    "margin-left": "margin-top",
                    "margin-right": "margin-bottom",
                    "padding-left": "padding-top",
                    "padding-right": "padding-bottom",
                    marginRight: "marginBottom"
                }[property];
            }
            function getDirectionPropertyValue(node, label) {
                return parseFloat(node.getPropertyValue(getDirectionLabel(label)) || 0);
            }
            var params = swiper.params;
            var $wrapperEl = swiper.$wrapperEl, swiperSize = swiper.size, rtl = swiper.rtlTranslate, wrongRTL = swiper.wrongRTL;
            var isVirtual = swiper.virtual && params.virtual.enabled;
            var previousSlidesLength = isVirtual ? swiper.virtual.slides.length : swiper.slides.length;
            var slides = $wrapperEl.children("." + swiper.params.slideClass);
            var slidesLength = isVirtual ? swiper.virtual.slides.length : slides.length;
            var snapGrid = [];
            var slidesGrid = [];
            var slidesSizesGrid = [];
            var offsetBefore = params.slidesOffsetBefore;
            if ("function" === typeof offsetBefore) offsetBefore = params.slidesOffsetBefore.call(swiper);
            var offsetAfter = params.slidesOffsetAfter;
            if ("function" === typeof offsetAfter) offsetAfter = params.slidesOffsetAfter.call(swiper);
            var previousSnapGridLength = swiper.snapGrid.length;
            var previousSlidesGridLength = swiper.slidesGrid.length;
            var spaceBetween = params.spaceBetween;
            var slidePosition = -offsetBefore;
            var prevSlideSize = 0;
            var index = 0;
            if ("undefined" === typeof swiperSize) return;
            if ("string" === typeof spaceBetween && spaceBetween.indexOf("%") >= 0) spaceBetween = parseFloat(spaceBetween.replace("%", "")) / 100 * swiperSize;
            swiper.virtualSize = -spaceBetween;
            if (rtl) slides.css({
                marginLeft: "",
                marginBottom: "",
                marginTop: ""
            }); else slides.css({
                marginRight: "",
                marginBottom: "",
                marginTop: ""
            });
            var slidesNumberEvenToRows;
            if (params.slidesPerColumn > 1) {
                if (Math.floor(slidesLength / params.slidesPerColumn) === slidesLength / swiper.params.slidesPerColumn) slidesNumberEvenToRows = slidesLength; else slidesNumberEvenToRows = Math.ceil(slidesLength / params.slidesPerColumn) * params.slidesPerColumn;
                if ("auto" !== params.slidesPerView && "row" === params.slidesPerColumnFill) slidesNumberEvenToRows = Math.max(slidesNumberEvenToRows, params.slidesPerView * params.slidesPerColumn);
            }
            var slideSize;
            var slidesPerColumn = params.slidesPerColumn;
            var slidesPerRow = slidesNumberEvenToRows / slidesPerColumn;
            var numFullColumns = Math.floor(slidesLength / params.slidesPerColumn);
            for (var i = 0; i < slidesLength; i += 1) {
                slideSize = 0;
                var slide = slides.eq(i);
                if (params.slidesPerColumn > 1) {
                    var newSlideOrderIndex = void 0;
                    var column = void 0;
                    var row = void 0;
                    if ("row" === params.slidesPerColumnFill && params.slidesPerGroup > 1) {
                        var groupIndex = Math.floor(i / (params.slidesPerGroup * params.slidesPerColumn));
                        var slideIndexInGroup = i - params.slidesPerColumn * params.slidesPerGroup * groupIndex;
                        var columnsInGroup = 0 === groupIndex ? params.slidesPerGroup : Math.min(Math.ceil((slidesLength - groupIndex * slidesPerColumn * params.slidesPerGroup) / slidesPerColumn), params.slidesPerGroup);
                        row = Math.floor(slideIndexInGroup / columnsInGroup);
                        column = slideIndexInGroup - row * columnsInGroup + groupIndex * params.slidesPerGroup;
                        newSlideOrderIndex = column + row * slidesNumberEvenToRows / slidesPerColumn;
                        slide.css({
                            "-webkit-box-ordinal-group": newSlideOrderIndex,
                            "-moz-box-ordinal-group": newSlideOrderIndex,
                            "-ms-flex-order": newSlideOrderIndex,
                            "-webkit-order": newSlideOrderIndex,
                            order: newSlideOrderIndex
                        });
                    } else if ("column" === params.slidesPerColumnFill) {
                        column = Math.floor(i / slidesPerColumn);
                        row = i - column * slidesPerColumn;
                        if (column > numFullColumns || column === numFullColumns && row === slidesPerColumn - 1) {
                            row += 1;
                            if (row >= slidesPerColumn) {
                                row = 0;
                                column += 1;
                            }
                        }
                    } else {
                        row = Math.floor(i / slidesPerRow);
                        column = i - row * slidesPerRow;
                    }
                    slide.css(getDirectionLabel("margin-top"), 0 !== row ? params.spaceBetween && params.spaceBetween + "px" : "");
                }
                if ("none" === slide.css("display")) continue;
                if ("auto" === params.slidesPerView) {
                    var slideStyles = getComputedStyle(slide[0]);
                    var currentTransform = slide[0].style.transform;
                    var currentWebKitTransform = slide[0].style.webkitTransform;
                    if (currentTransform) slide[0].style.transform = "none";
                    if (currentWebKitTransform) slide[0].style.webkitTransform = "none";
                    if (params.roundLengths) slideSize = swiper.isHorizontal() ? slide.outerWidth(true) : slide.outerHeight(true); else {
                        var width = getDirectionPropertyValue(slideStyles, "width");
                        var paddingLeft = getDirectionPropertyValue(slideStyles, "padding-left");
                        var paddingRight = getDirectionPropertyValue(slideStyles, "padding-right");
                        var marginLeft = getDirectionPropertyValue(slideStyles, "margin-left");
                        var marginRight = getDirectionPropertyValue(slideStyles, "margin-right");
                        var boxSizing = slideStyles.getPropertyValue("box-sizing");
                        if (boxSizing && "border-box" === boxSizing) slideSize = width + marginLeft + marginRight; else {
                            var _slide$ = slide[0], clientWidth = _slide$.clientWidth, offsetWidth = _slide$.offsetWidth;
                            slideSize = width + paddingLeft + paddingRight + marginLeft + marginRight + (offsetWidth - clientWidth);
                        }
                    }
                    if (currentTransform) slide[0].style.transform = currentTransform;
                    if (currentWebKitTransform) slide[0].style.webkitTransform = currentWebKitTransform;
                    if (params.roundLengths) slideSize = Math.floor(slideSize);
                } else {
                    slideSize = (swiperSize - (params.slidesPerView - 1) * spaceBetween) / params.slidesPerView;
                    if (params.roundLengths) slideSize = Math.floor(slideSize);
                    if (slides[i]) slides[i].style[getDirectionLabel("width")] = slideSize + "px";
                }
                if (slides[i]) slides[i].swiperSlideSize = slideSize;
                slidesSizesGrid.push(slideSize);
                if (params.centeredSlides) {
                    slidePosition = slidePosition + slideSize / 2 + prevSlideSize / 2 + spaceBetween;
                    if (0 === prevSlideSize && 0 !== i) slidePosition = slidePosition - swiperSize / 2 - spaceBetween;
                    if (0 === i) slidePosition = slidePosition - swiperSize / 2 - spaceBetween;
                    if (Math.abs(slidePosition) < 1 / 1e3) slidePosition = 0;
                    if (params.roundLengths) slidePosition = Math.floor(slidePosition);
                    if (index % params.slidesPerGroup === 0) snapGrid.push(slidePosition);
                    slidesGrid.push(slidePosition);
                } else {
                    if (params.roundLengths) slidePosition = Math.floor(slidePosition);
                    if ((index - Math.min(swiper.params.slidesPerGroupSkip, index)) % swiper.params.slidesPerGroup === 0) snapGrid.push(slidePosition);
                    slidesGrid.push(slidePosition);
                    slidePosition = slidePosition + slideSize + spaceBetween;
                }
                swiper.virtualSize += slideSize + spaceBetween;
                prevSlideSize = slideSize;
                index += 1;
            }
            swiper.virtualSize = Math.max(swiper.virtualSize, swiperSize) + offsetAfter;
            var newSlidesGrid;
            if (rtl && wrongRTL && ("slide" === params.effect || "coverflow" === params.effect)) $wrapperEl.css({
                width: swiper.virtualSize + params.spaceBetween + "px"
            });
            if (params.setWrapperSize) {
                var _$wrapperEl$css;
                $wrapperEl.css((_$wrapperEl$css = {}, _$wrapperEl$css[getDirectionLabel("width")] = swiper.virtualSize + params.spaceBetween + "px", 
                _$wrapperEl$css));
            }
            if (params.slidesPerColumn > 1) {
                var _$wrapperEl$css2;
                swiper.virtualSize = (slideSize + params.spaceBetween) * slidesNumberEvenToRows;
                swiper.virtualSize = Math.ceil(swiper.virtualSize / params.slidesPerColumn) - params.spaceBetween;
                $wrapperEl.css((_$wrapperEl$css2 = {}, _$wrapperEl$css2[getDirectionLabel("width")] = swiper.virtualSize + params.spaceBetween + "px", 
                _$wrapperEl$css2));
                if (params.centeredSlides) {
                    newSlidesGrid = [];
                    for (var _i = 0; _i < snapGrid.length; _i += 1) {
                        var slidesGridItem = snapGrid[_i];
                        if (params.roundLengths) slidesGridItem = Math.floor(slidesGridItem);
                        if (snapGrid[_i] < swiper.virtualSize + snapGrid[0]) newSlidesGrid.push(slidesGridItem);
                    }
                    snapGrid = newSlidesGrid;
                }
            }
            if (!params.centeredSlides) {
                newSlidesGrid = [];
                for (var _i2 = 0; _i2 < snapGrid.length; _i2 += 1) {
                    var _slidesGridItem = snapGrid[_i2];
                    if (params.roundLengths) _slidesGridItem = Math.floor(_slidesGridItem);
                    if (snapGrid[_i2] <= swiper.virtualSize - swiperSize) newSlidesGrid.push(_slidesGridItem);
                }
                snapGrid = newSlidesGrid;
                if (Math.floor(swiper.virtualSize - swiperSize) - Math.floor(snapGrid[snapGrid.length - 1]) > 1) snapGrid.push(swiper.virtualSize - swiperSize);
            }
            if (0 === snapGrid.length) snapGrid = [ 0 ];
            if (0 !== params.spaceBetween) {
                var _slides$filter$css;
                var key = swiper.isHorizontal() && rtl ? "marginLeft" : getDirectionLabel("marginRight");
                slides.filter((function(_, slideIndex) {
                    if (!params.cssMode) return true;
                    if (slideIndex === slides.length - 1) return false;
                    return true;
                })).css((_slides$filter$css = {}, _slides$filter$css[key] = spaceBetween + "px", 
                _slides$filter$css));
            }
            if (params.centeredSlides && params.centeredSlidesBounds) {
                var allSlidesSize = 0;
                slidesSizesGrid.forEach((function(slideSizeValue) {
                    allSlidesSize += slideSizeValue + (params.spaceBetween ? params.spaceBetween : 0);
                }));
                allSlidesSize -= params.spaceBetween;
                var maxSnap = allSlidesSize - swiperSize;
                snapGrid = snapGrid.map((function(snap) {
                    if (snap < 0) return -offsetBefore;
                    if (snap > maxSnap) return maxSnap + offsetAfter;
                    return snap;
                }));
            }
            if (params.centerInsufficientSlides) {
                var _allSlidesSize = 0;
                slidesSizesGrid.forEach((function(slideSizeValue) {
                    _allSlidesSize += slideSizeValue + (params.spaceBetween ? params.spaceBetween : 0);
                }));
                _allSlidesSize -= params.spaceBetween;
                if (_allSlidesSize < swiperSize) {
                    var allSlidesOffset = (swiperSize - _allSlidesSize) / 2;
                    snapGrid.forEach((function(snap, snapIndex) {
                        snapGrid[snapIndex] = snap - allSlidesOffset;
                    }));
                    slidesGrid.forEach((function(snap, snapIndex) {
                        slidesGrid[snapIndex] = snap + allSlidesOffset;
                    }));
                }
            }
            utils_extend(swiper, {
                slides,
                snapGrid,
                slidesGrid,
                slidesSizesGrid
            });
            if (slidesLength !== previousSlidesLength) swiper.emit("slidesLengthChange");
            if (snapGrid.length !== previousSnapGridLength) {
                if (swiper.params.watchOverflow) swiper.checkOverflow();
                swiper.emit("snapGridLengthChange");
            }
            if (slidesGrid.length !== previousSlidesGridLength) swiper.emit("slidesGridLengthChange");
            if (params.watchSlidesProgress || params.watchSlidesVisibility) swiper.updateSlidesOffset();
        }
        function updateAutoHeight(speed) {
            var swiper = this;
            var activeSlides = [];
            var isVirtual = swiper.virtual && swiper.params.virtual.enabled;
            var newHeight = 0;
            var i;
            if ("number" === typeof speed) swiper.setTransition(speed); else if (true === speed) swiper.setTransition(swiper.params.speed);
            var getSlideByIndex = function(index) {
                if (isVirtual) return swiper.slides.filter((function(el) {
                    return parseInt(el.getAttribute("data-swiper-slide-index"), 10) === index;
                }))[0];
                return swiper.slides.eq(index)[0];
            };
            if ("auto" !== swiper.params.slidesPerView && swiper.params.slidesPerView > 1) if (swiper.params.centeredSlides) swiper.visibleSlides.each((function(slide) {
                activeSlides.push(slide);
            })); else for (i = 0; i < Math.ceil(swiper.params.slidesPerView); i += 1) {
                var index = swiper.activeIndex + i;
                if (index > swiper.slides.length && !isVirtual) break;
                activeSlides.push(getSlideByIndex(index));
            } else activeSlides.push(getSlideByIndex(swiper.activeIndex));
            for (i = 0; i < activeSlides.length; i += 1) if ("undefined" !== typeof activeSlides[i]) {
                var height = activeSlides[i].offsetHeight;
                newHeight = height > newHeight ? height : newHeight;
            }
            if (newHeight) swiper.$wrapperEl.css("height", newHeight + "px");
        }
        function updateSlidesOffset() {
            var swiper = this;
            var slides = swiper.slides;
            for (var i = 0; i < slides.length; i += 1) slides[i].swiperSlideOffset = swiper.isHorizontal() ? slides[i].offsetLeft : slides[i].offsetTop;
        }
        function updateSlidesProgress(translate) {
            if (void 0 === translate) translate = this && this.translate || 0;
            var swiper = this;
            var params = swiper.params;
            var slides = swiper.slides, rtl = swiper.rtlTranslate;
            if (0 === slides.length) return;
            if ("undefined" === typeof slides[0].swiperSlideOffset) swiper.updateSlidesOffset();
            var offsetCenter = -translate;
            if (rtl) offsetCenter = translate;
            slides.removeClass(params.slideVisibleClass);
            swiper.visibleSlidesIndexes = [];
            swiper.visibleSlides = [];
            for (var i = 0; i < slides.length; i += 1) {
                var slide = slides[i];
                var slideProgress = (offsetCenter + (params.centeredSlides ? swiper.minTranslate() : 0) - slide.swiperSlideOffset) / (slide.swiperSlideSize + params.spaceBetween);
                if (params.watchSlidesVisibility || params.centeredSlides && params.autoHeight) {
                    var slideBefore = -(offsetCenter - slide.swiperSlideOffset);
                    var slideAfter = slideBefore + swiper.slidesSizesGrid[i];
                    var isVisible = slideBefore >= 0 && slideBefore < swiper.size - 1 || slideAfter > 1 && slideAfter <= swiper.size || slideBefore <= 0 && slideAfter >= swiper.size;
                    if (isVisible) {
                        swiper.visibleSlides.push(slide);
                        swiper.visibleSlidesIndexes.push(i);
                        slides.eq(i).addClass(params.slideVisibleClass);
                    }
                }
                slide.progress = rtl ? -slideProgress : slideProgress;
            }
            swiper.visibleSlides = dom(swiper.visibleSlides);
        }
        function updateProgress(translate) {
            var swiper = this;
            if ("undefined" === typeof translate) {
                var multiplier = swiper.rtlTranslate ? -1 : 1;
                translate = swiper && swiper.translate && swiper.translate * multiplier || 0;
            }
            var params = swiper.params;
            var translatesDiff = swiper.maxTranslate() - swiper.minTranslate();
            var progress = swiper.progress, isBeginning = swiper.isBeginning, isEnd = swiper.isEnd;
            var wasBeginning = isBeginning;
            var wasEnd = isEnd;
            if (0 === translatesDiff) {
                progress = 0;
                isBeginning = true;
                isEnd = true;
            } else {
                progress = (translate - swiper.minTranslate()) / translatesDiff;
                isBeginning = progress <= 0;
                isEnd = progress >= 1;
            }
            utils_extend(swiper, {
                progress,
                isBeginning,
                isEnd
            });
            if (params.watchSlidesProgress || params.watchSlidesVisibility || params.centeredSlides && params.autoHeight) swiper.updateSlidesProgress(translate);
            if (isBeginning && !wasBeginning) swiper.emit("reachBeginning toEdge");
            if (isEnd && !wasEnd) swiper.emit("reachEnd toEdge");
            if (wasBeginning && !isBeginning || wasEnd && !isEnd) swiper.emit("fromEdge");
            swiper.emit("progress", progress);
        }
        function updateSlidesClasses() {
            var swiper = this;
            var slides = swiper.slides, params = swiper.params, $wrapperEl = swiper.$wrapperEl, activeIndex = swiper.activeIndex, realIndex = swiper.realIndex;
            var isVirtual = swiper.virtual && params.virtual.enabled;
            slides.removeClass(params.slideActiveClass + " " + params.slideNextClass + " " + params.slidePrevClass + " " + params.slideDuplicateActiveClass + " " + params.slideDuplicateNextClass + " " + params.slideDuplicatePrevClass);
            var activeSlide;
            if (isVirtual) activeSlide = swiper.$wrapperEl.find("." + params.slideClass + '[data-swiper-slide-index="' + activeIndex + '"]'); else activeSlide = slides.eq(activeIndex);
            activeSlide.addClass(params.slideActiveClass);
            if (params.loop) if (activeSlide.hasClass(params.slideDuplicateClass)) $wrapperEl.children("." + params.slideClass + ":not(." + params.slideDuplicateClass + ')[data-swiper-slide-index="' + realIndex + '"]').addClass(params.slideDuplicateActiveClass); else $wrapperEl.children("." + params.slideClass + "." + params.slideDuplicateClass + '[data-swiper-slide-index="' + realIndex + '"]').addClass(params.slideDuplicateActiveClass);
            var nextSlide = activeSlide.nextAll("." + params.slideClass).eq(0).addClass(params.slideNextClass);
            if (params.loop && 0 === nextSlide.length) {
                nextSlide = slides.eq(0);
                nextSlide.addClass(params.slideNextClass);
            }
            var prevSlide = activeSlide.prevAll("." + params.slideClass).eq(0).addClass(params.slidePrevClass);
            if (params.loop && 0 === prevSlide.length) {
                prevSlide = slides.eq(-1);
                prevSlide.addClass(params.slidePrevClass);
            }
            if (params.loop) {
                if (nextSlide.hasClass(params.slideDuplicateClass)) $wrapperEl.children("." + params.slideClass + ":not(." + params.slideDuplicateClass + ')[data-swiper-slide-index="' + nextSlide.attr("data-swiper-slide-index") + '"]').addClass(params.slideDuplicateNextClass); else $wrapperEl.children("." + params.slideClass + "." + params.slideDuplicateClass + '[data-swiper-slide-index="' + nextSlide.attr("data-swiper-slide-index") + '"]').addClass(params.slideDuplicateNextClass);
                if (prevSlide.hasClass(params.slideDuplicateClass)) $wrapperEl.children("." + params.slideClass + ":not(." + params.slideDuplicateClass + ')[data-swiper-slide-index="' + prevSlide.attr("data-swiper-slide-index") + '"]').addClass(params.slideDuplicatePrevClass); else $wrapperEl.children("." + params.slideClass + "." + params.slideDuplicateClass + '[data-swiper-slide-index="' + prevSlide.attr("data-swiper-slide-index") + '"]').addClass(params.slideDuplicatePrevClass);
            }
            swiper.emitSlidesClasses();
        }
        function updateActiveIndex(newActiveIndex) {
            var swiper = this;
            var translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;
            var slidesGrid = swiper.slidesGrid, snapGrid = swiper.snapGrid, params = swiper.params, previousIndex = swiper.activeIndex, previousRealIndex = swiper.realIndex, previousSnapIndex = swiper.snapIndex;
            var activeIndex = newActiveIndex;
            var snapIndex;
            if ("undefined" === typeof activeIndex) {
                for (var i = 0; i < slidesGrid.length; i += 1) if ("undefined" !== typeof slidesGrid[i + 1]) {
                    if (translate >= slidesGrid[i] && translate < slidesGrid[i + 1] - (slidesGrid[i + 1] - slidesGrid[i]) / 2) activeIndex = i; else if (translate >= slidesGrid[i] && translate < slidesGrid[i + 1]) activeIndex = i + 1;
                } else if (translate >= slidesGrid[i]) activeIndex = i;
                if (params.normalizeSlideIndex) if (activeIndex < 0 || "undefined" === typeof activeIndex) activeIndex = 0;
            }
            if (snapGrid.indexOf(translate) >= 0) snapIndex = snapGrid.indexOf(translate); else {
                var skip = Math.min(params.slidesPerGroupSkip, activeIndex);
                snapIndex = skip + Math.floor((activeIndex - skip) / params.slidesPerGroup);
            }
            if (snapIndex >= snapGrid.length) snapIndex = snapGrid.length - 1;
            if (activeIndex === previousIndex) {
                if (snapIndex !== previousSnapIndex) {
                    swiper.snapIndex = snapIndex;
                    swiper.emit("snapIndexChange");
                }
                return;
            }
            var realIndex = parseInt(swiper.slides.eq(activeIndex).attr("data-swiper-slide-index") || activeIndex, 10);
            utils_extend(swiper, {
                snapIndex,
                realIndex,
                previousIndex,
                activeIndex
            });
            swiper.emit("activeIndexChange");
            swiper.emit("snapIndexChange");
            if (previousRealIndex !== realIndex) swiper.emit("realIndexChange");
            if (swiper.initialized || swiper.params.runCallbacksOnInit) swiper.emit("slideChange");
        }
        function updateClickedSlide(e) {
            var swiper = this;
            var params = swiper.params;
            var slide = dom(e.target).closest("." + params.slideClass)[0];
            var slideFound = false;
            var slideIndex;
            if (slide) for (var i = 0; i < swiper.slides.length; i += 1) if (swiper.slides[i] === slide) {
                slideFound = true;
                slideIndex = i;
                break;
            }
            if (slide && slideFound) {
                swiper.clickedSlide = slide;
                if (swiper.virtual && swiper.params.virtual.enabled) swiper.clickedIndex = parseInt(dom(slide).attr("data-swiper-slide-index"), 10); else swiper.clickedIndex = slideIndex;
            } else {
                swiper.clickedSlide = void 0;
                swiper.clickedIndex = void 0;
                return;
            }
            if (params.slideToClickedSlide && void 0 !== swiper.clickedIndex && swiper.clickedIndex !== swiper.activeIndex) swiper.slideToClickedSlide();
        }
        const update = {
            updateSize,
            updateSlides,
            updateAutoHeight,
            updateSlidesOffset,
            updateSlidesProgress,
            updateProgress,
            updateSlidesClasses,
            updateActiveIndex,
            updateClickedSlide
        };
        function getSwiperTranslate(axis) {
            if (void 0 === axis) axis = this.isHorizontal() ? "x" : "y";
            var swiper = this;
            var params = swiper.params, rtl = swiper.rtlTranslate, translate = swiper.translate, $wrapperEl = swiper.$wrapperEl;
            if (params.virtualTranslate) return rtl ? -translate : translate;
            if (params.cssMode) return translate;
            var currentTranslate = getTranslate($wrapperEl[0], axis);
            if (rtl) currentTranslate = -currentTranslate;
            return currentTranslate || 0;
        }
        function setTranslate(translate, byController) {
            var swiper = this;
            var rtl = swiper.rtlTranslate, params = swiper.params, $wrapperEl = swiper.$wrapperEl, wrapperEl = swiper.wrapperEl, progress = swiper.progress;
            var x = 0;
            var y = 0;
            var z = 0;
            if (swiper.isHorizontal()) x = rtl ? -translate : translate; else y = translate;
            if (params.roundLengths) {
                x = Math.floor(x);
                y = Math.floor(y);
            }
            if (params.cssMode) wrapperEl[swiper.isHorizontal() ? "scrollLeft" : "scrollTop"] = swiper.isHorizontal() ? -x : -y; else if (!params.virtualTranslate) $wrapperEl.transform("translate3d(" + x + "px, " + y + "px, " + z + "px)");
            swiper.previousTranslate = swiper.translate;
            swiper.translate = swiper.isHorizontal() ? x : y;
            var newProgress;
            var translatesDiff = swiper.maxTranslate() - swiper.minTranslate();
            if (0 === translatesDiff) newProgress = 0; else newProgress = (translate - swiper.minTranslate()) / translatesDiff;
            if (newProgress !== progress) swiper.updateProgress(translate);
            swiper.emit("setTranslate", swiper.translate, byController);
        }
        function minTranslate() {
            return -this.snapGrid[0];
        }
        function maxTranslate() {
            return -this.snapGrid[this.snapGrid.length - 1];
        }
        function translateTo(translate, speed, runCallbacks, translateBounds, internal) {
            if (void 0 === translate) translate = 0;
            if (void 0 === speed) speed = this.params.speed;
            if (void 0 === runCallbacks) runCallbacks = true;
            if (void 0 === translateBounds) translateBounds = true;
            var swiper = this;
            var params = swiper.params, wrapperEl = swiper.wrapperEl;
            if (swiper.animating && params.preventInteractionOnTransition) return false;
            var minTranslate = swiper.minTranslate();
            var maxTranslate = swiper.maxTranslate();
            var newTranslate;
            if (translateBounds && translate > minTranslate) newTranslate = minTranslate; else if (translateBounds && translate < maxTranslate) newTranslate = maxTranslate; else newTranslate = translate;
            swiper.updateProgress(newTranslate);
            if (params.cssMode) {
                var isH = swiper.isHorizontal();
                if (0 === speed) wrapperEl[isH ? "scrollLeft" : "scrollTop"] = -newTranslate; else if (wrapperEl.scrollTo) {
                    var _wrapperEl$scrollTo;
                    wrapperEl.scrollTo((_wrapperEl$scrollTo = {}, _wrapperEl$scrollTo[isH ? "left" : "top"] = -newTranslate, 
                    _wrapperEl$scrollTo.behavior = "smooth", _wrapperEl$scrollTo));
                } else wrapperEl[isH ? "scrollLeft" : "scrollTop"] = -newTranslate;
                return true;
            }
            if (0 === speed) {
                swiper.setTransition(0);
                swiper.setTranslate(newTranslate);
                if (runCallbacks) {
                    swiper.emit("beforeTransitionStart", speed, internal);
                    swiper.emit("transitionEnd");
                }
            } else {
                swiper.setTransition(speed);
                swiper.setTranslate(newTranslate);
                if (runCallbacks) {
                    swiper.emit("beforeTransitionStart", speed, internal);
                    swiper.emit("transitionStart");
                }
                if (!swiper.animating) {
                    swiper.animating = true;
                    if (!swiper.onTranslateToWrapperTransitionEnd) swiper.onTranslateToWrapperTransitionEnd = function(e) {
                        if (!swiper || swiper.destroyed) return;
                        if (e.target !== this) return;
                        swiper.$wrapperEl[0].removeEventListener("transitionend", swiper.onTranslateToWrapperTransitionEnd);
                        swiper.$wrapperEl[0].removeEventListener("webkitTransitionEnd", swiper.onTranslateToWrapperTransitionEnd);
                        swiper.onTranslateToWrapperTransitionEnd = null;
                        delete swiper.onTranslateToWrapperTransitionEnd;
                        if (runCallbacks) swiper.emit("transitionEnd");
                    };
                    swiper.$wrapperEl[0].addEventListener("transitionend", swiper.onTranslateToWrapperTransitionEnd);
                    swiper.$wrapperEl[0].addEventListener("webkitTransitionEnd", swiper.onTranslateToWrapperTransitionEnd);
                }
            }
            return true;
        }
        const translate = {
            getTranslate: getSwiperTranslate,
            setTranslate,
            minTranslate,
            maxTranslate,
            translateTo
        };
        function setTransition(duration, byController) {
            var swiper = this;
            if (!swiper.params.cssMode) swiper.$wrapperEl.transition(duration);
            swiper.emit("setTransition", duration, byController);
        }
        function transitionStart(runCallbacks, direction) {
            if (void 0 === runCallbacks) runCallbacks = true;
            var swiper = this;
            var activeIndex = swiper.activeIndex, params = swiper.params, previousIndex = swiper.previousIndex;
            if (params.cssMode) return;
            if (params.autoHeight) swiper.updateAutoHeight();
            var dir = direction;
            if (!dir) if (activeIndex > previousIndex) dir = "next"; else if (activeIndex < previousIndex) dir = "prev"; else dir = "reset";
            swiper.emit("transitionStart");
            if (runCallbacks && activeIndex !== previousIndex) {
                if ("reset" === dir) {
                    swiper.emit("slideResetTransitionStart");
                    return;
                }
                swiper.emit("slideChangeTransitionStart");
                if ("next" === dir) swiper.emit("slideNextTransitionStart"); else swiper.emit("slidePrevTransitionStart");
            }
        }
        function transitionEnd_transitionEnd(runCallbacks, direction) {
            if (void 0 === runCallbacks) runCallbacks = true;
            var swiper = this;
            var activeIndex = swiper.activeIndex, previousIndex = swiper.previousIndex, params = swiper.params;
            swiper.animating = false;
            if (params.cssMode) return;
            swiper.setTransition(0);
            var dir = direction;
            if (!dir) if (activeIndex > previousIndex) dir = "next"; else if (activeIndex < previousIndex) dir = "prev"; else dir = "reset";
            swiper.emit("transitionEnd");
            if (runCallbacks && activeIndex !== previousIndex) {
                if ("reset" === dir) {
                    swiper.emit("slideResetTransitionEnd");
                    return;
                }
                swiper.emit("slideChangeTransitionEnd");
                if ("next" === dir) swiper.emit("slideNextTransitionEnd"); else swiper.emit("slidePrevTransitionEnd");
            }
        }
        const core_transition = {
            setTransition,
            transitionStart,
            transitionEnd: transitionEnd_transitionEnd
        };
        function slideTo(index, speed, runCallbacks, internal, initial) {
            if (void 0 === index) index = 0;
            if (void 0 === speed) speed = this.params.speed;
            if (void 0 === runCallbacks) runCallbacks = true;
            if ("number" !== typeof index && "string" !== typeof index) throw new Error("The 'index' argument cannot have type other than 'number' or 'string'. [" + typeof index + "] given.");
            if ("string" === typeof index) {
                var indexAsNumber = parseInt(index, 10);
                var isValidNumber = isFinite(indexAsNumber);
                if (!isValidNumber) throw new Error("The passed-in 'index' (string) couldn't be converted to 'number'. [" + index + "] given.");
                index = indexAsNumber;
            }
            var swiper = this;
            var slideIndex = index;
            if (slideIndex < 0) slideIndex = 0;
            var params = swiper.params, snapGrid = swiper.snapGrid, slidesGrid = swiper.slidesGrid, previousIndex = swiper.previousIndex, activeIndex = swiper.activeIndex, rtl = swiper.rtlTranslate, wrapperEl = swiper.wrapperEl, enabled = swiper.enabled;
            if (swiper.animating && params.preventInteractionOnTransition || !enabled && !internal && !initial) return false;
            var skip = Math.min(swiper.params.slidesPerGroupSkip, slideIndex);
            var snapIndex = skip + Math.floor((slideIndex - skip) / swiper.params.slidesPerGroup);
            if (snapIndex >= snapGrid.length) snapIndex = snapGrid.length - 1;
            if ((activeIndex || params.initialSlide || 0) === (previousIndex || 0) && runCallbacks) swiper.emit("beforeSlideChangeStart");
            var translate = -snapGrid[snapIndex];
            swiper.updateProgress(translate);
            if (params.normalizeSlideIndex) for (var i = 0; i < slidesGrid.length; i += 1) {
                var normalizedTranslate = -Math.floor(100 * translate);
                var normalizedGird = Math.floor(100 * slidesGrid[i]);
                var normalizedGridNext = Math.floor(100 * slidesGrid[i + 1]);
                if ("undefined" !== typeof slidesGrid[i + 1]) {
                    if (normalizedTranslate >= normalizedGird && normalizedTranslate < normalizedGridNext - (normalizedGridNext - normalizedGird) / 2) slideIndex = i; else if (normalizedTranslate >= normalizedGird && normalizedTranslate < normalizedGridNext) slideIndex = i + 1;
                } else if (normalizedTranslate >= normalizedGird) slideIndex = i;
            }
            if (swiper.initialized && slideIndex !== activeIndex) {
                if (!swiper.allowSlideNext && translate < swiper.translate && translate < swiper.minTranslate()) return false;
                if (!swiper.allowSlidePrev && translate > swiper.translate && translate > swiper.maxTranslate()) if ((activeIndex || 0) !== slideIndex) return false;
            }
            var direction;
            if (slideIndex > activeIndex) direction = "next"; else if (slideIndex < activeIndex) direction = "prev"; else direction = "reset";
            if (rtl && -translate === swiper.translate || !rtl && translate === swiper.translate) {
                swiper.updateActiveIndex(slideIndex);
                if (params.autoHeight) swiper.updateAutoHeight();
                swiper.updateSlidesClasses();
                if ("slide" !== params.effect) swiper.setTranslate(translate);
                if ("reset" !== direction) {
                    swiper.transitionStart(runCallbacks, direction);
                    swiper.transitionEnd(runCallbacks, direction);
                }
                return false;
            }
            if (params.cssMode) {
                var isH = swiper.isHorizontal();
                var t = -translate;
                if (rtl) t = wrapperEl.scrollWidth - wrapperEl.offsetWidth - t;
                if (0 === speed) wrapperEl[isH ? "scrollLeft" : "scrollTop"] = t; else if (wrapperEl.scrollTo) {
                    var _wrapperEl$scrollTo;
                    wrapperEl.scrollTo((_wrapperEl$scrollTo = {}, _wrapperEl$scrollTo[isH ? "left" : "top"] = t, 
                    _wrapperEl$scrollTo.behavior = "smooth", _wrapperEl$scrollTo));
                } else wrapperEl[isH ? "scrollLeft" : "scrollTop"] = t;
                return true;
            }
            if (0 === speed) {
                swiper.setTransition(0);
                swiper.setTranslate(translate);
                swiper.updateActiveIndex(slideIndex);
                swiper.updateSlidesClasses();
                swiper.emit("beforeTransitionStart", speed, internal);
                swiper.transitionStart(runCallbacks, direction);
                swiper.transitionEnd(runCallbacks, direction);
            } else {
                swiper.setTransition(speed);
                swiper.setTranslate(translate);
                swiper.updateActiveIndex(slideIndex);
                swiper.updateSlidesClasses();
                swiper.emit("beforeTransitionStart", speed, internal);
                swiper.transitionStart(runCallbacks, direction);
                if (!swiper.animating) {
                    swiper.animating = true;
                    if (!swiper.onSlideToWrapperTransitionEnd) swiper.onSlideToWrapperTransitionEnd = function(e) {
                        if (!swiper || swiper.destroyed) return;
                        if (e.target !== this) return;
                        swiper.$wrapperEl[0].removeEventListener("transitionend", swiper.onSlideToWrapperTransitionEnd);
                        swiper.$wrapperEl[0].removeEventListener("webkitTransitionEnd", swiper.onSlideToWrapperTransitionEnd);
                        swiper.onSlideToWrapperTransitionEnd = null;
                        delete swiper.onSlideToWrapperTransitionEnd;
                        swiper.transitionEnd(runCallbacks, direction);
                    };
                    swiper.$wrapperEl[0].addEventListener("transitionend", swiper.onSlideToWrapperTransitionEnd);
                    swiper.$wrapperEl[0].addEventListener("webkitTransitionEnd", swiper.onSlideToWrapperTransitionEnd);
                }
            }
            return true;
        }
        function slideToLoop(index, speed, runCallbacks, internal) {
            if (void 0 === index) index = 0;
            if (void 0 === speed) speed = this.params.speed;
            if (void 0 === runCallbacks) runCallbacks = true;
            var swiper = this;
            var newIndex = index;
            if (swiper.params.loop) newIndex += swiper.loopedSlides;
            return swiper.slideTo(newIndex, speed, runCallbacks, internal);
        }
        function slideNext(speed, runCallbacks, internal) {
            if (void 0 === speed) speed = this.params.speed;
            if (void 0 === runCallbacks) runCallbacks = true;
            var swiper = this;
            var params = swiper.params, animating = swiper.animating, enabled = swiper.enabled;
            if (!enabled) return swiper;
            var increment = swiper.activeIndex < params.slidesPerGroupSkip ? 1 : params.slidesPerGroup;
            if (params.loop) {
                if (animating && params.loopPreventsSlide) return false;
                swiper.loopFix();
                swiper._clientLeft = swiper.$wrapperEl[0].clientLeft;
            }
            return swiper.slideTo(swiper.activeIndex + increment, speed, runCallbacks, internal);
        }
        function slidePrev(speed, runCallbacks, internal) {
            if (void 0 === speed) speed = this.params.speed;
            if (void 0 === runCallbacks) runCallbacks = true;
            var swiper = this;
            var params = swiper.params, animating = swiper.animating, snapGrid = swiper.snapGrid, slidesGrid = swiper.slidesGrid, rtlTranslate = swiper.rtlTranslate, enabled = swiper.enabled;
            if (!enabled) return swiper;
            if (params.loop) {
                if (animating && params.loopPreventsSlide) return false;
                swiper.loopFix();
                swiper._clientLeft = swiper.$wrapperEl[0].clientLeft;
            }
            var translate = rtlTranslate ? swiper.translate : -swiper.translate;
            function normalize(val) {
                if (val < 0) return -Math.floor(Math.abs(val));
                return Math.floor(val);
            }
            var normalizedTranslate = normalize(translate);
            var normalizedSnapGrid = snapGrid.map((function(val) {
                return normalize(val);
            }));
            var prevSnap = snapGrid[normalizedSnapGrid.indexOf(normalizedTranslate) - 1];
            if ("undefined" === typeof prevSnap && params.cssMode) snapGrid.forEach((function(snap) {
                if (!prevSnap && normalizedTranslate >= snap) prevSnap = snap;
            }));
            var prevIndex;
            if ("undefined" !== typeof prevSnap) {
                prevIndex = slidesGrid.indexOf(prevSnap);
                if (prevIndex < 0) prevIndex = swiper.activeIndex - 1;
            }
            return swiper.slideTo(prevIndex, speed, runCallbacks, internal);
        }
        function slideReset(speed, runCallbacks, internal) {
            if (void 0 === speed) speed = this.params.speed;
            if (void 0 === runCallbacks) runCallbacks = true;
            var swiper = this;
            return swiper.slideTo(swiper.activeIndex, speed, runCallbacks, internal);
        }
        function slideToClosest(speed, runCallbacks, internal, threshold) {
            if (void 0 === speed) speed = this.params.speed;
            if (void 0 === runCallbacks) runCallbacks = true;
            if (void 0 === threshold) threshold = .5;
            var swiper = this;
            var index = swiper.activeIndex;
            var skip = Math.min(swiper.params.slidesPerGroupSkip, index);
            var snapIndex = skip + Math.floor((index - skip) / swiper.params.slidesPerGroup);
            var translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;
            if (translate >= swiper.snapGrid[snapIndex]) {
                var currentSnap = swiper.snapGrid[snapIndex];
                var nextSnap = swiper.snapGrid[snapIndex + 1];
                if (translate - currentSnap > (nextSnap - currentSnap) * threshold) index += swiper.params.slidesPerGroup;
            } else {
                var prevSnap = swiper.snapGrid[snapIndex - 1];
                var _currentSnap = swiper.snapGrid[snapIndex];
                if (translate - prevSnap <= (_currentSnap - prevSnap) * threshold) index -= swiper.params.slidesPerGroup;
            }
            index = Math.max(index, 0);
            index = Math.min(index, swiper.slidesGrid.length - 1);
            return swiper.slideTo(index, speed, runCallbacks, internal);
        }
        function slideToClickedSlide() {
            var swiper = this;
            var params = swiper.params, $wrapperEl = swiper.$wrapperEl;
            var slidesPerView = "auto" === params.slidesPerView ? swiper.slidesPerViewDynamic() : params.slidesPerView;
            var slideToIndex = swiper.clickedIndex;
            var realIndex;
            if (params.loop) {
                if (swiper.animating) return;
                realIndex = parseInt(dom(swiper.clickedSlide).attr("data-swiper-slide-index"), 10);
                if (params.centeredSlides) if (slideToIndex < swiper.loopedSlides - slidesPerView / 2 || slideToIndex > swiper.slides.length - swiper.loopedSlides + slidesPerView / 2) {
                    swiper.loopFix();
                    slideToIndex = $wrapperEl.children("." + params.slideClass + '[data-swiper-slide-index="' + realIndex + '"]:not(.' + params.slideDuplicateClass + ")").eq(0).index();
                    nextTick((function() {
                        swiper.slideTo(slideToIndex);
                    }));
                } else swiper.slideTo(slideToIndex); else if (slideToIndex > swiper.slides.length - slidesPerView) {
                    swiper.loopFix();
                    slideToIndex = $wrapperEl.children("." + params.slideClass + '[data-swiper-slide-index="' + realIndex + '"]:not(.' + params.slideDuplicateClass + ")").eq(0).index();
                    nextTick((function() {
                        swiper.slideTo(slideToIndex);
                    }));
                } else swiper.slideTo(slideToIndex);
            } else swiper.slideTo(slideToIndex);
        }
        const slide = {
            slideTo,
            slideToLoop,
            slideNext,
            slidePrev,
            slideReset,
            slideToClosest,
            slideToClickedSlide
        };
        function loopCreate() {
            var swiper = this;
            var document = getDocument();
            var params = swiper.params, $wrapperEl = swiper.$wrapperEl;
            $wrapperEl.children("." + params.slideClass + "." + params.slideDuplicateClass).remove();
            var slides = $wrapperEl.children("." + params.slideClass);
            if (params.loopFillGroupWithBlank) {
                var blankSlidesNum = params.slidesPerGroup - slides.length % params.slidesPerGroup;
                if (blankSlidesNum !== params.slidesPerGroup) {
                    for (var i = 0; i < blankSlidesNum; i += 1) {
                        var blankNode = dom(document.createElement("div")).addClass(params.slideClass + " " + params.slideBlankClass);
                        $wrapperEl.append(blankNode);
                    }
                    slides = $wrapperEl.children("." + params.slideClass);
                }
            }
            if ("auto" === params.slidesPerView && !params.loopedSlides) params.loopedSlides = slides.length;
            swiper.loopedSlides = Math.ceil(parseFloat(params.loopedSlides || params.slidesPerView, 10));
            swiper.loopedSlides += params.loopAdditionalSlides;
            if (swiper.loopedSlides > slides.length) swiper.loopedSlides = slides.length;
            var prependSlides = [];
            var appendSlides = [];
            slides.each((function(el, index) {
                var slide = dom(el);
                if (index < swiper.loopedSlides) appendSlides.push(el);
                if (index < slides.length && index >= slides.length - swiper.loopedSlides) prependSlides.push(el);
                slide.attr("data-swiper-slide-index", index);
            }));
            for (var _i = 0; _i < appendSlides.length; _i += 1) $wrapperEl.append(dom(appendSlides[_i].cloneNode(true)).addClass(params.slideDuplicateClass));
            for (var _i2 = prependSlides.length - 1; _i2 >= 0; _i2 -= 1) $wrapperEl.prepend(dom(prependSlides[_i2].cloneNode(true)).addClass(params.slideDuplicateClass));
        }
        function loopFix() {
            var swiper = this;
            swiper.emit("beforeLoopFix");
            var activeIndex = swiper.activeIndex, slides = swiper.slides, loopedSlides = swiper.loopedSlides, allowSlidePrev = swiper.allowSlidePrev, allowSlideNext = swiper.allowSlideNext, snapGrid = swiper.snapGrid, rtl = swiper.rtlTranslate;
            var newIndex;
            swiper.allowSlidePrev = true;
            swiper.allowSlideNext = true;
            var snapTranslate = -snapGrid[activeIndex];
            var diff = snapTranslate - swiper.getTranslate();
            if (activeIndex < loopedSlides) {
                newIndex = slides.length - 3 * loopedSlides + activeIndex;
                newIndex += loopedSlides;
                var slideChanged = swiper.slideTo(newIndex, 0, false, true);
                if (slideChanged && 0 !== diff) swiper.setTranslate((rtl ? -swiper.translate : swiper.translate) - diff);
            } else if (activeIndex >= slides.length - loopedSlides) {
                newIndex = -slides.length + activeIndex + loopedSlides;
                newIndex += loopedSlides;
                var _slideChanged = swiper.slideTo(newIndex, 0, false, true);
                if (_slideChanged && 0 !== diff) swiper.setTranslate((rtl ? -swiper.translate : swiper.translate) - diff);
            }
            swiper.allowSlidePrev = allowSlidePrev;
            swiper.allowSlideNext = allowSlideNext;
            swiper.emit("loopFix");
        }
        function loopDestroy() {
            var swiper = this;
            var $wrapperEl = swiper.$wrapperEl, params = swiper.params, slides = swiper.slides;
            $wrapperEl.children("." + params.slideClass + "." + params.slideDuplicateClass + ",." + params.slideClass + "." + params.slideBlankClass).remove();
            slides.removeAttr("data-swiper-slide-index");
        }
        const loop = {
            loopCreate,
            loopFix,
            loopDestroy
        };
        function setGrabCursor(moving) {
            var swiper = this;
            if (swiper.support.touch || !swiper.params.simulateTouch || swiper.params.watchOverflow && swiper.isLocked || swiper.params.cssMode) return;
            var el = swiper.el;
            el.style.cursor = "move";
            el.style.cursor = moving ? "-webkit-grabbing" : "-webkit-grab";
            el.style.cursor = moving ? "-moz-grabbin" : "-moz-grab";
            el.style.cursor = moving ? "grabbing" : "grab";
        }
        function unsetGrabCursor() {
            var swiper = this;
            if (swiper.support.touch || swiper.params.watchOverflow && swiper.isLocked || swiper.params.cssMode) return;
            swiper.el.style.cursor = "";
        }
        const grab_cursor = {
            setGrabCursor,
            unsetGrabCursor
        };
        function appendSlide(slides) {
            var swiper = this;
            var $wrapperEl = swiper.$wrapperEl, params = swiper.params;
            if (params.loop) swiper.loopDestroy();
            if ("object" === typeof slides && "length" in slides) {
                for (var i = 0; i < slides.length; i += 1) if (slides[i]) $wrapperEl.append(slides[i]);
            } else $wrapperEl.append(slides);
            if (params.loop) swiper.loopCreate();
            if (!(params.observer && swiper.support.observer)) swiper.update();
        }
        function prependSlide(slides) {
            var swiper = this;
            var params = swiper.params, $wrapperEl = swiper.$wrapperEl, activeIndex = swiper.activeIndex;
            if (params.loop) swiper.loopDestroy();
            var newActiveIndex = activeIndex + 1;
            if ("object" === typeof slides && "length" in slides) {
                for (var i = 0; i < slides.length; i += 1) if (slides[i]) $wrapperEl.prepend(slides[i]);
                newActiveIndex = activeIndex + slides.length;
            } else $wrapperEl.prepend(slides);
            if (params.loop) swiper.loopCreate();
            if (!(params.observer && swiper.support.observer)) swiper.update();
            swiper.slideTo(newActiveIndex, 0, false);
        }
        function addSlide(index, slides) {
            var swiper = this;
            var $wrapperEl = swiper.$wrapperEl, params = swiper.params, activeIndex = swiper.activeIndex;
            var activeIndexBuffer = activeIndex;
            if (params.loop) {
                activeIndexBuffer -= swiper.loopedSlides;
                swiper.loopDestroy();
                swiper.slides = $wrapperEl.children("." + params.slideClass);
            }
            var baseLength = swiper.slides.length;
            if (index <= 0) {
                swiper.prependSlide(slides);
                return;
            }
            if (index >= baseLength) {
                swiper.appendSlide(slides);
                return;
            }
            var newActiveIndex = activeIndexBuffer > index ? activeIndexBuffer + 1 : activeIndexBuffer;
            var slidesBuffer = [];
            for (var i = baseLength - 1; i >= index; i -= 1) {
                var currentSlide = swiper.slides.eq(i);
                currentSlide.remove();
                slidesBuffer.unshift(currentSlide);
            }
            if ("object" === typeof slides && "length" in slides) {
                for (var _i = 0; _i < slides.length; _i += 1) if (slides[_i]) $wrapperEl.append(slides[_i]);
                newActiveIndex = activeIndexBuffer > index ? activeIndexBuffer + slides.length : activeIndexBuffer;
            } else $wrapperEl.append(slides);
            for (var _i2 = 0; _i2 < slidesBuffer.length; _i2 += 1) $wrapperEl.append(slidesBuffer[_i2]);
            if (params.loop) swiper.loopCreate();
            if (!(params.observer && swiper.support.observer)) swiper.update();
            if (params.loop) swiper.slideTo(newActiveIndex + swiper.loopedSlides, 0, false); else swiper.slideTo(newActiveIndex, 0, false);
        }
        function removeSlide(slidesIndexes) {
            var swiper = this;
            var params = swiper.params, $wrapperEl = swiper.$wrapperEl, activeIndex = swiper.activeIndex;
            var activeIndexBuffer = activeIndex;
            if (params.loop) {
                activeIndexBuffer -= swiper.loopedSlides;
                swiper.loopDestroy();
                swiper.slides = $wrapperEl.children("." + params.slideClass);
            }
            var newActiveIndex = activeIndexBuffer;
            var indexToRemove;
            if ("object" === typeof slidesIndexes && "length" in slidesIndexes) {
                for (var i = 0; i < slidesIndexes.length; i += 1) {
                    indexToRemove = slidesIndexes[i];
                    if (swiper.slides[indexToRemove]) swiper.slides.eq(indexToRemove).remove();
                    if (indexToRemove < newActiveIndex) newActiveIndex -= 1;
                }
                newActiveIndex = Math.max(newActiveIndex, 0);
            } else {
                indexToRemove = slidesIndexes;
                if (swiper.slides[indexToRemove]) swiper.slides.eq(indexToRemove).remove();
                if (indexToRemove < newActiveIndex) newActiveIndex -= 1;
                newActiveIndex = Math.max(newActiveIndex, 0);
            }
            if (params.loop) swiper.loopCreate();
            if (!(params.observer && swiper.support.observer)) swiper.update();
            if (params.loop) swiper.slideTo(newActiveIndex + swiper.loopedSlides, 0, false); else swiper.slideTo(newActiveIndex, 0, false);
        }
        function removeAllSlides() {
            var swiper = this;
            var slidesIndexes = [];
            for (var i = 0; i < swiper.slides.length; i += 1) slidesIndexes.push(i);
            swiper.removeSlide(slidesIndexes);
        }
        const manipulation = {
            appendSlide,
            prependSlide,
            addSlide,
            removeSlide,
            removeAllSlides
        };
        function closestElement(selector, base) {
            if (void 0 === base) base = this;
            function __closestFrom(el) {
                if (!el || el === getDocument() || el === ssr_window_esm_getWindow()) return null;
                if (el.assignedSlot) el = el.assignedSlot;
                var found = el.closest(selector);
                return found || __closestFrom(el.getRootNode().host);
            }
            return __closestFrom(base);
        }
        function onTouchStart(event) {
            var swiper = this;
            var document = getDocument();
            var window = ssr_window_esm_getWindow();
            var data = swiper.touchEventsData;
            var params = swiper.params, touches = swiper.touches, enabled = swiper.enabled;
            if (!enabled) return;
            if (swiper.animating && params.preventInteractionOnTransition) return;
            var e = event;
            if (e.originalEvent) e = e.originalEvent;
            var $targetEl = dom(e.target);
            if ("wrapper" === params.touchEventsTarget) if (!$targetEl.closest(swiper.wrapperEl).length) return;
            data.isTouchEvent = "touchstart" === e.type;
            if (!data.isTouchEvent && "which" in e && 3 === e.which) return;
            if (!data.isTouchEvent && "button" in e && e.button > 0) return;
            if (data.isTouched && data.isMoved) return;
            var swipingClassHasValue = !!params.noSwipingClass && "" !== params.noSwipingClass;
            if (swipingClassHasValue && e.target && e.target.shadowRoot && event.path && event.path[0]) $targetEl = dom(event.path[0]);
            var noSwipingSelector = params.noSwipingSelector ? params.noSwipingSelector : "." + params.noSwipingClass;
            var isTargetShadow = !!(e.target && e.target.shadowRoot);
            if (params.noSwiping && (isTargetShadow ? closestElement(noSwipingSelector, e.target) : $targetEl.closest(noSwipingSelector)[0])) {
                swiper.allowClick = true;
                return;
            }
            if (params.swipeHandler) if (!$targetEl.closest(params.swipeHandler)[0]) return;
            touches.currentX = "touchstart" === e.type ? e.targetTouches[0].pageX : e.pageX;
            touches.currentY = "touchstart" === e.type ? e.targetTouches[0].pageY : e.pageY;
            var startX = touches.currentX;
            var startY = touches.currentY;
            var edgeSwipeDetection = params.edgeSwipeDetection || params.iOSEdgeSwipeDetection;
            var edgeSwipeThreshold = params.edgeSwipeThreshold || params.iOSEdgeSwipeThreshold;
            if (edgeSwipeDetection && (startX <= edgeSwipeThreshold || startX >= window.innerWidth - edgeSwipeThreshold)) if ("prevent" === edgeSwipeDetection) event.preventDefault(); else return;
            utils_extend(data, {
                isTouched: true,
                isMoved: false,
                allowTouchCallbacks: true,
                isScrolling: void 0,
                startMoving: void 0
            });
            touches.startX = startX;
            touches.startY = startY;
            data.touchStartTime = now();
            swiper.allowClick = true;
            swiper.updateSize();
            swiper.swipeDirection = void 0;
            if (params.threshold > 0) data.allowThresholdMove = false;
            if ("touchstart" !== e.type) {
                var preventDefault = true;
                if ($targetEl.is(data.focusableElements)) preventDefault = false;
                if (document.activeElement && dom(document.activeElement).is(data.focusableElements) && document.activeElement !== $targetEl[0]) document.activeElement.blur();
                var shouldPreventDefault = preventDefault && swiper.allowTouchMove && params.touchStartPreventDefault;
                if ((params.touchStartForcePreventDefault || shouldPreventDefault) && !$targetEl[0].isContentEditable) e.preventDefault();
            }
            swiper.emit("touchStart", e);
        }
        function onTouchMove(event) {
            var document = getDocument();
            var swiper = this;
            var data = swiper.touchEventsData;
            var params = swiper.params, touches = swiper.touches, rtl = swiper.rtlTranslate, enabled = swiper.enabled;
            if (!enabled) return;
            var e = event;
            if (e.originalEvent) e = e.originalEvent;
            if (!data.isTouched) {
                if (data.startMoving && data.isScrolling) swiper.emit("touchMoveOpposite", e);
                return;
            }
            if (data.isTouchEvent && "touchmove" !== e.type) return;
            var targetTouch = "touchmove" === e.type && e.targetTouches && (e.targetTouches[0] || e.changedTouches[0]);
            var pageX = "touchmove" === e.type ? targetTouch.pageX : e.pageX;
            var pageY = "touchmove" === e.type ? targetTouch.pageY : e.pageY;
            if (e.preventedByNestedSwiper) {
                touches.startX = pageX;
                touches.startY = pageY;
                return;
            }
            if (!swiper.allowTouchMove) {
                swiper.allowClick = false;
                if (data.isTouched) {
                    utils_extend(touches, {
                        startX: pageX,
                        startY: pageY,
                        currentX: pageX,
                        currentY: pageY
                    });
                    data.touchStartTime = now();
                }
                return;
            }
            if (data.isTouchEvent && params.touchReleaseOnEdges && !params.loop) if (swiper.isVertical()) {
                if (pageY < touches.startY && swiper.translate <= swiper.maxTranslate() || pageY > touches.startY && swiper.translate >= swiper.minTranslate()) {
                    data.isTouched = false;
                    data.isMoved = false;
                    return;
                }
            } else if (pageX < touches.startX && swiper.translate <= swiper.maxTranslate() || pageX > touches.startX && swiper.translate >= swiper.minTranslate()) return;
            if (data.isTouchEvent && document.activeElement) if (e.target === document.activeElement && dom(e.target).is(data.focusableElements)) {
                data.isMoved = true;
                swiper.allowClick = false;
                return;
            }
            if (data.allowTouchCallbacks) swiper.emit("touchMove", e);
            if (e.targetTouches && e.targetTouches.length > 1) return;
            touches.currentX = pageX;
            touches.currentY = pageY;
            var diffX = touches.currentX - touches.startX;
            var diffY = touches.currentY - touches.startY;
            if (swiper.params.threshold && Math.sqrt(Math.pow(diffX, 2) + Math.pow(diffY, 2)) < swiper.params.threshold) return;
            if ("undefined" === typeof data.isScrolling) {
                var touchAngle;
                if (swiper.isHorizontal() && touches.currentY === touches.startY || swiper.isVertical() && touches.currentX === touches.startX) data.isScrolling = false; else if (diffX * diffX + diffY * diffY >= 25) {
                    touchAngle = 180 * Math.atan2(Math.abs(diffY), Math.abs(diffX)) / Math.PI;
                    data.isScrolling = swiper.isHorizontal() ? touchAngle > params.touchAngle : 90 - touchAngle > params.touchAngle;
                }
            }
            if (data.isScrolling) swiper.emit("touchMoveOpposite", e);
            if ("undefined" === typeof data.startMoving) if (touches.currentX !== touches.startX || touches.currentY !== touches.startY) data.startMoving = true;
            if (data.isScrolling) {
                data.isTouched = false;
                return;
            }
            if (!data.startMoving) return;
            swiper.allowClick = false;
            if (!params.cssMode && e.cancelable) e.preventDefault();
            if (params.touchMoveStopPropagation && !params.nested) e.stopPropagation();
            if (!data.isMoved) {
                if (params.loop) swiper.loopFix();
                data.startTranslate = swiper.getTranslate();
                swiper.setTransition(0);
                if (swiper.animating) swiper.$wrapperEl.trigger("webkitTransitionEnd transitionend");
                data.allowMomentumBounce = false;
                if (params.grabCursor && (true === swiper.allowSlideNext || true === swiper.allowSlidePrev)) swiper.setGrabCursor(true);
                swiper.emit("sliderFirstMove", e);
            }
            swiper.emit("sliderMove", e);
            data.isMoved = true;
            var diff = swiper.isHorizontal() ? diffX : diffY;
            touches.diff = diff;
            diff *= params.touchRatio;
            if (rtl) diff = -diff;
            swiper.swipeDirection = diff > 0 ? "prev" : "next";
            data.currentTranslate = diff + data.startTranslate;
            var disableParentSwiper = true;
            var resistanceRatio = params.resistanceRatio;
            if (params.touchReleaseOnEdges) resistanceRatio = 0;
            if (diff > 0 && data.currentTranslate > swiper.minTranslate()) {
                disableParentSwiper = false;
                if (params.resistance) data.currentTranslate = swiper.minTranslate() - 1 + Math.pow(-swiper.minTranslate() + data.startTranslate + diff, resistanceRatio);
            } else if (diff < 0 && data.currentTranslate < swiper.maxTranslate()) {
                disableParentSwiper = false;
                if (params.resistance) data.currentTranslate = swiper.maxTranslate() + 1 - Math.pow(swiper.maxTranslate() - data.startTranslate - diff, resistanceRatio);
            }
            if (disableParentSwiper) e.preventedByNestedSwiper = true;
            if (!swiper.allowSlideNext && "next" === swiper.swipeDirection && data.currentTranslate < data.startTranslate) data.currentTranslate = data.startTranslate;
            if (!swiper.allowSlidePrev && "prev" === swiper.swipeDirection && data.currentTranslate > data.startTranslate) data.currentTranslate = data.startTranslate;
            if (!swiper.allowSlidePrev && !swiper.allowSlideNext) data.currentTranslate = data.startTranslate;
            if (params.threshold > 0) if (Math.abs(diff) > params.threshold || data.allowThresholdMove) {
                if (!data.allowThresholdMove) {
                    data.allowThresholdMove = true;
                    touches.startX = touches.currentX;
                    touches.startY = touches.currentY;
                    data.currentTranslate = data.startTranslate;
                    touches.diff = swiper.isHorizontal() ? touches.currentX - touches.startX : touches.currentY - touches.startY;
                    return;
                }
            } else {
                data.currentTranslate = data.startTranslate;
                return;
            }
            if (!params.followFinger || params.cssMode) return;
            if (params.freeMode || params.watchSlidesProgress || params.watchSlidesVisibility) {
                swiper.updateActiveIndex();
                swiper.updateSlidesClasses();
            }
            if (params.freeMode) {
                if (0 === data.velocities.length) data.velocities.push({
                    position: touches[swiper.isHorizontal() ? "startX" : "startY"],
                    time: data.touchStartTime
                });
                data.velocities.push({
                    position: touches[swiper.isHorizontal() ? "currentX" : "currentY"],
                    time: now()
                });
            }
            swiper.updateProgress(data.currentTranslate);
            swiper.setTranslate(data.currentTranslate);
        }
        function onTouchEnd(event) {
            var swiper = this;
            var data = swiper.touchEventsData;
            var params = swiper.params, touches = swiper.touches, rtl = swiper.rtlTranslate, $wrapperEl = swiper.$wrapperEl, slidesGrid = swiper.slidesGrid, snapGrid = swiper.snapGrid, enabled = swiper.enabled;
            if (!enabled) return;
            var e = event;
            if (e.originalEvent) e = e.originalEvent;
            if (data.allowTouchCallbacks) swiper.emit("touchEnd", e);
            data.allowTouchCallbacks = false;
            if (!data.isTouched) {
                if (data.isMoved && params.grabCursor) swiper.setGrabCursor(false);
                data.isMoved = false;
                data.startMoving = false;
                return;
            }
            if (params.grabCursor && data.isMoved && data.isTouched && (true === swiper.allowSlideNext || true === swiper.allowSlidePrev)) swiper.setGrabCursor(false);
            var touchEndTime = now();
            var timeDiff = touchEndTime - data.touchStartTime;
            if (swiper.allowClick) {
                swiper.updateClickedSlide(e);
                swiper.emit("tap click", e);
                if (timeDiff < 300 && touchEndTime - data.lastClickTime < 300) swiper.emit("doubleTap doubleClick", e);
            }
            data.lastClickTime = now();
            nextTick((function() {
                if (!swiper.destroyed) swiper.allowClick = true;
            }));
            if (!data.isTouched || !data.isMoved || !swiper.swipeDirection || 0 === touches.diff || data.currentTranslate === data.startTranslate) {
                data.isTouched = false;
                data.isMoved = false;
                data.startMoving = false;
                return;
            }
            data.isTouched = false;
            data.isMoved = false;
            data.startMoving = false;
            var currentPos;
            if (params.followFinger) currentPos = rtl ? swiper.translate : -swiper.translate; else currentPos = -data.currentTranslate;
            if (params.cssMode) return;
            if (params.freeMode) {
                if (currentPos < -swiper.minTranslate()) {
                    swiper.slideTo(swiper.activeIndex);
                    return;
                }
                if (currentPos > -swiper.maxTranslate()) {
                    if (swiper.slides.length < snapGrid.length) swiper.slideTo(snapGrid.length - 1); else swiper.slideTo(swiper.slides.length - 1);
                    return;
                }
                if (params.freeModeMomentum) {
                    if (data.velocities.length > 1) {
                        var lastMoveEvent = data.velocities.pop();
                        var velocityEvent = data.velocities.pop();
                        var distance = lastMoveEvent.position - velocityEvent.position;
                        var time = lastMoveEvent.time - velocityEvent.time;
                        swiper.velocity = distance / time;
                        swiper.velocity /= 2;
                        if (Math.abs(swiper.velocity) < params.freeModeMinimumVelocity) swiper.velocity = 0;
                        if (time > 150 || now() - lastMoveEvent.time > 300) swiper.velocity = 0;
                    } else swiper.velocity = 0;
                    swiper.velocity *= params.freeModeMomentumVelocityRatio;
                    data.velocities.length = 0;
                    var momentumDuration = 1e3 * params.freeModeMomentumRatio;
                    var momentumDistance = swiper.velocity * momentumDuration;
                    var newPosition = swiper.translate + momentumDistance;
                    if (rtl) newPosition = -newPosition;
                    var doBounce = false;
                    var afterBouncePosition;
                    var bounceAmount = 20 * Math.abs(swiper.velocity) * params.freeModeMomentumBounceRatio;
                    var needsLoopFix;
                    if (newPosition < swiper.maxTranslate()) {
                        if (params.freeModeMomentumBounce) {
                            if (newPosition + swiper.maxTranslate() < -bounceAmount) newPosition = swiper.maxTranslate() - bounceAmount;
                            afterBouncePosition = swiper.maxTranslate();
                            doBounce = true;
                            data.allowMomentumBounce = true;
                        } else newPosition = swiper.maxTranslate();
                        if (params.loop && params.centeredSlides) needsLoopFix = true;
                    } else if (newPosition > swiper.minTranslate()) {
                        if (params.freeModeMomentumBounce) {
                            if (newPosition - swiper.minTranslate() > bounceAmount) newPosition = swiper.minTranslate() + bounceAmount;
                            afterBouncePosition = swiper.minTranslate();
                            doBounce = true;
                            data.allowMomentumBounce = true;
                        } else newPosition = swiper.minTranslate();
                        if (params.loop && params.centeredSlides) needsLoopFix = true;
                    } else if (params.freeModeSticky) {
                        var nextSlide;
                        for (var j = 0; j < snapGrid.length; j += 1) if (snapGrid[j] > -newPosition) {
                            nextSlide = j;
                            break;
                        }
                        if (Math.abs(snapGrid[nextSlide] - newPosition) < Math.abs(snapGrid[nextSlide - 1] - newPosition) || "next" === swiper.swipeDirection) newPosition = snapGrid[nextSlide]; else newPosition = snapGrid[nextSlide - 1];
                        newPosition = -newPosition;
                    }
                    if (needsLoopFix) swiper.once("transitionEnd", (function() {
                        swiper.loopFix();
                    }));
                    if (0 !== swiper.velocity) {
                        if (rtl) momentumDuration = Math.abs((-newPosition - swiper.translate) / swiper.velocity); else momentumDuration = Math.abs((newPosition - swiper.translate) / swiper.velocity);
                        if (params.freeModeSticky) {
                            var moveDistance = Math.abs((rtl ? -newPosition : newPosition) - swiper.translate);
                            var currentSlideSize = swiper.slidesSizesGrid[swiper.activeIndex];
                            if (moveDistance < currentSlideSize) momentumDuration = params.speed; else if (moveDistance < 2 * currentSlideSize) momentumDuration = 1.5 * params.speed; else momentumDuration = 2.5 * params.speed;
                        }
                    } else if (params.freeModeSticky) {
                        swiper.slideToClosest();
                        return;
                    }
                    if (params.freeModeMomentumBounce && doBounce) {
                        swiper.updateProgress(afterBouncePosition);
                        swiper.setTransition(momentumDuration);
                        swiper.setTranslate(newPosition);
                        swiper.transitionStart(true, swiper.swipeDirection);
                        swiper.animating = true;
                        $wrapperEl.transitionEnd((function() {
                            if (!swiper || swiper.destroyed || !data.allowMomentumBounce) return;
                            swiper.emit("momentumBounce");
                            swiper.setTransition(params.speed);
                            setTimeout((function() {
                                swiper.setTranslate(afterBouncePosition);
                                $wrapperEl.transitionEnd((function() {
                                    if (!swiper || swiper.destroyed) return;
                                    swiper.transitionEnd();
                                }));
                            }), 0);
                        }));
                    } else if (swiper.velocity) {
                        swiper.updateProgress(newPosition);
                        swiper.setTransition(momentumDuration);
                        swiper.setTranslate(newPosition);
                        swiper.transitionStart(true, swiper.swipeDirection);
                        if (!swiper.animating) {
                            swiper.animating = true;
                            $wrapperEl.transitionEnd((function() {
                                if (!swiper || swiper.destroyed) return;
                                swiper.transitionEnd();
                            }));
                        }
                    } else {
                        swiper.emit("_freeModeNoMomentumRelease");
                        swiper.updateProgress(newPosition);
                    }
                    swiper.updateActiveIndex();
                    swiper.updateSlidesClasses();
                } else if (params.freeModeSticky) {
                    swiper.slideToClosest();
                    return;
                } else if (params.freeMode) swiper.emit("_freeModeNoMomentumRelease");
                if (!params.freeModeMomentum || timeDiff >= params.longSwipesMs) {
                    swiper.updateProgress();
                    swiper.updateActiveIndex();
                    swiper.updateSlidesClasses();
                }
                return;
            }
            var stopIndex = 0;
            var groupSize = swiper.slidesSizesGrid[0];
            for (var i = 0; i < slidesGrid.length; i += i < params.slidesPerGroupSkip ? 1 : params.slidesPerGroup) {
                var _increment = i < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;
                if ("undefined" !== typeof slidesGrid[i + _increment]) {
                    if (currentPos >= slidesGrid[i] && currentPos < slidesGrid[i + _increment]) {
                        stopIndex = i;
                        groupSize = slidesGrid[i + _increment] - slidesGrid[i];
                    }
                } else if (currentPos >= slidesGrid[i]) {
                    stopIndex = i;
                    groupSize = slidesGrid[slidesGrid.length - 1] - slidesGrid[slidesGrid.length - 2];
                }
            }
            var ratio = (currentPos - slidesGrid[stopIndex]) / groupSize;
            var increment = stopIndex < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;
            if (timeDiff > params.longSwipesMs) {
                if (!params.longSwipes) {
                    swiper.slideTo(swiper.activeIndex);
                    return;
                }
                if ("next" === swiper.swipeDirection) if (ratio >= params.longSwipesRatio) swiper.slideTo(stopIndex + increment); else swiper.slideTo(stopIndex);
                if ("prev" === swiper.swipeDirection) if (ratio > 1 - params.longSwipesRatio) swiper.slideTo(stopIndex + increment); else swiper.slideTo(stopIndex);
            } else {
                if (!params.shortSwipes) {
                    swiper.slideTo(swiper.activeIndex);
                    return;
                }
                var isNavButtonTarget = swiper.navigation && (e.target === swiper.navigation.nextEl || e.target === swiper.navigation.prevEl);
                if (!isNavButtonTarget) {
                    if ("next" === swiper.swipeDirection) swiper.slideTo(stopIndex + increment);
                    if ("prev" === swiper.swipeDirection) swiper.slideTo(stopIndex);
                } else if (e.target === swiper.navigation.nextEl) swiper.slideTo(stopIndex + increment); else swiper.slideTo(stopIndex);
            }
        }
        function onResize() {
            var swiper = this;
            var params = swiper.params, el = swiper.el;
            if (el && 0 === el.offsetWidth) return;
            if (params.breakpoints) swiper.setBreakpoint();
            var allowSlideNext = swiper.allowSlideNext, allowSlidePrev = swiper.allowSlidePrev, snapGrid = swiper.snapGrid;
            swiper.allowSlideNext = true;
            swiper.allowSlidePrev = true;
            swiper.updateSize();
            swiper.updateSlides();
            swiper.updateSlidesClasses();
            if (("auto" === params.slidesPerView || params.slidesPerView > 1) && swiper.isEnd && !swiper.isBeginning && !swiper.params.centeredSlides) swiper.slideTo(swiper.slides.length - 1, 0, false, true); else swiper.slideTo(swiper.activeIndex, 0, false, true);
            if (swiper.autoplay && swiper.autoplay.running && swiper.autoplay.paused) swiper.autoplay.run();
            swiper.allowSlidePrev = allowSlidePrev;
            swiper.allowSlideNext = allowSlideNext;
            if (swiper.params.watchOverflow && snapGrid !== swiper.snapGrid) swiper.checkOverflow();
        }
        function onClick(e) {
            var swiper = this;
            if (!swiper.enabled) return;
            if (!swiper.allowClick) {
                if (swiper.params.preventClicks) e.preventDefault();
                if (swiper.params.preventClicksPropagation && swiper.animating) {
                    e.stopPropagation();
                    e.stopImmediatePropagation();
                }
            }
        }
        function onScroll() {
            var swiper = this;
            var wrapperEl = swiper.wrapperEl, rtlTranslate = swiper.rtlTranslate, enabled = swiper.enabled;
            if (!enabled) return;
            swiper.previousTranslate = swiper.translate;
            if (swiper.isHorizontal()) if (rtlTranslate) swiper.translate = wrapperEl.scrollWidth - wrapperEl.offsetWidth - wrapperEl.scrollLeft; else swiper.translate = -wrapperEl.scrollLeft; else swiper.translate = -wrapperEl.scrollTop;
            if (-0 === swiper.translate) swiper.translate = 0;
            swiper.updateActiveIndex();
            swiper.updateSlidesClasses();
            var newProgress;
            var translatesDiff = swiper.maxTranslate() - swiper.minTranslate();
            if (0 === translatesDiff) newProgress = 0; else newProgress = (swiper.translate - swiper.minTranslate()) / translatesDiff;
            if (newProgress !== swiper.progress) swiper.updateProgress(rtlTranslate ? -swiper.translate : swiper.translate);
            swiper.emit("setTranslate", swiper.translate, false);
        }
        var dummyEventAttached = false;
        function dummyEventListener() {}
        function attachEvents() {
            var swiper = this;
            var document = getDocument();
            var params = swiper.params, touchEvents = swiper.touchEvents, el = swiper.el, wrapperEl = swiper.wrapperEl, device = swiper.device, support = swiper.support;
            swiper.onTouchStart = onTouchStart.bind(swiper);
            swiper.onTouchMove = onTouchMove.bind(swiper);
            swiper.onTouchEnd = onTouchEnd.bind(swiper);
            if (params.cssMode) swiper.onScroll = onScroll.bind(swiper);
            swiper.onClick = onClick.bind(swiper);
            var capture = !!params.nested;
            if (!support.touch && support.pointerEvents) {
                el.addEventListener(touchEvents.start, swiper.onTouchStart, false);
                document.addEventListener(touchEvents.move, swiper.onTouchMove, capture);
                document.addEventListener(touchEvents.end, swiper.onTouchEnd, false);
            } else {
                if (support.touch) {
                    var passiveListener = "touchstart" === touchEvents.start && support.passiveListener && params.passiveListeners ? {
                        passive: true,
                        capture: false
                    } : false;
                    el.addEventListener(touchEvents.start, swiper.onTouchStart, passiveListener);
                    el.addEventListener(touchEvents.move, swiper.onTouchMove, support.passiveListener ? {
                        passive: false,
                        capture
                    } : capture);
                    el.addEventListener(touchEvents.end, swiper.onTouchEnd, passiveListener);
                    if (touchEvents.cancel) el.addEventListener(touchEvents.cancel, swiper.onTouchEnd, passiveListener);
                    if (!dummyEventAttached) {
                        document.addEventListener("touchstart", dummyEventListener);
                        dummyEventAttached = true;
                    }
                }
                if (params.simulateTouch && !device.ios && !device.android || params.simulateTouch && !support.touch && device.ios) {
                    el.addEventListener("mousedown", swiper.onTouchStart, false);
                    document.addEventListener("mousemove", swiper.onTouchMove, capture);
                    document.addEventListener("mouseup", swiper.onTouchEnd, false);
                }
            }
            if (params.preventClicks || params.preventClicksPropagation) el.addEventListener("click", swiper.onClick, true);
            if (params.cssMode) wrapperEl.addEventListener("scroll", swiper.onScroll);
            if (params.updateOnWindowResize) swiper.on(device.ios || device.android ? "resize orientationchange observerUpdate" : "resize observerUpdate", onResize, true); else swiper.on("observerUpdate", onResize, true);
        }
        function detachEvents() {
            var swiper = this;
            var document = getDocument();
            var params = swiper.params, touchEvents = swiper.touchEvents, el = swiper.el, wrapperEl = swiper.wrapperEl, device = swiper.device, support = swiper.support;
            var capture = !!params.nested;
            if (!support.touch && support.pointerEvents) {
                el.removeEventListener(touchEvents.start, swiper.onTouchStart, false);
                document.removeEventListener(touchEvents.move, swiper.onTouchMove, capture);
                document.removeEventListener(touchEvents.end, swiper.onTouchEnd, false);
            } else {
                if (support.touch) {
                    var passiveListener = "onTouchStart" === touchEvents.start && support.passiveListener && params.passiveListeners ? {
                        passive: true,
                        capture: false
                    } : false;
                    el.removeEventListener(touchEvents.start, swiper.onTouchStart, passiveListener);
                    el.removeEventListener(touchEvents.move, swiper.onTouchMove, capture);
                    el.removeEventListener(touchEvents.end, swiper.onTouchEnd, passiveListener);
                    if (touchEvents.cancel) el.removeEventListener(touchEvents.cancel, swiper.onTouchEnd, passiveListener);
                }
                if (params.simulateTouch && !device.ios && !device.android || params.simulateTouch && !support.touch && device.ios) {
                    el.removeEventListener("mousedown", swiper.onTouchStart, false);
                    document.removeEventListener("mousemove", swiper.onTouchMove, capture);
                    document.removeEventListener("mouseup", swiper.onTouchEnd, false);
                }
            }
            if (params.preventClicks || params.preventClicksPropagation) el.removeEventListener("click", swiper.onClick, true);
            if (params.cssMode) wrapperEl.removeEventListener("scroll", swiper.onScroll);
            swiper.off(device.ios || device.android ? "resize orientationchange observerUpdate" : "resize observerUpdate", onResize);
        }
        const events = {
            attachEvents,
            detachEvents
        };
        function setBreakpoint() {
            var swiper = this;
            var activeIndex = swiper.activeIndex, initialized = swiper.initialized, _swiper$loopedSlides = swiper.loopedSlides, loopedSlides = void 0 === _swiper$loopedSlides ? 0 : _swiper$loopedSlides, params = swiper.params, $el = swiper.$el;
            var breakpoints = params.breakpoints;
            if (!breakpoints || breakpoints && 0 === Object.keys(breakpoints).length) return;
            var breakpoint = swiper.getBreakpoint(breakpoints, swiper.params.breakpointsBase, swiper.el);
            if (!breakpoint || swiper.currentBreakpoint === breakpoint) return;
            var breakpointOnlyParams = breakpoint in breakpoints ? breakpoints[breakpoint] : void 0;
            if (breakpointOnlyParams) [ "slidesPerView", "spaceBetween", "slidesPerGroup", "slidesPerGroupSkip", "slidesPerColumn" ].forEach((function(param) {
                var paramValue = breakpointOnlyParams[param];
                if ("undefined" === typeof paramValue) return;
                if ("slidesPerView" === param && ("AUTO" === paramValue || "auto" === paramValue)) breakpointOnlyParams[param] = "auto"; else if ("slidesPerView" === param) breakpointOnlyParams[param] = parseFloat(paramValue); else breakpointOnlyParams[param] = parseInt(paramValue, 10);
            }));
            var breakpointParams = breakpointOnlyParams || swiper.originalParams;
            var wasMultiRow = params.slidesPerColumn > 1;
            var isMultiRow = breakpointParams.slidesPerColumn > 1;
            var wasEnabled = params.enabled;
            if (wasMultiRow && !isMultiRow) {
                $el.removeClass(params.containerModifierClass + "multirow " + params.containerModifierClass + "multirow-column");
                swiper.emitContainerClasses();
            } else if (!wasMultiRow && isMultiRow) {
                $el.addClass(params.containerModifierClass + "multirow");
                if (breakpointParams.slidesPerColumnFill && "column" === breakpointParams.slidesPerColumnFill || !breakpointParams.slidesPerColumnFill && "column" === params.slidesPerColumnFill) $el.addClass(params.containerModifierClass + "multirow-column");
                swiper.emitContainerClasses();
            }
            var directionChanged = breakpointParams.direction && breakpointParams.direction !== params.direction;
            var needsReLoop = params.loop && (breakpointParams.slidesPerView !== params.slidesPerView || directionChanged);
            if (directionChanged && initialized) swiper.changeDirection();
            utils_extend(swiper.params, breakpointParams);
            var isEnabled = swiper.params.enabled;
            utils_extend(swiper, {
                allowTouchMove: swiper.params.allowTouchMove,
                allowSlideNext: swiper.params.allowSlideNext,
                allowSlidePrev: swiper.params.allowSlidePrev
            });
            if (wasEnabled && !isEnabled) swiper.disable(); else if (!wasEnabled && isEnabled) swiper.enable();
            swiper.currentBreakpoint = breakpoint;
            swiper.emit("_beforeBreakpoint", breakpointParams);
            if (needsReLoop && initialized) {
                swiper.loopDestroy();
                swiper.loopCreate();
                swiper.updateSlides();
                swiper.slideTo(activeIndex - loopedSlides + swiper.loopedSlides, 0, false);
            }
            swiper.emit("breakpoint", breakpointParams);
        }
        function getBreakpoint(breakpoints, base, containerEl) {
            if (void 0 === base) base = "window";
            if (!breakpoints || "container" === base && !containerEl) return;
            var breakpoint = false;
            var window = ssr_window_esm_getWindow();
            var currentHeight = "window" === base ? window.innerHeight : containerEl.clientHeight;
            var points = Object.keys(breakpoints).map((function(point) {
                if ("string" === typeof point && 0 === point.indexOf("@")) {
                    var minRatio = parseFloat(point.substr(1));
                    var value = currentHeight * minRatio;
                    return {
                        value,
                        point
                    };
                }
                return {
                    value: point,
                    point
                };
            }));
            points.sort((function(a, b) {
                return parseInt(a.value, 10) - parseInt(b.value, 10);
            }));
            for (var i = 0; i < points.length; i += 1) {
                var _points$i = points[i], point = _points$i.point, value = _points$i.value;
                if ("window" === base) {
                    if (window.matchMedia("(min-width: " + value + "px)").matches) breakpoint = point;
                } else if (value <= containerEl.clientWidth) breakpoint = point;
            }
            return breakpoint || "max";
        }
        const breakpoints = {
            setBreakpoint,
            getBreakpoint
        };
        function prepareClasses(entries, prefix) {
            var resultClasses = [];
            entries.forEach((function(item) {
                if ("object" === typeof item) Object.keys(item).forEach((function(classNames) {
                    if (item[classNames]) resultClasses.push(prefix + classNames);
                })); else if ("string" === typeof item) resultClasses.push(prefix + item);
            }));
            return resultClasses;
        }
        function addClasses() {
            var swiper = this;
            var classNames = swiper.classNames, params = swiper.params, rtl = swiper.rtl, $el = swiper.$el, device = swiper.device, support = swiper.support;
            var suffixes = prepareClasses([ "initialized", params.direction, {
                "pointer-events": support.pointerEvents && !support.touch
            }, {
                "free-mode": params.freeMode
            }, {
                autoheight: params.autoHeight
            }, {
                rtl
            }, {
                multirow: params.slidesPerColumn > 1
            }, {
                "multirow-column": params.slidesPerColumn > 1 && "column" === params.slidesPerColumnFill
            }, {
                android: device.android
            }, {
                ios: device.ios
            }, {
                "css-mode": params.cssMode
            } ], params.containerModifierClass);
            classNames.push.apply(classNames, suffixes);
            $el.addClass([].concat(classNames).join(" "));
            swiper.emitContainerClasses();
        }
        function removeClasses() {
            var swiper = this;
            var $el = swiper.$el, classNames = swiper.classNames;
            $el.removeClass(classNames.join(" "));
            swiper.emitContainerClasses();
        }
        const core_classes = {
            addClasses,
            removeClasses
        };
        function loadImage(imageEl, src, srcset, sizes, checkForComplete, callback) {
            var window = ssr_window_esm_getWindow();
            var image;
            function onReady() {
                if (callback) callback();
            }
            var isPicture = dom(imageEl).parent("picture")[0];
            if (!isPicture && (!imageEl.complete || !checkForComplete)) if (src) {
                image = new window.Image;
                image.onload = onReady;
                image.onerror = onReady;
                if (sizes) image.sizes = sizes;
                if (srcset) image.srcset = srcset;
                if (src) image.src = src;
            } else onReady(); else onReady();
        }
        function preloadImages() {
            var swiper = this;
            swiper.imagesToLoad = swiper.$el.find("img");
            function onReady() {
                if ("undefined" === typeof swiper || null === swiper || !swiper || swiper.destroyed) return;
                if (void 0 !== swiper.imagesLoaded) swiper.imagesLoaded += 1;
                if (swiper.imagesLoaded === swiper.imagesToLoad.length) {
                    if (swiper.params.updateOnImagesReady) swiper.update();
                    swiper.emit("imagesReady");
                }
            }
            for (var i = 0; i < swiper.imagesToLoad.length; i += 1) {
                var imageEl = swiper.imagesToLoad[i];
                swiper.loadImage(imageEl, imageEl.currentSrc || imageEl.getAttribute("src"), imageEl.srcset || imageEl.getAttribute("srcset"), imageEl.sizes || imageEl.getAttribute("sizes"), true, onReady);
            }
        }
        const core_images = {
            loadImage,
            preloadImages
        };
        function checkOverflow() {
            var swiper = this;
            var params = swiper.params;
            var wasLocked = swiper.isLocked;
            var lastSlidePosition = swiper.slides.length > 0 && params.slidesOffsetBefore + params.spaceBetween * (swiper.slides.length - 1) + swiper.slides[0].offsetWidth * swiper.slides.length;
            if (params.slidesOffsetBefore && params.slidesOffsetAfter && lastSlidePosition) swiper.isLocked = lastSlidePosition <= swiper.size; else swiper.isLocked = 1 === swiper.snapGrid.length;
            swiper.allowSlideNext = !swiper.isLocked;
            swiper.allowSlidePrev = !swiper.isLocked;
            if (wasLocked !== swiper.isLocked) swiper.emit(swiper.isLocked ? "lock" : "unlock");
            if (wasLocked && wasLocked !== swiper.isLocked) {
                swiper.isEnd = false;
                if (swiper.navigation) swiper.navigation.update();
            }
        }
        const check_overflow = {
            checkOverflow
        };
        const core_defaults = {
            init: true,
            direction: "horizontal",
            touchEventsTarget: "container",
            initialSlide: 0,
            speed: 300,
            cssMode: false,
            updateOnWindowResize: true,
            resizeObserver: false,
            nested: false,
            createElements: false,
            enabled: true,
            focusableElements: "input, select, option, textarea, button, video, label",
            width: null,
            height: null,
            preventInteractionOnTransition: false,
            userAgent: null,
            url: null,
            edgeSwipeDetection: false,
            edgeSwipeThreshold: 20,
            freeMode: false,
            freeModeMomentum: true,
            freeModeMomentumRatio: 1,
            freeModeMomentumBounce: true,
            freeModeMomentumBounceRatio: 1,
            freeModeMomentumVelocityRatio: 1,
            freeModeSticky: false,
            freeModeMinimumVelocity: .02,
            autoHeight: false,
            setWrapperSize: false,
            virtualTranslate: false,
            effect: "slide",
            breakpoints: void 0,
            breakpointsBase: "window",
            spaceBetween: 0,
            slidesPerView: 1,
            slidesPerColumn: 1,
            slidesPerColumnFill: "column",
            slidesPerGroup: 1,
            slidesPerGroupSkip: 0,
            centeredSlides: false,
            centeredSlidesBounds: false,
            slidesOffsetBefore: 0,
            slidesOffsetAfter: 0,
            normalizeSlideIndex: true,
            centerInsufficientSlides: false,
            watchOverflow: false,
            roundLengths: false,
            touchRatio: 1,
            touchAngle: 45,
            simulateTouch: true,
            shortSwipes: true,
            longSwipes: true,
            longSwipesRatio: .5,
            longSwipesMs: 300,
            followFinger: true,
            allowTouchMove: true,
            threshold: 0,
            touchMoveStopPropagation: false,
            touchStartPreventDefault: true,
            touchStartForcePreventDefault: false,
            touchReleaseOnEdges: false,
            uniqueNavElements: true,
            resistance: true,
            resistanceRatio: .85,
            watchSlidesProgress: false,
            watchSlidesVisibility: false,
            grabCursor: false,
            preventClicks: true,
            preventClicksPropagation: true,
            slideToClickedSlide: false,
            preloadImages: true,
            updateOnImagesReady: true,
            loop: false,
            loopAdditionalSlides: 0,
            loopedSlides: null,
            loopFillGroupWithBlank: false,
            loopPreventsSlide: true,
            allowSlidePrev: true,
            allowSlideNext: true,
            swipeHandler: null,
            noSwiping: true,
            noSwipingClass: "swiper-no-swiping",
            noSwipingSelector: null,
            passiveListeners: true,
            containerModifierClass: "swiper-container-",
            slideClass: "swiper-slide",
            slideBlankClass: "swiper-slide-invisible-blank",
            slideActiveClass: "swiper-slide-active",
            slideDuplicateActiveClass: "swiper-slide-duplicate-active",
            slideVisibleClass: "swiper-slide-visible",
            slideDuplicateClass: "swiper-slide-duplicate",
            slideNextClass: "swiper-slide-next",
            slideDuplicateNextClass: "swiper-slide-duplicate-next",
            slidePrevClass: "swiper-slide-prev",
            slideDuplicatePrevClass: "swiper-slide-duplicate-prev",
            wrapperClass: "swiper-wrapper",
            runCallbacksOnInit: true,
            _emitClasses: false
        };
        function _defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }
        function _createClass(Constructor, protoProps, staticProps) {
            if (protoProps) _defineProperties(Constructor.prototype, protoProps);
            if (staticProps) _defineProperties(Constructor, staticProps);
            return Constructor;
        }
        var prototypes = {
            modular,
            eventsEmitter: events_emitter,
            update,
            translate,
            transition: core_transition,
            slide,
            loop,
            grabCursor: grab_cursor,
            manipulation,
            events,
            breakpoints,
            checkOverflow: check_overflow,
            classes: core_classes,
            images: core_images
        };
        var extendedDefaults = {};
        var Swiper = function() {
            function Swiper() {
                var el;
                var params;
                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) args[_key] = arguments[_key];
                if (1 === args.length && args[0].constructor && "Object" === Object.prototype.toString.call(args[0]).slice(8, -1)) params = args[0]; else {
                    el = args[0];
                    params = args[1];
                }
                if (!params) params = {};
                params = utils_extend({}, params);
                if (el && !params.el) params.el = el;
                if (params.el && dom(params.el).length > 1) {
                    var swipers = [];
                    dom(params.el).each((function(containerEl) {
                        var newParams = utils_extend({}, params, {
                            el: containerEl
                        });
                        swipers.push(new Swiper(newParams));
                    }));
                    return swipers;
                }
                var swiper = this;
                swiper.__swiper__ = true;
                swiper.support = getSupport();
                swiper.device = getDevice({
                    userAgent: params.userAgent
                });
                swiper.browser = getBrowser();
                swiper.eventsListeners = {};
                swiper.eventsAnyListeners = [];
                if ("undefined" === typeof swiper.modules) swiper.modules = {};
                Object.keys(swiper.modules).forEach((function(moduleName) {
                    var module = swiper.modules[moduleName];
                    if (module.params) {
                        var moduleParamName = Object.keys(module.params)[0];
                        var moduleParams = module.params[moduleParamName];
                        if ("object" !== typeof moduleParams || null === moduleParams) return;
                        if ([ "navigation", "pagination", "scrollbar" ].indexOf(moduleParamName) >= 0 && true === params[moduleParamName]) params[moduleParamName] = {
                            auto: true
                        };
                        if (!(moduleParamName in params && "enabled" in moduleParams)) return;
                        if (true === params[moduleParamName]) params[moduleParamName] = {
                            enabled: true
                        };
                        if ("object" === typeof params[moduleParamName] && !("enabled" in params[moduleParamName])) params[moduleParamName].enabled = true;
                        if (!params[moduleParamName]) params[moduleParamName] = {
                            enabled: false
                        };
                    }
                }));
                var swiperParams = utils_extend({}, core_defaults);
                swiper.useParams(swiperParams);
                swiper.params = utils_extend({}, swiperParams, extendedDefaults, params);
                swiper.originalParams = utils_extend({}, swiper.params);
                swiper.passedParams = utils_extend({}, params);
                if (swiper.params && swiper.params.on) Object.keys(swiper.params.on).forEach((function(eventName) {
                    swiper.on(eventName, swiper.params.on[eventName]);
                }));
                if (swiper.params && swiper.params.onAny) swiper.onAny(swiper.params.onAny);
                swiper.$ = dom;
                utils_extend(swiper, {
                    enabled: swiper.params.enabled,
                    el,
                    classNames: [],
                    slides: dom(),
                    slidesGrid: [],
                    snapGrid: [],
                    slidesSizesGrid: [],
                    isHorizontal: function() {
                        return "horizontal" === swiper.params.direction;
                    },
                    isVertical: function() {
                        return "vertical" === swiper.params.direction;
                    },
                    activeIndex: 0,
                    realIndex: 0,
                    isBeginning: true,
                    isEnd: false,
                    translate: 0,
                    previousTranslate: 0,
                    progress: 0,
                    velocity: 0,
                    animating: false,
                    allowSlideNext: swiper.params.allowSlideNext,
                    allowSlidePrev: swiper.params.allowSlidePrev,
                    touchEvents: function() {
                        var touch = [ "touchstart", "touchmove", "touchend", "touchcancel" ];
                        var desktop = [ "mousedown", "mousemove", "mouseup" ];
                        if (swiper.support.pointerEvents) desktop = [ "pointerdown", "pointermove", "pointerup" ];
                        swiper.touchEventsTouch = {
                            start: touch[0],
                            move: touch[1],
                            end: touch[2],
                            cancel: touch[3]
                        };
                        swiper.touchEventsDesktop = {
                            start: desktop[0],
                            move: desktop[1],
                            end: desktop[2]
                        };
                        return swiper.support.touch || !swiper.params.simulateTouch ? swiper.touchEventsTouch : swiper.touchEventsDesktop;
                    }(),
                    touchEventsData: {
                        isTouched: void 0,
                        isMoved: void 0,
                        allowTouchCallbacks: void 0,
                        touchStartTime: void 0,
                        isScrolling: void 0,
                        currentTranslate: void 0,
                        startTranslate: void 0,
                        allowThresholdMove: void 0,
                        focusableElements: swiper.params.focusableElements,
                        lastClickTime: now(),
                        clickTimeout: void 0,
                        velocities: [],
                        allowMomentumBounce: void 0,
                        isTouchEvent: void 0,
                        startMoving: void 0
                    },
                    allowClick: true,
                    allowTouchMove: swiper.params.allowTouchMove,
                    touches: {
                        startX: 0,
                        startY: 0,
                        currentX: 0,
                        currentY: 0,
                        diff: 0
                    },
                    imagesToLoad: [],
                    imagesLoaded: 0
                });
                swiper.useModules();
                swiper.emit("_swiper");
                if (swiper.params.init) swiper.init();
                return swiper;
            }
            var _proto = Swiper.prototype;
            _proto.enable = function() {
                var swiper = this;
                if (swiper.enabled) return;
                swiper.enabled = true;
                if (swiper.params.grabCursor) swiper.setGrabCursor();
                swiper.emit("enable");
            };
            _proto.disable = function() {
                var swiper = this;
                if (!swiper.enabled) return;
                swiper.enabled = false;
                if (swiper.params.grabCursor) swiper.unsetGrabCursor();
                swiper.emit("disable");
            };
            _proto.setProgress = function(progress, speed) {
                var swiper = this;
                progress = Math.min(Math.max(progress, 0), 1);
                var min = swiper.minTranslate();
                var max = swiper.maxTranslate();
                var current = (max - min) * progress + min;
                swiper.translateTo(current, "undefined" === typeof speed ? 0 : speed);
                swiper.updateActiveIndex();
                swiper.updateSlidesClasses();
            };
            _proto.emitContainerClasses = function() {
                var swiper = this;
                if (!swiper.params._emitClasses || !swiper.el) return;
                var classes = swiper.el.className.split(" ").filter((function(className) {
                    return 0 === className.indexOf("swiper-container") || 0 === className.indexOf(swiper.params.containerModifierClass);
                }));
                swiper.emit("_containerClasses", classes.join(" "));
            };
            _proto.getSlideClasses = function(slideEl) {
                var swiper = this;
                return slideEl.className.split(" ").filter((function(className) {
                    return 0 === className.indexOf("swiper-slide") || 0 === className.indexOf(swiper.params.slideClass);
                })).join(" ");
            };
            _proto.emitSlidesClasses = function() {
                var swiper = this;
                if (!swiper.params._emitClasses || !swiper.el) return;
                var updates = [];
                swiper.slides.each((function(slideEl) {
                    var classNames = swiper.getSlideClasses(slideEl);
                    updates.push({
                        slideEl,
                        classNames
                    });
                    swiper.emit("_slideClass", slideEl, classNames);
                }));
                swiper.emit("_slideClasses", updates);
            };
            _proto.slidesPerViewDynamic = function() {
                var swiper = this;
                var params = swiper.params, slides = swiper.slides, slidesGrid = swiper.slidesGrid, swiperSize = swiper.size, activeIndex = swiper.activeIndex;
                var spv = 1;
                if (params.centeredSlides) {
                    var slideSize = slides[activeIndex].swiperSlideSize;
                    var breakLoop;
                    for (var i = activeIndex + 1; i < slides.length; i += 1) if (slides[i] && !breakLoop) {
                        slideSize += slides[i].swiperSlideSize;
                        spv += 1;
                        if (slideSize > swiperSize) breakLoop = true;
                    }
                    for (var _i = activeIndex - 1; _i >= 0; _i -= 1) if (slides[_i] && !breakLoop) {
                        slideSize += slides[_i].swiperSlideSize;
                        spv += 1;
                        if (slideSize > swiperSize) breakLoop = true;
                    }
                } else for (var _i2 = activeIndex + 1; _i2 < slides.length; _i2 += 1) if (slidesGrid[_i2] - slidesGrid[activeIndex] < swiperSize) spv += 1;
                return spv;
            };
            _proto.update = function() {
                var swiper = this;
                if (!swiper || swiper.destroyed) return;
                var snapGrid = swiper.snapGrid, params = swiper.params;
                if (params.breakpoints) swiper.setBreakpoint();
                swiper.updateSize();
                swiper.updateSlides();
                swiper.updateProgress();
                swiper.updateSlidesClasses();
                function setTranslate() {
                    var translateValue = swiper.rtlTranslate ? -1 * swiper.translate : swiper.translate;
                    var newTranslate = Math.min(Math.max(translateValue, swiper.maxTranslate()), swiper.minTranslate());
                    swiper.setTranslate(newTranslate);
                    swiper.updateActiveIndex();
                    swiper.updateSlidesClasses();
                }
                var translated;
                if (swiper.params.freeMode) {
                    setTranslate();
                    if (swiper.params.autoHeight) swiper.updateAutoHeight();
                } else {
                    if (("auto" === swiper.params.slidesPerView || swiper.params.slidesPerView > 1) && swiper.isEnd && !swiper.params.centeredSlides) translated = swiper.slideTo(swiper.slides.length - 1, 0, false, true); else translated = swiper.slideTo(swiper.activeIndex, 0, false, true);
                    if (!translated) setTranslate();
                }
                if (params.watchOverflow && snapGrid !== swiper.snapGrid) swiper.checkOverflow();
                swiper.emit("update");
            };
            _proto.changeDirection = function(newDirection, needUpdate) {
                if (void 0 === needUpdate) needUpdate = true;
                var swiper = this;
                var currentDirection = swiper.params.direction;
                if (!newDirection) newDirection = "horizontal" === currentDirection ? "vertical" : "horizontal";
                if (newDirection === currentDirection || "horizontal" !== newDirection && "vertical" !== newDirection) return swiper;
                swiper.$el.removeClass("" + swiper.params.containerModifierClass + currentDirection).addClass("" + swiper.params.containerModifierClass + newDirection);
                swiper.emitContainerClasses();
                swiper.params.direction = newDirection;
                swiper.slides.each((function(slideEl) {
                    if ("vertical" === newDirection) slideEl.style.width = ""; else slideEl.style.height = "";
                }));
                swiper.emit("changeDirection");
                if (needUpdate) swiper.update();
                return swiper;
            };
            _proto.mount = function(el) {
                var swiper = this;
                if (swiper.mounted) return true;
                var $el = dom(el || swiper.params.el);
                el = $el[0];
                if (!el) return false;
                el.swiper = swiper;
                var getWrapperSelector = function() {
                    return "." + (swiper.params.wrapperClass || "").trim().split(" ").join(".");
                };
                var getWrapper = function() {
                    if (el && el.shadowRoot && el.shadowRoot.querySelector) {
                        var res = dom(el.shadowRoot.querySelector(getWrapperSelector()));
                        res.children = function(options) {
                            return $el.children(options);
                        };
                        return res;
                    }
                    return $el.children(getWrapperSelector());
                };
                var $wrapperEl = getWrapper();
                if (0 === $wrapperEl.length && swiper.params.createElements) {
                    var document = getDocument();
                    var wrapper = document.createElement("div");
                    $wrapperEl = dom(wrapper);
                    wrapper.className = swiper.params.wrapperClass;
                    $el.append(wrapper);
                    $el.children("." + swiper.params.slideClass).each((function(slideEl) {
                        $wrapperEl.append(slideEl);
                    }));
                }
                utils_extend(swiper, {
                    $el,
                    el,
                    $wrapperEl,
                    wrapperEl: $wrapperEl[0],
                    mounted: true,
                    rtl: "rtl" === el.dir.toLowerCase() || "rtl" === $el.css("direction"),
                    rtlTranslate: "horizontal" === swiper.params.direction && ("rtl" === el.dir.toLowerCase() || "rtl" === $el.css("direction")),
                    wrongRTL: "-webkit-box" === $wrapperEl.css("display")
                });
                return true;
            };
            _proto.init = function(el) {
                var swiper = this;
                if (swiper.initialized) return swiper;
                var mounted = swiper.mount(el);
                if (false === mounted) return swiper;
                swiper.emit("beforeInit");
                if (swiper.params.breakpoints) swiper.setBreakpoint();
                swiper.addClasses();
                if (swiper.params.loop) swiper.loopCreate();
                swiper.updateSize();
                swiper.updateSlides();
                if (swiper.params.watchOverflow) swiper.checkOverflow();
                if (swiper.params.grabCursor && swiper.enabled) swiper.setGrabCursor();
                if (swiper.params.preloadImages) swiper.preloadImages();
                if (swiper.params.loop) swiper.slideTo(swiper.params.initialSlide + swiper.loopedSlides, 0, swiper.params.runCallbacksOnInit, false, true); else swiper.slideTo(swiper.params.initialSlide, 0, swiper.params.runCallbacksOnInit, false, true);
                swiper.attachEvents();
                swiper.initialized = true;
                swiper.emit("init");
                swiper.emit("afterInit");
                return swiper;
            };
            _proto.destroy = function(deleteInstance, cleanStyles) {
                if (void 0 === deleteInstance) deleteInstance = true;
                if (void 0 === cleanStyles) cleanStyles = true;
                var swiper = this;
                var params = swiper.params, $el = swiper.$el, $wrapperEl = swiper.$wrapperEl, slides = swiper.slides;
                if ("undefined" === typeof swiper.params || swiper.destroyed) return null;
                swiper.emit("beforeDestroy");
                swiper.initialized = false;
                swiper.detachEvents();
                if (params.loop) swiper.loopDestroy();
                if (cleanStyles) {
                    swiper.removeClasses();
                    $el.removeAttr("style");
                    $wrapperEl.removeAttr("style");
                    if (slides && slides.length) slides.removeClass([ params.slideVisibleClass, params.slideActiveClass, params.slideNextClass, params.slidePrevClass ].join(" ")).removeAttr("style").removeAttr("data-swiper-slide-index");
                }
                swiper.emit("destroy");
                Object.keys(swiper.eventsListeners).forEach((function(eventName) {
                    swiper.off(eventName);
                }));
                if (false !== deleteInstance) {
                    swiper.$el[0].swiper = null;
                    deleteProps(swiper);
                }
                swiper.destroyed = true;
                return null;
            };
            Swiper.extendDefaults = function(newDefaults) {
                utils_extend(extendedDefaults, newDefaults);
            };
            Swiper.installModule = function(module) {
                if (!Swiper.prototype.modules) Swiper.prototype.modules = {};
                var name = module.name || Object.keys(Swiper.prototype.modules).length + "_" + now();
                Swiper.prototype.modules[name] = module;
            };
            Swiper.use = function(module) {
                if (Array.isArray(module)) {
                    module.forEach((function(m) {
                        return Swiper.installModule(m);
                    }));
                    return Swiper;
                }
                Swiper.installModule(module);
                return Swiper;
            };
            _createClass(Swiper, null, [ {
                key: "extendedDefaults",
                get: function() {
                    return extendedDefaults;
                }
            }, {
                key: "defaults",
                get: function() {
                    return core_defaults;
                }
            } ]);
            return Swiper;
        }();
        Object.keys(prototypes).forEach((function(prototypeGroup) {
            Object.keys(prototypes[prototypeGroup]).forEach((function(protoMethod) {
                Swiper.prototype[protoMethod] = prototypes[prototypeGroup][protoMethod];
            }));
        }));
        Swiper.use([ resize_resize, observer ]);
        const core_class = Swiper;
        function effect_fade_extends() {
            effect_fade_extends = Object.assign || function(target) {
                for (var i = 1; i < arguments.length; i++) {
                    var source = arguments[i];
                    for (var key in source) if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
                }
                return target;
            };
            return effect_fade_extends.apply(this, arguments);
        }
        var Fade = {
            setTranslate: function() {
                var swiper = this;
                var slides = swiper.slides;
                for (var i = 0; i < slides.length; i += 1) {
                    var $slideEl = swiper.slides.eq(i);
                    var offset = $slideEl[0].swiperSlideOffset;
                    var tx = -offset;
                    if (!swiper.params.virtualTranslate) tx -= swiper.translate;
                    var ty = 0;
                    if (!swiper.isHorizontal()) {
                        ty = tx;
                        tx = 0;
                    }
                    var slideOpacity = swiper.params.fadeEffect.crossFade ? Math.max(1 - Math.abs($slideEl[0].progress), 0) : 1 + Math.min(Math.max($slideEl[0].progress, -1), 0);
                    $slideEl.css({
                        opacity: slideOpacity
                    }).transform("translate3d(" + tx + "px, " + ty + "px, 0px)");
                }
            },
            setTransition: function(duration) {
                var swiper = this;
                var slides = swiper.slides, $wrapperEl = swiper.$wrapperEl;
                slides.transition(duration);
                if (swiper.params.virtualTranslate && 0 !== duration) {
                    var eventTriggered = false;
                    slides.transitionEnd((function() {
                        if (eventTriggered) return;
                        if (!swiper || swiper.destroyed) return;
                        eventTriggered = true;
                        swiper.animating = false;
                        var triggerEvents = [ "webkitTransitionEnd", "transitionend" ];
                        for (var i = 0; i < triggerEvents.length; i += 1) $wrapperEl.trigger(triggerEvents[i]);
                    }));
                }
            }
        };
        const effect_fade = {
            name: "effect-fade",
            params: {
                fadeEffect: {
                    crossFade: false
                }
            },
            create: function() {
                var swiper = this;
                bindModuleMethods(swiper, {
                    fadeEffect: effect_fade_extends({}, Fade)
                });
            },
            on: {
                beforeInit: function(swiper) {
                    if ("fade" !== swiper.params.effect) return;
                    swiper.classNames.push(swiper.params.containerModifierClass + "fade");
                    var overwriteParams = {
                        slidesPerView: 1,
                        slidesPerColumn: 1,
                        slidesPerGroup: 1,
                        watchSlidesProgress: true,
                        spaceBetween: 0,
                        virtualTranslate: true
                    };
                    utils_extend(swiper.params, overwriteParams);
                    utils_extend(swiper.originalParams, overwriteParams);
                },
                setTranslate: function(swiper) {
                    if ("fade" !== swiper.params.effect) return;
                    swiper.fadeEffect.setTranslate();
                },
                setTransition: function(swiper, duration) {
                    if ("fade" !== swiper.params.effect) return;
                    swiper.fadeEffect.setTransition(duration);
                }
            }
        };
        function lazy_extends() {
            lazy_extends = Object.assign || function(target) {
                for (var i = 1; i < arguments.length; i++) {
                    var source = arguments[i];
                    for (var key in source) if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
                }
                return target;
            };
            return lazy_extends.apply(this, arguments);
        }
        var Lazy = {
            loadInSlide: function(index, loadInDuplicate) {
                if (void 0 === loadInDuplicate) loadInDuplicate = true;
                var swiper = this;
                var params = swiper.params.lazy;
                if ("undefined" === typeof index) return;
                if (0 === swiper.slides.length) return;
                var isVirtual = swiper.virtual && swiper.params.virtual.enabled;
                var $slideEl = isVirtual ? swiper.$wrapperEl.children("." + swiper.params.slideClass + '[data-swiper-slide-index="' + index + '"]') : swiper.slides.eq(index);
                var $images = $slideEl.find("." + params.elementClass + ":not(." + params.loadedClass + "):not(." + params.loadingClass + ")");
                if ($slideEl.hasClass(params.elementClass) && !$slideEl.hasClass(params.loadedClass) && !$slideEl.hasClass(params.loadingClass)) $images.push($slideEl[0]);
                if (0 === $images.length) return;
                $images.each((function(imageEl) {
                    var $imageEl = dom(imageEl);
                    $imageEl.addClass(params.loadingClass);
                    var background = $imageEl.attr("data-background");
                    var src = $imageEl.attr("data-src");
                    var srcset = $imageEl.attr("data-srcset");
                    var sizes = $imageEl.attr("data-sizes");
                    var $pictureEl = $imageEl.parent("picture");
                    swiper.loadImage($imageEl[0], src || background, srcset, sizes, false, (function() {
                        if ("undefined" === typeof swiper || null === swiper || !swiper || swiper && !swiper.params || swiper.destroyed) return;
                        if (background) {
                            $imageEl.css("background-image", 'url("' + background + '")');
                            $imageEl.removeAttr("data-background");
                        } else {
                            if (srcset) {
                                $imageEl.attr("srcset", srcset);
                                $imageEl.removeAttr("data-srcset");
                            }
                            if (sizes) {
                                $imageEl.attr("sizes", sizes);
                                $imageEl.removeAttr("data-sizes");
                            }
                            if ($pictureEl.length) $pictureEl.children("source").each((function(sourceEl) {
                                var $source = dom(sourceEl);
                                if ($source.attr("data-srcset")) {
                                    $source.attr("srcset", $source.attr("data-srcset"));
                                    $source.removeAttr("data-srcset");
                                }
                            }));
                            if (src) {
                                $imageEl.attr("src", src);
                                $imageEl.removeAttr("data-src");
                            }
                        }
                        $imageEl.addClass(params.loadedClass).removeClass(params.loadingClass);
                        $slideEl.find("." + params.preloaderClass).remove();
                        if (swiper.params.loop && loadInDuplicate) {
                            var slideOriginalIndex = $slideEl.attr("data-swiper-slide-index");
                            if ($slideEl.hasClass(swiper.params.slideDuplicateClass)) {
                                var originalSlide = swiper.$wrapperEl.children('[data-swiper-slide-index="' + slideOriginalIndex + '"]:not(.' + swiper.params.slideDuplicateClass + ")");
                                swiper.lazy.loadInSlide(originalSlide.index(), false);
                            } else {
                                var duplicatedSlide = swiper.$wrapperEl.children("." + swiper.params.slideDuplicateClass + '[data-swiper-slide-index="' + slideOriginalIndex + '"]');
                                swiper.lazy.loadInSlide(duplicatedSlide.index(), false);
                            }
                        }
                        swiper.emit("lazyImageReady", $slideEl[0], $imageEl[0]);
                        if (swiper.params.autoHeight) swiper.updateAutoHeight();
                    }));
                    swiper.emit("lazyImageLoad", $slideEl[0], $imageEl[0]);
                }));
            },
            load: function() {
                var swiper = this;
                var $wrapperEl = swiper.$wrapperEl, swiperParams = swiper.params, slides = swiper.slides, activeIndex = swiper.activeIndex;
                var isVirtual = swiper.virtual && swiperParams.virtual.enabled;
                var params = swiperParams.lazy;
                var slidesPerView = swiperParams.slidesPerView;
                if ("auto" === slidesPerView) slidesPerView = 0;
                function slideExist(index) {
                    if (isVirtual) {
                        if ($wrapperEl.children("." + swiperParams.slideClass + '[data-swiper-slide-index="' + index + '"]').length) return true;
                    } else if (slides[index]) return true;
                    return false;
                }
                function slideIndex(slideEl) {
                    if (isVirtual) return dom(slideEl).attr("data-swiper-slide-index");
                    return dom(slideEl).index();
                }
                if (!swiper.lazy.initialImageLoaded) swiper.lazy.initialImageLoaded = true;
                if (swiper.params.watchSlidesVisibility) $wrapperEl.children("." + swiperParams.slideVisibleClass).each((function(slideEl) {
                    var index = isVirtual ? dom(slideEl).attr("data-swiper-slide-index") : dom(slideEl).index();
                    swiper.lazy.loadInSlide(index);
                })); else if (slidesPerView > 1) {
                    for (var i = activeIndex; i < activeIndex + slidesPerView; i += 1) if (slideExist(i)) swiper.lazy.loadInSlide(i);
                } else swiper.lazy.loadInSlide(activeIndex);
                if (params.loadPrevNext) if (slidesPerView > 1 || params.loadPrevNextAmount && params.loadPrevNextAmount > 1) {
                    var amount = params.loadPrevNextAmount;
                    var spv = slidesPerView;
                    var maxIndex = Math.min(activeIndex + spv + Math.max(amount, spv), slides.length);
                    var minIndex = Math.max(activeIndex - Math.max(spv, amount), 0);
                    for (var _i = activeIndex + slidesPerView; _i < maxIndex; _i += 1) if (slideExist(_i)) swiper.lazy.loadInSlide(_i);
                    for (var _i2 = minIndex; _i2 < activeIndex; _i2 += 1) if (slideExist(_i2)) swiper.lazy.loadInSlide(_i2);
                } else {
                    var nextSlide = $wrapperEl.children("." + swiperParams.slideNextClass);
                    if (nextSlide.length > 0) swiper.lazy.loadInSlide(slideIndex(nextSlide));
                    var prevSlide = $wrapperEl.children("." + swiperParams.slidePrevClass);
                    if (prevSlide.length > 0) swiper.lazy.loadInSlide(slideIndex(prevSlide));
                }
            },
            checkInViewOnLoad: function() {
                var window = ssr_window_esm_getWindow();
                var swiper = this;
                if (!swiper || swiper.destroyed) return;
                var $scrollElement = swiper.params.lazy.scrollingElement ? dom(swiper.params.lazy.scrollingElement) : dom(window);
                var isWindow = $scrollElement[0] === window;
                var scrollElementWidth = isWindow ? window.innerWidth : $scrollElement[0].offsetWidth;
                var scrollElementHeight = isWindow ? window.innerHeight : $scrollElement[0].offsetHeight;
                var swiperOffset = swiper.$el.offset();
                var rtl = swiper.rtlTranslate;
                var inView = false;
                if (rtl) swiperOffset.left -= swiper.$el[0].scrollLeft;
                var swiperCoord = [ [ swiperOffset.left, swiperOffset.top ], [ swiperOffset.left + swiper.width, swiperOffset.top ], [ swiperOffset.left, swiperOffset.top + swiper.height ], [ swiperOffset.left + swiper.width, swiperOffset.top + swiper.height ] ];
                for (var i = 0; i < swiperCoord.length; i += 1) {
                    var point = swiperCoord[i];
                    if (point[0] >= 0 && point[0] <= scrollElementWidth && point[1] >= 0 && point[1] <= scrollElementHeight) {
                        if (0 === point[0] && 0 === point[1]) continue;
                        inView = true;
                    }
                }
                var passiveListener = "touchstart" === swiper.touchEvents.start && swiper.support.passiveListener && swiper.params.passiveListeners ? {
                    passive: true,
                    capture: false
                } : false;
                if (inView) {
                    swiper.lazy.load();
                    $scrollElement.off("scroll", swiper.lazy.checkInViewOnLoad, passiveListener);
                } else if (!swiper.lazy.scrollHandlerAttached) {
                    swiper.lazy.scrollHandlerAttached = true;
                    $scrollElement.on("scroll", swiper.lazy.checkInViewOnLoad, passiveListener);
                }
            }
        };
        const lazy = {
            name: "lazy",
            params: {
                lazy: {
                    checkInView: false,
                    enabled: false,
                    loadPrevNext: false,
                    loadPrevNextAmount: 1,
                    loadOnTransitionStart: false,
                    scrollingElement: "",
                    elementClass: "swiper-lazy",
                    loadingClass: "swiper-lazy-loading",
                    loadedClass: "swiper-lazy-loaded",
                    preloaderClass: "swiper-lazy-preloader"
                }
            },
            create: function() {
                var swiper = this;
                bindModuleMethods(swiper, {
                    lazy: lazy_extends({
                        initialImageLoaded: false
                    }, Lazy)
                });
            },
            on: {
                beforeInit: function(swiper) {
                    if (swiper.params.lazy.enabled && swiper.params.preloadImages) swiper.params.preloadImages = false;
                },
                init: function(swiper) {
                    if (swiper.params.lazy.enabled && !swiper.params.loop && 0 === swiper.params.initialSlide) if (swiper.params.lazy.checkInView) swiper.lazy.checkInViewOnLoad(); else swiper.lazy.load();
                },
                scroll: function(swiper) {
                    if (swiper.params.freeMode && !swiper.params.freeModeSticky) swiper.lazy.load();
                },
                "scrollbarDragMove resize _freeModeNoMomentumRelease": function(swiper) {
                    if (swiper.params.lazy.enabled) swiper.lazy.load();
                },
                transitionStart: function(swiper) {
                    if (swiper.params.lazy.enabled) if (swiper.params.lazy.loadOnTransitionStart || !swiper.params.lazy.loadOnTransitionStart && !swiper.lazy.initialImageLoaded) swiper.lazy.load();
                },
                transitionEnd: function(swiper) {
                    if (swiper.params.lazy.enabled && !swiper.params.lazy.loadOnTransitionStart) swiper.lazy.load();
                },
                slideChange: function(swiper) {
                    var _swiper$params = swiper.params, lazy = _swiper$params.lazy, cssMode = _swiper$params.cssMode, watchSlidesVisibility = _swiper$params.watchSlidesVisibility, watchSlidesProgress = _swiper$params.watchSlidesProgress, touchReleaseOnEdges = _swiper$params.touchReleaseOnEdges, resistanceRatio = _swiper$params.resistanceRatio;
                    if (lazy.enabled && (cssMode || (watchSlidesVisibility || watchSlidesProgress) && (touchReleaseOnEdges || 0 === resistanceRatio))) swiper.lazy.load();
                }
            }
        };
        function thumbs_extends() {
            thumbs_extends = Object.assign || function(target) {
                for (var i = 1; i < arguments.length; i++) {
                    var source = arguments[i];
                    for (var key in source) if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
                }
                return target;
            };
            return thumbs_extends.apply(this, arguments);
        }
        var Thumbs = {
            init: function() {
                var swiper = this;
                var thumbsParams = swiper.params.thumbs;
                if (swiper.thumbs.initialized) return false;
                swiper.thumbs.initialized = true;
                var SwiperClass = swiper.constructor;
                if (thumbsParams.swiper instanceof SwiperClass) {
                    swiper.thumbs.swiper = thumbsParams.swiper;
                    utils_extend(swiper.thumbs.swiper.originalParams, {
                        watchSlidesProgress: true,
                        slideToClickedSlide: false
                    });
                    utils_extend(swiper.thumbs.swiper.params, {
                        watchSlidesProgress: true,
                        slideToClickedSlide: false
                    });
                } else if (utils_isObject(thumbsParams.swiper)) {
                    swiper.thumbs.swiper = new SwiperClass(utils_extend({}, thumbsParams.swiper, {
                        watchSlidesVisibility: true,
                        watchSlidesProgress: true,
                        slideToClickedSlide: false
                    }));
                    swiper.thumbs.swiperCreated = true;
                }
                swiper.thumbs.swiper.$el.addClass(swiper.params.thumbs.thumbsContainerClass);
                swiper.thumbs.swiper.on("tap", swiper.thumbs.onThumbClick);
                return true;
            },
            onThumbClick: function() {
                var swiper = this;
                var thumbsSwiper = swiper.thumbs.swiper;
                if (!thumbsSwiper) return;
                var clickedIndex = thumbsSwiper.clickedIndex;
                var clickedSlide = thumbsSwiper.clickedSlide;
                if (clickedSlide && dom(clickedSlide).hasClass(swiper.params.thumbs.slideThumbActiveClass)) return;
                if ("undefined" === typeof clickedIndex || null === clickedIndex) return;
                var slideToIndex;
                if (thumbsSwiper.params.loop) slideToIndex = parseInt(dom(thumbsSwiper.clickedSlide).attr("data-swiper-slide-index"), 10); else slideToIndex = clickedIndex;
                if (swiper.params.loop) {
                    var currentIndex = swiper.activeIndex;
                    if (swiper.slides.eq(currentIndex).hasClass(swiper.params.slideDuplicateClass)) {
                        swiper.loopFix();
                        swiper._clientLeft = swiper.$wrapperEl[0].clientLeft;
                        currentIndex = swiper.activeIndex;
                    }
                    var prevIndex = swiper.slides.eq(currentIndex).prevAll('[data-swiper-slide-index="' + slideToIndex + '"]').eq(0).index();
                    var nextIndex = swiper.slides.eq(currentIndex).nextAll('[data-swiper-slide-index="' + slideToIndex + '"]').eq(0).index();
                    if ("undefined" === typeof prevIndex) slideToIndex = nextIndex; else if ("undefined" === typeof nextIndex) slideToIndex = prevIndex; else if (nextIndex - currentIndex < currentIndex - prevIndex) slideToIndex = nextIndex; else slideToIndex = prevIndex;
                }
                swiper.slideTo(slideToIndex);
            },
            update: function(initial) {
                var swiper = this;
                var thumbsSwiper = swiper.thumbs.swiper;
                if (!thumbsSwiper) return;
                var slidesPerView = "auto" === thumbsSwiper.params.slidesPerView ? thumbsSwiper.slidesPerViewDynamic() : thumbsSwiper.params.slidesPerView;
                var autoScrollOffset = swiper.params.thumbs.autoScrollOffset;
                var useOffset = autoScrollOffset && !thumbsSwiper.params.loop;
                if (swiper.realIndex !== thumbsSwiper.realIndex || useOffset) {
                    var currentThumbsIndex = thumbsSwiper.activeIndex;
                    var newThumbsIndex;
                    var direction;
                    if (thumbsSwiper.params.loop) {
                        if (thumbsSwiper.slides.eq(currentThumbsIndex).hasClass(thumbsSwiper.params.slideDuplicateClass)) {
                            thumbsSwiper.loopFix();
                            thumbsSwiper._clientLeft = thumbsSwiper.$wrapperEl[0].clientLeft;
                            currentThumbsIndex = thumbsSwiper.activeIndex;
                        }
                        var prevThumbsIndex = thumbsSwiper.slides.eq(currentThumbsIndex).prevAll('[data-swiper-slide-index="' + swiper.realIndex + '"]').eq(0).index();
                        var nextThumbsIndex = thumbsSwiper.slides.eq(currentThumbsIndex).nextAll('[data-swiper-slide-index="' + swiper.realIndex + '"]').eq(0).index();
                        if ("undefined" === typeof prevThumbsIndex) newThumbsIndex = nextThumbsIndex; else if ("undefined" === typeof nextThumbsIndex) newThumbsIndex = prevThumbsIndex; else if (nextThumbsIndex - currentThumbsIndex === currentThumbsIndex - prevThumbsIndex) newThumbsIndex = thumbsSwiper.params.slidesPerGroup > 1 ? nextThumbsIndex : currentThumbsIndex; else if (nextThumbsIndex - currentThumbsIndex < currentThumbsIndex - prevThumbsIndex) newThumbsIndex = nextThumbsIndex; else newThumbsIndex = prevThumbsIndex;
                        direction = swiper.activeIndex > swiper.previousIndex ? "next" : "prev";
                    } else {
                        newThumbsIndex = swiper.realIndex;
                        direction = newThumbsIndex > swiper.previousIndex ? "next" : "prev";
                    }
                    if (useOffset) newThumbsIndex += "next" === direction ? autoScrollOffset : -1 * autoScrollOffset;
                    if (thumbsSwiper.visibleSlidesIndexes && thumbsSwiper.visibleSlidesIndexes.indexOf(newThumbsIndex) < 0) {
                        if (thumbsSwiper.params.centeredSlides) if (newThumbsIndex > currentThumbsIndex) newThumbsIndex = newThumbsIndex - Math.floor(slidesPerView / 2) + 1; else newThumbsIndex = newThumbsIndex + Math.floor(slidesPerView / 2) - 1; else if (newThumbsIndex > currentThumbsIndex && 1 === thumbsSwiper.params.slidesPerGroup) ;
                        thumbsSwiper.slideTo(newThumbsIndex, initial ? 0 : void 0);
                    }
                }
                var thumbsToActivate = 1;
                var thumbActiveClass = swiper.params.thumbs.slideThumbActiveClass;
                if (swiper.params.slidesPerView > 1 && !swiper.params.centeredSlides) thumbsToActivate = swiper.params.slidesPerView;
                if (!swiper.params.thumbs.multipleActiveThumbs) thumbsToActivate = 1;
                thumbsToActivate = Math.floor(thumbsToActivate);
                thumbsSwiper.slides.removeClass(thumbActiveClass);
                if (thumbsSwiper.params.loop || thumbsSwiper.params.virtual && thumbsSwiper.params.virtual.enabled) for (var i = 0; i < thumbsToActivate; i += 1) thumbsSwiper.$wrapperEl.children('[data-swiper-slide-index="' + (swiper.realIndex + i) + '"]').addClass(thumbActiveClass); else for (var _i = 0; _i < thumbsToActivate; _i += 1) thumbsSwiper.slides.eq(swiper.realIndex + _i).addClass(thumbActiveClass);
            }
        };
        const thumbs = {
            name: "thumbs",
            params: {
                thumbs: {
                    swiper: null,
                    multipleActiveThumbs: true,
                    autoScrollOffset: 0,
                    slideThumbActiveClass: "swiper-slide-thumb-active",
                    thumbsContainerClass: "swiper-container-thumbs"
                }
            },
            create: function() {
                var swiper = this;
                bindModuleMethods(swiper, {
                    thumbs: thumbs_extends({
                        swiper: null,
                        initialized: false
                    }, Thumbs)
                });
            },
            on: {
                beforeInit: function(swiper) {
                    var thumbs = swiper.params.thumbs;
                    if (!thumbs || !thumbs.swiper) return;
                    swiper.thumbs.init();
                    swiper.thumbs.update(true);
                },
                slideChange: function(swiper) {
                    if (!swiper.thumbs.swiper) return;
                    swiper.thumbs.update();
                },
                update: function(swiper) {
                    if (!swiper.thumbs.swiper) return;
                    swiper.thumbs.update();
                },
                resize: function(swiper) {
                    if (!swiper.thumbs.swiper) return;
                    swiper.thumbs.update();
                },
                observerUpdate: function(swiper) {
                    if (!swiper.thumbs.swiper) return;
                    swiper.thumbs.update();
                },
                setTransition: function(swiper, duration) {
                    var thumbsSwiper = swiper.thumbs.swiper;
                    if (!thumbsSwiper) return;
                    thumbsSwiper.setTransition(duration);
                },
                beforeDestroy: function(swiper) {
                    var thumbsSwiper = swiper.thumbs.swiper;
                    if (!thumbsSwiper) return;
                    if (swiper.thumbs.swiperCreated && thumbsSwiper) thumbsSwiper.destroy();
                }
            }
        };
        function navigation_extends() {
            navigation_extends = Object.assign || function(target) {
                for (var i = 1; i < arguments.length; i++) {
                    var source = arguments[i];
                    for (var key in source) if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
                }
                return target;
            };
            return navigation_extends.apply(this, arguments);
        }
        var Navigation = {
            toggleEl: function($el, disabled) {
                $el[disabled ? "addClass" : "removeClass"](this.params.navigation.disabledClass);
                if ($el[0] && "BUTTON" === $el[0].tagName) $el[0].disabled = disabled;
            },
            update: function() {
                var swiper = this;
                var params = swiper.params.navigation;
                var toggleEl = swiper.navigation.toggleEl;
                if (swiper.params.loop) return;
                var _swiper$navigation = swiper.navigation, $nextEl = _swiper$navigation.$nextEl, $prevEl = _swiper$navigation.$prevEl;
                if ($prevEl && $prevEl.length > 0) {
                    if (swiper.isBeginning) toggleEl($prevEl, true); else toggleEl($prevEl, false);
                    if (swiper.params.watchOverflow && swiper.enabled) $prevEl[swiper.isLocked ? "addClass" : "removeClass"](params.lockClass);
                }
                if ($nextEl && $nextEl.length > 0) {
                    if (swiper.isEnd) toggleEl($nextEl, true); else toggleEl($nextEl, false);
                    if (swiper.params.watchOverflow && swiper.enabled) $nextEl[swiper.isLocked ? "addClass" : "removeClass"](params.lockClass);
                }
            },
            onPrevClick: function(e) {
                var swiper = this;
                e.preventDefault();
                if (swiper.isBeginning && !swiper.params.loop) return;
                swiper.slidePrev();
            },
            onNextClick: function(e) {
                var swiper = this;
                e.preventDefault();
                if (swiper.isEnd && !swiper.params.loop) return;
                swiper.slideNext();
            },
            init: function() {
                var swiper = this;
                var params = swiper.params.navigation;
                swiper.params.navigation = createElementIfNotDefined(swiper.$el, swiper.params.navigation, swiper.params.createElements, {
                    nextEl: "swiper-button-next",
                    prevEl: "swiper-button-prev"
                });
                if (!(params.nextEl || params.prevEl)) return;
                var $nextEl;
                var $prevEl;
                if (params.nextEl) {
                    $nextEl = dom(params.nextEl);
                    if (swiper.params.uniqueNavElements && "string" === typeof params.nextEl && $nextEl.length > 1 && 1 === swiper.$el.find(params.nextEl).length) $nextEl = swiper.$el.find(params.nextEl);
                }
                if (params.prevEl) {
                    $prevEl = dom(params.prevEl);
                    if (swiper.params.uniqueNavElements && "string" === typeof params.prevEl && $prevEl.length > 1 && 1 === swiper.$el.find(params.prevEl).length) $prevEl = swiper.$el.find(params.prevEl);
                }
                if ($nextEl && $nextEl.length > 0) $nextEl.on("click", swiper.navigation.onNextClick);
                if ($prevEl && $prevEl.length > 0) $prevEl.on("click", swiper.navigation.onPrevClick);
                utils_extend(swiper.navigation, {
                    $nextEl,
                    nextEl: $nextEl && $nextEl[0],
                    $prevEl,
                    prevEl: $prevEl && $prevEl[0]
                });
                if (!swiper.enabled) {
                    if ($nextEl) $nextEl.addClass(params.lockClass);
                    if ($prevEl) $prevEl.addClass(params.lockClass);
                }
            },
            destroy: function() {
                var swiper = this;
                var _swiper$navigation2 = swiper.navigation, $nextEl = _swiper$navigation2.$nextEl, $prevEl = _swiper$navigation2.$prevEl;
                if ($nextEl && $nextEl.length) {
                    $nextEl.off("click", swiper.navigation.onNextClick);
                    $nextEl.removeClass(swiper.params.navigation.disabledClass);
                }
                if ($prevEl && $prevEl.length) {
                    $prevEl.off("click", swiper.navigation.onPrevClick);
                    $prevEl.removeClass(swiper.params.navigation.disabledClass);
                }
            }
        };
        const navigation = {
            name: "navigation",
            params: {
                navigation: {
                    nextEl: null,
                    prevEl: null,
                    hideOnClick: false,
                    disabledClass: "swiper-button-disabled",
                    hiddenClass: "swiper-button-hidden",
                    lockClass: "swiper-button-lock"
                }
            },
            create: function() {
                var swiper = this;
                bindModuleMethods(swiper, {
                    navigation: navigation_extends({}, Navigation)
                });
            },
            on: {
                init: function(swiper) {
                    swiper.navigation.init();
                    swiper.navigation.update();
                },
                toEdge: function(swiper) {
                    swiper.navigation.update();
                },
                fromEdge: function(swiper) {
                    swiper.navigation.update();
                },
                destroy: function(swiper) {
                    swiper.navigation.destroy();
                },
                "enable disable": function(swiper) {
                    var _swiper$navigation3 = swiper.navigation, $nextEl = _swiper$navigation3.$nextEl, $prevEl = _swiper$navigation3.$prevEl;
                    if ($nextEl) $nextEl[swiper.enabled ? "removeClass" : "addClass"](swiper.params.navigation.lockClass);
                    if ($prevEl) $prevEl[swiper.enabled ? "removeClass" : "addClass"](swiper.params.navigation.lockClass);
                },
                click: function(swiper, e) {
                    var _swiper$navigation4 = swiper.navigation, $nextEl = _swiper$navigation4.$nextEl, $prevEl = _swiper$navigation4.$prevEl;
                    var targetEl = e.target;
                    if (swiper.params.navigation.hideOnClick && !dom(targetEl).is($prevEl) && !dom(targetEl).is($nextEl)) {
                        if (swiper.pagination && swiper.params.pagination && swiper.params.pagination.clickable && (swiper.pagination.el === targetEl || swiper.pagination.el.contains(targetEl))) return;
                        var isHidden;
                        if ($nextEl) isHidden = $nextEl.hasClass(swiper.params.navigation.hiddenClass); else if ($prevEl) isHidden = $prevEl.hasClass(swiper.params.navigation.hiddenClass);
                        if (true === isHidden) swiper.emit("navigationShow"); else swiper.emit("navigationHide");
                        if ($nextEl) $nextEl.toggleClass(swiper.params.navigation.hiddenClass);
                        if ($prevEl) $prevEl.toggleClass(swiper.params.navigation.hiddenClass);
                    }
                }
            }
        };
        var photoswipe_min = __webpack_require__("../shared/node_modules/photoswipe/dist/photoswipe.min.js");
        var photoswipe_min_default = __webpack_require__.n(photoswipe_min);
        var photoswipe_ui_default_min = __webpack_require__("../shared/node_modules/photoswipe/dist/photoswipe-ui-default.min.js");
        var photoswipe_ui_default_min_default = __webpack_require__.n(photoswipe_ui_default_min);
        var yt_player = __webpack_require__("../shared/node_modules/yt-player/index.js");
        var yt_player_default = __webpack_require__.n(yt_player);
        var url_url = __webpack_require__("./node_modules/url/url.js");
        function img_size(url) {
            const urlParse = url_url.parse(url);
            const urlQuery = query_string.parse(null === urlParse || void 0 === urlParse ? void 0 : urlParse.query);
            const radix = 10;
            const fixed = 2;
            const width = Number.parseInt(null === urlQuery || void 0 === urlQuery ? void 0 : urlQuery.w, radix);
            const height = Number.parseInt(null === urlQuery || void 0 === urlQuery ? void 0 : urlQuery.h, radix);
            let ratio = null;
            if (Number.isInteger(width) && Number.isInteger(height) && 0 !== width) ratio = `${Number(Number.parseFloat(height / width * 100).toFixed(fixed))}%`;
            return {
                width: Number.isInteger(width) ? width : null,
                height: Number.isInteger(height) ? height : null,
                ratio
            };
        }
        const product_photoSwipeHtml = `\n  <div class="pswp" tabindex="-1" role="dialog" aria-hidden="true">\n  <div class="pswp__bg"></div>\n    <div class="pswp__scroll-wrap">\n      <div class="pswp__container">\n          <div class="pswp__item"></div>\n          <div class="pswp__item"></div>\n          <div class="pswp__item"></div>\n      </div>\n      <div class="pswp__ui pswp__ui--hidden">\n        <button class="pswp__button pswp__button--arrow--left" title="Previous">\n          <svg width="12" height="12" viewBox="0 0 12 12" fill="none" xmlns="http://www.w3.org/2000/svg">\n            <path d="M8 1L3 6L8 11" stroke-width="1.5" stroke-linecap="round"/>\n          </svg>        \n        </button>\n        <button class="pswp__button pswp__button--close" title="Close (Esc)">\n          <svg width="12" height="12" viewBox="0 0 12 12" fill="none" xmlns="http://www.w3.org/2000/svg">\n            <path d="M10.8002 1.19999L1.2002 10.8" stroke-width="1.2" stroke-linecap="round"/>\n            <path d="M1.1998 1.19999L10.7998 10.8" stroke-width="1.2" stroke-linecap="round"/>\n          </svg>\n        </button>\n        <button class="pswp__button pswp__button--arrow--right" title="Next">\n          <svg width="12" height="12" viewBox="0 0 12 12" fill="none" xmlns="http://www.w3.org/2000/svg">\n            <path d="M4 11L9 6L4 1" stroke-width="1.5" stroke-linecap="round"/>\n          </svg>\n        </button>\n      </div>\n    </div>\n  </div>\n  </div>\n`;
        function isS3FileUrl(url) {
            return /\.cloudfront\./.test(url) || /https:\/\/img.myshopline.com/.test(url) || /https:\/\/img-preview.myshopline.com/.test(url);
        }
        function imgUrl(url, options) {
            const {width, scale} = options;
            if (!width) return url;
            if (!isS3FileUrl(url)) return url;
            let paramWidth = width;
            if ("number" === typeof scale && scale > 1) paramWidth = width * scale;
            const clipper = `_${paramWidth || ""}x`;
            const slice = url.split("/");
            const filename = slice.pop() || "";
            const dirname = slice.join("/");
            const lastDotIndex = filename.lastIndexOf(".");
            if (-1 === lastDotIndex) return `${dirname}/${filename}${clipper}`;
            return `${dirname}/${filename.slice(0, lastDotIndex)}${clipper}${filename.slice(lastDotIndex)}`;
        }
        const getYouTubeCover = videoResource => {
            if ("string" !== typeof videoResource) return null;
            const youTubeRegex = /^(?:https?:\/\/)?(?:www\.)?(?:youtu\.be\/|youtube\.com\/(?:embed\/|v\/|watch\?v=|watch\?.+&v=))((\w|-){11})(?:\S+)?$/;
            const getYouTubeIdByVideoUrl = url => {
                const matches = (null === url || void 0 === url ? void 0 : url.match(youTubeRegex)) || [];
                return matches[1];
            };
            const getVideoCover = videoId => {
                const coverUrlPrefix = `https://i.ytimg.com/vi/${videoId}`;
                return {
                    maxQuality: `${coverUrlPrefix}/maxresdefault.jpg`,
                    aboveMiddle: `${coverUrlPrefix}/sddefault.jpg`,
                    middle: `${coverUrlPrefix}/mqdefault.jpg`,
                    lowerMiddle: `${coverUrlPrefix}/hqdefault.jpg`,
                    minQuality: `${coverUrlPrefix}/default.jpg`,
                    videoId
                };
            };
            if (-1 !== videoResource.indexOf("www.youtube.com")) {
                const videoId = getYouTubeIdByVideoUrl(videoResource);
                return getVideoCover(videoId);
            }
            return getVideoCover(videoResource);
        };
        const utils_getYouTubeCover = getYouTubeCover;
        const isIE = "undefined" !== typeof document && document.documentMode;
        const isElementType = (element, type) => element.nodeName.toLowerCase() === type;
        const isGif = url => /^.+\.gif(\?.*){0,1}$/.test(url);
        const util_isS3FileUrl = url => /\.cloudfront\./.test(url) || /img\.myshopline\.com/.test(url) || /img-.*\.myshopline\.com/.test(url);
        const makeIsLoaded = element => element.setAttribute("data-loaded", true);
        const concatStr = (strs, symbol) => strs.filter(Boolean).join(symbol);
        const transformSrcset = (srcset, transformer) => srcset.split(",").filter((str => "" !== str)).map((str => concatStr(transformer(...str.trim().split(" ")), " "))).join(",");
        class SLFile {
            constructor(url, base) {
                const uri = new URL(url, base);
                const paths = uri.pathname.split("/");
                const filename = paths[paths.length - 1];
                const [name, suffix] = filename.split(".");
                const [originName, ...modifiers] = name.split("_");
                this.uri = uri;
                this.paths = paths;
                this.name = originName;
                this.suffix = suffix;
                this.querys = this.uri.searchParams;
                this.modifiers = modifiers;
            }
            toString() {
                this.uri.pathname = concatStr([ ...this.paths.slice(0, -1), concatStr([ [ this.name, ...this.modifiers ].join("_"), this.suffix ], ".") ], "/");
                return this.uri.toString();
            }
        }
        const EnumAttributes = {
            Iesrc: "data-iesrc",
            Alt: "data-alt",
            Src: "data-src",
            Srcset: "data-srcset",
            Poster: "data-poster",
            ToggleClass: "data-toggle-class",
            BackgroundImage: "data-background-image",
            BackgroundImageSet: "data-background-image-set",
            PlaceholderBackground: "data-placeholder-background"
        };
        EnumAttributes.Alt, EnumAttributes.Src, EnumAttributes.Iesrc, EnumAttributes.Srcset, 
        EnumAttributes.Poster, EnumAttributes.ToggleClass, EnumAttributes.BackgroundImage, 
        EnumAttributes.BackgroundImageSet;
        function transformImageUrlToWebp(fileOrUrl, ignoreSetting = false) {
            const file = "string" === typeof fileOrUrl ? new SLFile(fileOrUrl, window.location.href) : fileOrUrl;
            if (!file.querys.has("t") || ignoreSetting) if (window.__isSupportWebp__) file.querys.set("t", "webp"); else if (file.suffix) file.querys.set("t", file.suffix);
            return file.toString();
        }
        function getPosterUrl(url) {
            if (!isGif(url) || !util_isS3FileUrl(url)) return;
            const file = new SLFile(url, window.location.href);
            if ("1" !== file.querys.get("_f")) return;
            if ("poster" === file.modifiers[0]) return;
            file.modifiers.unshift("poster");
            file.suffix = "png";
            return transformImageUrlToWebp(file, true);
        }
        function getPosterData({src, srcset}) {
            const data = {};
            if (src) data.src = getPosterUrl(src);
            if (srcset) {
                let srcsetHasPoster = false;
                data.srcset = transformSrcset(srcset, ((url, breakpoint) => {
                    const posterUrl = getPosterUrl(url);
                    if (posterUrl) {
                        srcsetHasPoster = true;
                        return [ posterUrl, breakpoint ];
                    }
                    return [ url, breakpoint ];
                }));
                if (!srcsetHasPoster) delete data.srcset;
            }
            if (data.src || data.srcset) return data;
        }
        const image_gif_poster = {
            attributes: [],
            load(element) {
                if (isElementType(element, "img")) {
                    const src = element.getAttribute(EnumAttributes.Src);
                    const srcset = element.getAttribute(EnumAttributes.Srcset);
                    const sizes = element.getAttribute("sizes");
                    let isSeted = false;
                    const setImageData = ({src, srcset}, img = new Image) => {
                        if (sizes) img.sizes = sizes;
                        if (srcset) img.srcset = srcset;
                        if (src) img.src = src;
                        return img;
                    };
                    const setImageSrc = () => {
                        if (isSeted) return;
                        setImageData({
                            src,
                            srcset
                        }, element);
                        isSeted = true;
                    };
                    const posterData = getPosterData({
                        src,
                        srcset
                    });
                    if (posterData) {
                        const bgImg = setImageData({
                            src,
                            srcset
                        });
                        const posterBgImage = setImageData(posterData);
                        bgImg.onload = setImageSrc;
                        posterBgImage.onerror = setImageSrc;
                        setImageData(posterData, element);
                    } else setImageSrc();
                }
            }
        };
        function js_defineProperty(obj, key, value) {
            if (key in obj) Object.defineProperty(obj, key, {
                value,
                enumerable: true,
                configurable: true,
                writable: true
            }); else obj[key] = value;
            return obj;
        }
        core_class.use([ effect_fade, lazy, thumbs, navigation ]);
        const COLUMN = "column";
        const ROW = "row";
        const WRAP_PC_ID = ".product_pc_productImageContainer";
        const WRAP_M_ID = ".product_mobile_productImageContainer";
        function handleVideoPlayPause(videoPlayer, type) {
            if ("play" === type) null === videoPlayer || void 0 === videoPlayer ? void 0 : videoPlayer.play();
            if ("pause" === type) null === videoPlayer || void 0 === videoPlayer ? void 0 : videoPlayer.pause();
        }
        function imgOnload(src, cb, failCb) {
            if (!src) return;
            const img = new Image;
            img.onload = () => {
                cb(img);
            };
            img.onerror = () => {
                console.warn("imgOnError...", img);
                failCb(img);
            };
            img.src = src;
        }
        class ProductImages {
            constructor(options) {
                var _this$swiper;
                const {selectorId, heightOnChange, swiperConfig, mediaList} = options || {};
                this.mediaList = mediaList || [];
                this.config = {};
                this.swiperConfig = swiperConfig || {};
                this.heightChangedCount = 0;
                this.heightOnChange = heightOnChange || null;
                this.slideItems = [];
                if (!selectorId) {
                    console.error(`初始化productImages组件失败，selectorId为空，请输入唯一id`);
                    $(WRAP_PC_ID).hide();
                    $(WRAP_M_ID).hide();
                    return;
                }
                const pcWrapperSelector = `.${ProductImages.pcSelectorPrefix}_${selectorId}`;
                const mobileWrapperSelector = `.${ProductImages.mobileSelectorPrefix}_${selectorId}`;
                if (0 === $(`${pcWrapperSelector}`).length || 0 === $(`${mobileWrapperSelector}`).length) {
                    console.error(`初始化productImages组件失败，请检查selectorId是否输错，应存在html上`);
                    $(pcWrapperSelector).hide();
                    $(mobileWrapperSelector).hide();
                    return;
                }
                const pcWrapper = $(`${pcWrapperSelector}`);
                this.thumbsDirection = "aside" === pcWrapper.data("thumbs-direction") ? COLUMN : ROW;
                this.showThumbsArrow = "true" === String(pcWrapper.data("show-thumbnail-arrow"));
                this.productImageScale = "true" === String($(`.product_productImageScale_${selectorId}`).val());
                this.productVideoMute = "true" === String($(`.product_productVideoMute_${selectorId}`).val());
                this.productVideoLoop = "true" === String($(`.product_productVideoLoop_${selectorId}`).val());
                this.mobileWidthRatio = $(mobileWrapperSelector).hasClass("middleWidth") ? .75 : 1;
                this.productImageLength = $(".product_productImageLength").val();
                this.id = pcWrapperSelector;
                this.mobileId = mobileWrapperSelector;
                this.mobileSwiper = this.initMobileProductImages(true);
                this.swiper = this.initPcProductImages(true);
                null === (_this$swiper = this.swiper) || void 0 === _this$swiper ? void 0 : _this$swiper.init();
                this.videoPcPlayer = this.initPcVideo();
                this.videoMobilePlayer = this.initMobileVideo();
                this.videoMobilePlayerStatus = "pause";
            }
            setConfig(config) {
                if (!this.config.app) this.config.app = [];
                this.config.app.push(config.app);
            }
            verifySource(app) {
                var _this$config$app;
                if (!(null !== (_this$config$app = this.config.app) && void 0 !== _this$config$app && _this$config$app.length) || this.config.app.includes(app)) return true;
                return false;
            }
            initPcVideo() {
                const videoPcSelector = `${this.id} .product_youTubeVideoBox`;
                const videoDom = $(videoPcSelector);
                if (videoDom.length > 0) {
                    const videoPlayer = new (yt_player_default())(videoPcSelector, {
                        modestBranding: true,
                        controls: false
                    });
                    const videoId = videoDom.data("video-id");
                    videoPlayer.load(videoId);
                    window.SL_EventBus.on("global:popup:close", (() => {
                        handleVideoPlayPause(videoPlayer, "pause");
                    }));
                    videoPlayer.on("playing", (() => {
                        window.SL_EventBus.emit("product:product-play-video");
                    }));
                    if (this.productVideoMute) videoPlayer.mute();
                    if (this.productVideoLoop) videoPlayer.on("ended", (() => {
                        videoPlayer.play();
                    }));
                    return videoPlayer;
                }
                return null;
            }
            initMobileVideo() {
                const videoMDom = $(`${this.mobileId} .swiper-slide`).not(".swiper-slide-duplicate").find(".product_youTubeVideoBox").addClass("product_youTubeMobileVideoBox");
                const videoCoverDom = $(`${this.mobileId} .videoItem`).not(".swiper-slide-duplicate").find(".product_photoSwipe_image");
                if (videoMDom.length > 0) {
                    const videoPlayer = new (yt_player_default())(".product_youTubeMobileVideoBox", {
                        modestBranding: true,
                        controls: false
                    });
                    const videoId = videoMDom.data("video-id");
                    videoPlayer.load(videoId);
                    videoPlayer.on("playing", (() => {
                        window.SL_EventBus.emit("product:product-play-video");
                    }));
                    if (this.productVideoMute) videoPlayer.mute();
                    if (this.productVideoLoop) videoPlayer.on("ended", (() => {
                        videoPlayer.play();
                    }));
                    videoCoverDom.on("click", (() => {
                        if ("pause" === this.videoMobilePlayerStatus) {
                            handleVideoPlayPause(videoPlayer, "play");
                            this.videoMobilePlayerStatus = "play";
                        } else {
                            handleVideoPlayPause(videoPlayer, "pause");
                            this.videoMobilePlayerStatus = "pause";
                        }
                    }));
                    return videoPlayer;
                }
                return null;
            }
            initPhotoSwipe(slidesWrapID, platform) {
                if (0 === Number(this.productImageLength)) return;
                const slidesSelector = `${slidesWrapID} .product_productImages`;
                const triggerDom = $(slidesSelector);
                const eventDom = "mobile" === platform ? ".scaleImageIcon" : ".swiper-slide";
                const self = this;
                self.updatePhotoSwipeItems(slidesWrapID);
                triggerDom.on("click", eventDom, (function() {
                    var _self$slideItems;
                    if ($(this).hasClass("swiper-slide-duplicate") || !(null !== (_self$slideItems = self.slideItems) && void 0 !== _self$slideItems && _self$slideItems.length)) return;
                    const triggerThis = "mobile" === platform ? $(this).closest(".imageItem") : $(this);
                    const isMobileHasActiveSkuImage = triggerThis.find(".product_m_skuImage").length > 0;
                    const isVideoSlide = triggerThis.hasClass("videoItem");
                    if (isMobileHasActiveSkuImage || isVideoSlide) return;
                    const {activeIndex} = "mobile" === platform ? self.mobileSwiper : self.swiper;
                    const mobileIndexByLoop = self.getSwiperIsLoop() ? triggerThis.data("swiper-slide-index") : activeIndex;
                    const index = "mobile" === platform ? mobileIndexByLoop : activeIndex;
                    self.handlePhotoSwiper(self.slideItems, index);
                }));
            }
            initPcSkuPhotoSwiper() {
                const self = this;
                $(`${this.id} .product_pc_skuImage`).on("click", (function() {
                    const items = [ {
                        src: $(this).find(".product_photoSwipe_image").attr("data-photoswipe-src"),
                        w: 0,
                        h: 0,
                        el: $(this)[0]
                    } ];
                    self.handlePhotoSwiper(items, 0, false);
                }));
            }
            handlePhotoSwiper(items, index, cacheNaturalSize) {
                let pswpElement = document.querySelectorAll(".pswp")[0];
                if (!pswpElement) {
                    $("body").append(product_photoSwipeHtml);
                    pswpElement = document.querySelectorAll(".pswp")[0];
                }
                this.openPhotoSwipe(pswpElement, items, index, cacheNaturalSize);
            }
            initMobileSkuPhotoSwiper() {
                const self = this;
                $(`${this.mobileId} .product_m_skuImageBox .scaleSkuImageIcon`).on("click", (function() {
                    const items = [ {
                        src: $(this).parent().find(".product_photoSwipe_image").attr("data-photoswipe-src"),
                        w: 0,
                        h: 0,
                        el: $(this).parent()[0]
                    } ];
                    self.handlePhotoSwiper(items, 0, false);
                }));
            }
            updatePhotoSwipeItems(slidesWrapID) {
                const slidesDom = $(`${slidesWrapID} .product_productImages`).find(".swiper-slide").not(".swiper-slide-duplicate").filter((function() {
                    return !$(this).children(".product-detail-empty-image").length;
                }));
                const items = [];
                slidesDom.each(((index, item) => {
                    const imgEl = $(item).find(".product_photoSwipe_image");
                    const size = $(item).attr("data-natural-size");
                    const transSize = size ? size.split("x") : null;
                    items.push({
                        src: imgEl.attr("data-photoswipe-src"),
                        w: transSize ? parseInt(transSize[0], 10) : imgEl.innerWidth(),
                        h: transSize ? parseInt(transSize[1], 10) : imgEl.innerHeight(),
                        el: item
                    });
                }));
                this.slideItems = items;
            }
            openPhotoSwipe(pswpElement, items, index = 0, cacheNaturalSize = true) {
                const self = this;
                if ((null === items || void 0 === items ? void 0 : items.length) > 1) $(".pswp__button--arrow--left, .pswp__button--arrow--right").show(); else $(".pswp__button--arrow--left, .pswp__button--arrow--right").hide();
                const photoSwipeOptions = {
                    allowPanToNext: false,
                    captionEl: false,
                    closeOnScroll: false,
                    counterEl: false,
                    history: false,
                    index,
                    pinchToClose: false,
                    preloaderEl: false,
                    shareEl: false,
                    tapToToggleControls: false,
                    barsSize: {
                        top: 20,
                        bottom: 20
                    },
                    getThumbBoundsFn(_index) {
                        var _items$_index$el;
                        let thumbnailParent;
                        if (-1 !== (null === (_items$_index$el = items[_index].el) || void 0 === _items$_index$el ? void 0 : _items$_index$el.className.indexOf("swiper-slide-duplicate"))) thumbnailParent = $(`${self.mobileId} .swiper-slide`).eq(self.mobileSwiper.activeIndex).get(0); else thumbnailParent = items[_index].el;
                        const thumbnail = thumbnailParent.getElementsByClassName("product_photoSwipe_image")[0];
                        const pageYScroll = window.pageYOffset || document.documentElement.scrollTop;
                        const rect = thumbnail.getBoundingClientRect();
                        return {
                            x: rect.left,
                            y: rect.top + pageYScroll,
                            w: rect.width
                        };
                    }
                };
                const gallery = new (photoswipe_min_default())(pswpElement, photoswipe_ui_default_min_default(), items, photoSwipeOptions);
                gallery.listen("gettingData", (function(_index, item) {
                    const imgWrapEl = item.el;
                    if (!imgWrapEl.getAttribute("data-natural-size")) {
                        const img = new Image;
                        img.onload = () => {
                            var _imgSize;
                            const hasWH = null === (_imgSize = img_size(img.src)) || void 0 === _imgSize ? void 0 : _imgSize.ratio;
                            if (cacheNaturalSize) {
                                const naturalSize = hasWH ? `${img.naturalWidth}x${img.naturalHeight}` : `100x100`;
                                imgWrapEl.setAttribute("data-natural-size", naturalSize);
                            }
                            item.w = img.naturalWidth;
                            item.h = img.naturalHeight;
                            gallery.updateSize(true);
                        };
                        img.src = item.src;
                    }
                }));
                gallery.init();
                gallery.listen("afterChange", (() => {
                    this.galleryAfterChange(gallery);
                }));
            }
            galleryAfterChange(gallery) {
                var _this$swiper2, _this$mobileSwiper;
                const currentIndex = gallery.getCurrentIndex();
                null === (_this$swiper2 = this.swiper) || void 0 === _this$swiper2 ? void 0 : _this$swiper2.slideTo(currentIndex);
                null === (_this$mobileSwiper = this.mobileSwiper) || void 0 === _this$mobileSwiper ? void 0 : _this$mobileSwiper.slideToLoop(currentIndex);
            }
            heightOnChangeCb(height) {
                setTimeout((() => {
                    var _this$heightOnChange;
                    null === (_this$heightOnChange = this.heightOnChange) || void 0 === _this$heightOnChange ? void 0 : _this$heightOnChange.call(this, height);
                }), 200);
            }
            handleProductImagesHeight(swiperSelector, activeIndex, ratio = 1, targetImgSrc) {
                const self = this;
                const selector = swiperSelector;
                this.heightChangedCount++;
                const count = this.heightChangedCount;
                const promise = new Promise(((resolve, reject) => {
                    if (count !== this.heightChangedCount) {
                        resolve();
                        return;
                    }
                    if (void 0 !== activeIndex) {
                        const currentSlide = $(`${selector} .swiper-slide`).eq(activeIndex);
                        if (!targetImgSrc && currentSlide.find(".product-detail-empty-image").length > 0) {
                            const mobileWidthRatio = "block" === $(`${self.mobileId}`).css("display") ? self.mobileWidthRatio : 1;
                            const boxWidth = parseInt($(`${selector}`).width() * mobileWidthRatio, 10);
                            $(`${selector}`).css("height", boxWidth);
                            self.heightOnChangeCb(boxWidth);
                            resolve(boxWidth);
                            return;
                        }
                        if (currentSlide.hasClass("videoItem") && !targetImgSrc) {
                            const videoBoxHeight = parseInt(currentSlide.children().innerHeight(), 10);
                            $(`${selector}`).css("height", videoBoxHeight);
                            self.heightOnChangeCb(videoBoxHeight);
                            window.SL_EventBus.emit("product:expose-product-video", currentSlide);
                            resolve(videoBoxHeight);
                        } else if (currentSlide.hasClass("imageItem") || targetImgSrc) {
                            const currentSlideImgNaturalSize = currentSlide.attr("data-natural-size");
                            if (currentSlideImgNaturalSize && !targetImgSrc) {
                                const [imgNaturalWidth, imgNaturalHeight] = currentSlideImgNaturalSize.split("x");
                                const wrapperHeight = parseInt(String($(`${selector}`)[0].offsetWidth * ratio * imgNaturalHeight / imgNaturalWidth), 10);
                                $(`${selector}`).css("height", wrapperHeight);
                                self.heightOnChangeCb(wrapperHeight);
                                resolve(wrapperHeight);
                                return;
                            }
                            const currentSlideImg = currentSlide.find("img");
                            const imgSrc = targetImgSrc || currentSlideImg.attr("src") || currentSlideImg.attr("data-src");
                            if (!targetImgSrc && "none" !== $(`${self.id}`).css("display")) {
                                const slideHeight = parseInt(currentSlide.innerHeight(), 10);
                                $(`${selector}`).css("height", slideHeight);
                                self.heightOnChangeCb(slideHeight);
                                resolve(slideHeight);
                                return;
                            }
                            imgOnload(imgSrc, (img => {
                                if (count !== this.heightChangedCount) {
                                    resolve();
                                    return;
                                }
                                if (!img) {
                                    reject(new Error("不是img对象"));
                                    return;
                                }
                                const height = parseInt(String($(`${selector}`)[0].offsetWidth * ratio * img.height / img.width), 10);
                                $(`${selector}`).css("height", height);
                                self.heightOnChangeCb(height);
                                resolve(height);
                            }), (() => {
                                if (count !== this.heightChangedCount) {
                                    resolve();
                                    return;
                                }
                                const mobileWidthRatio = "block" === $(`${self.mobileId}`).css("display") ? self.mobileWidthRatio : 1;
                                const boxWidth = parseInt($(`${selector}`).width() * mobileWidthRatio, 10);
                                $(`${selector}`).css("height", boxWidth);
                                if (targetImgSrc && -1 !== selector.indexOf(ProductImages.pcSelectorPrefix)) $(`${this.id} .product_pc_skuImage`).addClass("imageItemError"); else if (targetImgSrc && -1 !== selector.indexOf(ProductImages.mobileSelectorPrefix)) {
                                    const currentSlideDom = self.getMobileCurrentSlideDom();
                                    currentSlideDom.find(".product_m_skuImageBox").addClass("imageItemError");
                                } else currentSlide.addClass("imageItemError");
                                self.heightOnChangeCb(boxWidth);
                                resolve(boxWidth);
                            }));
                        } else reject(new Error(`当前滑动slide子节点内容异常,currentSlide:${currentSlide},activeIndex:${activeIndex}`));
                    } else reject(new Error(`activeIndex异常：${activeIndex}`));
                }));
                return promise;
            }
            setColumnThumbsSwiperHeight(height) {
                $(`${this.id} .product_thumbsColumnContainer .productImageThumbs`).css({
                    maxHeight: `${height}px`
                });
            }
            handleThumbsArrow(activeIndex, slideLen, wrapperHeight) {
                const selectorPrefix = this.id;
                const {thumbsDirection: direction, showThumbsArrow} = this;
                if (!showThumbsArrow) {
                    this.setColumnThumbsSwiperHeight(wrapperHeight);
                    return;
                }
                $(`${selectorPrefix} .thumbsArrowTop,${selectorPrefix} .thumbsArrowBottom`).show();
                if (0 === activeIndex) {
                    $(`${selectorPrefix} .thumbsArrowTop`).hide();
                    if (direction === COLUMN) this.setColumnThumbsSwiperHeight(`${wrapperHeight - 25}`);
                }
                if (activeIndex + 1 === slideLen) {
                    $(`${selectorPrefix} .thumbsArrowBottom`).hide();
                    if (direction === COLUMN) this.setColumnThumbsSwiperHeight(`${wrapperHeight - 25}`);
                } else if (direction === COLUMN) this.setColumnThumbsSwiperHeight(`${wrapperHeight - 50}`);
            }
            async handleEffectSwiperHeight(targetImageUrl) {
                const {swiper} = this;
                const {slides, activeIndex} = swiper || {};
                const height = await this.handleProductImagesHeight(`${this.id} .product_productImages`, activeIndex, 1, targetImageUrl);
                if (height) this.handleThumbsArrow(activeIndex, slides.length, height);
            }
            togglePcSkuImage(isShow, skuImageUrl) {
                const skuImageDom = $(`${this.id} .product_pc_skuImage`);
                const currentIndex = $(`${this.id}`).attr("data-index");
                if (skuImageDom.hasClass("imageItemError")) skuImageDom.removeClass("imageItemError");
                if (isShow && skuImageUrl) {
                    skuImageDom.show().html(`<img class="product_photoSwipe_image" data-photoswipe-src=${imgUrl(skuImageUrl, {
                        width: 1800
                    })} src=${skuImageUrl} />`);
                    $(`${this.id} .productImageThumbsWrapper .thumbsImageItem`).eq(currentIndex).removeClass("active");
                } else if (!isShow) {
                    skuImageDom.hide().empty();
                    $(`${this.id} .productImageThumbsWrapper .thumbsImageItem`).eq(currentIndex).addClass("active");
                }
            }
            handlePcSkuImage(isShow, skuImage) {
                if (!this.swiper) return;
                if (isShow) {
                    this.handleEffectSwiperHeight(skuImage);
                    this.togglePcSkuImage(true, skuImage);
                } else {
                    this.togglePcSkuImage(false);
                    this.handleEffectSwiperHeight();
                }
            }
            handleThumbsScroll(type, distance, smooth = true, timeout = 200) {
                if ("scrollTop" === type) setTimeout((() => {
                    const productImageThumbs = $(`${this.id} .product_thumbsColumnContainer .productImageThumbs`);
                    if (smooth) productImageThumbs.addClass("smooth-animate"); else productImageThumbs.removeClass("smooth-animate");
                    productImageThumbs.scrollTop(distance);
                }), timeout); else if ("scrollLeft" === type) setTimeout((() => {
                    const productImageThumbs = $(`${this.id} .product_thumbsRowContainer .productImageThumbs`);
                    if (smooth) productImageThumbs.addClass("smooth-animate"); else productImageThumbs.removeClass("smooth-animate");
                    productImageThumbs.scrollLeft(distance);
                }), timeout);
            }
            getThumbsPosition(type, index) {
                const columnThumbsListDom = $(`${this.id} .product_thumbsColumnContainer .thumbsImageItem`);
                const rowThumbsListDom = $(`${this.id} .product_thumbsRowContainer .thumbsImageItem`);
                if ("top" === type) {
                    if (!columnThumbsListDom.length) return 0;
                    const prevThumbsItem = columnThumbsListDom.eq(index > 0 ? index - 1 : 0);
                    const prevThumbsItemHalfHeight = parseInt(prevThumbsItem.innerHeight() / 2, 10);
                    return columnThumbsListDom.eq(index).position().top - prevThumbsItemHalfHeight - 20;
                }
                if ("left" === type) {
                    if (!rowThumbsListDom.length) return 0;
                    const prevThumbsItem = rowThumbsListDom.eq(index > 0 ? index - 1 : 0);
                    const prevThumbsItemHalfWidth = parseInt(prevThumbsItem.innerWidth() / 2, 10);
                    return rowThumbsListDom.eq(index).position().left - prevThumbsItemHalfWidth - 20;
                }
            }
            initHandleProductImagesArrow() {
                if (!this.showThumbsArrow) return;
                const {thumbsDirection: direction} = this;
                $(`${this.id} .arrowTop`).on("click", (() => {
                    const {activeIndex} = this.swiper;
                    this.swiper.slidePrev();
                    if (direction === COLUMN) {
                        const scrollTopDistance = this.getThumbsPosition("top", activeIndex - 1);
                        this.handleThumbsScroll("scrollTop", scrollTopDistance);
                    } else if (direction === ROW) {
                        const scrollLeftDistance = this.getThumbsPosition("left", activeIndex - 1);
                        this.handleThumbsScroll("scrollLeft", scrollLeftDistance);
                    }
                }));
                $(`${this.id} .arrowBottom`).on("click", (() => {
                    const {activeIndex} = this.swiper;
                    this.swiper.slideNext();
                    if (direction === COLUMN) {
                        const scrollTopDistance = this.getThumbsPosition("top", activeIndex + 1);
                        this.handleThumbsScroll("scrollTop", scrollTopDistance);
                    } else if (direction === ROW) {
                        const scrollLeftDistance = this.getThumbsPosition("left", activeIndex + 1);
                        this.handleThumbsScroll("scrollLeft", scrollLeftDistance);
                    }
                }));
            }
            handlePcThumbsActive(index) {
                $(`${this.id} .productImageThumbsWrapper .thumbsImageItem`).removeClass("active").eq(index).addClass("active");
                $(`${this.id}`).attr("data-index", index);
            }
            async initThumbsSwiper(firstInit) {
                const {thumbsDirection} = this;
                const self = this;
                const bindClickDom = $(`${this.id} .product_thumbs${thumbsDirection === COLUMN ? "Column" : "Row"}Container `);
                bindClickDom.on("click", ".thumbsImageItem", (function() {
                    const index = $(this).index();
                    self.swiper.slideTo(index);
                    if ("block" === $(`${self.id} .product_pc_skuImage`).css("display")) {
                        self.handlePcSkuImage(false);
                        $(this).addClass("active");
                    }
                }));
                const skuImageDom = $(`${this.id} .product_pc_skuImage`).find("img");
                const skuImage = skuImageDom.attr("data-src") || skuImageDom.attr("src");
                if (!skuImage) this.handlePcThumbsActive(self.swiper.activeIndex);
                await this.handleEffectSwiperHeight(skuImage ? skuImage : null);
                if (skuImage && firstInit) {
                    const firstActiveImg = $(`${this.id}`).find(".swiper-slide-active img");
                    if ((null === firstActiveImg || void 0 === firstActiveImg ? void 0 : firstActiveImg.length) > 0) {
                        var _imgSize2;
                        const src = firstActiveImg.attr("src") || firstActiveImg.attr("data-src");
                        const ratio = (null === (_imgSize2 = img_size(src)) || void 0 === _imgSize2 ? void 0 : _imgSize2.ratio) || "100%";
                        firstActiveImg.parent().css("paddingBottom", ratio);
                    }
                    const emptyDom = $(`${this.id}`).find(".product-detail-empty-image");
                    console.log("emptyDom", emptyDom.length);
                    if ((null === emptyDom || void 0 === emptyDom ? void 0 : emptyDom.length) > 0) emptyDom.css("paddingBottom", "100%");
                }
                if (firstInit) $(`${this.id}`).find(".swiper-slide").removeClass("firstInit");
                $(`${this.id} .product_thumbsColumnContainer`).height("auto");
                $(`${this.id} .product_thumbsRowContainer`).height("auto");
                this.initHandleProductImagesArrow();
            }
            initPcProductImages(firstInit) {
                const pcProductImagesDom = $(`${this.id}`);
                if (0 == pcProductImagesDom.find(".product_productImages").length || "none" === pcProductImagesDom.css("display")) return null;
                const mainSwiper = new core_class(`${this.id} .product_productImages`, {
                    initialSlide: $(`${this.id}`).data("initial-slide") || 0,
                    effect: "fade",
                    fadeEffect: {
                        crossFade: true
                    },
                    init: firstInit ? false : true,
                    lazy: {
                        loadOnTransitionStart: true
                    },
                    allowTouchMove: false,
                    on: {
                        init: () => {
                            if (firstInit) {
                                this.initThumbsSwiper(firstInit);
                                if (this.productImageScale) {
                                    this.initPhotoSwipe(this.id, "pc");
                                    this.initPcSkuPhotoSwiper();
                                }
                            }
                        },
                        slideChange: () => {
                            handleVideoPlayPause(this.videoPcPlayer, "pause");
                            if (this.swiper.destroyed) return;
                            const {activeIndex, previousIndex} = this.swiper;
                            this.handlePcThumbsActive(activeIndex);
                            this.handlePcSkuImage(false);
                            if (this.thumbsDirection === COLUMN) {
                                const scrollTopDistance = this.getThumbsPosition("top", activeIndex);
                                this.handleThumbsScroll("scrollTop", scrollTopDistance, Math.abs(activeIndex - previousIndex) < 10);
                            } else {
                                const scrollLeftDistance = this.getThumbsPosition("left", activeIndex);
                                this.handleThumbsScroll("scrollLeft", scrollLeftDistance, Math.abs(activeIndex - previousIndex) < 10);
                            }
                        },
                        lazyImageLoad: (_swiper, _slideEl, imageEl) => {
                            image_gif_poster.load(imageEl);
                        }
                    }
                });
                return mainSwiper;
            }
            handleMActivePagination(activeIndex) {
                const listContainer = $(`${this.mobileId} .paginationList`);
                const scrollWrapper = listContainer.children(".paginationListWrapper");
                const activeBullets = scrollWrapper.children("span").removeClass([ "active", "next" ]);
                const activeBullet = activeBullets.eq(activeIndex).addClass("active");
                if (activeBullets.length < 6) {
                    scrollWrapper.css("transform", "");
                    return;
                }
                let prevNext, nextNext;
                if (0 === activeIndex) {
                    prevNext = -1;
                    nextNext = activeIndex + 4;
                } else if (1 === activeIndex) {
                    prevNext = 0;
                    nextNext = activeIndex + 3;
                } else if (activeIndex === activeBullets.length - 1) {
                    prevNext = activeIndex - 4;
                    nextNext = activeIndex + 1;
                } else if (activeIndex === activeBullets.length - 2) {
                    prevNext = activeIndex - 3;
                    nextNext = -1;
                } else {
                    prevNext = activeIndex - 2;
                    nextNext = activeIndex + 2;
                }
                if (prevNext > -1) activeBullets.eq(prevNext).addClass("next");
                if (nextNext > -1) activeBullets.eq(nextNext).addClass("next");
                let translateX = listContainer.width() / 2 - activeBullet.outerWidth(true) / 2 - activeBullet.position().left;
                const min = listContainer.width() - scrollWrapper.width();
                if (translateX > 0) translateX = 0; else if (translateX < min) translateX = min;
                scrollWrapper.css("transform", `translateX(${translateX}px)`);
            }
            handleMobileSkuImage(isShow, skuImageUrl) {
                const selector = `${this.mobileId} .product_productImages`;
                const mainSwiperDom = $(selector);
                if (!this.mobileSwiper) return;
                if (0 === mainSwiperDom.length) {
                    console.error("m端切换sku图片失败，请检查selectorId是否输错，应存在html上");
                    return;
                }
                const {realIndex} = this.mobileSwiper;
                if (isShow) this.toggleMSkuImage(realIndex, true, skuImageUrl); else this.toggleMSkuImage(realIndex, false);
            }
            getSwiperIsLoop() {
                return $(`${this.mobileId} .product_productImages .swiper-slide-duplicate`).length > 0;
            }
            bindMobileSkuImageScaleDom() {
                const self = this;
                $(".product_m_skuImageBox .scaleSkuImageIcon").on("click", (function() {
                    const items = [ {
                        src: $(this).parent().find(".product_photoSwipe_image").attr("data-photoswipe-src"),
                        w: 0,
                        h: 0,
                        el: $(this).parent()[0]
                    } ];
                    self.handlePhotoSwiper(items, 0, false);
                }));
            }
            getMobileCurrentSlideDom(index) {
                const {realIndex} = this.mobileSwiper || {};
                const _index = index || realIndex;
                const swiperIsLoop = this.getSwiperIsLoop();
                const currentSlideDom = swiperIsLoop ? $(`${this.mobileId} .product_productImages .swiper-slide[data-swiper-slide-index="${_index}"]`) : $(`${this.mobileId} .product_productImages .swiper-slide`).eq(_index);
                return currentSlideDom;
            }
            setCurrentSlidePB($dom, imageUrl) {
                var _imgSize3;
                const ratio = (null === (_imgSize3 = img_size(imageUrl)) || void 0 === _imgSize3 ? void 0 : _imgSize3.ratio) || "100%";
                $dom.css("paddingBottom", ratio).attr("data-sku-image-ratio", ratio);
            }
            toggleMSkuImage(index, isShow, skuImageUrl) {
                const self = this;
                if (void 0 === index || null === index) {
                    console.error(`toggleMSkuImage: index异常${index}`);
                    return;
                }
                const currentSlideDom = self.getMobileCurrentSlideDom(index);
                const currentSkuImageBox = currentSlideDom.find(".product_m_skuImageBox");
                const currentSlideBox = currentSlideDom.find(".swiper-slide-box");
                const currentSkuImageIsError = currentSkuImageBox.hasClass("imageItemError");
                if (currentSkuImageIsError) currentSkuImageBox.removeClass("imageItemError");
                const skuImageDom = `\n    <div class="product_m_skuImageBox">\n      <img onerror="this.onerror=null;this.parentElement.className+=' imageItemError';" class="product_m_skuImage product_photoSwipe_image" data-photoswipe-src=${imgUrl(skuImageUrl, {
                    width: 1800
                })} src=${skuImageUrl} />\n      ${self.productImageScale ? `<div class="scaleSkuImageIcon">\n      <svg width="28" height="28" viewBox="0 0 28 28" fill="none" xmlns="http://www.w3.org/2000/svg">\n      <circle cx="13" cy="12" r="7.5" stroke="black"/>\n      <path d="M18.5 17.5L23 22.5" stroke="black" stroke-linecap="round"/>\n      </svg>\n      </div>` : ""}\n    </div>`;
                if (isShow && void 0 !== index && skuImageUrl) {
                    currentSlideDom.find("img").hide();
                    if (0 === currentSkuImageBox.length) {
                        currentSlideDom.append(skuImageDom);
                        self.setCurrentSlidePB(currentSlideBox, skuImageUrl);
                        self.bindMobileSkuImageScaleDom();
                    } else {
                        currentSkuImageBox.find(".product_m_skuImage").removeAttr("srcset data-srcset").attr({
                            src: skuImageUrl,
                            "data-photoswipe-src": imgUrl(skuImageUrl, {
                                width: 1800
                            }),
                            onerror: "this.onerror=null;this.parentElement.className+=' imageItemError';"
                        }).show();
                        self.setCurrentSlidePB(currentSlideBox, skuImageUrl);
                    }
                    this.mobileSwiper.updateAutoHeight();
                    $(`${this.mobileId} .product_productImages`).attr("sku-image-index", index);
                } else if (!isShow && void 0 !== index && currentSkuImageBox.length > 0) {
                    const slideImg = currentSlideDom.find("img");
                    if (currentSlideBox.attr("data-image-ratio")) currentSlideBox.css("paddingBottom", currentSlideBox.attr("data-image-ratio")).removeAttr("data-sku-image-ratio");
                    currentSkuImageBox.remove();
                    slideImg.show();
                    this.mobileSwiper.updateAutoHeight();
                    $(`${this.mobileId} .product_productImages`).attr("sku-image-index", null);
                }
            }
            handleMobileScaleImage() {
                $(`${this.mobileId} .paginationList div`).removeClass("active").eq(activeIndex).addClass("active");
            }
            initMobileProductImages(firstInit) {
                const mobileProductImagesDom = $(`${this.mobileId}`);
                const selector = `${this.mobileId} .product_productImages`;
                const mainSwiperDom = $(selector);
                const slidesLength = mainSwiperDom.find(".swiper-slide").length;
                const videoDom = mainSwiperDom.find(".videoItem");
                const videoIndex = videoDom.data("index");
                const videoIsStartOrEndPos = 0 === videoIndex || videoIndex === videoDom.data("length") - 1 || 1 === slidesLength;
                if (0 === mainSwiperDom.length || "none" === mobileProductImagesDom.css("display")) return null;
                const mainSwiper = new core_class(selector, {
                    loop: videoIsStartOrEndPos ? false : true,
                    initialSlide: $(`${this.mobileId}`).data("initial-slide") || 0,
                    slidesPerView: "auto",
                    centeredSlides: true,
                    spaceBetween: 5,
                    autoHeight: true,
                    lazy: {
                        loadOnTransitionStart: true,
                        loadPrevNext: .75 === this.mobileWidthRatio ? true : false
                    },
                    on: {
                        init: swiper => {
                            if (firstInit) {
                                var _window$lozadObserver;
                                if (this.productImageScale) {
                                    this.initPhotoSwipe(this.mobileId, "mobile");
                                    this.initMobileSkuPhotoSwiper();
                                }
                                this.handleMActivePagination(swiper.realIndex);
                                $(`${this.mobileId} .product_productImages`).attr("sku-image-index", swiper.realIndex);
                                if (videoIsStartOrEndPos) {
                                    const skuImageDom = $(`${this.mobileId} .product_productImages .swiper-slide`).eq(swiper.realIndex).find(".product_m_skuImage");
                                    skuImageDom.attr("src") || skuImageDom.attr("data-src");
                                }
                                $(`${this.mobileId} .product_productImages .swiper-slide`).css("height", "auto");
                                swiper.updateAutoHeight();
                                null === (_window$lozadObserver = window.lozadObserver) || void 0 === _window$lozadObserver ? void 0 : _window$lozadObserver.observe();
                            }
                        },
                        slideChange: swiper => {
                            handleVideoPlayPause(this.videoMobilePlayer, "pause");
                            this.videoMobilePlayerStatus = "pause";
                            this.handleMActivePagination(swiper.realIndex);
                            const skuImageDom = $(`${this.mobileId} .product_productImages .swiper-slide`).eq(swiper.realIndex).find(".product_m_skuImage");
                            skuImageDom.attr("src") || skuImageDom.attr("data-src");
                        },
                        slideChangeTransitionEnd: () => {
                            const skuImageIndex = $(`${this.mobileId} .product_productImages`).attr("sku-image-index");
                            if (void 0 !== skuImageIndex) this.toggleMSkuImage(skuImageIndex, false);
                        }
                    },
                    ...this.swiperConfig.mobile
                });
                return mainSwiper;
            }
            updateSlides(list) {
                var _list$, _list;
                $(`${this.id} .product_productImages`).children(".swiper-wrapper").empty().append(null !== list && void 0 !== list && list.length ? list.map(((item, index) => {
                    var _imgSize4;
                    const imgRatio = (null === (_imgSize4 = img_size(item.resource)) || void 0 === _imgSize4 ? void 0 : _imgSize4.ratio) || "100%";
                    if ("VIDEO" === item.type) {
                        const {middle: cover, videoId} = utils_getYouTubeCover(item.resource);
                        return `<div class="swiper-slide videoItem">\n<div class="product_youTubeVideoContainer">\n<div class="product_youTubeVideoBox" data-video-id="${videoId}"></div>\n</div>\n<img onerror="this.onerror=null;this.parentElement.className+=' imageItemError';" class="product_photoSwipe_image swiper-lazy" data-photoswipe-src="${cover}" ${0 !== index ? "data-" : ""}src="${cover}" alt="">\n</div>`;
                    }
                    return `<div class="swiper-slide imageItem" style="height: 0; padding-bottom:${imgRatio}"><img onerror="this.onerror=null;this.parentElement.className+=' imageItemError';" data-photoswipe-src="${item.resource}" ${0 !== index ? "data-" : ""}src="${item.resource}" alt="" class="swiper-lazy product_photoSwipe_image"></div>`;
                })) : `<div class="swiper-slide"><div class="product-detail-empty-image"></div></div>`);
                const slidesLength = list.length;
                const mobileWrapper = $(`${this.mobileId} .product_productImages`).children(".swiper-wrapper");
                if (1 === (null === list || void 0 === list ? void 0 : list.length) || "VIDEO" === (null === list || void 0 === list ? void 0 : null === (_list$ = list[0]) || void 0 === _list$ ? void 0 : _list$.type) || "VIDEO" === (null === list || void 0 === list ? void 0 : null === (_list = list[(null === list || void 0 === list ? void 0 : list.length) - 1]) || void 0 === _list ? void 0 : _list.type)) mobileWrapper.addClass("hasVideoFl"); else mobileWrapper.removeClass("hasVideoFl");
                mobileWrapper.empty().append(null !== list && void 0 !== list && list.length ? list.map(((item, index) => {
                    var _imgSize5;
                    if ("VIDEO" === item.type) {
                        const {middle: cover, videoId} = utils_getYouTubeCover(item.resource);
                        return `<div class="swiper-slide videoItem" style="height: auto" data-index="${index}" data-length="${slidesLength}">\n<div class="swiper-slide-box" data-image-ratio="56.25%" style="padding-bottom: 56.25%">\n  <div class="product_youTubeVideoContainer">\n    <div class="product_youTubeVideoBox" data-video-id="${videoId}"></div>\n  </div>\n  <img onerror="this.onerror=null;this.parentElement.className+=' imageItemError';" class="product_photoSwipe_image swiper-lazy" data-photoswipe-src="${cover}" ${0 !== index ? "data-" : ""}src="${cover}" alt="">\n</div>\n</div>`;
                    }
                    const ratio = (null === (_imgSize5 = img_size(item.resource)) || void 0 === _imgSize5 ? void 0 : _imgSize5.ratio) || "100%";
                    return `<div class="swiper-slide imageItem" style="height: auto">\n<div class="swiper-slide-box" data-image-ratio="${ratio}" data-sku-image-ratio="100%" style="padding-bottom: ${ratio}">\n<img onerror="this.onerror=null;this.parentElement.className+=' imageItemError';" data-photoswipe-src="${item.resource}" ${0 !== index ? "data-" : ""}src="${item.resource}" alt="" class="swiper-lazy product_photoSwipe_image">${this.productImageScale ? `<div class="scaleImageIcon"><svg width="28" height="28" viewBox="0 0 28 28" fill="none" xmlns="http://www.w3.org/2000/svg"><circle cx="13" cy="12" r="7.5" /><path d="M18.5 17.5L23 22.5" stroke-linecap="round" /></svg></div>` : ""}</div>\n</div>`;
                })) : `<div class="swiper-slide"><div class="swiper-slide-box" data-image-ratio="100%" style="padding-bottom: 100%"><div class="product-detail-empty-image product-noImages"></div></div></div>`);
            }
            updateImageList(list, activeIndex, source) {
                var _this$swiper3, _this$mobileSwiper2;
                if (!this.verifySource(null === source || void 0 === source ? void 0 : source.app)) return;
                this.mediaList = list;
                handleVideoPlayPause(this.videoPcPlayer, "pause");
                handleVideoPlayPause(this.videoMobilePlayer, "pause");
                this.videoMobilePlayerStatus = "pause";
                this.replaceThubsSwiper(list, activeIndex);
                null === (_this$swiper3 = this.swiper) || void 0 === _this$swiper3 ? void 0 : _this$swiper3.destroy();
                null === (_this$mobileSwiper2 = this.mobileSwiper) || void 0 === _this$mobileSwiper2 ? void 0 : _this$mobileSwiper2.destroy();
                this.updateSlides(list);
                if (this.swiper) {
                    $(`${this.id}`).data("initial-slide", activeIndex);
                    this.swiper = this.initPcProductImages();
                    this.updatePhotoSwipeItems(this.id);
                    this.handleEffectSwiperHeight();
                    if (this.thumbsDirection === COLUMN) {
                        const scrollTopDistance = this.getThumbsPosition("top", activeIndex);
                        this.handleThumbsScroll("scrollTop", scrollTopDistance, false, 0);
                    } else {
                        const scrollLeftDistance = this.getThumbsPosition("left", activeIndex);
                        this.handleThumbsScroll("scrollLeft", scrollLeftDistance, false, 0);
                    }
                }
                if (this.mobileSwiper) {
                    $(`${this.mobileId}`).data("initial-slide", activeIndex);
                    this.mobileSwiper = this.initMobileProductImages();
                    this.updatePhotoSwipeItems(this.mobileId);
                }
                this.videoPcPlayer = this.initPcVideo();
                this.videoMobilePlayer = this.initMobileVideo();
                $(`${this.id}`).attr("data-index", activeIndex || 0);
            }
            replaceThubsSwiper(list, activeIndex) {
                const wrapper = $(`${this.id} .product_thumbs${this.thumbsDirection === COLUMN ? "Column" : "Row"}Container .productImageThumbsWrapper`);
                const mBox = $(`${this.mobileId} .paginationBox`);
                const mWrapper = mBox.find(".paginationListWrapper");
                wrapper.empty();
                mWrapper.empty();
                if (!(null !== list && void 0 !== list && list.length) || list.length <= 1) {
                    $(`${this.id} .product_thumbs${this.thumbsDirection === COLUMN ? "Column" : "Row"}Container`).hide();
                    mBox.hide();
                } else {
                    $(`${this.id} .product_thumbs${this.thumbsDirection === COLUMN ? "Column" : "Row"}Container`).show();
                    mBox.show();
                    list.forEach(((item, index) => {
                        var _imgSize6;
                        const ratio = (null === (_imgSize6 = img_size(item.resource)) || void 0 === _imgSize6 ? void 0 : _imgSize6.ratio) || "100%";
                        if ("VIDEO" === item.type) wrapper.append(`<div class="swiper-slide thumbsImageItem ${activeIndex === index ? "active" : ""}"><figure style="padding-bottom: ${ratio}"><img onerror="this.onerror=null;this.parentElement.className+=' imageItemError';" src="${utils_getYouTubeCover(item.resource).middle}" alt=""><svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">\n          <circle cx="10" cy="10" r="10" fill="black" fill-opacity="0.6"/>\n          <path d="M13.6256 10.2496L8.46641 13.6891C8.26704 13.822 8 13.6791 8 13.4394V6.56056C8 6.32095 8.26704 6.17803 8.46641 6.31094L13.6256 9.75039C13.8037 9.86913 13.8037 10.1309 13.6256 10.2496Z" fill="white"/>\n          </svg></figure>\n          </div>`); else wrapper.append($(`<div class="swiper-slide thumbsImageItem ${activeIndex === index ? "active" : ""}"><figure style="padding-bottom: ${ratio}"><img onerror="this.onerror=null;this.parentElement.className+=' imageItemError';" src="${imgUrl(item.resource, {
                            width: 152
                        })}" alt=""></figure></div>`));
                        mWrapper.append(`<span class="${activeIndex === index ? "active" : ""}" />`);
                    }));
                }
            }
            skuImageChange(img, source) {
                if (!this.verifySource(null === source || void 0 === source ? void 0 : source.app)) return;
                const {url} = img || {};
                if (url) {
                    handleVideoPlayPause(this.videoPcPlayer, "pause");
                    handleVideoPlayPause(this.videoMobilePlayer, "pause");
                    this.videoMobilePlayerStatus = "pause";
                    const index = this.mediaList.findIndex((item => item.resource === url));
                    if (index > -1) {
                        var _this$swiper4, _this$mobileSwiper3;
                        null === (_this$swiper4 = this.swiper) || void 0 === _this$swiper4 ? void 0 : _this$swiper4.slideTo(index);
                        null === (_this$mobileSwiper3 = this.mobileSwiper) || void 0 === _this$mobileSwiper3 ? void 0 : _this$mobileSwiper3.slideToLoop(index, 0);
                        this.handlePcSkuImage(false);
                        this.handleMobileSkuImage(false);
                    } else {
                        this.handlePcSkuImage(true, url);
                        this.handleMobileSkuImage(true, url);
                    }
                } else {
                    this.handlePcSkuImage(false);
                    this.handleMobileSkuImage(false);
                }
            }
        }
        js_defineProperty(ProductImages, "pcSelectorPrefix", "execute_productImages_pc");
        js_defineProperty(ProductImages, "mobileSelectorPrefix", "execute_productImages_mobile");
        class ProductImagesWithFlattenAndMobileThumb extends ProductImages {
            constructor(...args) {
                const {selectorId} = args[0] || {};
                const mobilePrefixCls = `.execute_productImages_mobile_${selectorId}`;
                const productMobileHideThumbnailImage = "hide" === $(`.product_productMobileThumbnailImageHide_${selectorId}`).val();
                const config = {
                    ...args[0],
                    swiperConfig: {
                        mobile: {
                            loop: false
                        }
                    }
                };
                if (!productMobileHideThumbnailImage) config.swiperConfig = {
                    mobile: {
                        loop: false,
                        thumbs: {
                            swiper: {
                                el: `${mobilePrefixCls} .product_mobile_thumbnail_container .swiper-container`,
                                spaceBetween: 10,
                                slidesPerView: 3,
                                watchSlidesVisibility: true,
                                slidesPerGroup: 3,
                                navigation: {
                                    nextEl: `.thumbnail_button_next_${selectorId}`,
                                    prevEl: `.thumbnail_button_prev_${selectorId}`
                                }
                            }
                        }
                    }
                };
                super(config);
                this.productImageIsFlatten = "flatten" === $(`.product_productImageShowStyle_${selectorId}`).val();
                this.productPcSkuImageFlatten = $(this.id).find(".product_pc_skuImage_flatten");
                this.productPcNormalItemFlatten = $(this.id).find(".normalItem");
                this.productMobileHideThumbnailImage = productMobileHideThumbnailImage;
                if (this.productMobileHideThumbnailImage && !this.swiper) this.initMobileNormalPagination();
                if (!this.productMobileHideThumbnailImage && !this.swiper) this.handleInitThumbnailImageBySkuImage();
                if (this.productImageIsFlatten && !this.mobileSwiper && this.productImageScale) {
                    this.initFlattenPcPhotoSwipe();
                    this.initFlattenPcSkuPhotoSwiper();
                }
            }
            handleInitThumbnailImageBySkuImage() {
                var _$$find;
                const index = this.mobileSwiper.activeIndex;
                const firstThumbnail = null === (_$$find = $(`${this.mobileId} .product_mobile_thumbnail_container`).find(".swiper-slide")) || void 0 === _$$find ? void 0 : _$$find.eq(index);
                const activeCls = "noShowActive";
                if ($(`${this.mobileId}`).find(".product_m_skuImageBox").length > 0) {
                    firstThumbnail.addClass(activeCls);
                    firstThumbnail.one("click", (() => {
                        firstThumbnail.removeClass(activeCls);
                        super.handleMobileSkuImage(false);
                    }));
                } else firstThumbnail.removeClass(activeCls);
            }
            updatePagination(currentIndex, total) {
                const {mobileId} = this;
                const prevDom = $(`${mobileId} .normal-thumbnail-button-prev`);
                const nextDom = $(`${mobileId} .normal-thumbnail-button-next`);
                const content = $(`${mobileId} .pagination-content`);
                content.html(`${currentIndex + 1}/${total}`);
                prevDom.removeClass("disabled");
                nextDom.removeClass("disabled");
                if (0 === currentIndex) {
                    prevDom.addClass("disabled");
                    return;
                }
                if (currentIndex === total - 1) nextDom.addClass("disabled");
            }
            initMobileNormalPagination() {
                const {mobileId, mobileSwiper} = this;
                null === mobileSwiper || void 0 === mobileSwiper ? void 0 : mobileSwiper.on("slideChange", (swiper => {
                    var _swiper$slidesGrid;
                    const index = null === swiper || void 0 === swiper ? void 0 : swiper.realIndex;
                    const total = null === swiper || void 0 === swiper ? void 0 : null === (_swiper$slidesGrid = swiper.slidesGrid) || void 0 === _swiper$slidesGrid ? void 0 : _swiper$slidesGrid.length;
                    this.updatePagination(index, total);
                }));
                $(`${mobileId}`).on("click", ".normal-thumbnail-button-prev", (() => {
                    mobileSwiper.slidePrev(200);
                })).on("click", ".normal-thumbnail-button-next", (() => {
                    mobileSwiper.slideNext(200);
                }));
            }
            initFlattenPcPhotoSwipe() {
                const self = this;
                this.updateFlattenPhotoSwipeItems();
                $(`${this.id}`).on("click", ".imageItem", (function() {
                    const realIndex = $(this).data("index");
                    self.handlePhotoSwiper(self.slideItems, realIndex);
                }));
            }
            initFlattenPcSkuPhotoSwiper() {
                const self = this;
                $(`${this.id}`).on("click", ".product_pc_skuImage_flatten", (function() {
                    const items = [ {
                        src: $(this).find(".product_photoSwipe_image").attr("data-photoswipe-src"),
                        w: 0,
                        h: 0,
                        el: $(this)[0]
                    } ];
                    self.handlePhotoSwiper(items, 0, false);
                }));
            }
            toggleFlattenPcSkuImage(isShow, skuImageUrl) {
                const skuImageDom = this.productPcSkuImageFlatten;
                if (skuImageDom.hasClass("imageItemError")) skuImageDom.removeClass("imageItemError");
                if (isShow && skuImageUrl) {
                    var _imgSize;
                    const ratio = (null === (_imgSize = img_size(skuImageUrl)) || void 0 === _imgSize ? void 0 : _imgSize.ratio) || "100%";
                    const imgDom = skuImageDom.find("img");
                    if (imgDom.length > 0) imgDom.removeAttr("srcset data-srcset").attr({
                        src: skuImageUrl,
                        "data-photoswipe-src": imgUrl(skuImageUrl, {
                            width: 1800
                        })
                    }); else skuImageDom.css("paddingBottom", `${ratio}`).html(`<img onerror="this.onerror=null;this.parentElement.className+=' imageItemError';" class="product_photoSwipe_image" data-photoswipe-src=${imgUrl(skuImageUrl, {
                        width: 1800
                    })} src=${skuImageUrl} />`);
                    skuImageDom.show();
                    this.productPcNormalItemFlatten.hide();
                } else if (!isShow) {
                    skuImageDom.hide().empty();
                    this.productPcNormalItemFlatten.show();
                }
            }
            skuImageChange(img, source) {
                if (!this.verifySource(null === source || void 0 === source ? void 0 : source.app)) return;
                const {url} = img || {};
                if (this.productImageIsFlatten && !this.mobileSwiper) {
                    if (url) this.toggleFlattenPcSkuImage(true, url); else this.toggleFlattenPcSkuImage(false);
                    return;
                }
                super.skuImageChange(img, source);
                this.handleInitThumbnailImageBySkuImage();
            }
            handleMobileThumbArrow(thumbnailContainer, list) {
                if (list.length > 3) {
                    thumbnailContainer.find(".thumbnail-button-prev").css("visibility", "visible");
                    thumbnailContainer.find(".thumbnail-button-next").css("visibility", "visible");
                } else {
                    thumbnailContainer.find(".thumbnail-button-prev").css("visibility", "hidden");
                    thumbnailContainer.find(".thumbnail-button-next").css("visibility", "hidden");
                }
            }
            updateMobileThumbsImage(list) {
                const thumbnailContainer = $(`${this.mobileId} .product_mobile_thumbnail_container`);
                if (!(null !== list && void 0 !== list && list.length) || list.length <= 1) {
                    thumbnailContainer.hide();
                    return;
                }
                thumbnailContainer.show();
                thumbnailContainer.find(".swiper-wrapper").empty().append(list.map((item => {
                    var _imgSize2;
                    const ratio = (null === (_imgSize2 = img_size(item.resource)) || void 0 === _imgSize2 ? void 0 : _imgSize2.ratio) || "100%";
                    const boxPb = "VIDEO" === item.type ? "56.25%" : ratio;
                    const {middle: cover} = utils_getYouTubeCover(item.resource);
                    const domItem = "VIDEO" === item.type ? `<img class="lozad" data-sizes="auto" data-src="${cover}" alt="">` : `<img class="lozad" data-sizes="auto" data-src="${item.resource}" alt="">`;
                    return `\n          <div class="swiper-slide">\n            <div class="swiper-slide-item" style="padding-bottom:${boxPb}">${domItem}</div>\n          </div>`;
                })));
                this.handleMobileThumbArrow(thumbnailContainer, list);
            }
            updateMobileThumbArrow(list) {
                const paginationContainer = $(`${this.mobileId} .product_mobile_thumbnail_pagination`);
                if (list.length > 1) paginationContainer.show(); else paginationContainer.hide();
            }
            updateImageList(list, activeIndex, source) {
                if (!this.verifySource(null === source || void 0 === source ? void 0 : source.app)) return;
                if (this.productImageIsFlatten) {
                    this.updateFlattenImageList(list);
                    if (!this.mobileSwiper) this.updateFlattenPhotoSwipeItems();
                }
                if (!this.productMobileHideThumbnailImage && !this.swiper) this.updateMobileThumbsImage(list);
                super.updateImageList(list, activeIndex, source);
                if (this.productMobileHideThumbnailImage && !this.swiper) {
                    this.updateMobileThumbArrow(list);
                    this.updatePagination(0, null === list || void 0 === list ? void 0 : list.length);
                    this.initMobileNormalPagination();
                }
            }
            updateFlattenPhotoSwipeItems() {
                const items = [];
                $(`${this.id}`).find(".imageItem,.videoItem").each(((index, item) => {
                    const realIndex = $(item).data("index");
                    const imgEl = $(item).find(".product_photoSwipe_image");
                    const size = $(item).attr("data-natural-size");
                    const transSize = size ? size.split("x") : null;
                    items[realIndex] = {
                        src: imgEl.attr("data-photoswipe-src"),
                        w: transSize ? parseInt(transSize[0], 10) : imgEl.innerWidth(),
                        h: transSize ? parseInt(transSize[1], 10) : imgEl.innerHeight(),
                        el: item
                    };
                }));
                this.slideItems = items;
            }
            galleryAfterChange(...args) {
                if (this.productImageIsFlatten && !this.mobileSwiper) {
                    const {currItem, getCurrentIndex} = args[0];
                    const currentIndex = getCurrentIndex();
                    if (0 === currentIndex && "none" === this.productPcNormalItemFlatten.css("display")) {
                        this.productPcNormalItemFlatten.show();
                        this.productPcSkuImageFlatten.hide();
                    }
                    currItem.el.scrollIntoView({
                        behavior: "smooth",
                        block: "nearest",
                        inline: "nearest"
                    });
                }
                super.galleryAfterChange(...args);
            }
            updateFlattenDom() {
                this.productPcSkuImageFlatten = $(this.id).find(".product_pc_skuImage_flatten");
                this.productPcNormalItemFlatten = $(this.id).find(".normalItem");
            }
            updateFlattenImageList(list) {
                const container = $(`${this.id}.product_productImages_tile`).empty();
                if (null !== list && void 0 !== list && list.length) {
                    container.removeClass("product-detail-empty-image");
                    const flattenFirstItem = $(`<div class="row row-cols-md-1 gx-md-4 flattenFirstItem">\n          <div class="flattenFirstItemWrapper">\n            <div class="normalItem"></div>\n            <div class="product_pc_skuImage_flatten"></div>\n          </div>\n        </div>`);
                    const exceptFlattenItemList = $(`<div class="exceptFirstMediaList row row-cols-md-2 gx-md-4"></div>`);
                    const firstCol = $(`<div class="product_images_firstCol"></div>`);
                    const secondCol = $(`<div class="product_images_secondCol"></div>`);
                    list.forEach(((item, index) => {
                        let dom;
                        if ("VIDEO" === item.type) {
                            const {middle: cover, videoId} = utils_getYouTubeCover(item.resource);
                            dom = `<div class="videoItem" data-index="${index}">\n<div class="product_youTubeVideoBox" data-video-id="${videoId}"></div>\n<img class="product_photoSwipe_image" data-photoswipe-src="${cover}" src="${cover}" alt="">\n</div>`;
                        } else {
                            const {ratio} = img_size(item.resource);
                            dom = `<div class="imageItem" style="padding-bottom: ${ratio}" data-index="${index}"><img onerror="this.onerror=null;this.parentElement.className+=' imageItemError';" data-photoswipe-src="${item.resource}" class="product_photoSwipe_image" src="${item.resource}" alt=""></div>`;
                        }
                        if (0 === index) {
                            flattenFirstItem.find(".normalItem").append(dom);
                            return;
                        }
                        if ((index - 1) % 2) secondCol.append(dom); else firstCol.append(dom);
                    }));
                    exceptFlattenItemList.append(firstCol, secondCol);
                    container.append(flattenFirstItem, exceptFlattenItemList);
                } else {
                    container.addClass("product-detail-empty-image");
                    container.append(`<div class="product_pc_skuImage_flatten" style="width: 100%; position:absolute;"></div>`);
                }
                this.updateFlattenDom();
            }
        }
        const product_swiper = ProductImagesWithFlattenAndMobileThumb;
        let d = $("i[data-platform]");
        if (!d.get(0)) {
            d = $(`<i data-platform></i>`);
            $(document.body).append(d);
        }
        function isMobile() {
            let dom = $("i[data-platform]");
            if (!dom.get(0)) {
                dom = $(`<i data-platform></i>`);
                $(document.body).append(dom);
            }
            return "block" === dom.css("display");
        }
        function setPosition({id, container = window, offsetTop = 0}) {
            const box = $(`#product-detail-sticky_${id}`);
            if (!box.get(0)) return;
            let mainView = box.children(".sticky-main-view");
            mainView = mainView.length ? mainView : box;
            const height = mainView.height();
            const wHeight = $(container).outerHeight();
            if (height + offsetTop > wHeight) box.css("top", -(height - wHeight)); else box.css("top", offsetTop);
        }
        function listenPosition({id, container = window, offsetTop = 0}) {
            setPosition({
                id,
                container,
                offsetTop
            });
            const setPositionDebounce = debounce(300, (() => {
                setPosition({
                    id,
                    container,
                    offsetTop
                });
            }));
            $(window).on("resize", setPositionDebounce);
            if (!isMobile()) $(container).one("scroll", setPositionDebounce);
            return function() {
                $(window).off("resize", setPositionDebounce);
                $(container).off("scroll", setPositionDebounce);
            };
        }
        const layout = setPosition;
        class SkuUtil {
            constructor() {
                this.skuResult = {};
            }
            initSku(data) {
                if (!data) return {};
                const skuKeys = Object.keys(data);
                skuKeys.forEach((skuKey => {
                    const sku = data[skuKey];
                    const skuKeyAttrs = skuKey.split(";");
                    const combArr = SkuUtil.combInFlags(skuKeyAttrs);
                    combArr.forEach((item => {
                        this.skuOptionAttrResult(item, sku);
                    }));
                }));
                return this.skuResult;
            }
            static combInFlags(skuKeyAttrs) {
                if (!skuKeyAttrs || skuKeyAttrs.length <= 0) return [];
                const len = skuKeyAttrs.length;
                const result = [];
                for (let n = 1; n <= len; n++) {
                    const flags = SkuUtil.getCombFlags(len, n);
                    flags.forEach((flag => {
                        const comb = [];
                        flag.forEach(((item, index) => {
                            if (1 === item) comb.push(skuKeyAttrs[index]);
                        }));
                        result.push(comb);
                    }));
                }
                return result;
            }
            static getCombFlags(m, n) {
                const flagArrs = [];
                const flagArr = [];
                let isEnd = false;
                for (let i = 0; i < m; i += 1) flagArr[i] = i < n ? 1 : 0;
                flagArrs.push(flagArr.concat());
                if (n && m > n) while (!isEnd) {
                    let leftCnt = 0;
                    for (let i = 0; i < m - 1; i++) {
                        if (1 === flagArr[i] && 0 === flagArr[i + 1]) {
                            for (let j = 0; j < i; j++) flagArr[j] = j < leftCnt ? 1 : 0;
                            flagArr[i] = 0;
                            flagArr[i + 1] = 1;
                            const aTmp = flagArr.concat();
                            flagArrs.push(aTmp);
                            if (-1 === aTmp.slice(-n).join("").indexOf("0")) isEnd = true;
                            break;
                        }
                        1 === flagArr[i] && leftCnt++;
                    }
                }
                return flagArrs;
            }
            skuOptionAttrResult(combArrItem, sku) {
                const key = combArrItem.join(";");
                if (this.skuResult[key]) {
                    const prevPrice = this.skuResult[key].price;
                    const curPrice = [ sku.price ];
                    this.skuResult[key] = {
                        ...sku,
                        price: prevPrice.concat(curPrice).sort(),
                        stock: this.skuResult[key].stock + sku.stock
                    };
                } else this.skuResult[key] = {
                    ...sku,
                    price: [ sku.price ]
                };
            }
            static filterValidArr(arr) {
                return arr.filter((item => item)).map((item => item.id));
            }
            checkSpecAttrDisabled(selectSpecList, id, index) {
                if (!this.skuResult[id]) return true;
                const newSelectList = selectSpecList.map((item => item && {
                    id: item
                }));
                newSelectList[index] = {
                    id: "",
                    ...newSelectList[index]
                };
                if (Number(newSelectList[index].id) !== Number(id)) {
                    newSelectList[index].id = id;
                    const hitAttrKey = SkuUtil.filterValidArr(newSelectList).join(";");
                    return !this.skuResult[hitAttrKey];
                }
            }
            checkSpecAttrActive(selectSpecList, name) {
                const newSelectList = selectSpecList.map((item => ({
                    id: item
                })));
                return -1 !== SkuUtil.filterValidArr(newSelectList).indexOf(name) || -1 !== SkuUtil.filterValidArr(newSelectList).indexOf(Number(name));
            }
            getActionSpecList(selectSpecList, item, index) {
                if (selectSpecList[index] && selectSpecList[index] === item.id) selectSpecList[index] = null; else selectSpecList[index] = item.id;
                if (selectSpecList.length) return selectSpecList.slice();
                return [];
            }
            getPrice(selectSpecList) {
                const skukey = SkuUtil.filterValidArr(selectSpecList).join(";");
                const hitSpecObj = this.skuResult[skukey];
                if (!hitSpecObj) return null;
                const priceArr = hitSpecObj.price;
                const maxPrice = Math.max(...priceArr);
                const minPrice = Math.min(...priceArr);
                return {
                    minPrice,
                    maxPrice
                };
            }
            getStock(selectSpecList) {
                const skukey = SkuUtil.filterValidArr(selectSpecList).join(";");
                const hitSpecObj = this.skuResult[skukey];
                if (!hitSpecObj) return null;
                return hitSpecObj.stock;
            }
        }
        function getSkuComMap(skuList) {
            const validSkuMap = {};
            const invalidSkuMap = {};
            if (!skuList) return {
                validSkuMap,
                invalidSkuMap
            };
            skuList.forEach((sku => {
                if (sku.skuAttributeIds) {
                    const skuKey = sku.skuAttributeIds.sort(((a, b) => (a.attributeWeight || 0) - (b.attributeWeight || 0))).map((item => `${item.id}:${item.valueId}`)).join(";");
                    if (!sku.available) invalidSkuMap[skuKey] = {
                        ...sku
                    }; else validSkuMap[skuKey] = {
                        price: sku.price,
                        stock: sku.stock,
                        skuSeq: sku.skuSeq,
                        spuSeq: sku.spuSeq
                    };
                }
            }));
            return {
                validSkuMap,
                invalidSkuMap
            };
        }
        function getSku(selectSkuArr, skuList, sourceSkuList) {
            const skuKey = selectSkuArr.map((item => item)).join(";");
            if (!skuKey) return null;
            const hitSku = sourceSkuList.find((item => {
                var _skuList$skuKey;
                return item.skuSeq === (null === (_skuList$skuKey = skuList[skuKey]) || void 0 === _skuList$skuKey ? void 0 : _skuList$skuKey.skuSeq);
            }));
            return hitSku || null;
        }
        function transSkuSpecList(skuAttributeMap) {
            const resultArr = [];
            if (!skuAttributeMap) return resultArr;
            Object.entries(skuAttributeMap).sort((([, a], [, b]) => (a.attributeWeight || 0) - (b.attributeWeight || 0))).forEach((([nameId, item]) => {
                const specAttrListResult = [];
                Object.entries(item.skuAttributeValueMap).sort((([, a], [, b]) => (a.attributeValueWeight || 0) - (b.attributeValueWeight || 0))).forEach((([attrId, attr]) => {
                    const id = `${nameId}:${attrId}`;
                    const name = attr.defaultValue;
                    const imgUrl = attr.imgUrl || "";
                    specAttrListResult.push({
                        id,
                        name,
                        imgUrl
                    });
                }));
                const skuSpecObj = {
                    hidden: item.hidden,
                    nameId,
                    specName: item.defaultName,
                    specAttrList: specAttrListResult,
                    onlyShowAttrImg: specAttrListResult.every((item => item.imgUrl))
                };
                resultArr.push(skuSpecObj);
            }));
            return resultArr;
        }
        function getAttrValue(specList, currentAttrId, index) {
            var _specList$index, _specList$index$specA;
            if (!Array.isArray(specList)) return "";
            return (null === (_specList$index = specList[index]) || void 0 === _specList$index ? void 0 : null === (_specList$index$specA = _specList$index.specAttrList) || void 0 === _specList$index$specA ? void 0 : _specList$index$specA.find((item => item.id === currentAttrId))) || null;
        }
        class BaseSkuTrade {
            constructor({sku, spu, initialSkuSeq, dataPool, root, domReady, onInit, onChange, onDestory, mixins}) {
                this.mixins = mixins;
                this.root = $(root);
                if (dataPool) this.dataPool = dataPool; else this.dataPool = new DataWatcher;
                if (!this.dataPool.inited) {
                    this.dataPool.sku = sku || {};
                    this.dataPool.spu = spu || {};
                    this.dataPool.attrArray = [];
                    this.dataPool.currentSpecList = [];
                    this.dataPool.skuType = "";
                    this.dataPool.validSkuMap = {};
                    this.dataPool.invalidSkuMap = {};
                    this.dataPool.activeSku = null;
                    this.dataPool.initialSkuSeq = initialSkuSeq;
                }
                this.onInit = onInit;
                this.onChange = onChange;
                this.onDestory = onDestory;
                this.init(domReady);
            }
            beforeInitDom() {
                var _this$mixins, _this$mixins$forEach;
                null === (_this$mixins = this.mixins) || void 0 === _this$mixins ? void 0 : null === (_this$mixins$forEach = _this$mixins.forEach) || void 0 === _this$mixins$forEach ? void 0 : _this$mixins$forEach.call(_this$mixins, (item => {
                    var _item$beforeInitDom, _item$beforeInitDom$c;
                    null === item || void 0 === item ? void 0 : null === (_item$beforeInitDom = item.beforeInitDom) || void 0 === _item$beforeInitDom ? void 0 : null === (_item$beforeInitDom$c = _item$beforeInitDom.call) || void 0 === _item$beforeInitDom$c ? void 0 : _item$beforeInitDom$c.call(_item$beforeInitDom, this, this);
                }));
            }
            afterInitDom() {
                var _this$mixins2, _this$mixins2$forEach;
                null === (_this$mixins2 = this.mixins) || void 0 === _this$mixins2 ? void 0 : null === (_this$mixins2$forEach = _this$mixins2.forEach) || void 0 === _this$mixins2$forEach ? void 0 : _this$mixins2$forEach.call(_this$mixins2, (item => {
                    var _item$afterInitDom, _item$afterInitDom$ca;
                    null === item || void 0 === item ? void 0 : null === (_item$afterInitDom = item.afterInitDom) || void 0 === _item$afterInitDom ? void 0 : null === (_item$afterInitDom$ca = _item$afterInitDom.call) || void 0 === _item$afterInitDom$ca ? void 0 : _item$afterInitDom$ca.call(_item$afterInitDom, this, this);
                }));
            }
            beforeUpdate() {
                var _this$mixins3, _this$mixins3$forEach;
                null === (_this$mixins3 = this.mixins) || void 0 === _this$mixins3 ? void 0 : null === (_this$mixins3$forEach = _this$mixins3.forEach) || void 0 === _this$mixins3$forEach ? void 0 : _this$mixins3$forEach.call(_this$mixins3, (item => {
                    var _item$beforeUpdate, _item$beforeUpdate$ca;
                    null === item || void 0 === item ? void 0 : null === (_item$beforeUpdate = item.beforeUpdate) || void 0 === _item$beforeUpdate ? void 0 : null === (_item$beforeUpdate$ca = _item$beforeUpdate.call) || void 0 === _item$beforeUpdate$ca ? void 0 : _item$beforeUpdate$ca.call(_item$beforeUpdate, this, this);
                }));
            }
            afterUpdate() {
                var _this$mixins4, _this$mixins4$forEach;
                null === (_this$mixins4 = this.mixins) || void 0 === _this$mixins4 ? void 0 : null === (_this$mixins4$forEach = _this$mixins4.forEach) || void 0 === _this$mixins4$forEach ? void 0 : _this$mixins4$forEach.call(_this$mixins4, (item => {
                    var _item$afterUpdate, _item$afterUpdate$cal;
                    null === item || void 0 === item ? void 0 : null === (_item$afterUpdate = item.afterUpdate) || void 0 === _item$afterUpdate ? void 0 : null === (_item$afterUpdate$cal = _item$afterUpdate.call) || void 0 === _item$afterUpdate$cal ? void 0 : _item$afterUpdate$cal.call(_item$afterUpdate, this, this);
                }));
            }
            init(domReady) {
                if (!this.dataPool.inited) {
                    this.dataPool.skuUtil = new SkuUtil;
                    this.initAttrArray();
                    this.initSkuComMap();
                    this.initFirstChecked();
                }
                this.dataPool.watch([ "currentSpecList" ], (() => {
                    this.render();
                }));
                this.beforeInitDom();
                if (domReady) this.initDom(); else this.createAndInitDom();
                this.afterInitDom();
                this.render();
                this.dataPool.inited = true;
                try {
                    var _this$onInit;
                    null === (_this$onInit = this.onInit) || void 0 === _this$onInit ? void 0 : _this$onInit.call(this, this, this.dataPool.activeSku, this.root);
                } catch (e) {
                    setTimeout((() => {
                        throw e;
                    }));
                }
            }
            initSkuComMap() {
                const {validSkuMap, invalidSkuMap} = getSkuComMap(this.dataPool.sku.skuList);
                this.dataPool.validSkuMap = this.dataPool.skuUtil.initSku(validSkuMap);
                this.dataPool.invalidSkuMap = invalidSkuMap;
            }
            initAttrArray() {
                this.dataPool.attrArray = transSkuSpecList(this.dataPool.sku.skuAttributeMap);
                if (this.dataPool.attrArray.length) this.dataPool.skuType = "multi"; else this.dataPool.skuType = "single";
            }
            isPreview() {
                const currentUrl = window.location.pathname;
                return /^[/（]preview[/）].*/.test(currentUrl);
            }
            initFirstChecked(allowNotAvailable) {
                if ("single" === this.dataPool.skuType) [this.dataPool.activeSku] = this.dataPool.sku.skuList; else {
                    const {initialSkuSeq} = this.dataPool;
                    if (initialSkuSeq) {
                        var _this$dataPool$sku$sk, _this$dataPool$sku$sk2;
                        const filterSkuList = this.isPreview() ? this.dataPool.sku.skuList : null === (_this$dataPool$sku$sk = this.dataPool.sku.skuList) || void 0 === _this$dataPool$sku$sk ? void 0 : null === (_this$dataPool$sku$sk2 = _this$dataPool$sku$sk.filter) || void 0 === _this$dataPool$sku$sk2 ? void 0 : _this$dataPool$sku$sk2.call(_this$dataPool$sku$sk, (item => item.available));
                        const validSkuList = allowNotAvailable ? this.dataPool.sku.skuList : filterSkuList;
                        if (validSkuList) {
                            const hitSku = validSkuList.find((item => item.skuSeq === initialSkuSeq));
                            if (hitSku) {
                                var _hitSku$skuAttributeI;
                                this.dataPool.activeSku = hitSku;
                                this.dataPool.currentSpecList = null === hitSku || void 0 === hitSku ? void 0 : null === (_hitSku$skuAttributeI = hitSku.skuAttributeIds) || void 0 === _hitSku$skuAttributeI ? void 0 : _hitSku$skuAttributeI.map((item => `${item.id}:${item.valueId}`));
                            }
                        }
                    }
                    this.dataPool.attrArray.forEach(((spec, index) => {
                        if (spec.hidden) this.dataPool.currentSpecList[index] = spec.specAttrList[0].id;
                    }));
                }
            }
            clearRoot() {
                this.root.empty();
            }
            getActiveSku() {
                if ("single" === this.dataPool.skuType) {
                    var _this$dataPool$sku$sk3;
                    return (null === (_this$dataPool$sku$sk3 = this.dataPool.sku.skuList) || void 0 === _this$dataPool$sku$sk3 ? void 0 : _this$dataPool$sku$sk3[0]) || null;
                }
                if ("multi" === this.dataPool.skuType) if (this.dataPool.currentSpecList.filter(Boolean).length === this.dataPool.attrArray.length) return getSku(this.dataPool.currentSpecList, this.dataPool.validSkuMap, this.dataPool.sku.skuList) || getSku(this.dataPool.currentSpecList, this.dataPool.invalidSkuMap, this.dataPool.sku.skuList) || null;
                return null;
            }
            clickAttr(specIndex, attrIndex) {
                var _this$dataPool$attrAr;
                const item = null === (_this$dataPool$attrAr = this.dataPool.attrArray[specIndex]) || void 0 === _this$dataPool$attrAr ? void 0 : _this$dataPool$attrAr.specAttrList[attrIndex];
                this.dataPool.currentSpecList = this.dataPool.skuUtil.getActionSpecList(this.dataPool.currentSpecList, item, specIndex);
                const activeSku = this.getActiveSku();
                if (activeSku !== this.dataPool.activeSku) this.dataPool.activeSku = activeSku;
                try {
                    var _this$onChange;
                    null === (_this$onChange = this.onChange) || void 0 === _this$onChange ? void 0 : _this$onChange.call(this, activeSku);
                } catch (e) {
                    setTimeout((() => {
                        throw e;
                    }));
                }
            }
            getAttrValue(index) {
                return getAttrValue(this.dataPool.attrArray, this.dataPool.currentSpecList[index], index);
            }
            destory() {
                var _this$onDestory;
                this.clearRoot();
                this.dataPool = null;
                this.root = null;
                this.onInit = null;
                this.onChange = null;
                null === (_this$onDestory = this.onDestory) || void 0 === _this$onDestory ? void 0 : _this$onDestory.call(this);
                this.onDestory = null;
            }
        }
        class SkuTrade extends BaseSkuTrade {
            getAttrValueName(index) {
                var _this$getAttrValue;
                return null === (_this$getAttrValue = this.getAttrValue(index)) || void 0 === _this$getAttrValue ? void 0 : _this$getAttrValue.name;
            }
            initDom() {
                this.root.children(".spec-box").each(((_, el) => {
                    const box = $(el);
                    const index = box.data("index");
                    box.children(".attr-box").children(".attr-value").each(((__, valueEl) => {
                        const valueJQ = $(valueEl);
                        const i = valueJQ.data("index");
                        valueJQ.on("click", (() => {
                            if (!valueJQ.prop("disabled")) this.clickAttr(index, i);
                        }));
                        const specItem = this.dataPool.attrArray[index];
                        if (null !== specItem && void 0 !== specItem && specItem.onlyShowAttrImg) {
                            var _specItem$specAttrLis;
                            valueJQ.tooltip({
                                title: null === (_specItem$specAttrLis = specItem.specAttrList[i]) || void 0 === _specItem$specAttrLis ? void 0 : _specItem$specAttrLis.name
                            });
                        }
                    }));
                }));
            }
            createAndInitDom() {
                this.clearRoot();
                const root = this.root.addClass("product-sku-trade");
                this.dataPool.attrArray.forEach(((spec, index) => {
                    if (!spec.hidden) {
                        const specBox = $('<div class="spec-box"></div>');
                        specBox.data("index", index);
                        specBox.append(`<div class="spec-name body6 ls-30p text-uppercase">${spec.specName}</div>`);
                        const attrBox = $('<div class="attr-box body3"></div>');
                        specBox.append(attrBox);
                        spec.specAttrList.forEach(((value, i) => {
                            const {imgUrl} = value;
                            let valueJQ;
                            if (imgUrl) {
                                valueJQ = $(`<div class="attr-value with-img"><img class="value-img" src="${imgUrl}"></div>`);
                                if (!spec.onlyShowAttrImg) valueJQ.append(`<span class="value-text">${value.name}</span>`); else valueJQ.tooltip({
                                    title: value.name
                                });
                            } else valueJQ = $(`<div class="attr-value"><span>${value.name}</span></div>`);
                            valueJQ.data("index", i);
                            attrBox.append(valueJQ);
                            valueJQ.on("click", (() => {
                                if (!valueJQ.prop("disabled")) this.clickAttr(index, i);
                            }));
                        }));
                        root.append(specBox);
                    }
                }));
            }
            isPreview() {
                const currentUrl = window.location.pathname;
                return /^[/（]preview[/）].*/.test(currentUrl);
            }
            render() {
                super.beforeUpdate();
                this.root.children(".spec-box").each(((_, el) => {
                    const boxEl = $(el);
                    const valueEls = boxEl.children(".attr-box").children(".attr-value");
                    const index = boxEl.data("index");
                    const nameItem = this.dataPool.attrArray[index];
                    if (nameItem.onlyShowAttrImg) {
                        const attrValue = this.getAttrValueName(index);
                        if (attrValue) boxEl.find(".spec-name").text(`${nameItem.specName}：${attrValue}`); else boxEl.find(".spec-name").text(nameItem.specName);
                    }
                    valueEls.each(((__, el_) => {
                        const valueEl = $(el_);
                        const i = valueEl.data("index");
                        const valueItem = nameItem.specAttrList[i];
                        const disabled = !this.isPreview() ? this.dataPool.skuUtil.checkSpecAttrDisabled(this.dataPool.currentSpecList, valueItem.id, index) : false;
                        const active = this.dataPool.skuUtil.checkSpecAttrActive(this.dataPool.currentSpecList, valueItem.id);
                        if (disabled) valueEl.addClass("disabled").prop("disabled", true); else valueEl.removeClass("disabled").prop("disabled", false);
                        if (active) valueEl.addClass("active"); else valueEl.removeClass("active");
                    }));
                }));
                super.afterUpdate();
            }
        }
        const sku_trade_flatten = SkuTrade;
        class SkuTradeSelect extends BaseSkuTrade {
            constructor(...args) {
                super(...args);
                this.currentIndex = null;
                this.currentEntry = null;
                this.currentDropdown = null;
                this.closeItem = () => {
                    var _this$currentEntry, _this$currentDropdown;
                    null === (_this$currentEntry = this.currentEntry) || void 0 === _this$currentEntry ? void 0 : _this$currentEntry.removeClass("open");
                    null === (_this$currentDropdown = this.currentDropdown) || void 0 === _this$currentDropdown ? void 0 : _this$currentDropdown.fadeOut(200);
                    this.hidePopup();
                    console.log("closeItem");
                    this.currentEntry = null;
                    this.currentDropdown = null;
                    this.currentIndex = null;
                    $(window).off("click", this.closeItem);
                };
                this.openItem = (entry, dropdown) => {
                    const currentIndex = entry.data("index");
                    if (null !== this.currentIndex) if (this.currentIndex !== currentIndex) this.closeItem(); else if (this.currentIndex === currentIndex) {
                        this.closeItem();
                        return;
                    }
                    this.currentEntry = entry.addClass("open");
                    this.currentIndex = currentIndex;
                    this.currentDropdown = dropdown;
                    dropdown.fadeIn(200);
                    this.showPopup();
                    console.log("openItem");
                    $(window).on("click", this.closeItem);
                };
            }
            initFirstChecked() {
                super.initFirstChecked(true);
            }
            createPopupDom() {
                const that = this;
                const popupId = `skutradeselectpopup_${Date.now()}`;
                this.popup = $(`<div id="${popupId}" class="product-sku-trade-select-popup"><div class="select-options body-font select-popup"><div><div>`).on("click", (e => {
                    if (e.target.classList.contains("product-sku-trade-select-popup")) this.closeItem();
                    e.stopPropagation();
                }));
                this.popup.children(".select-popup").on("click", ".select-item", (function(e) {
                    e.stopPropagation();
                    const i = $(this).data("index");
                    const active = $(this).prop("active");
                    if (!active) that.clickAttr(that.currentIndex, i);
                    that.closeItem();
                }));
                $(document.body).append(this.popup);
            }
            showPopup() {
                var _this$dataPool$attrAr, _this$dataPool$attrAr2;
                if (!this.popup) this.createPopupDom();
                const index = this.currentIndex;
                const popupBody = this.popup.show().animate({
                    opacity: 1
                }, 200).children(".select-popup").addClass("open");
                if (isMobile()) (0, scroll_lock.disablePageScroll)(popupBody.get(0));
                null === (_this$dataPool$attrAr = this.dataPool.attrArray[index]) || void 0 === _this$dataPool$attrAr ? void 0 : null === (_this$dataPool$attrAr2 = _this$dataPool$attrAr.specAttrList) || void 0 === _this$dataPool$attrAr2 ? void 0 : _this$dataPool$attrAr2.forEach(((valueItem, i) => {
                    const disabled = this.dataPool.skuUtil.checkSpecAttrDisabled(this.dataPool.currentSpecList, valueItem.id, index);
                    const active = this.dataPool.skuUtil.checkSpecAttrActive(this.dataPool.currentSpecList, valueItem.id);
                    const valueEl = $(`<div class="select-item ${disabled ? "disabled" : ""} ${active ? "active" : ""}">${valueItem.imgUrl ? `<img class="select-img" src="${valueItem.imgUrl}" />` : ""}<span class="select-text">${valueItem.name}</span><span class="select-checked"></span></div>`);
                    valueEl.data("index", i);
                    valueEl.prop("active", active);
                    popupBody.append(valueEl);
                }));
            }
            hidePopup() {
                if (isMobile()) (0, scroll_lock.enablePageScroll)(this.popup.children(".select-popup").get(0));
                this.popup.animate({
                    opacity: 0
                }, 200, (function() {
                    $(this).hide().children(".select-popup").empty();
                })).children(".select-popup").removeClass("open");
            }
            initDom() {
                const that = this;
                this.root.children(".spec-box").each(((_, el) => {
                    const box = $(el);
                    const index = box.data("index");
                    const selectBox = box.children(".select-box");
                    const entry = selectBox.children(".select-entry");
                    const dropdown = selectBox.children(".select-dropdown");
                    entry.on("click", (e => {
                        e.stopPropagation();
                        this.openItem(entry, dropdown);
                    }));
                    dropdown.on("click", ".select-item", (function() {
                        const i = $(this).data("index");
                        const active = $(this).prop("active");
                        that.closeItem();
                        if (!active) that.clickAttr(index, i);
                    }));
                }));
            }
            createAndInitDom() {
                this.clearRoot();
                const that = this;
                this.root.addClass("product-sku-trade-select");
                this.dataPool.attrArray.forEach(((spec, index) => {
                    if (!spec.hidden) {
                        const specBox = $('<div class="spec-box"></div>').data("index", index);
                        this.root.append(specBox);
                        const selectBox = $(`<div class="select-box"></div>`);
                        specBox.append(`<div class="spec-name body6 ls-30p text-uppercase">${spec.specName}</div>`, selectBox);
                        const entry = $('<div class="select-entry"><img style="display: none" class="entry-img" src=""><span class="entry-text body3"></span><span class="entry-arrow"></span></div>').data("index", index);
                        const dropdown = $('<div class="select-options body-font select-dropdown"></div>');
                        selectBox.append(entry, dropdown);
                        spec.specAttrList.forEach(((value, i) => {
                            const {imgUrl, name} = value;
                            dropdown.append($(`<div class="select-item">${imgUrl ? `<img class="select-img" src="${imgUrl}" >` : ""}<span class="select-text">${name}</span><span class="select-checked"></span></div>\n              `).data("index", i));
                        }));
                        entry.on("click", (e => {
                            e.stopPropagation();
                            this.openItem(entry, dropdown);
                        }));
                        dropdown.on("click", ".select-item", (function() {
                            const i = $(this).data("index");
                            const active = $(this).prop("active");
                            that.closeItem();
                            if (!active) that.clickAttr(index, i);
                        }));
                    }
                }));
            }
            render() {
                super.beforeUpdate();
                this.root.children(".spec-box").each(((_, el) => {
                    const boxEl = $(el);
                    const index = boxEl.data("index");
                    const currentValue = this.getAttrValue(index);
                    const seletBox = boxEl.children(".select-box").children(".select-entry");
                    const {name, imgUrl} = currentValue || {};
                    const img = seletBox.children(".entry-img");
                    const text = seletBox.children(".entry-text");
                    if (imgUrl) img.show().prop("src", imgUrl); else img.hide().prop("src", "");
                    if (name) text.text(name); else if (currentValue) text.text(""); else text.text(t("productDetail.default-placeholder", {
                        attrName: this.dataPool.attrArray[index].specName
                    }));
                    boxEl.children(".select-box").children(".select-options").children(".select-item").each(((__, el_) => {
                        const valueEl = $(el_);
                        const i = valueEl.data("index");
                        const valueItem = this.dataPool.attrArray[index].specAttrList[i];
                        const disabled = this.dataPool.skuUtil.checkSpecAttrDisabled(this.dataPool.currentSpecList, valueItem.id, index);
                        const active = this.dataPool.skuUtil.checkSpecAttrActive(this.dataPool.currentSpecList, valueItem.id);
                        if (disabled) valueEl.addClass("disabled"); else valueEl.removeClass("disabled");
                        if (active) valueEl.addClass("active").prop("active", true); else valueEl.removeClass("active").prop("active", false);
                    }));
                }));
                super.afterUpdate();
            }
            destory() {
                super.destory();
                this.closeItem();
                this.popup.remove();
                this.popup = null;
            }
        }
        const sku_trade_select = SkuTradeSelect;
        function initSku({id, sku, spu, mixins, onInit, onChange, dataPool}) {
            const dataDom = $(`#product-sku-trade-data_${id}`);
            const skuStyle = dataDom.data("skustyle");
            const selectSku = dataDom.data("selectsku");
            const SkuClass = "flatten" === skuStyle ? sku_trade_flatten : sku_trade_select;
            const trade = new SkuClass({
                domReady: true,
                root: `#product-detail-sku-trade_${id}`,
                sku,
                spu,
                dataPool,
                mixins,
                initialSkuSeq: selectSku,
                onInit: (tradeData, activeSku, root) => {
                    null === onInit || void 0 === onInit ? void 0 : onInit(tradeData, activeSku, root);
                    window.SL_EventBus.emit("product:sku:init", [ activeSku, id ]);
                },
                onChange: activeSku => {
                    window.SL_EventBus.emit("product:sku:change", [ activeSku, id, dataPool ]);
                    null === onChange || void 0 === onChange ? void 0 : onChange(activeSku);
                }
            });
            return trade;
        }
        function form_defineProperty(obj, key, value) {
            if (key in obj) Object.defineProperty(obj, key, {
                value,
                enumerable: true,
                configurable: true,
                writable: true
            }); else obj[key] = value;
            return obj;
        }
        const ValidateTrigger = {
            ONCHANGE: "onChange",
            MANUAL: "manual",
            ONBLUR: "manual",
            ONNATIVECHANGE: "onNativeChange"
        };
        const isPromiseFulfilledResult = result => "fulfilled" === result.status;
        const formItemName = "sl-form-item-name";
        const REQUIRED_SYMBOL = Symbol("required");
        class CustomForm {
            constructor(fid, {onDestory} = {
                onDestory: () => {}
            }) {
                form_defineProperty(this, "fid", "");
                form_defineProperty(this, "onDestory", (fid => {}));
                form_defineProperty(this, "formEntity", null);
                form_defineProperty(this, "validateRecord", {});
                form_defineProperty(this, "config", {
                    validateTrigger: ValidateTrigger.MANUAL,
                    requiredErrMsg: `这是必填字段!`,
                    defaultErrMsg: "请输入合法的值",
                    errContainerClss: "errClass",
                    validateWhenInit: false,
                    emitChangeWhenInit: false
                });
                form_defineProperty(this, "canValidate", false);
                form_defineProperty(this, "canEmitChange", true);
                form_defineProperty(this, "hadInit", false);
                form_defineProperty(this, "el", null);
                form_defineProperty(this, "eventBus", null);
                form_defineProperty(this, "on", null);
                form_defineProperty(this, "emit", null);
                form_defineProperty(this, "handleFormInputEvent", (e => {
                    if (!this.fid) return;
                    const target = e.target;
                    const parentNode = this.recursionFindParent(target, formItemName);
                    if (!parentNode) return;
                    const targetName = parentNode.getAttribute(formItemName);
                    if (targetName) {
                        this.canValidate = true;
                        if (this.isRadioOrCheckbox(target, [ "checkbox" ])) this.setLocalsValue(targetName, target.checked); else this.setLocalsValue(targetName, target.value);
                    }
                }));
                form_defineProperty(this, "setLocalsValue", ((name, value) => {
                    var _this$formEntity;
                    const changedValue = {
                        [name]: value
                    };
                    const allValues = Object.assign(null === (_this$formEntity = this.formEntity) || void 0 === _this$formEntity ? void 0 : _this$formEntity.data, changedValue);
                    let validateResultPro = null;
                    if (this.canValidate && this.config.validateTrigger === ValidateTrigger.ONCHANGE) validateResultPro = this.validateFields([ name ]);
                    if (this.canEmitChange) this.eventBus.emit("valuesChange", {
                        changedValue,
                        allValues,
                        validateResult: validateResultPro
                    });
                }));
                form_defineProperty(this, "setErrFields", ((target, errFields, name, errMsg) => {
                    if (!target) errFields.push({
                        name,
                        messages: [ errMsg ]
                    }); else target.messages.push(errMsg);
                }));
                this.fid = fid;
                this.onDestory = onDestory;
                this.el = document.querySelector(`#${fid}`);
                const eventBus = new SL_EventEmitter;
                this.eventBus = eventBus;
                this.on = this.eventBus.on.bind(eventBus);
                this.emit = this.eventBus.emit.bind(eventBus);
            }
            init(config) {
                if (this.hadInit) return false;
                try {
                    this.initFormConfig(config);
                    const formItems = this.el.querySelectorAll(`[${formItemName}]`);
                    const {initialData, childrenProps} = this.calculatePropsAndInitialData(formItems);
                    this.formEntity = {
                        data: initialData,
                        childrenProps,
                        el: this.el
                    };
                    this.initEventListener(this.el);
                    this.hadInit = true;
                } catch (e) {
                    console.warn(`${this.fid} is not found, ${e}`);
                }
            }
            initFormConfig(config) {
                if (config) {
                    Object.assign(this.config, config);
                    if (null !== config && void 0 !== config && config.validateWhenInit) this.canValidate = true;
                    if (null !== config && void 0 !== config && config.emitChangeWhenInit) this.canEmitChange = true;
                }
            }
            initEventListener(el) {
                el.addEventListener("input", this.handleFormInputEvent);
                const formItems = el.querySelectorAll(`[${formItemName}]`);
                formItems.forEach((el => {
                    const inp = el.querySelector("input,textarea");
                    if (inp) {
                        inp.addEventListener("change", (e => {
                            console.log("input-change", this.config.validateTrigger);
                            if (this.config.validateTrigger === ValidateTrigger.ONNATIVECHANGE) {
                                const target = e.target;
                                const parentNode = this.recursionFindParent(target, formItemName);
                                if (!parentNode) return;
                                const targetName = parentNode.getAttribute(formItemName);
                                this.validateFields([ targetName ]);
                            }
                        }));
                        inp.addEventListener("blur", (e => {
                            const target = e.target;
                            const parentNode = this.recursionFindParent(target, formItemName);
                            if (!parentNode) return;
                            const targetName = parentNode.getAttribute(formItemName);
                            if (this.config.validateTrigger === ValidateTrigger.ONBLUR) this.validateFields([ targetName ]);
                            if (this.config.blurSucHandler || this.config.blurErrHandler) this.validateFields([ targetName ], false).then((res => {
                                if (!res) return;
                                if (res.pass) {
                                    var _this$config$blurSucH, _this$config;
                                    null === (_this$config$blurSucH = (_this$config = this.config).blurSucHandler) || void 0 === _this$config$blurSucH ? void 0 : _this$config$blurSucH.call(_this$config, targetName, target.value, this.formEntity.data);
                                } else {
                                    var _this$config2;
                                    null === (_this$config2 = this.config) || void 0 === _this$config2 ? void 0 : _this$config2.blurErrHandler(res);
                                }
                            }));
                        }));
                    }
                }));
            }
            recursionFindParent(el, attr) {
                const parent = el.parentElement;
                if (!parent) return null;
                const val = parent.getAttribute(attr);
                if (val) return parent;
                return this.recursionFindParent(parent, attr);
            }
            calculatePropsAndInitialData(nodeList) {
                if (0 === nodeList.length) return {
                    initialData: {},
                    childrenProps: []
                };
                let childrenProps = [];
                const initialData = {};
                try {
                    childrenProps = Array.from(nodeList).map((formItem => {
                        const name = formItem.getAttribute(formItemName);
                        const child = formItem.querySelector("input,select,textarea");
                        const attrs = child.getAttributeNames();
                        const childAttrs = attrs.reduce(((acc, curAttr) => {
                            if ("value" === curAttr) initialData[name] = child.getAttribute(curAttr);
                            return {
                                ...acc,
                                [curAttr]: child.getAttribute(curAttr)
                            };
                        }), {});
                        return Object.assign(childAttrs, {
                            name
                        });
                    }));
                } catch (e) {
                    console.error(`${this.fid} calculate form item error: `, e);
                }
                return {
                    initialData,
                    childrenProps
                };
            }
            setValues(fields) {
                fields.forEach((({name, value, rules}) => {
                    this.setDomValue(this.el, name, value);
                    this.setRule(rules, name);
                    this.setLocalsValue(name, value);
                }));
            }
            setRule(rules, name) {
                const target = this.formEntity.childrenProps.find((prop => prop.name === name));
                if (target) target.rules = rules || [];
            }
            isRadioOrCheckbox(target, nodeTypeList = [ "radio", "checkbox" ]) {
                const nodeType = null === target || void 0 === target ? void 0 : target.getAttribute("type");
                if (!nodeType) return false;
                return "input" === target.nodeName.toLocaleLowerCase() && nodeTypeList.includes(nodeType);
            }
            setDomValue(parent, name, value) {
                const targets = parent.querySelectorAll(`[${formItemName}=${name}] input,[${formItemName}=${name}] select,[${formItemName}=${name}] textarea`);
                if (targets.length) targets.forEach((target => {
                    if (this.isRadioOrCheckbox(target)) {
                        if (target.value === value) target.click();
                    } else if (!target.name || target.name === name) target.value = null !== value && void 0 !== value ? value : "";
                }));
            }
            flattenRulesList(list) {
                return list.reduce(((acc, field) => {
                    const subRules = (null === field || void 0 === field ? void 0 : field.rules.map((rule => ({
                        ...rule,
                        name: field.name
                    })))) || [];
                    return [ ...acc, ...subRules ];
                }), []);
            }
            getErrTmpStr(messages, className = "") {
                return messages.reduce(((acc, message) => acc + `<div class="${className}" style="margin-top: 6px;color: #f04949;font-size: 12px;line-height: 1.4;">${message}</div>`), "");
            }
            getErrListContainer(id, formItemContainer) {
                const target = this.el.querySelector(`[${id}]`);
                if (target) return target;
                const div = document.createElement("div");
                div.setAttribute(id, "1");
                formItemContainer.appendChild(div);
                return div;
            }
            setErrMsgIntoDom(errFields) {
                errFields.forEach((({name, messages}) => {
                    const errTmp = this.getErrTmpStr(messages, this.config.errContainerClss);
                    const id = `cf-${this.fid}-${name}`;
                    const target = this.el.querySelector(`[${formItemName}=${name}]`);
                    if (!Array.from(target.classList).includes(this.config.errContainerClss)) target.classList.add(this.config.errContainerClss);
                    const container = this.getErrListContainer(id, target);
                    container.innerHTML = errTmp;
                }));
            }
            removeErrList(fields) {
                fields.forEach((name => {
                    const target = this.el.querySelector(`[cf-${this.fid}-${name}]`);
                    if (target) target.remove();
                    if (this.config.errContainerClss) {
                        var _formItemWrapper$clas, _formItemWrapper$clas2;
                        const formItemWrapper = this.el.querySelector(`[${formItemName}=${name}]`);
                        null === (_formItemWrapper$clas = formItemWrapper.classList) || void 0 === _formItemWrapper$clas ? void 0 : null === (_formItemWrapper$clas2 = _formItemWrapper$clas.remove) || void 0 === _formItemWrapper$clas2 ? void 0 : _formItemWrapper$clas2.call(_formItemWrapper$clas, this.config.errContainerClss);
                    }
                }));
            }
            setFields(fields, callback, needEmit = true, needValidate = false) {
                try {
                    this.canValidate = needValidate;
                    this.canEmitChange = needEmit;
                    this.setValues(fields);
                    null === callback || void 0 === callback ? void 0 : callback();
                } catch (e) {
                    console.warn(`${this.fid} set fields fail,`, e);
                } finally {
                    this.canEmitChange = true;
                }
            }
            setRules(rulesField) {
                rulesField.forEach((({name, rules}) => {
                    this.setRule(rules, name);
                }));
            }
            getFieldValue(fieldName) {
                this.init();
                return this.formEntity.data[fieldName];
            }
            getFieldsValue() {
                var _this$formEntity2;
                this.init();
                return null === (_this$formEntity2 = this.formEntity) || void 0 === _this$formEntity2 ? void 0 : _this$formEntity2.data;
            }
            async getLegalFieldsValue() {
                var _this$formEntity3, _result$errFields;
                const result = await this.validateFields([], false);
                if (null !== result && void 0 !== result && result.pass) return null === (_this$formEntity3 = this.formEntity) || void 0 === _this$formEntity3 ? void 0 : _this$formEntity3.data;
                const unPassFields = null === (_result$errFields = result.errFields) || void 0 === _result$errFields ? void 0 : _result$errFields.map((field => field.name));
                return Object.entries(this.formEntity.data).reduce(((acc, [k, v]) => {
                    if (unPassFields.includes(k)) return acc;
                    return {
                        ...acc,
                        [k]: v
                    };
                }), {});
            }
            async validateFields(fields, handleError = true) {
                if (!this.formEntity) return null;
                const {childrenProps} = this.formEntity;
                const data = JSON.parse(JSON.stringify(this.formEntity.data));
                const needValidateFieldsName = null !== fields && void 0 !== fields && fields.length ? fields : Object.keys(this.formEntity.data);
                const needValidatefields = childrenProps.filter((prop => {
                    var _prop$rules;
                    return (null === (_prop$rules = prop.rules) || void 0 === _prop$rules ? void 0 : _prop$rules.length) > 0 && (null === needValidateFieldsName || void 0 === needValidateFieldsName ? void 0 : needValidateFieldsName.includes(prop.name));
                }));
                const validateList = [];
                const needValidateRules = this.flattenRulesList(needValidatefields);
                try {
                    needValidateRules.forEach((rule => {
                        const {required, validator, pattern, name} = rule || {};
                        const value = data[name];
                        this.validateRecord[name] = value;
                        if (value) if (validator) validateList.push(validator(value, data)); else if (pattern) validateList.push(new RegExp(pattern).test(value)); else validateList.push(true); else if (validator && required) validateList.push(validator(value, data)); else validateList.push(required ? REQUIRED_SYMBOL : true);
                    }));
                } catch (e) {
                    console.warn(`${this.fid} calculate validator list fail:`, e);
                }
                const validateResult = await Promise.allSettled(validateList);
                const errFields = [];
                const successFields = new Set;
                for (let i = 0; i < validateResult.length; i++) {
                    const {name, message} = needValidateRules[i];
                    if (this.validateRecord[name] !== data[name]) return null;
                    const result = validateResult[i];
                    const target = errFields.find((err => err.name === name));
                    if (isPromiseFulfilledResult(result)) if (result.value === REQUIRED_SYMBOL) {
                        var _needValidateRules$i;
                        const requiredErrMsg = (null === (_needValidateRules$i = needValidateRules[i]) || void 0 === _needValidateRules$i ? void 0 : _needValidateRules$i.message) || this.config.requiredErrMsg;
                        if (!target) errFields.push({
                            name,
                            messages: [ requiredErrMsg ]
                        });
                    } else if (false === result.value) {
                        const errMsg = message || this.config.defaultErrMsg;
                        this.setErrFields(target, errFields, name, errMsg);
                    } else successFields.add(name); else {
                        const errMsg = message || result.reason || this.config.defaultErrMsg;
                        this.setErrFields(target, errFields, name, errMsg);
                    }
                }
                if (handleError) {
                    this.removeErrList(successFields);
                    this.setErrMsgIntoDom(errFields);
                    if (errFields.length) this.config.validateTrigger = ValidateTrigger.ONCHANGE;
                }
                return errFields.length ? {
                    pass: false,
                    errFields
                } : {
                    pass: true
                };
            }
            resetErrStatus(fields = Object.keys(this.formEntity.data)) {
                this.removeErrList(fields);
            }
            destroy() {
                var _this$onDestory;
                this.el.removeEventListener("input", this.handleFormInputEvent);
                this.hadInit = false;
                this.el = null;
                this.eventBus = null;
                this.formEntity = null;
                null === (_this$onDestory = this.onDestory) || void 0 === _this$onDestory ? void 0 : _this$onDestory.call(this, this.fid);
                this.fid = null;
            }
        }
        const form_form = CustomForm;
        function utils_form_defineProperty(obj, key, value) {
            if (key in obj) Object.defineProperty(obj, key, {
                value,
                enumerable: true,
                configurable: true,
                writable: true
            }); else obj[key] = value;
            return obj;
        }
        class Form {
            static takeForm(fid) {
                if (this.formInstanceList[fid]) return this.formInstanceList[fid];
                this.formInstanceList[fid] = new form_form(fid, {
                    onDestory: fid => {
                        Reflect.deleteProperty(this.formInstanceList, fid);
                    }
                });
                return this.formInstanceList[fid];
            }
        }
        utils_form_defineProperty(Form, "formInstanceList", {});
        const utils_form = Form;
        function firstAvailableSku(spu, skuList) {
            if (null !== spu && void 0 !== spu && spu.soldOut) return (null === skuList || void 0 === skuList ? void 0 : skuList[0]) || null;
            return skuList.find((sku => sku.available)) || (null === skuList || void 0 === skuList ? void 0 : skuList[0]) || null;
        }
        var lodash_debounce = __webpack_require__("../shared/node_modules/lodash/debounce.js");
        var debounce_default = __webpack_require__.n(lodash_debounce);
        const report_page = {
            Home: 101,
            ProductsSearch: 102,
            Products: 103,
            ProductsDetail: 105,
            Page: {
                custom_page: 118,
                smart_landing_page: 147
            }
        };
        __webpack_require__("../shared/browser/report/customArgs/index.js");
        const {formatCurrency: inquiry_modal_report_formatCurrency} = currency;
        const alias = window.SL_State.get("templateAlias");
        const eventIdMap = {
            ProductsDetail: "60006253",
            Home: "60006252"
        };
        const unsafeInputMap = {
            email: 101,
            mobile: 110,
            message: 115,
            name: 102,
            region: 104
        };
        const inputMap = {
            email: 102,
            mobile: 105,
            message: 103,
            name: 104,
            region: 106
        };
        const unsafePage = pageMapping[alias];
        const inquiry_modal_report_page = report_page[alias];
        const eventId = eventIdMap[alias];
        function hdReport(options) {
            var _window$HdSdk;
            null === (_window$HdSdk = window.HdSdk) || void 0 === _window$HdSdk ? void 0 : _window$HdSdk.shopTracker.collect({
                page: inquiry_modal_report_page,
                module: 119,
                ...options
            });
        }
        function unsafeHdReport(options) {
            var _window$HdSdk2;
            null === (_window$HdSdk2 = window.HdSdk) || void 0 === _window$HdSdk2 ? void 0 : _window$HdSdk2.shopTracker.report(eventId, {
                page: unsafePage,
                custom_component: "167",
                ...options
            });
        }
        function concatVal(obj) {
            return Object.entries(obj || {}).reduce(((prev, cur) => {
                if (cur[1]) return `${prev}${cur[0]}:${cur[1]}\n`;
                return prev;
            }), "");
        }
        function leadReport({spu, sku, email, phone, message, name, region}) {
            var _sortationList$, _sortationList$2;
            const {title, spuSeq: spuId, sortationList} = spu || {};
            const {price, skuSeq: skuId} = sku || {};
            const currency = window.SL_State.get("storeInfo.currency");
            const value = inquiry_modal_report_formatCurrency(price);
            window.SL_EventBus.emit("global:thirdPartReport", {
                FBPixel: [ [ "track", "Lead", {
                    content_name: title,
                    content_ids: spuId,
                    content_type: "product_group",
                    currency,
                    value
                } ] ],
                GAAds: [ [ "event", "conversion", {
                    value,
                    currency
                }, "SUBMIT-LEAD-FORM" ] ],
                GARemarketing: [ [ "event", "generate_lead", {
                    ecomm_prodid: window.SL_GetReportArg("GAR", "sku_id", skuId),
                    ecomm_pagetype: "product",
                    ecomm_totalvalue: value,
                    ecomm_category: null === sortationList || void 0 === sortationList ? void 0 : null === (_sortationList$ = sortationList[0]) || void 0 === _sortationList$ ? void 0 : _sortationList$.sortationId,
                    ecomm_pcat: null === sortationList || void 0 === sortationList ? void 0 : null === (_sortationList$2 = sortationList[0]) || void 0 === _sortationList$2 ? void 0 : _sortationList$2.sortationName
                } ] ],
                GAR: [ [ "event", "generate_lead", {
                    value,
                    items: [ {
                        id: window.SL_GetReportArg("GAR", "sku_id", skuId),
                        google_business_vertical: "retail"
                    } ]
                } ] ],
                GA: [ [ "event", "generate_lead", {
                    value,
                    currency
                } ] ]
            });
            const inputBoxVal = concatVal({
                Message: message,
                Name: name,
                "Country/Region": region
            });
            hdReport({
                component: 101,
                event_name: "Lead",
                content_name: title,
                content_id: spuId,
                currency,
                value,
                input_box_val: inputBoxVal,
                user_data: {
                    em: email,
                    ph: phone
                }
            });
            unsafeHdReport({
                event_name: "145",
                product_id: spuId,
                product_name: title,
                product_price: value,
                variantion_id: skuId,
                phone,
                email,
                input_box_val: inputBoxVal
            });
        }
        function cancelReport({spu, sku, email, phone, name, message, region}) {
            const {title, spuSeq: spuId} = spu || {};
            const {price, skuSeq: skuId} = sku || {};
            const value = inquiry_modal_report_formatCurrency(price);
            const currency = window.SL_State.get("storeInfo.currency");
            const inputBoxVal = concatVal({
                Message: message,
                Name: name,
                "Country/Region": region
            });
            hdReport({
                component: 107,
                action_type: 102,
                content_name: title,
                content_id: spuId,
                currency,
                value,
                input_box_val: inputBoxVal,
                user_data: {
                    em: email,
                    ph: phone
                }
            });
            unsafeHdReport({
                event_name: "146",
                product_id: spuId,
                product_name: title,
                product_price: value,
                variantion_id: skuId,
                phone,
                email,
                input_box_val: inputBoxVal
            });
        }
        function viewReport() {
            hdReport({
                component: -999,
                action_type: 108
            });
            unsafeHdReport({
                event_name: "109"
            });
            unsafeHdReport({
                event_name: "120"
            });
        }
        function inputReport({name, value}) {
            hdReport({
                action_type: 103,
                component: inputMap[name],
                input_box_val: value
            });
            unsafeHdReport({
                event_name: "133",
                input_box: unsafeInputMap[name],
                input_box_val: value
            });
        }
        const debounceInput = {
            email: debounce_default()((value => inputReport({
                value,
                name: "email"
            })), 1e3),
            mobile: debounce_default()((value => inputReport({
                value,
                name: "mobile"
            })), 1e3),
            message: debounce_default()((value => inputReport({
                value,
                name: "message"
            })), 1e3),
            name: debounce_default()((value => inputReport({
                value,
                name: "name"
            })), 1e3),
            region: debounce_default()((value => inputReport({
                value,
                name: "region"
            })), 1e3)
        };
        function listenInputChange({area}) {
            $(area).find("[sl-form-item-name]").on("input", "input,textarea", (function() {
                var _debounceInput$name;
                const input = $(this);
                const formItem = input.parents("[sl-form-item-name]");
                const name = formItem.attr("sl-form-item-name");
                const value = input.val();
                null === (_debounceInput$name = debounceInput[name]) || void 0 === _debounceInput$name ? void 0 : _debounceInput$name.call(debounceInput, value);
            }));
        }
        const emailRE = /^[A-Za-z0-9_./;+]+([A-Za-z0-9_./;+]+)*@([A-Za-z0-9]+\.)+[A-Za-z]{2,6}$/;
        const toast = new Toast;
        class InquiryPriceModal extends EventManager {
            constructor({id, spu, sku}) {
                super("product:inquiry:price:modal");
                this.$root = $(`#JS-inquiry-price-modal_${id}`);
                this.$setPortals(this.$root);
                this.buttonSelector = `#JS-inquiry-price-button_${id}`;
                this.spu = spu;
                this.activeSku = null;
                this.formInstance = null;
                this.modalInstance = null;
                this.firstSku = firstAvailableSku(spu, sku.skuList);
                this.init(id);
                listenInputChange({
                    area: this.$root
                });
            }
            init(id) {
                var _this$spu;
                if (null !== (_this$spu = this.spu) && void 0 !== _this$spu && _this$spu.inquiry) {
                    this.initModal(id);
                    this.initForm(id);
                    this.bindEvents();
                }
            }
            initModal(id) {
                this.modalInstance = new Modal({
                    modalId: `inquiry-price_${id}`
                });
                this.modalInstance.init();
            }
            initForm(id) {
                this.formInstance = utils_form.takeForm(`JS-inquiry-modal-form_${id}`);
                this.formInstance.init();
                this.formInstance.setFields(InquiryPriceModal.getFieldsConfig());
            }
            setActiveSku(activeSku) {
                this.activeSku = activeSku;
            }
            cancelReport() {
                cancelReport({
                    spu: this.spu,
                    sku: this.activeSku || this.firstSku,
                    num: 1,
                    email: this.formInstance.getFieldValue("email"),
                    phone: this.formInstance.getFieldValue("mobile"),
                    name: this.formInstance.getFieldValue("name"),
                    message: this.formInstance.getFieldValue("message"),
                    region: this.formInstance.getFieldValue("region")
                });
            }
            bindEvents() {
                const eventHandlers = {
                    submitClickHandler: async e => {
                        try {
                            if (this.isPreview()) {
                                toast.open(t("productDetail.previewLinkToast"));
                                return;
                            }
                            $(e.target).addClass("disabled");
                            await this.validateForm();
                            await this.postForm();
                        } catch (err) {} finally {
                            $(e.target).removeClass("disabled");
                        }
                    },
                    cancelClickHandler: () => {
                        this.cancelReport();
                        this.hideModal();
                    },
                    buttonClickHandler: () => {
                        this.showModal();
                        viewReport();
                    }
                };
                this.$onPortals("click", ".JS-inquiry-modal-submit", eventHandlers.submitClickHandler);
                this.$onPortals("click", ".JS-inquiry-modal-cancel", eventHandlers.cancelClickHandler);
                this.$root.parents(".mp-modal__wrapper").on("click", ".mp-modal__mask.mp-modal__closable,.mp-modal__close", (() => this.cancelReport()));
                $(this.buttonSelector).on("click", eventHandlers.buttonClickHandler);
            }
            unbindEvents() {
                this.$offAll();
                $(this.buttonSelector).off("click");
            }
            async postForm() {
                var _activeSku$imageList, _spuInfo$images;
                const inquiryInfo = this.formInstance.getFieldsValue();
                const {activeSku} = this;
                const spuInfo = this.spu;
                const finalInquiryInfo = {
                    Email: inquiryInfo.email,
                    Message: inquiryInfo.message,
                    Name: inquiryInfo.name,
                    Mobile: inquiryInfo.mobile,
                    "Country/Region": inquiryInfo.region,
                    Product: null === spuInfo || void 0 === spuInfo ? void 0 : spuInfo.title,
                    ProductUrl: `${window.location.origin}/products/${spuInfo.spuSeq}${activeSku ? `?sku=${activeSku.skuSeq}` : ""}`
                };
                const sendContentStr = Object.keys(finalInquiryInfo).reduce(((str, key) => {
                    str += `${key}：${finalInquiryInfo[key]}\n`;
                    return str;
                }), "");
                const sendInfo = {
                    email: inquiryInfo.email,
                    content: sendContentStr,
                    attachmentUrl: (null === activeSku || void 0 === activeSku ? void 0 : null === (_activeSku$imageList = activeSku.imageList) || void 0 === _activeSku$imageList ? void 0 : _activeSku$imageList[0]) || (null === activeSku || void 0 === activeSku ? void 0 : activeSku.image) || (null === spuInfo || void 0 === spuInfo ? void 0 : null === (_spuInfo$images = spuInfo.images) || void 0 === _spuInfo$images ? void 0 : _spuInfo$images[0])
                };
                const loading = new Loading({
                    duration: 0
                });
                loading.open();
                await this.sendInquiryInfoRun(sendInfo, loading, {
                    phone: inquiryInfo.mobile,
                    message: inquiryInfo.message,
                    name: inquiryInfo.name,
                    region: inquiryInfo.region
                });
            }
            async sendInquiryInfoRun(info, loading, extraData) {
                const response = await request.post("/mc/shop/online/send", info);
                loading.close();
                if ("SUCCESS" === response.code) {
                    leadReport({
                        spu: this.spu,
                        sku: this.activeSku || this.firstSku,
                        num: 1,
                        email: info.email,
                        ...extraData
                    });
                    this.hideModal();
                    toast.open(t("productDetail.inquiry.submitSuccess"));
                } else toast.open(t("productDetail.inquiry.submitFailed"));
            }
            showModal() {
                this.modalInstance.show();
            }
            hideModal() {
                this.modalInstance.hide();
            }
            static getFieldsConfig() {
                const fields = [ {
                    name: "email",
                    value: "",
                    rules: [ {
                        message: t("productDetail.inquiry.emailEmptyErr"),
                        required: true
                    }, {
                        message: t("productDetail.inquiry.emailFormatErr"),
                        pattern: emailRE
                    } ]
                }, {
                    name: "message",
                    value: "",
                    rules: [ {
                        message: t("productDetail.inquiry.messageEmptyErr"),
                        required: true
                    }, {
                        message: t("productDetail.inquiry.messageLengthErr"),
                        validator(val) {
                            return val.length <= 1500;
                        }
                    } ]
                }, {
                    name: "name",
                    value: ""
                }, {
                    name: "mobile",
                    value: ""
                }, {
                    name: "region",
                    value: ""
                } ];
                return fields;
            }
            validateForm() {
                return new Promise(((resolve, reject) => {
                    this.formInstance.validateFields().then((res => {
                        if (res.pass) resolve(); else reject(res);
                    }));
                }));
            }
            isPreview() {
                const currentUrl = window.location.pathname;
                return /^[/（]preview[/）].*/.test(currentUrl);
            }
        }
        const shadowDomStyle = $("<style></style>").attr({
            type: "text/css"
        }).append(`table{border-collapse:collapse}table:not([cellpadding]) td,table:not([cellpadding]) th{padding:.4rem}table:not([border="0"]):not([style*=border-width]) td,table:not([border="0"]):not([style*=border-width]) th{border-width:1px}table:not([border="0"]):not([style*=border-style]) td,table:not([border="0"]):not([style*=border-style]) th{border-style:solid}table:not([border="0"]):not([style*=border-color]) td,table:not([border="0"]):not([style*=border-color]) th{border-color:#ccc}iframe{max-width:100%}img{height:auto;max-width:100%}figure{display:table;margin:1rem auto}figure figcaption{color:#999;display:block;margin-top:.25rem;text-align:center}hr{border-color:#ccc;border-style:solid;border-width:1px 0 0 0}code{background-color:#e8e8e8;border-radius:3px;padding:.1rem .2rem}.mce-content-body:not([dir=rtl]) blockquote{border-left:2px solid #ccc;margin-left:1.5rem;padding-left:1rem}.mce-content-body[dir=rtl] blockquote{border-right:2px solid #ccc;margin-right:1.5rem;padding-right:1rem}@media screen and (max-width: 750px){table{width: 100%!important}}`);
        const createShadowDom = () => {
            const shadowDom = document.querySelector("[data-node=shadow-dom]");
            if (!shadowDom) return;
            const shadowContent = $(shadowDom).prev("[data-node=shadow-content]");
            $(shadowDom).attr("class", "shadow-dom");
            if (shadowContent.get(0)) {
                shadowContent.children(".mce-content-body").css("word-break", "break-word");
                shadowContent.prepend($("<style></style>").attr({
                    type: "text/css"
                }).append(`body{font-family:-apple-system,BlinkMacSystemFont,'Segoe UI',Roboto,Oxygen,Ubuntu,Cantarell,'Open Sans','Helvetica Neue',sans-serif;line-height:1.4;margin:1rem}table{border-collapse:collapse}table:not([cellpadding]) td,table:not([cellpadding]) th{padding:.4rem}table:not([border="0"]):not([style*=border-width]) td,table:not([border="0"]):not([style*=border-width]) th{border-width:1px}table:not([border="0"]):not([style*=border-style]) td,table:not([border="0"]):not([style*=border-style]) th{border-style:solid}table:not([border="0"]):not([style*=border-color]) td,table:not([border="0"]):not([style*=border-color]) th{border-color:#ccc}iframe{max-width:100%}img{height:auto;max-width:100%}figure{display:table;margin:1rem auto}figure figcaption{color:#999;display:block;margin-top:.25rem;text-align:center}hr{border-color:#ccc;border-style:solid;border-width:1px 0 0 0}code{background-color:#e8e8e8;border-radius:3px;padding:.1rem .2rem}.mce-content-body:not([dir=rtl]) blockquote{border-left:2px solid #ccc;margin-left:1.5rem;padding-left:1rem}.mce-content-body[dir=rtl] blockquote{border-right:2px solid #ccc;margin-right:1.5rem;padding-right:1rem}@media screen and (max-width: 750px){table{width: 100%}}`));
                const shadowRoot = shadowDom.attachShadow({
                    mode: "open"
                });
                shadowRoot.append(shadowContent.get(0));
                $(shadowDom).removeAttr("data-node");
                shadowContent.removeAttr("data-node");
            }
            shadowDom.__updateLazyExtraElements__();
        };
        const js_createShadowDom = createShadowDom;
        const CUSTOM_PAGE_TYPE = 3;
        const isReJsonSdkData = originData => {
            try {
                return JSON.parse(originData);
            } catch (error) {
                return false;
            }
        };
        class Tabs {
            constructor({root}) {
                this.root = $(root);
                this.lang = "default";
                this.showKey = "tab0";
                this.init();
                this.requestCollapseTitle(this.ids);
                this.bindEvent();
                if (!this.tabs.hasClass("active")) this.openTab(this.tabs.eq(0));
            }
            init() {
                const tabs = this.root.find(".product-tabs-nav").find(".product-tabs-tab");
                this.tabs = tabs;
                this.contents = this.root.children(".product-tabs-content").children(".product-tabs-item");
                this.ids = [];
                tabs.each(((_, el) => {
                    const $el = $(el);
                    const id = $el.data("id");
                    if (id) this.ids.push(id);
                    if ($el.hasClass("active")) this.showKey = $el.data("key");
                }));
            }
            requestCollapseTitle(ids) {
                const {lang} = this;
                return request({
                    url: "merchant/render/page/basic/infos",
                    method: "GET",
                    params: {
                        pageIds: ids.join(",")
                    }
                }).then((res => {
                    if (res && Array.isArray(res.data)) {
                        const data = res.data.reduce(((fin, item) => {
                            const name = item.name ? item.name[lang] : "";
                            return {
                                ...fin,
                                [item.id]: name
                            };
                        }), {});
                        this.setCollapseTitle(data);
                    }
                }));
            }
            setCollapseTitle(data) {
                this.tabs.each(((_, el) => {
                    const title = data[$(el).data("id")];
                    if (title) $(el).text(title);
                }));
            }
            requestCollapseContent(id, content) {
                if (this.cacheRequest && this.cacheData[id]) return Promise.resolve(this.cacheData[id]);
                return request({
                    url: `merchant/render/page/${CUSTOM_PAGE_TYPE}/${id}`,
                    method: "GET"
                }).then((res => {
                    if (null !== res && void 0 !== res && res.data) this.setCollapseContent(null === res || void 0 === res ? void 0 : res.data, content);
                }));
            }
            setCollapseContent(data, content) {
                var _shadow$get;
                const html = this.getCustomPageContent(null === data || void 0 === data ? void 0 : data.htmlConfig);
                const shadow = $(content).children(".product-tabs-shadow");
                const shadowRoot = null === (_shadow$get = shadow.get(0)) || void 0 === _shadow$get ? void 0 : _shadow$get.attachShadow({
                    mode: "open"
                });
                $(shadowRoot).append(shadowDomStyle.clone());
                $(shadowRoot).append(html);
            }
            getCustomPageContent(pageConfig) {
                const config = isReJsonSdkData(null !== pageConfig && void 0 !== pageConfig ? pageConfig : "");
                let html = '<div style="word-break: break-word">';
                if (config) {
                    const stage = null === config || void 0 === config ? void 0 : config.page;
                    const grids = null === stage || void 0 === stage ? void 0 : stage.children;
                    if (!grids || grids.length < 1) return "";
                    grids.forEach((item => {
                        null === item || void 0 === item ? void 0 : item.children.forEach((it => {
                            var _it$children;
                            const component = null === it || void 0 === it ? void 0 : null === (_it$children = it.children) || void 0 === _it$children ? void 0 : _it$children[0];
                            if ("Text" === (null === component || void 0 === component ? void 0 : component.type)) {
                                var _component$props;
                                if (null !== component && void 0 !== component && null !== (_component$props = component.props) && void 0 !== _component$props && _component$props.title) html += `<h2>${component.props.title}</h2>`;
                                html += component.props.content;
                            } else if ("CustomHtml" === (null === component || void 0 === component ? void 0 : component.type)) html += `<div>${component.props.content}</div>`; else if ("Image" === (null === component || void 0 === component ? void 0 : component.type)) {
                                var _component$props2, _component$props2$ima;
                                if (null !== component && void 0 !== component && null !== (_component$props2 = component.props) && void 0 !== _component$props2 && null !== (_component$props2$ima = _component$props2.image) && void 0 !== _component$props2$ima && _component$props2$ima.url) html += `<img data-src="${component.props.image.url}" style="max-width:100%"  data-srcset="${component.props.image.url}" alt="${component.props.image.alt}" class="lozad"  />`;
                            }
                        }));
                    }));
                } else html += pageConfig;
                html += "</div>";
                return html;
            }
            openTab(tab) {
                const key = tab.data("key");
                const id = tab.data("id");
                const {contents, tabs} = this;
                tabs.removeClass("active");
                tab.addClass("active");
                contents.hide();
                let content;
                contents.each(((_, el) => {
                    if ($(el).data("key") === key) {
                        $(el).show();
                        content = el;
                        return true;
                    }
                }));
                if (!tab.prop("loaded")) {
                    tab.prop("loaded", true);
                    if (id) this.requestCollapseContent(id, content);
                }
                this.showKey = key;
            }
            bindEvent() {
                const that = this;
                const {tabs} = this;
                tabs.on("click", (function() {
                    const tab = $(this);
                    const key = tab.data("key");
                    if (that.showKey === key) return;
                    tab.get(0).scrollIntoView({
                        block: "nearest",
                        behavior: "smooth",
                        inline: "center"
                    });
                    that.openTab(tab);
                }));
            }
        }
        const tabs = Tabs;
        function whichTransitionEvent() {
            let t;
            const el = document.createElement("fakeElement");
            const transitions = {
                transition: "transitionend",
                OTransition: "oTransitionEnd",
                MozTransition: "transitionend",
                WebkitTransition: "webkitTransitionEnd",
                MsTransition: "msTransitionEnd"
            };
            for (t in transitions) if (void 0 !== el.style[t]) return transitions[t];
        }
        function openCollapseByHeight(element) {
            const initHeight = $(element).innerHeight();
            element.style.height = "auto";
            const targetHeight = $(element).innerHeight();
            element.style.height = `${initHeight}px`;
            $(element).css("color");
            element.style.height = `${targetHeight}px`;
        }
        function closeCollapseByHeight(element) {
            const initHeight = $(element).innerHeight();
            $(element).css("height", `${initHeight}px`);
            $(element).css("color");
            element.style.height = `0px`;
        }
        const PAGE_ID = "pageid";
        const product_collapse_CUSTOM_PAGE_TYPE = "customize";
        const product_collapse_isReJsonSdkData = originData => {
            try {
                return JSON.parse(originData);
            } catch (error) {
                return false;
            }
        };
        class Collapse {
            constructor({lang = "default", selector, cacheRequest = true}) {
                this.$container = $(selector);
                this.$collapseAsyncItems = this.$container.find(".base-collapse-item-async");
                this.$collapseSyncItems = this.$container.find(".base-collapse-item-sync");
                this.lang = lang;
                this.cacheRequest = cacheRequest;
                this.cacheData = {};
                this.$activeItem = null;
                this.transitionEvent = whichTransitionEvent();
                this.init();
            }
            init() {
                const self = this;
                const ids = Array.from(this.$collapseAsyncItems).map((item => $(item).data(PAGE_ID))).filter((id => !!id));
                this.$collapseAsyncItems.each(((index, item) => {
                    const $item = $(item);
                    $item.find(".base-collapse-item__wrap").on(self.transitionEvent, (function() {
                        if ($(this).parent().hasClass("active")) $(this).css("height", "auto");
                    }));
                    if ($item.hasClass("active") && $item.data(PAGE_ID)) this.requestCollapseContent($item.data(PAGE_ID)).then((res => {
                        this.setCollapseContent(null === res || void 0 === res ? void 0 : res.data, $item);
                    }));
                }));
                this.$collapseSyncItems.each(((index, item) => {
                    const $item = $(item);
                    $item.find(".base-collapse-item__wrap").on(self.transitionEvent, (function() {
                        if ($(this).parent().hasClass("active")) $(this).css("height", "auto");
                    }));
                    if (!$item.data("isInitShadowDom")) {
                        const html = $item.find(".base-collapse-item__content").html();
                        self.transContentByShadowDom($item, html);
                        $item.data("isInitShadowDom", true);
                    }
                }));
                this.requestCollapseTitle(ids);
                this.bindEvent();
            }
            requestCollapseTitle(ids) {
                const {lang} = this;
                return request({
                    url: "merchant/render/page/basic/infos",
                    method: "GET",
                    params: {
                        pageIds: ids.join(",")
                    }
                }).then((res => {
                    if (res && Array.isArray(res.data)) {
                        const data = res.data.reduce(((fin, item) => {
                            const name = null !== item && void 0 !== item && item.name ? null === item || void 0 === item ? void 0 : item.name[lang] : "";
                            return {
                                ...fin,
                                [null === item || void 0 === item ? void 0 : item.id]: name
                            };
                        }), {});
                        this.setCollapseTitle(data);
                    }
                }));
            }
            setCollapseTitle(titleMap) {
                this.$collapseAsyncItems.each(((index, item) => {
                    const $item = $(item);
                    const title = titleMap[$item.data(PAGE_ID)];
                    if (title) $item.find(".base-collapse-item__title").text(title);
                }));
            }
            bindEvent() {
                const self = this;
                this.$collapseAsyncItems.on("click", ".base-collapse-item__header", (function() {
                    const $item = $(this).closest(".base-collapse-item");
                    const id = $item.data(PAGE_ID);
                    const isOpen = $item.hasClass("active");
                    if (isOpen) {
                        self.close($item);
                        return;
                    }
                    self.requestCollapseContent(id).then((res => {
                        self.setCollapseContent(null === res || void 0 === res ? void 0 : res.data, $item);
                        self.$activeItem = $item;
                        self.open($item);
                    }));
                }));
                this.$collapseSyncItems.on("click", ".base-collapse-item__header", (function() {
                    const $item = $(this).closest(".base-collapse-item");
                    const isOpen = $item.hasClass("active");
                    if (isOpen) {
                        self.close($item);
                        return;
                    }
                    if (!$item.data("isInitShadowDom")) {
                        const html = $item.find(".base-collapse-item__content").html();
                        self.transContentByShadowDom($item, html);
                        $item.data("isInitShadowDom", true);
                    }
                    self.open($item);
                }));
                window.SL_EventBus.on("stage:locale:change", (() => {
                    if (this.$activeItem) this.calcCollapseContentHeight(this.$activeItem); else this.$collapseAsyncItems.each(((index, item) => {
                        const $item = $(item);
                        if ($item.hasClass("active") && $item.data(PAGE_ID)) this.calcCollapseContentHeight($item);
                    }));
                }));
            }
            requestCollapseContent(id) {
                if (this.cacheRequest && this.cacheData[id]) return Promise.resolve(this.cacheData[id]);
                return request({
                    url: `merchant/render/page/${product_collapse_CUSTOM_PAGE_TYPE}/${id}`,
                    method: "GET"
                }).then((res => {
                    if (this.cacheRequest) this.cacheData[id] = res;
                    return res;
                })).catch((() => {
                    if (this.cacheRequest) this.cacheData[id] = {};
                    return {};
                }));
            }
            getCustomPageContent(pageConfig) {
                const config = product_collapse_isReJsonSdkData(null !== pageConfig && void 0 !== pageConfig ? pageConfig : "");
                let html = '<div class="custom-page-render-container">';
                if (config) {
                    const stage = null === config || void 0 === config ? void 0 : config.page;
                    const grids = null === stage || void 0 === stage ? void 0 : stage.children;
                    if (!grids || grids.length < 1) return "";
                    grids.forEach((item => {
                        null === item || void 0 === item ? void 0 : item.children.forEach((it => {
                            var _it$children;
                            const component = null === it || void 0 === it ? void 0 : null === (_it$children = it.children) || void 0 === _it$children ? void 0 : _it$children[0];
                            if ("Text" === (null === component || void 0 === component ? void 0 : component.type)) {
                                var _component$props;
                                if (null !== component && void 0 !== component && null !== (_component$props = component.props) && void 0 !== _component$props && _component$props.title) html += `<h2>${component.props.title}</h2>`;
                                html += component.props.content;
                            } else if ("CustomHtml" === (null === component || void 0 === component ? void 0 : component.type)) html += `<div>${component.props.content}</div>`; else if ("Image" === (null === component || void 0 === component ? void 0 : component.type)) {
                                var _component$props2, _component$props2$ima;
                                if (null !== component && void 0 !== component && null !== (_component$props2 = component.props) && void 0 !== _component$props2 && null !== (_component$props2$ima = _component$props2.image) && void 0 !== _component$props2$ima && _component$props2$ima.url) html += `<img data-src="${component.props.image.url}" style="max-width:100%"  data-srcset="${component.props.image.url}" alt="${component.props.image.alt}" class="lozad"  />`;
                            }
                        }));
                    }));
                } else html += pageConfig;
                html += "</div>";
                return html;
            }
            transContentByShadowDom($item, content) {
                const $content = $item.find(".base-collapse-item__content");
                $content.html(`\n      <div style="overflow: hidden;" data-node="shadow-content">\n        <div class="mce-content-body">\n          ${content}\n        </div>\n      </div>\n      <div data-node="shadow-dom"></div>\n    `);
                js_createShadowDom();
            }
            setCollapseContent(data, $item) {
                const content = this.getCustomPageContent(null === data || void 0 === data ? void 0 : data.htmlConfig);
                this.transContentByShadowDom($item, content);
            }
            calcCollapseContentHeight($item) {
                const $content = $item.find(".base-collapse-item__content");
                const images = Array.from($content.find("img")).map((item => new Promise(((resolve, reject) => {
                    const image = new Image;
                    image.src = item.src;
                    image.onload = () => {
                        resolve(image);
                    };
                    image.onerror = () => {
                        reject(image);
                    };
                }))));
                Promise.allSettled(images).then((() => {
                    setTimeout((() => {
                        const height = $content.outerHeight();
                        $content.parent().css({
                            height
                        });
                    }), 0);
                })).catch((() => {
                    $content.parent().css({
                        height: "auto"
                    });
                }));
            }
            open($item) {
                openCollapseByHeight($item.find(".base-collapse-item__wrap").get(0));
                $item.addClass("active");
            }
            close($item) {
                this.$activeItem = null;
                closeCollapseByHeight($item.find(".base-collapse-item__wrap").get(0));
                $item.removeClass("active");
            }
        }
        const product_collapse = Collapse;
        var isPlainObject = __webpack_require__("./node_modules/lodash/isPlainObject.js");
        var isPlainObject_default = __webpack_require__.n(isPlainObject);
        const isBrowser = "undefined" !== typeof window && "undefined" !== typeof navigator;
        function getStorage(storageName) {
            return {
                get(key) {
                    if (!isBrowser) return;
                    const storage = window[storageName];
                    const numRe = /^\d+$/;
                    const jsonRe = /(^\{.*\}$)|(^\[.*\]$)/;
                    const boolRe = /^(true|false|null)$/;
                    let val = storage.getItem(key);
                    try {
                        if ("string" === typeof val && val && (numRe.test(val) || boolRe.test(val) || jsonRe.test(val))) val = JSON.parse(val);
                    } catch (e) {
                        console.warn("json.parse storage value err:", e);
                        val = {};
                    }
                    return val;
                },
                set(key, val) {
                    if (!isBrowser) return;
                    let value = val;
                    if (isPlainObject_default()(value) || value instanceof Array) value = JSON.stringify(value);
                    const storage = window[storageName];
                    storage[key] = value;
                },
                del(key) {
                    if (!isBrowser) return;
                    const storage = window[storageName];
                    storage.removeItem(key);
                }
            };
        }
        const [main_sessionStorage, main_localStorage] = [ "sessionStorage", "localStorage" ].map(getStorage);
        const utils = {
            sessionStorage: main_sessionStorage,
            localStorage: main_localStorage
        };
        const main = utils;
        const platformType = {
            pc: "pc",
            pad: "pad",
            mobile: "mobile"
        };
        const getPlatform = () => {
            const winWidth = Math.min(window.innerWidth, document.documentElement.clientWidth, document.body.clientWidth);
            let platform;
            if (winWidth > 960) platform = "pc"; else if (winWidth > 750) platform = "pad"; else platform = "mobile";
            return platform;
        };
        function listenPlatform(callback) {
            SL_EventBus.on("global:platformChange", callback);
        }
        let timer;
        let timerCount = 0;
        function helper_init() {
            var _window;
            if (null !== (_window = window) && void 0 !== _window && _window.addEventListener) {
                if (timer) clearTimeout(timer);
                window.addEventListener("load", (() => {
                    let platform = getPlatform();
                    window.addEventListener("resize", (() => {
                        const newPlatform = getPlatform();
                        if (newPlatform !== platform) {
                            SL_EventBus.emit("global:platformChange", newPlatform);
                            platform = newPlatform;
                        }
                    }));
                }));
            } else {
                if (10 === timerCount) return;
                timer = setTimeout(helper_init, 1e3);
                timerCount += 1;
            }
        }
        function isInViewport(el) {
            if (!(null !== el && void 0 !== el && el.tagName)) return console.warn(`${el} is not a element`);
            const rect = el.getBoundingClientRect();
            const vWidth = document.documentElement.clientWidth;
            const vHeight = document.documentElement.clientHeight;
            if (rect.right < 0 || rect.bottom < 0 || rect.left > vWidth || rect.top > vHeight) return false;
            return true;
        }
        function isUnderViewport(el) {
            if (!(null !== el && void 0 !== el && el.tagName)) return console.warn(`${el} is not a element`);
            const rect = el.getBoundingClientRect();
            const vWidth = document.documentElement.clientWidth;
            const vHeight = document.documentElement.clientHeight;
            if (rect.right < 0 || rect.left > vWidth || rect.top > vHeight) return false;
            return true;
        }
        helper_init();
        function getAbOrderSeqInfoCache(buyScence = "cart") {
            const seqInfo = main.localStorage.get(`${buyScence}AbOrderSeqInfo`);
            return seqInfo;
        }
        function setAbOrderSeqInfoCache(abandonedOrderSeqInfo, buyScence) {
            if (!buyScence) {
                console.warn("setAbOrderSeqInfoCache err miss buyScence");
                return;
            }
            main.localStorage.set(`${buyScence}AbOrderSeqInfo`, abandonedOrderSeqInfo);
        }
        const helper = {
            getPlatform,
            listenPlatform,
            platformType,
            getAbOrderSeqInfoCache,
            setAbOrderSeqInfoCache,
            isInViewport,
            isUnderViewport
        };
        const effectFc = fn => (...props) => {
            let offEvents = [];
            let useEffect = function(instance, method, eventName, eventFn) {
                if ("object" !== typeof instance || "string" !== typeof method || "string" !== typeof eventName || "function" !== typeof eventFn) return;
                const arr = null === method || void 0 === method ? void 0 : method.split(/\s*,\s*/);
                const onName = null === arr || void 0 === arr ? void 0 : arr[0];
                const offName = null === arr || void 0 === arr ? void 0 : arr[1];
                if (onName) {
                    var _instance$onName;
                    null === (_instance$onName = instance[onName]) || void 0 === _instance$onName ? void 0 : _instance$onName.call(instance, eventName, eventFn);
                }
                if (offName) {
                    var _instance$offName;
                    const offEvent = null === (_instance$offName = instance[offName]) || void 0 === _instance$offName ? void 0 : _instance$offName.bind(instance, eventName, eventFn);
                    offEvents.push(offEvent);
                }
            };
            let unmount = null === fn || void 0 === fn ? void 0 : fn.call({
                useEffect
            }, ...props);
            return (...args) => {
                var _offEvents;
                if (null !== (_offEvents = offEvents) && void 0 !== _offEvents && _offEvents.length) offEvents.forEach((offEvent => {
                    offEvent();
                }));
                if ("function" === typeof unmount) {
                    var _unmount;
                    null === (_unmount = unmount) || void 0 === _unmount ? void 0 : _unmount(...args);
                }
                offEvents = null;
                useEffect = null;
                unmount = null;
            };
        };
        function handleTagsShow() {
            const $tags = $(".sales__promotion-tags-tag-hook");
            if (!$tags[0]) return;
            if (isMobile()) $tags.css("display", "none").eq(0).css("display", "inline-block"); else $tags.css("display", "inline-block");
        }
        const salesPromotionTags = effectFc((function(parent) {
            const {useEffect} = this;
            const container = $(parent || document.body);
            const promotionTags = container.find(".sales__promotionTags");
            if (!promotionTags.length) return;
            handleTagsShow();
            if (promotionTags.hasClass("pdp")) {
                let lock = false;
                const timer = null;
                useEffect($(document.body), "on,off", "click", (e => {
                    const {target} = e;
                    const containerDom = promotionTags.get(0);
                    if ($.contains(containerDom, target) || containerDom === target) return;
                    if (promotionTags.hasClass("active")) {
                        promotionTags.removeClass("active");
                        if ("mobile" === helper.getPlatform() && lock) {
                            (0, scroll_lock.enablePageScroll)();
                            lock = false;
                        }
                    }
                }));
                useEffect(promotionTags, "on,off", "click", (() => {
                    promotionTags.toggleClass("active");
                    if ("mobile" === helper.getPlatform()) {
                        if (promotionTags.hasClass("active") && !lock) {
                            (0, scroll_lock.disablePageScroll)();
                            lock = true;
                        }
                        if (!promotionTags.hasClass("active") && lock) {
                            lock = false;
                            (0, scroll_lock.enablePageScroll)();
                        }
                    }
                    if (!isMobile()) if (timer) clearTimeout(timer);
                }));
                useEffect(promotionTags.find(".sales__promotionTags-items-close-hook"), "on,off", "click", (e => {
                    e.stopPropagation();
                    promotionTags.removeClass("active");
                    lock = false;
                    (0, scroll_lock.enablePageScroll)();
                }));
                useEffect(promotionTags.find(".sales__promotionTags-items"), "on,off", "click", (e => {
                    e.stopPropagation();
                }));
                useEffect(SL_EventBus, "on,off", "global:platformChange", (() => {
                    if (isMobile() && promotionTags.hasClass("active") && !lock) {
                        (0, scroll_lock.disablePageScroll)();
                        lock = true;
                    } else if (lock) {
                        (0, scroll_lock.enablePageScroll)();
                        lock = false;
                    }
                    handleTagsShow();
                }));
            } else useEffect(promotionTags.find(".sales__promotionTags-switchIcon"), "on,off", "click", (() => {
                promotionTags.toggleClass("active");
            }));
            window.SL_EventBus.on("global:currency:format", (() => {
                const amountNode = promotionTags.find("[data-amount]");
                amountNode.each((function() {
                    $(this).text(convertFormat($(this).data("amount")));
                }));
            }));
        }));
        function formatTime(originTime) {
            const days = originTime / (24 * 3600 * 1e3) >= 10 ? Math.floor(originTime / (24 * 3600 * 1e3)).toString() : `0${Math.floor(originTime / (24 * 3600 * 1e3)).toString()}`;
            const leavel = originTime % (24 * 3600 * 1e3);
            const hours = leavel / (3600 * 1e3) >= 10 ? Math.floor(leavel / (3600 * 1e3)).toString() : `0${Math.floor(leavel / (3600 * 1e3)).toString()}`;
            const leavel2 = leavel % (3600 * 1e3);
            const minutes = leavel2 / (60 * 1e3) >= 10 ? Math.floor(leavel2 / (60 * 1e3)).toString() : `0${Math.floor(leavel2 / (60 * 1e3)).toString()}`;
            const leftSeconds = leavel2 % (60 * 1e3) / 1e3;
            const seconds = leftSeconds >= 10 ? leftSeconds.toFixed(1) : 0 + leftSeconds.toFixed(1);
            return {
                days,
                hours,
                minutes,
                seconds
            };
        }
        class Timeout {
            constructor(props) {
                this.startTime = props.startTime;
                this.endTime = props.endTime;
                this.time = 0;
            }
            changeTime() {
                const currentTime = (new Date).getTime();
                if (currentTime >= this.startTime && currentTime <= this.endTime) {
                    this.time = this.endTime - currentTime;
                    setTimeout((() => {
                        this.changeTime();
                    }), 100);
                } else this.time = 0;
                const formatedTime = formatTime(this.time);
                $(".timeout-days").each((index => {
                    $($(".timeout-days")[index]).text(formatedTime.days);
                }));
                $(".timeout-hours").each((index => {
                    $($(".timeout-hours")[index]).text(formatedTime.hours);
                }));
                $(".timeout-minutes").each((index => {
                    $($(".timeout-minutes")[index]).text(formatedTime.minutes);
                }));
                $(".timeout-seconds").each((index => {
                    $($(".timeout-seconds")[index]).text(formatedTime.seconds);
                }));
                if (this.time / (24 * 3600 * 1e3) < 1) {
                    $(".first-timeout-item").each((index => {
                        $($(".first-timeout-item")[index]).hide();
                    }));
                    $(".timeout-first-dot").each((index => {
                        $($(".timeout-first-dot")[index]).hide();
                    }));
                }
            }
        }
        const flashSale_timeout = Timeout;
        class Percentage {
            constructor({saleNum, totalNum}) {
                this.saleNum = saleNum;
                this.totalNum = totalNum;
            }
            percentageInit() {
                const percent = `${this.saleNum / this.totalNum * 100}%`;
                $(".flash-sale-percent").each((index => {
                    $($(".flash-sale-percent")[index]).css("width", percent);
                }));
            }
        }
        const flashSale_percentage = Percentage;
        class flashSale_FlashSale {
            constructor() {
                var _SL_State$get, _SL_State$get$product, _SL_State$get$product2, _SL_State$get$product3;
                this.shouldInit = false;
                const salesPlugins = null === (_SL_State$get = SL_State.get("product")) || void 0 === _SL_State$get ? void 0 : null === (_SL_State$get$product = _SL_State$get.productSale) || void 0 === _SL_State$get$product ? void 0 : null === (_SL_State$get$product2 = _SL_State$get$product.saleActivities) || void 0 === _SL_State$get$product2 ? void 0 : null === (_SL_State$get$product3 = _SL_State$get$product2.filter) || void 0 === _SL_State$get$product3 ? void 0 : _SL_State$get$product3.call(_SL_State$get$product2, (item => 1 === item.promotionSubType && 1 === item.promotionType));
                if ((null === salesPlugins || void 0 === salesPlugins ? void 0 : salesPlugins.length) > 0 && salesPlugins[0].salesPlugin) {
                    var _salesPlugins$, _salesPlugins$$salesP, _salesPlugins$$salesP2, _salesPlugins$2, _salesPlugins$2$sales, _salesPlugins$2$sales2, _salesPlugins$3, _salesPlugins$3$sales, _salesPlugins$3$sales2, _salesPlugins$4, _salesPlugins$4$sales, _salesPlugins$4$sales2;
                    this.shouldInit = true;
                    this.startTime = null === (_salesPlugins$ = salesPlugins[0]) || void 0 === _salesPlugins$ ? void 0 : null === (_salesPlugins$$salesP = _salesPlugins$.salesPlugin) || void 0 === _salesPlugins$$salesP ? void 0 : null === (_salesPlugins$$salesP2 = _salesPlugins$$salesP.countDownTimerPlugin) || void 0 === _salesPlugins$$salesP2 ? void 0 : _salesPlugins$$salesP2.startTime;
                    this.endTime = null === (_salesPlugins$2 = salesPlugins[0]) || void 0 === _salesPlugins$2 ? void 0 : null === (_salesPlugins$2$sales = _salesPlugins$2.salesPlugin) || void 0 === _salesPlugins$2$sales ? void 0 : null === (_salesPlugins$2$sales2 = _salesPlugins$2$sales.countDownTimerPlugin) || void 0 === _salesPlugins$2$sales2 ? void 0 : _salesPlugins$2$sales2.endTime;
                    this.saleNum = null === (_salesPlugins$3 = salesPlugins[0]) || void 0 === _salesPlugins$3 ? void 0 : null === (_salesPlugins$3$sales = _salesPlugins$3.salesPlugin) || void 0 === _salesPlugins$3$sales ? void 0 : null === (_salesPlugins$3$sales2 = _salesPlugins$3$sales.progressPlugin) || void 0 === _salesPlugins$3$sales2 ? void 0 : _salesPlugins$3$sales2.saleNum;
                    this.totalNum = null === (_salesPlugins$4 = salesPlugins[0]) || void 0 === _salesPlugins$4 ? void 0 : null === (_salesPlugins$4$sales = _salesPlugins$4.salesPlugin) || void 0 === _salesPlugins$4$sales ? void 0 : null === (_salesPlugins$4$sales2 = _salesPlugins$4$sales.progressPlugin) || void 0 === _salesPlugins$4$sales2 ? void 0 : _salesPlugins$4$sales2.totalNum;
                }
            }
            init() {
                if (this.shouldInit) {
                    const timeout = new flashSale_timeout({
                        startTime: this.startTime,
                        endTime: this.endTime
                    });
                    const percentage = new flashSale_percentage({
                        saleNum: this.saleNum,
                        totalNum: this.totalNum
                    });
                    timeout.changeTime();
                    percentage.percentageInit();
                }
            }
        }
        const snippets_flashSale = flashSale_FlashSale;
        class AddToCartList {
            constructor(spu) {
                this.spu = spu;
            }
            setActiveSku(sku) {
                this.activeSku = sku ? {
                    ...sku,
                    name: this.spu.title
                } : null;
            }
            init() {
                const addToCart = this;
                $("#page-product-detail .addToCartList_content").on("click", ".addToCart", (ev => {
                    const {spuSeq: spuId, skuSeq: skuId, name, price} = addToCart.activeSku;
                    const eventID = getEventID();
                    window.Shopline.event.emit("Cart::AddToCart", {
                        data: {
                            spuId,
                            skuId,
                            num: parseInt(ev.target.dataset.count, 10),
                            price,
                            name,
                            eventID: `addToCart${eventID}`
                        },
                        onSuccess: () => {
                            window.Shopline.event.emit("DataReport::AddToCart", {
                                content_spu_id: spuId,
                                content_sku_id: skuId,
                                content_category: "",
                                content_name: name,
                                currency: SL_State.get("storeInfo").currency,
                                value: price,
                                quantity: parseInt(ev.target.dataset.count, 10),
                                price
                            });
                        },
                        onError: error => {
                            console.error(error);
                        }
                    });
                }));
            }
        }
        const snippets_addToCartList = AddToCartList;
        var url = __webpack_require__("./src/assets/commons/utils/url.js");
        class Drawer {
            constructor({id, onSwitch}) {
                if (!id) throw new Error("【drawer】id为必传项");
                this.id = id;
                this.isShow = false;
                const drawerDom = this.getDom();
                if (!drawerDom) return;
                document.body.appendChild(drawerDom);
                this.hide = this.hide.bind(this);
                this.onSwitch = onSwitch;
            }
            getDom() {
                const dom = document.getElementById(this.id);
                return dom || false;
            }
            show() {
                var _this$onSwitch;
                const drawerDom = this.getDom();
                if (!drawerDom) return;
                this.isShow = true;
                drawerDom.style.display = "block";
                const $body = $("body");
                $body.addClass("sales-discount-coupon-common-drawer__root-open");
                const mask = drawerDom.querySelector(".sales-discount-coupon-common-drawer__mask-hook");
                if (mask) {
                    setTimeout((() => {
                        $(mask).addClass("sales-discount-coupon-common-drawer__mask--append");
                    }), 20);
                    mask.addEventListener("click", this.hide);
                }
                const closeBtn = drawerDom.querySelector(".sales-discount-coupon-common-drawer-hook");
                if (closeBtn) closeBtn.addEventListener("click", this.hide);
                null === (_this$onSwitch = this.onSwitch) || void 0 === _this$onSwitch ? void 0 : _this$onSwitch.call(this, true);
            }
            hide() {
                var _this$onSwitch2;
                const drawerDom = this.getDom();
                if (!drawerDom) return;
                this.isShow = false;
                drawerDom.style.display = "none";
                const $body = $("body");
                $body.removeClass("sales-discount-coupon-common-drawer__root-open");
                const mask = drawerDom.querySelector(".sales-discount-coupon-common-drawer__mask-hook");
                if (mask) {
                    $(mask).removeClass("sales-discount-coupon-common-drawer__mask--append");
                    mask.removeEventListener("click", this.hide);
                }
                const closeBtn = drawerDom.querySelector(".sales-discount-coupon-common-drawer-hook");
                if (closeBtn) closeBtn.removeEventListener("click", this.hide);
                null === (_this$onSwitch2 = this.onSwitch) || void 0 === _this$onSwitch2 ? void 0 : _this$onSwitch2.call(this, false);
            }
            getShowStatus() {
                return this.isShow;
            }
        }
        const js_Drawer = Drawer;
        function getCartId() {
            return new Promise(((resolve, reject) => {
                var _window$Shopline, _window$Shopline$even;
                null === (_window$Shopline = window.Shopline) || void 0 === _window$Shopline ? void 0 : null === (_window$Shopline$even = _window$Shopline.event) || void 0 === _window$Shopline$even ? void 0 : _window$Shopline$even.emit("Cart::GetCartId", {
                    onSuccess(res) {
                        if (null !== res && void 0 !== res && res.success) {
                            const ownerId = res.data;
                            resolve(ownerId);
                        }
                        reject(res);
                    },
                    onError(error) {
                        reject(error);
                    }
                });
            }));
        }
        function js_handleTagsShow() {
            const $tags = $(".sales-coupon-tag__discount-item-hook");
            if (!$tags[0]) return;
            if (isMobile()) $tags.css("display", "none").eq(0).css("display", "inline-block"); else $tags.css("display", "inline-block");
        }
        function onShowSwitch(id, className, isShow) {
            const container = $(id);
            if (!container) return;
            if (isShow) container.addClass(className); else container.removeClass(className);
        }
        const initDiscountCoupon = effectFc((function() {
            const {useEffect} = this;
            const containerIdSel = "#salesDiscountCouponCouponWrapHook";
            const modalIdSel = "#salesCouponModalHook";
            const modalShowClassName = "sales-coupon-modal__container--show";
            const drawerId = "salesDiscountCoupon_DiscountDrawer";
            const container = $(containerIdSel);
            const drawer = new js_Drawer({
                id: drawerId,
                onSwitch(flag) {
                    onShowSwitch(containerIdSel, "drawer-active", flag);
                }
            });
            const modalShow = () => {
                const modal = $(modalIdSel);
                modal.addClass(modalShowClassName);
                onShowSwitch(containerIdSel, "modal-active", true);
            };
            const modalHide = () => {
                const modal = $(modalIdSel);
                if (modal.hasClass(modalShowClassName)) {
                    modal.removeClass(modalShowClassName);
                    onShowSwitch(containerIdSel, "modal-active", false);
                }
            };
            const modalToggle = () => {
                const modal = $(modalIdSel);
                if (modal.hasClass(modalShowClassName)) modalHide(); else modalShow();
            };
            if (container.length) {
                useEffect(container, "on,off", "click", (() => {
                    if (isMobile()) drawer.show(); else modalToggle();
                }));
                useEffect($(modalIdSel), "on,off", "click", (e => {
                    e.stopPropagation();
                }));
                useEffect($(document.body), "on,off", "click", (e => {
                    const {target} = e;
                    const containerDom = container.get(0);
                    if ($.contains(containerDom, target) || containerDom === target) return;
                    if (isMobile() && drawer.getShowStatus()) drawer.hide();
                    if (!isMobile()) modalHide();
                }));
                useEffect(SL_EventBus, "on,off", "global:platformChange", (() => {
                    js_handleTagsShow();
                    if (!isMobile() && drawer.getShowStatus()) {
                        drawer.hide();
                        modalShow();
                    }
                    if (isMobile()) {
                        const modal = $(modalIdSel);
                        if (modal.hasClass(modalShowClassName)) drawer.show();
                        modalHide();
                    }
                }));
                window.SL_EventBus.on("global:currency:format", (() => {
                    const amountNode = container.find("[data-amount]");
                    amountNode.each((function() {
                        $(this).text(convertFormat($(this).data("amount")));
                    }));
                }));
                let isStopBtnApply = false;
                const $coupon = $(".sales-discount-coupon-hook");
                useEffect($coupon, "on,off", "click", (e => {
                    if (isStopBtnApply) return;
                    const applyClass = "sales-discount-coupon--apply";
                    const $el = $(e.currentTarget);
                    const discountCode = $el.data("discount-code");
                    if (!discountCode) {
                        Toast.init({
                            content: t("sales.discount-coupon.couponNoFound")
                        });
                        return;
                    }
                    const cartIdPromise = getCartId();
                    cartIdPromise.then((ownerId => request.post("/sale/coupon/bind/cart", {
                        ownerId,
                        discountCode
                    }))).then((() => {
                        isStopBtnApply = true;
                        setTimeout((() => {
                            isStopBtnApply = false;
                        }), 500);
                        Toast.init({
                            content: t("sales.discount-coupon.applySuccess")
                        });
                        $coupon.removeClass(applyClass);
                        const $selCoupons = $(`.sales-discount-coupon-hook[data-discount-code=${discountCode}]`);
                        $selCoupons.addClass(applyClass);
                        const $btns = $coupon.find(".sales-discount-coupon-card-btn-hook");
                        $btns.text($btns.data("apply"));
                        const $btnItems = $selCoupons.find(".sales-discount-coupon-card-btn-hook");
                        $btnItems.text($btnItems.data("applied"));
                    })).catch((() => {
                        Toast.init({
                            content: t("sales.discount-coupon.applyFail")
                        });
                    }));
                    cartIdPromise.then((() => {
                        window.sessionStorage.setItem("tradeExtraInfo", JSON.stringify({
                            discountCode: {
                                value: discountCode,
                                source: "Activity"
                            }
                        }));
                    }));
                }));
                js_handleTagsShow();
            }
        }));
        const js = initDiscountCoupon;
        const {formatCurrency: product_preview_formatCurrency} = currency;
        const emitProductSkuChange = data => {
            try {
                var _window, _window$SL_State;
                sku_change({
                    ...data,
                    currency: null === (_window = window) || void 0 === _window ? void 0 : null === (_window$SL_State = _window.SL_State) || void 0 === _window$SL_State ? void 0 : _window$SL_State.get("storeInfo.currency")
                });
            } catch (e) {
                console.error(e);
            }
        };
        const emitProductSkuChanged = data => {
            try {
                var _window2, _window2$SL_State;
                sku_changed({
                    ...data,
                    currency: null === (_window2 = window) || void 0 === _window2 ? void 0 : null === (_window2$SL_State = _window2.SL_State) || void 0 === _window2$SL_State ? void 0 : _window2$SL_State.get("storeInfo.currency")
                });
            } catch (e) {
                console.error(e);
            }
        };
        const emitViewContent = data => {
            try {
                view_content(data);
            } catch (e) {
                console.error(e);
            }
        };
        function thirdPartReport({activeSku, spu, sku}) {
            var _sku$skuList, _spu$sortationList, _spu$sortationList$, _spu$sortationList2, _spu$sortationList2$;
            const newActiveSku = activeSku || (null === sku || void 0 === sku ? void 0 : null === (_sku$skuList = sku.skuList) || void 0 === _sku$skuList ? void 0 : _sku$skuList[0]);
            window.SL_EventBus.emit("global:thirdPartReport", {
                GA: [ [ "event", "view_item", {
                    items: [ {
                        id: null === newActiveSku || void 0 === newActiveSku ? void 0 : newActiveSku.skuSeq,
                        name: null === spu || void 0 === spu ? void 0 : spu.title,
                        price: product_preview_formatCurrency(null === newActiveSku || void 0 === newActiveSku ? void 0 : newActiveSku.price),
                        variant: getVariant(null === newActiveSku || void 0 === newActiveSku ? void 0 : newActiveSku.skuAttributeIds, null === sku || void 0 === sku ? void 0 : sku.skuAttributeMap)
                    } ]
                } ] ],
                GAR: [ [ "event", "view_item", {
                    value: product_preview_formatCurrency(null === newActiveSku || void 0 === newActiveSku ? void 0 : newActiveSku.price),
                    items: [ {
                        id: null === newActiveSku || void 0 === newActiveSku ? void 0 : newActiveSku.skuSeq,
                        google_business_vertical: "retail"
                    } ]
                } ] ],
                GARemarketing: [ [ "event", "view_item", {
                    ecomm_prodid: null === newActiveSku || void 0 === newActiveSku ? void 0 : newActiveSku.skuSeq,
                    ecomm_pagetype: "product",
                    ecomm_category: null === spu || void 0 === spu ? void 0 : null === (_spu$sortationList = spu.sortationList) || void 0 === _spu$sortationList ? void 0 : null === (_spu$sortationList$ = _spu$sortationList[0]) || void 0 === _spu$sortationList$ ? void 0 : _spu$sortationList$.sortationId,
                    ecomm_pcat: null === spu || void 0 === spu ? void 0 : null === (_spu$sortationList2 = spu.sortationList) || void 0 === _spu$sortationList2 ? void 0 : null === (_spu$sortationList2$ = _spu$sortationList2[0]) || void 0 === _spu$sortationList2$ ? void 0 : _spu$sortationList2$.sortationName,
                    ecomm_totalvalue: product_preview_formatCurrency(null === newActiveSku || void 0 === newActiveSku ? void 0 : newActiveSku.price)
                } ] ]
            });
        }
        function initPreview({id, statePath, filterShelves, offsetTop, container, onAddSuccess}) {
            const sku = window.SL_State.get(`${statePath}.sku`);
            const spu = window.SL_State.get(`${statePath}.spu`);
            if (filterShelves && !(null !== spu && void 0 !== spu && spu.shelves)) {
                console.error("no spu data or not shelves, init break");
                return () => {};
            }
            const removePositionListener = listenPosition({
                id,
                offsetTop,
                container
            });
            js_createShadowDom();
            let productImagesInstance;
            try {
                productImagesInstance = new product_swiper({
                    mediaList: spu.mediaList,
                    selectorId: id,
                    heightOnChange: () => {
                        layout({
                            id,
                            offsetTop,
                            container
                        });
                    }
                });
            } catch (e) {
                setTimeout((() => {
                    throw e;
                }));
            }
            const inquiryPriceModal = new InquiryPriceModal({
                id,
                spu,
                sku
            });
            const addToCartList = new snippets_addToCartList(spu);
            addToCartList.init();
            const ButtonGroup = new product_button({
                id,
                cartRoot: `.pdp_add_to_cart_${id}`,
                buyNowRoot: `.pdp_buy_now_${id}`,
                payPayId: `pdp_paypal_${id}`,
                soldOutRoot: `.pdp_sold_out_${id}`,
                spu,
                sku,
                onAddSuccess: () => {
                    if ("function" === typeof onAddSuccess) onAddSuccess();
                }
            });
            const quantityStepper = new SkuQuality({
                id,
                sku,
                spu,
                dataPool: new DataWatcher
            });
            quantityStepper.dataPool.watch([ "quantity" ], (num => {
                ButtonGroup.setActiveSkuNum(num);
                if ("productDetail" === id) {
                    window.productDetailDataBus.set("num", num);
                    window.productDetailDataBus.emit("after:countChange", num);
                }
                window.SL_EventBus.emit("product:count:change", [ num, id ]);
            }));
            new product_collapse({
                selector: `.product-detail-collapse_${id}`
            });
            new tabs({
                root: ".product-tabs-container"
            });
            const getSkuChangeData = (skuInfo = {}) => {
                const {spuSeq, discount, skuSeq, price, originPrice, stock, weight, weightUnit, available, shelves, skuAttributeIds, imageList, soldOut, allowOversold, imageBeanList} = skuInfo || {};
                return {
                    spuSeq,
                    discount,
                    skuSeq,
                    price: product_preview_formatCurrency(price || 0),
                    originPrice: product_preview_formatCurrency(originPrice || 0),
                    stock,
                    weight,
                    weightUnit,
                    available,
                    shelves,
                    skuAttributeIds,
                    imageList,
                    soldOut,
                    allowOversold,
                    imageBeanList
                };
            };
            let activeSkuCache = {};
            const skuDataPool = new DataWatcher;
            const skuTrade = initSku({
                id,
                sku,
                spu,
                mixins: window.skuMixins,
                dataPool: skuDataPool,
                onInit: (trade, activeSku) => {
                    var _window3, _window3$SL_State, _quantityStepper$skuS3, _quantityStepper$skuS4;
                    thirdPartReport({
                        activeSku,
                        spu,
                        sku
                    });
                    activeSkuCache = activeSku;
                    let content_sku_id = "";
                    let price = null;
                    console.log("sku Init", activeSku);
                    inquiryPriceModal.setActiveSku(activeSku);
                    if ("productDetail" === id) {
                        window.productDetailDataBus.set("activeSku", activeSku);
                        window.productDetailDataBus.emit("init:sku", activeSku);
                    }
                    if (activeSku) {
                        var _quantityStepper$skuS, _quantityStepper$skuS2;
                        quantityStepper.setActiveSku(activeSku);
                        ButtonGroup.setActiveSku(activeSku);
                        addToCartList.setActiveSku(activeSku);
                        content_sku_id = null === activeSku || void 0 === activeSku ? void 0 : activeSku.skuSeq;
                        price = product_preview_formatCurrency((null === activeSku || void 0 === activeSku ? void 0 : activeSku.price) || 0);
                        emitProductSkuChange({
                            type: "init",
                            quantity: (null === quantityStepper || void 0 === quantityStepper ? void 0 : null === (_quantityStepper$skuS = quantityStepper.skuStepper) || void 0 === _quantityStepper$skuS ? void 0 : null === (_quantityStepper$skuS2 = _quantityStepper$skuS.data) || void 0 === _quantityStepper$skuS2 ? void 0 : _quantityStepper$skuS2.value) || 1,
                            ...getSkuChangeData(activeSku)
                        });
                    }
                    emitViewContent({
                        content_spu_id: spu.spuSeq,
                        content_sku_id,
                        content_category: "",
                        currency: null === (_window3 = window) || void 0 === _window3 ? void 0 : null === (_window3$SL_State = _window3.SL_State) || void 0 === _window3$SL_State ? void 0 : _window3$SL_State.get("storeInfo.currency"),
                        value: price,
                        quantity: 1,
                        price
                    });
                    emitProductSkuChanged({
                        type: "init",
                        id,
                        instances: {
                            productImages: productImagesInstance,
                            buttonGroup: ButtonGroup,
                            skuDataPool,
                            quantityStepper
                        },
                        quantity: (null === quantityStepper || void 0 === quantityStepper ? void 0 : null === (_quantityStepper$skuS3 = quantityStepper.skuStepper) || void 0 === _quantityStepper$skuS3 ? void 0 : null === (_quantityStepper$skuS4 = _quantityStepper$skuS3.data) || void 0 === _quantityStepper$skuS4 ? void 0 : _quantityStepper$skuS4.value) || 1,
                        ...getSkuChangeData(activeSku)
                    });
                    trade.dataPool.watch([ "activeSku" ], (activeSku => {
                        var _productImagesInstanc, _activeSku$imageBeanL;
                        if ("productDetail" === id) {
                            window.productDetailDataBus.set("activeSku", activeSku);
                            window.productDetailDataBus.emit("after:skuChange", activeSku);
                            if (activeSku) window.history.replaceState({}, document.title, (0, url.changeURLArg)(window.location.href, "sku", activeSku.skuSeq)); else window.history.replaceState({}, document.title, (0, 
                            url.delParam)("sku"));
                        }
                        activeSkuCache = activeSku;
                        inquiryPriceModal.setActiveSku(activeSku);
                        null === (_productImagesInstanc = productImagesInstance) || void 0 === _productImagesInstanc ? void 0 : _productImagesInstanc.skuImageChange(null === activeSku || void 0 === activeSku ? void 0 : null === (_activeSku$imageBeanL = activeSku.imageBeanList) || void 0 === _activeSku$imageBeanL ? void 0 : _activeSku$imageBeanL[0]);
                        if (activeSku || quantityStepper.activeSku) {
                            product_info(id, statePath, activeSku);
                            quantityStepper.setActiveSku(activeSku);
                            ButtonGroup.setActiveSku(activeSku);
                            addToCartList.setActiveSku(activeSku);
                        }
                    }));
                },
                onChange: activeSku => {
                    var _quantityStepper$skuS7, _quantityStepper$skuS8;
                    if (activeSku) {
                        var _quantityStepper$skuS5, _quantityStepper$skuS6;
                        thirdPartReport({
                            activeSku,
                            spu,
                            sku
                        });
                        emitProductSkuChange({
                            type: "change",
                            quantity: (null === quantityStepper || void 0 === quantityStepper ? void 0 : null === (_quantityStepper$skuS5 = quantityStepper.skuStepper) || void 0 === _quantityStepper$skuS5 ? void 0 : null === (_quantityStepper$skuS6 = _quantityStepper$skuS5.data) || void 0 === _quantityStepper$skuS6 ? void 0 : _quantityStepper$skuS6.value) || 1,
                            ...getSkuChangeData(activeSku)
                        });
                    }
                    emitProductSkuChanged({
                        type: "change",
                        id,
                        instances: {
                            productImages: productImagesInstance,
                            buttonGroup: ButtonGroup,
                            quantityStepper
                        },
                        quantity: (null === quantityStepper || void 0 === quantityStepper ? void 0 : null === (_quantityStepper$skuS7 = quantityStepper.skuStepper) || void 0 === _quantityStepper$skuS7 ? void 0 : null === (_quantityStepper$skuS8 = _quantityStepper$skuS7.data) || void 0 === _quantityStepper$skuS8 ? void 0 : _quantityStepper$skuS8.value) || 1,
                        ...getSkuChangeData(activeSku)
                    });
                }
            });
            const unmountPromotionTags = salesPromotionTags(`#product-info_${id}`);
            const unmountedDiscountCoupon = js();
            window.SL_EventBus.on("global:currency:format", (() => {
                product_info(id, statePath, quantityStepper.activeSku);
            }));
            try {
                const flashSale = new snippets_flashSale;
                flashSale.init();
            } catch (e) {
                console.log("初始化限时促销工具出错");
                console.error(e);
            }
            return {
                skuTrade,
                quantityStepper,
                productEventRepeat: () => {
                    var _window4, _window4$SL_State;
                    let content_sku_id = "";
                    let price = null;
                    if (activeSkuCache) {
                        var _activeSkuCache, _activeSkuCache2, _quantityStepper$skuS9, _quantityStepper$skuS10;
                        content_sku_id = null === (_activeSkuCache = activeSkuCache) || void 0 === _activeSkuCache ? void 0 : _activeSkuCache.skuSeq;
                        price = product_preview_formatCurrency((null === (_activeSkuCache2 = activeSkuCache) || void 0 === _activeSkuCache2 ? void 0 : _activeSkuCache2.price) || 0);
                        emitProductSkuChange({
                            type: "init",
                            quantity: (null === quantityStepper || void 0 === quantityStepper ? void 0 : null === (_quantityStepper$skuS9 = quantityStepper.skuStepper) || void 0 === _quantityStepper$skuS9 ? void 0 : null === (_quantityStepper$skuS10 = _quantityStepper$skuS9.data) || void 0 === _quantityStepper$skuS10 ? void 0 : _quantityStepper$skuS10.value) || 1,
                            ...getSkuChangeData(activeSkuCache)
                        });
                    }
                    thirdPartReport({
                        activeSku: activeSkuCache,
                        spu,
                        sku
                    });
                    emitViewContent({
                        content_spu_id: spu.spuSeq,
                        content_sku_id,
                        content_category: "",
                        currency: null === (_window4 = window) || void 0 === _window4 ? void 0 : null === (_window4$SL_State = _window4.SL_State) || void 0 === _window4$SL_State ? void 0 : _window4$SL_State.get("storeInfo.currency"),
                        value: price,
                        quantity: 1,
                        price
                    });
                },
                destroy: () => {
                    inquiryPriceModal.unbindEvents();
                    null === unmountPromotionTags || void 0 === unmountPromotionTags ? void 0 : unmountPromotionTags();
                    null === unmountedDiscountCoupon || void 0 === unmountedDiscountCoupon ? void 0 : unmountedDiscountCoupon();
                    removePositionListener();
                    skuTrade.destory();
                }
            };
        }
        function modalExpose(modalPrefix) {
            var _window$HdSdk;
            null === (_window$HdSdk = window.HdSdk) || void 0 === _window$HdSdk ? void 0 : _window$HdSdk.shopTracker.report("60006263", {
                event_name: "view",
                page: "productRecommendModal" === modalPrefix ? "123" : pageMapping[window.SL_State.get("templateAlias")]
            });
        }
        function fetchDetail(uniqueKey, params) {
            return axios_default().get(`/products/${uniqueKey}`, {
                params: {
                    ...params,
                    view: "modal",
                    preview: (0, url.getUrlQuery)("preview"),
                    themeId: (0, url.getUrlQuery)("themeId"),
                    ignoreRedirect: (0, url.getUrlQuery)("ignoreRedirect"),
                    engineType: (0, url.getUrlQuery)("engineType"),
                    sourcePage: window.SL_State.get("templateAlias")
                }
            });
        }
        function createContent() {
            return $('<div class="product-preview-modal-content" data-scroll-lock-scrollable></div>');
        }
        const modalMap = {};
        const previewMap = {};
        function previewModal({spuSeq, uniqueKey, query}) {
            let modalPrefix = "productModal_";
            let queryObj = {};
            try {
                queryObj = {
                    ...query
                };
                modalPrefix = queryObj.modalPrefix || "productModal_";
            } catch (e) {
                console.log(e);
            }
            if (modalMap[spuSeq]) {
                var _modalMap$spuSeq, _previewMap$spuSeq;
                null === (_modalMap$spuSeq = modalMap[spuSeq]) || void 0 === _modalMap$spuSeq ? void 0 : _modalMap$spuSeq.show();
                null === (_previewMap$spuSeq = previewMap[spuSeq]) || void 0 === _previewMap$spuSeq ? void 0 : _previewMap$spuSeq.productEventRepeat();
                modalExpose(modalPrefix);
                quickView_click({
                    type: "change",
                    eventName: "OPEN_QUICKVIEW_EVENT",
                    spuSeq,
                    modal: modalMap[spuSeq],
                    preview: {
                        skuTrade: previewMap[spuSeq].skuTrade,
                        quantityStepper: previewMap[spuSeq].quantityStepper
                    },
                    $el: document.getElementById(modalMap[spuSeq].modalId)
                });
            } else {
                const children = createContent();
                const modal = new ModalWithHtml({
                    children,
                    containerClassName: "product-preview-modal-container",
                    bodyClassName: "product-preview-modal-body",
                    zIndex: 128,
                    closeCallback: () => {
                        quickView_click({
                            eventName: "CLOSE_QUICKVIEW_EVENT",
                            spuSeq,
                            $el: document.getElementById(modalMap[spuSeq].modalId)
                        });
                    }
                });
                modal.show();
                new Loading({
                    target: children,
                    loadingColor: "currentColor",
                    duration: -1
                }).open();
                fetchDetail(uniqueKey, queryObj).then((res => {
                    children.html('<div class="product-preview-modal-top-space"></div>').append(res.data);
                    modalExpose(modalPrefix);
                    window.SL_EventBus.emit("global.activeIcon.show", {
                        type: "vip"
                    });
                    try {
                        const preview = initPreview({
                            id: `${modalPrefix}${spuSeq}`,
                            statePath: `${modalPrefix}${spuSeq}`,
                            offsetTop: 48,
                            container: modal.$modal.find(".product-preview-modal-body"),
                            onAddSuccess: () => {
                                modal.hide();
                            }
                        });
                        modalMap[spuSeq] = modal;
                        previewMap[spuSeq] = preview;
                        quickView_click({
                            type: "init",
                            eventName: "OPEN_QUICKVIEW_EVENT",
                            spuSeq,
                            preview: {
                                skuTrade: preview.skuTrade,
                                quantityStepper: preview.quantityStepper
                            },
                            modal,
                            $el: document.getElementById(modalMap[spuSeq].modalId)
                        });
                    } catch (e) {
                        setTimeout((() => {
                            throw e;
                        }));
                    }
                })).catch((() => {
                    (new Toast).open(t("common.productError"), 3e3);
                    modal.hide();
                    modal.destroy();
                }));
            }
            return modalMap[spuSeq];
        }
        const preview_modal = previewModal;
        const {formatCurrency: quick_add_modal_formatCurrency} = currency;
        const quick_add_modal_emitProductSkuChange = data => {
            try {
                var _window, _window$SL_State;
                sku_change({
                    currency: null === (_window = window) || void 0 === _window ? void 0 : null === (_window$SL_State = _window.SL_State) || void 0 === _window$SL_State ? void 0 : _window$SL_State.get("storeInfo.currency"),
                    ...data
                });
            } catch (e) {
                console.error(e);
            }
        };
        const quick_add_modal_emitViewContent = data => {
            try {
                view_content(data);
            } catch (e) {
                console.error(e);
            }
        };
        const modalInstanceMap = new Map;
        const previewInstanceMap = new Map;
        const quickAddLoadingClassName = "product-item__btn--loading";
        function quick_add_modal_modalExpose(page) {
            var _window$HdSdk;
            null === (_window$HdSdk = window.HdSdk) || void 0 === _window$HdSdk ? void 0 : _window$HdSdk.shopTracker.report("60006263", {
                event_name: "view",
                page
            });
        }
        const getSkuChangeData = (skuInfo = {}) => {
            const {spuSeq, discount, skuSeq, price, originPrice, stock, weight, weightUnit, available, shelves, skuAttributeIds, imageList, soldOut, allowOversold, imageBeanList} = skuInfo;
            return {
                spuSeq,
                discount,
                skuSeq,
                price: quick_add_modal_formatCurrency(price || 0),
                originPrice: quick_add_modal_formatCurrency(originPrice || 0),
                stock,
                weight,
                weightUnit,
                available,
                shelves,
                skuAttributeIds,
                imageList,
                soldOut,
                allowOversold,
                imageBeanList
            };
        };
        async function quickAddModal(data) {
            const {spuSeq, uniqueKey, $button} = data;
            let modalPrefix = "product_quick_add_";
            let queryObj = {};
            const query = $button.data("query");
            try {
                queryObj = {
                    ...query
                };
                modalPrefix = queryObj.modalPrefix ? `${queryObj.modalPrefix}_product_quick_add_` : "product_quick_add_";
            } catch (e) {
                console.log(e);
            }
            const page = modalPrefix.startsWith("productRecommendModal") ? "123" : pageMapping[window.SL_State.get("templateAlias")];
            function toggleAddLoading(isLoading) {
                $button.toggleClass(quickAddLoadingClassName, isLoading);
            }
            if ($button.hasClass(quickAddLoadingClassName)) return;
            try {
                toggleAddLoading(true);
                const res = await getProductDetail(spuSeq);
                if ("SUCCESS" === res.code) {
                    var _res$data$sku$skuList, _res$data, _res$data$sku, _res$data2, _res$data2$spu;
                    const productInfo = res.data;
                    const skuList = null !== (_res$data$sku$skuList = null === (_res$data = res.data) || void 0 === _res$data ? void 0 : null === (_res$data$sku = _res$data.sku) || void 0 === _res$data$sku ? void 0 : _res$data$sku.skuList) && void 0 !== _res$data$sku$skuList ? _res$data$sku$skuList : [];
                    const isSoldOut = null === (_res$data2 = res.data) || void 0 === _res$data2 ? void 0 : null === (_res$data2$spu = _res$data2.spu) || void 0 === _res$data2$spu ? void 0 : _res$data2$spu.soldOut;
                    const isSingleSku = Array.isArray(skuList) && 1 === skuList.length;
                    if (isSoldOut) {
                        (new Toast).open(t("common.soldOut"), 3e3);
                        return;
                    }
                    quick_add_modal_modalExpose(page);
                    if (isSingleSku) {
                        var _productInfo$spu, _window2, _window2$SL_State;
                        const skuInfo = skuList[0];
                        quick_add_modal_addToCart({
                            sku: skuInfo,
                            spu: null === productInfo || void 0 === productInfo ? void 0 : productInfo.spu,
                            toggleAddLoading,
                            hdReportPage: page
                        });
                        quick_add_modal_emitProductSkuChange({
                            type: "init",
                            quantity: 1,
                            ...getSkuChangeData(skuInfo)
                        });
                        quick_add_modal_emitViewContent({
                            content_spu_id: null === productInfo || void 0 === productInfo ? void 0 : null === (_productInfo$spu = productInfo.spu) || void 0 === _productInfo$spu ? void 0 : _productInfo$spu.spuSeq,
                            content_sku_id: null === skuInfo || void 0 === skuInfo ? void 0 : skuInfo.skuSeq,
                            content_category: "",
                            currency: null === (_window2 = window) || void 0 === _window2 ? void 0 : null === (_window2$SL_State = _window2.SL_State) || void 0 === _window2$SL_State ? void 0 : _window2$SL_State.get("storeInfo.currency"),
                            value: quick_add_modal_formatCurrency((null === skuInfo || void 0 === skuInfo ? void 0 : skuInfo.price) || 0),
                            quantity: 1,
                            price: quick_add_modal_formatCurrency((null === skuInfo || void 0 === skuInfo ? void 0 : skuInfo.price) || 0)
                        });
                    } else showModal({
                        spuSeq,
                        uniqueKey,
                        modalPrefix
                    });
                } else (new Toast).open(t("common.productError"), 3e3);
            } catch (err) {
                (new Toast).open(t("common.productError"), 3e3);
            } finally {
                toggleAddLoading(false);
            }
        }
        async function showModal({spuSeq, uniqueKey, modalPrefix}) {
            if (modalInstanceMap.has(spuSeq)) {
                var _modalInstanceMap$get, _previewInstanceMap$g, _modalInstanceMap$get2;
                null === (_modalInstanceMap$get = modalInstanceMap.get(spuSeq)) || void 0 === _modalInstanceMap$get ? void 0 : _modalInstanceMap$get.show();
                null === (_previewInstanceMap$g = previewInstanceMap.get(spuSeq)) || void 0 === _previewInstanceMap$g ? void 0 : _previewInstanceMap$g.emitEvent();
                quickView_click({
                    type: "change",
                    eventName: "OPEN_QUICKVIEW_ADDTOCART",
                    spuSeq,
                    modal: modalInstanceMap.get(spuSeq),
                    preview: {
                        skuTrade: previewInstanceMap.get(spuSeq).skuTrade,
                        quantityStepper: previewInstanceMap.get(spuSeq).quantityStepper
                    },
                    $el: document.getElementById(null === (_modalInstanceMap$get2 = modalInstanceMap.get(spuSeq)) || void 0 === _modalInstanceMap$get2 ? void 0 : _modalInstanceMap$get2.modalId)
                });
            } else {
                const children = $('<div class="quick-add-modal__outerWrapper"></div>');
                const modal = new ModalWithHtml({
                    children,
                    containerClassName: "quick-add-modal__container",
                    zIndex: 128,
                    closeCallback: () => {
                        var _modalInstanceMap$get3;
                        quickView_click({
                            eventName: "CLOSE_QUICKVIEW_ADDTOCART",
                            spuSeq,
                            $el: document.getElementById(null === (_modalInstanceMap$get3 = modalInstanceMap.get(spuSeq)) || void 0 === _modalInstanceMap$get3 ? void 0 : _modalInstanceMap$get3.modalId)
                        });
                    }
                });
                modal.show();
                modal.$modal.get(0).style.setProperty("--max-body-height", `${.8 * window.innerHeight}px`);
                const loading = new Loading({
                    target: modal.$modal.find(".mp-modal__body"),
                    loadingColor: "currentColor",
                    duration: -1
                });
                loading.open();
                try {
                    var _modalInstanceMap$get4;
                    const res = await fetchModalContent(uniqueKey, modalPrefix);
                    children.empty().append(res.data);
                    initQuickAddModal(`${modalPrefix}${spuSeq}`, children, modal, spuSeq);
                    modalInstanceMap.set(spuSeq, modal);
                    quickView_click({
                        type: "init",
                        eventName: "OPEN_QUICKVIEW_ADDTOCART",
                        spuSeq,
                        modal: modalInstanceMap.get(spuSeq),
                        preview: {
                            skuTrade: previewInstanceMap.get(spuSeq).skuTrade,
                            quantityStepper: previewInstanceMap.get(spuSeq).quantityStepper
                        },
                        $el: document.getElementById(null === (_modalInstanceMap$get4 = modalInstanceMap.get(spuSeq)) || void 0 === _modalInstanceMap$get4 ? void 0 : _modalInstanceMap$get4.modalId)
                    });
                } catch (err) {
                    (new Toast).open(t("common.productError"), 3e3);
                    modal.hide();
                } finally {
                    loading.close();
                    window.SL_EventBus.emit("global.activeIcon.show", {
                        type: "vip"
                    });
                }
            }
        }
        function initQuickAddModal(id, el, modal, spuSeq) {
            const sku = window.SL_State.get(`${id}.sku`);
            const spu = window.SL_State.get(`${id}.spu`);
            initWidgets({
                id,
                sku,
                spu
            }, el, modal, spuSeq);
        }
        function initWidgets({id, sku, spu}, el, modal, spuSeq) {
            let activeSkuCache = {};
            const ButtonGroup = new product_button({
                id,
                cartRoot: `.pdp_add_to_cart_${id}`,
                buyNowRoot: `.pdp_buy_now_${id}`,
                payPayId: `pdp_paypal_${id}`,
                soldOutRoot: `.pdp_sold_out_${id}`,
                spu,
                sku,
                onAddSuccess: () => {
                    modal.hide();
                }
            });
            const quantityStepper = new SkuQuality({
                id,
                sku,
                spu,
                onChange: num => {
                    ButtonGroup.setActiveSkuNum(num);
                    window.SL_EventBus.emit("product:count:change", [ num, id ]);
                }
            });
            const skuTrade = initSku({
                id,
                sku,
                spu,
                mixins: window.skuMixins,
                onInit: (trade, activeSku) => {
                    var _window3, _window3$SL_State;
                    activeSkuCache = activeSku;
                    let content_sku_id = "";
                    let price = null;
                    if (activeSku) {
                        var _activeSkuCache, _quantityStepper$skuS, _quantityStepper$skuS2;
                        changeActiveSku(activeSku);
                        content_sku_id = null === activeSku || void 0 === activeSku ? void 0 : activeSku.skuSeq;
                        price = quick_add_modal_formatCurrency((null === (_activeSkuCache = activeSkuCache) || void 0 === _activeSkuCache ? void 0 : _activeSkuCache.price) || 0);
                        quick_add_modal_emitProductSkuChange({
                            type: "init",
                            quantity: (null === quantityStepper || void 0 === quantityStepper ? void 0 : null === (_quantityStepper$skuS = quantityStepper.skuStepper) || void 0 === _quantityStepper$skuS ? void 0 : null === (_quantityStepper$skuS2 = _quantityStepper$skuS.data) || void 0 === _quantityStepper$skuS2 ? void 0 : _quantityStepper$skuS2.value) || 1,
                            ...getSkuChangeData(activeSku)
                        });
                    }
                    quick_add_modal_emitViewContent({
                        content_spu_id: spu.spuSeq,
                        content_sku_id,
                        content_category: "",
                        currency: null === (_window3 = window) || void 0 === _window3 ? void 0 : null === (_window3$SL_State = _window3.SL_State) || void 0 === _window3$SL_State ? void 0 : _window3$SL_State.get("storeInfo.currency"),
                        value: price,
                        quantity: 1,
                        price
                    });
                },
                onChange: activeSku => {
                    activeSkuCache = activeSku;
                    if (activeSku) {
                        var _quantityStepper$skuS3, _quantityStepper$skuS4;
                        quick_add_modal_emitProductSkuChange({
                            type: "change",
                            quantity: (null === quantityStepper || void 0 === quantityStepper ? void 0 : null === (_quantityStepper$skuS3 = quantityStepper.skuStepper) || void 0 === _quantityStepper$skuS3 ? void 0 : null === (_quantityStepper$skuS4 = _quantityStepper$skuS3.data) || void 0 === _quantityStepper$skuS4 ? void 0 : _quantityStepper$skuS4.value) || 1,
                            ...getSkuChangeData(activeSku)
                        });
                    }
                    if (!activeSku && !quantityStepper.activeSku) return;
                    product_info(id, id, activeSku);
                    changeActiveSku(activeSku);
                }
            });
            previewInstanceMap.set(spuSeq, {
                skuTrade,
                quantityStepper,
                emitEvent: () => {
                    var _window4, _window4$SL_State;
                    let content_sku_id = "";
                    let price = null;
                    if (activeSkuCache) {
                        var _activeSkuCache2, _activeSkuCache3, _quantityStepper$skuS5, _quantityStepper$skuS6;
                        content_sku_id = null === (_activeSkuCache2 = activeSkuCache) || void 0 === _activeSkuCache2 ? void 0 : _activeSkuCache2.skuSeq;
                        price = quick_add_modal_formatCurrency((null === (_activeSkuCache3 = activeSkuCache) || void 0 === _activeSkuCache3 ? void 0 : _activeSkuCache3.price) || 0);
                        quick_add_modal_emitProductSkuChange({
                            type: "init",
                            quantity: (null === quantityStepper || void 0 === quantityStepper ? void 0 : null === (_quantityStepper$skuS5 = quantityStepper.skuStepper) || void 0 === _quantityStepper$skuS5 ? void 0 : null === (_quantityStepper$skuS6 = _quantityStepper$skuS5.data) || void 0 === _quantityStepper$skuS6 ? void 0 : _quantityStepper$skuS6.value) || 1,
                            ...getSkuChangeData(activeSkuCache)
                        });
                    }
                    quick_add_modal_emitViewContent({
                        content_spu_id: spu.spuSeq,
                        content_sku_id,
                        content_category: "",
                        currency: null === (_window4 = window) || void 0 === _window4 ? void 0 : null === (_window4$SL_State = _window4.SL_State) || void 0 === _window4$SL_State ? void 0 : _window4$SL_State.get("storeInfo.currency"),
                        value: price,
                        quantity: 1,
                        price
                    });
                }
            });
            listenCurrencyCodeChange(id, id, quantityStepper);
            function changeActiveSku(activeSku) {
                ButtonGroup.setActiveSku(activeSku);
                quantityStepper.setActiveSku(activeSku);
                if (isMobile()) {
                    const $footer = el.find(".quick-add-modal__footer");
                    const paddingBottom = $footer.outerHeight() + 10;
                    (0, scroll_lock.addLockableTarget)($footer);
                    el.find(".quick-add-modal__body").css({
                        "padding-bottom": paddingBottom
                    });
                }
            }
        }
        function quick_add_modal_addToCart({sku, spu, toggleAddLoading, hdReportPage}) {
            const activeSku = sku ? {
                ...sku,
                num: 1,
                name: spu.title
            } : null;
            if (isPreview()) {
                (new Toast).open(t("productDetail.previewLinkToast"));
                return;
            }
            if (!activeSku) {
                (new Toast).open(t("productList.container.tradePopup.error4"));
                return;
            }
            toggleAddLoading(true);
            const {spuSeq: spuId, skuSeq: skuId, num, name, price} = activeSku;
            const eventID = getEventID();
            const hdReportData = {
                page: hdReportPage,
                spuId,
                skuId,
                name,
                price,
                num
            };
            window.SL_EventBus.emit(interior_event_ADD_TO_CART, {
                spuId,
                skuId,
                num,
                price,
                name,
                eventID: `addToCart${eventID}`,
                error: () => {
                    addToCartHdReport({
                        ...hdReportData,
                        event_status: 0
                    });
                },
                success: () => {
                    addToCartHdReport({
                        ...hdReportData,
                        event_status: 1
                    });
                    addToCartThirdReport({
                        spuId,
                        name,
                        price,
                        skuId,
                        num,
                        eventID
                    });
                },
                complete: () => {
                    toggleAddLoading(false);
                }
            });
        }
        function listenCurrencyCodeChange(id, statePath, quantityStepper) {
            window.SL_EventBus.on("global:currency:format", (() => {
                product_info(id, statePath, quantityStepper.activeSku);
            }));
        }
        function isPreview() {
            const currentUrl = window.location.pathname;
            return /^[/（]preview[/）].*/.test(currentUrl);
        }
        function fetchModalContent(uniqueKey, modalPrefix) {
            let recommendQuery = {};
            if (modalPrefix.startsWith("productRecommendModal")) recommendQuery = {
                modalPrefix: "productRecommendModal"
            };
            return axios_default().get(`/products/${uniqueKey}`, {
                params: {
                    view: "quick-add-modal",
                    preview: (0, url.getUrlQuery)("preview"),
                    themeId: (0, url.getUrlQuery)("themeId"),
                    ignoreRedirect: (0, url.getUrlQuery)("ignoreRedirect"),
                    engineType: (0, url.getUrlQuery)("engineType"),
                    sourcePage: window.SL_State.get("templateAlias"),
                    ...recommendQuery
                }
            });
        }
        function getProductDetail(spuSeq) {
            return request.get(`/product/detail/query`, {
                params: {
                    spuSeq
                }
            });
        }
        const {formatCurrency: product_item_formatCurrency} = currency;
        const isPad = SL_State.get("request.is_mobile") || void 0 !== document.ontouchmove;
        $("body").delegate(".js-product-item-quick-view", "click", (function(e) {
            e.preventDefault();
            e.stopPropagation();
            const spuSeq = $(this).data("spu-seq");
            const uniqueKey = $(this).data("unique-key");
            const query = $(this).data("query");
            preview_modal({
                spuSeq,
                uniqueKey,
                query
            });
        }));
        $("body").on("click", ".js-product-item-quick-add", (e => {
            e.preventDefault();
            e.stopPropagation();
            const $current = $(e.currentTarget);
            const spuSeq = $current.data("spu-seq");
            const uniqueKey = $current.data("unique-key");
            quickAddModal({
                spuSeq,
                uniqueKey,
                $button: $current
            });
        }));
        $("body").on("click", ".js-product-item-sold-out", (e => {
            e.preventDefault();
            e.stopPropagation();
        }));
        window.SL_EventBus.on("global:currency:format", (({currencyCode: code, lang}) => {
            const priceItems = $("[data-product-item-price]");
            for (const priceItem of priceItems) {
                const priceValue = $(priceItem).data("product-item-price");
                const isSavePrice = $(priceItem).data("product-item-save-price");
                processPrice($(priceItem), priceValue, {
                    isSavePrice,
                    code,
                    lang
                }).render();
            }
        }));
        if (isPad) {
            $(".product-item__inner-wrap .product-item__actions").css({
                display: "block"
            });
            $(".product-item__inner-wrap").removeClass("js-product-inner-wrap");
            $("#collectionsAjaxInner").addClass("pad");
            $(".product-item__wrapper").addClass("pad");
        }
        $("body").on("mouseenter", ".js-product-inner-wrap", (function(e) {
            e.preventDefault();
            e.stopPropagation();
            const $item = $(this);
            const $parent = $item.parent();
            const $btns = $item.find(".js-product-item__actions");
            const noHoverAnimation = $item.data("no-hover-ani-effect");
            if ($btns.hasClass("show-middle-btn") || noHoverAnimation) return;
            window.clearTimeout(+$item.attr("data-timer"));
            if ($parent.children(".js-bg").length) $item.css("height", `${$item.find(".js-product-item").outerHeight()}px`); else {
                const $bg = $('<div class="js-bg" style="width: 100%;"></div>');
                $bg.css("height", `${$item.outerHeight()}px`).appendTo($parent);
                $item.css("position", "absolute").css("top", "0").css("left", "0").css("width", "100%").css("z-index", $item.attr("data-hover-z-index")).css("box-shadow", "0px 10px 50px rgba(0, 0, 0, 0.08)");
                $btns.css("display", "block");
                $item.css("height", `${$bg.outerHeight(true)}px`);
                $item.css("height", `${$item.find(".js-product-item").outerHeight()}px`);
            }
        }));
        $("body").on("mouseleave", ".js-product-inner-wrap", (function(e) {
            e.preventDefault();
            e.stopPropagation();
            const $item = $(this);
            const $parent = $item.parent();
            const $btns = $item.find(".js-product-item__actions");
            if ($btns.hasClass("show-middle-btn")) return;
            const $bg = $parent.children(".js-bg");
            window.clearTimeout(+$item.attr("data-timer"));
            $item.css("height", `${$bg.outerHeight()}px`);
            $item.attr("data-timer", setTimeout((function() {
                $item.removeAttr("style");
                $bg.remove();
                $btns.removeAttr("style");
            }), 300));
        }));
        function product_item_thirdPartReport({id, name, price}) {
            window.SL_EventBus.emit("global:thirdPartReport", {
                GA: [ [ "event", "select_content", {
                    content_type: "product",
                    items: [ {
                        id,
                        name,
                        price: product_item_formatCurrency(price)
                    } ]
                } ] ]
            });
        }
        $(document.body).on("click", ".product-item", (function() {
            product_item_thirdPartReport({
                id: $(this).data("skuId"),
                name: $(this).data("name"),
                price: $(this).data("price")
            });
        }));
        function multi_media_splicing_defineProperty(obj, key, value) {
            if (key in obj) Object.defineProperty(obj, key, {
                value,
                enumerable: true,
                configurable: true,
                writable: true
            }); else obj[key] = value;
            return obj;
        }
        class MultiMediaSplicing {
            constructor(container) {
                multi_media_splicing_defineProperty(this, "instances", []);
                const $videos = container.find(`[data-block-type='video']`);
                if (!$videos.length) return;
                $videos.each(((_, video) => {
                    this.instances.push(new Video($(video), {
                        clickCallback: () => {
                            container.find(".video__controll").toggleClass("d-none", false);
                        }
                    }));
                }));
            }
            onUnload() {
                if (this.instances.length) this.instances.forEach((instance => {
                    instance.onUnload();
                }));
            }
        }
        multi_media_splicing_defineProperty(MultiMediaSplicing, "type", "multi-media-splicing");
        registrySectionConstructor(MultiMediaSplicing.type, MultiMediaSplicing);
    })();
})();