(self["webpackChunkArise"] = self["webpackChunkArise"] || []).push([ [ "activity" ], {
    "./node_modules/copy-to-clipboard/index.js": (module, __unused_webpack_exports, __webpack_require__) => {
        "use strict";
        var deselectCurrent = __webpack_require__("./node_modules/toggle-selection/index.js");
        var clipboardToIE11Formatting = {
            "text/plain": "Text",
            "text/html": "Url",
            default: "Text"
        };
        var defaultMessage = "Copy to clipboard: #{key}, Enter";
        function format(message) {
            var copyKey = (/mac os x/i.test(navigator.userAgent) ? "âŒ˜" : "Ctrl") + "+C";
            return message.replace(/#{\s*key\s*}/g, copyKey);
        }
        function copy(text, options) {
            var debug, message, reselectPrevious, range, selection, mark, success = false;
            if (!options) options = {};
            debug = options.debug || false;
            try {
                reselectPrevious = deselectCurrent();
                range = document.createRange();
                selection = document.getSelection();
                mark = document.createElement("span");
                mark.textContent = text;
                mark.ariaHidden = "true";
                mark.style.all = "unset";
                mark.style.position = "fixed";
                mark.style.top = 0;
                mark.style.clip = "rect(0, 0, 0, 0)";
                mark.style.whiteSpace = "pre";
                mark.style.webkitUserSelect = "text";
                mark.style.MozUserSelect = "text";
                mark.style.msUserSelect = "text";
                mark.style.userSelect = "text";
                mark.addEventListener("copy", (function(e) {
                    e.stopPropagation();
                    if (options.format) {
                        e.preventDefault();
                        if ("undefined" === typeof e.clipboardData) {
                            debug && console.warn("unable to use e.clipboardData");
                            debug && console.warn("trying IE specific stuff");
                            window.clipboardData.clearData();
                            var format = clipboardToIE11Formatting[options.format] || clipboardToIE11Formatting["default"];
                            window.clipboardData.setData(format, text);
                        } else {
                            e.clipboardData.clearData();
                            e.clipboardData.setData(options.format, text);
                        }
                    }
                    if (options.onCopy) {
                        e.preventDefault();
                        options.onCopy(e.clipboardData);
                    }
                }));
                document.body.appendChild(mark);
                range.selectNodeContents(mark);
                selection.addRange(range);
                var successful = document.execCommand("copy");
                if (!successful) throw new Error("copy command was unsuccessful");
                success = true;
            } catch (err) {
                debug && console.error("unable to copy using execCommand: ", err);
                debug && console.warn("trying IE specific stuff");
                try {
                    window.clipboardData.setData(options.format || "text", text);
                    options.onCopy && options.onCopy(window.clipboardData);
                    success = true;
                } catch (err) {
                    debug && console.error("unable to copy using clipboardData: ", err);
                    debug && console.error("falling back to prompt");
                    message = format("message" in options ? options.message : defaultMessage);
                    window.prompt(message, text);
                }
            } finally {
                if (selection) if ("function" == typeof selection.removeRange) selection.removeRange(range); else selection.removeAllRanges();
                if (mark) document.body.removeChild(mark);
                reselectPrevious();
            }
            return success;
        }
        module.exports = copy;
    },
    "./node_modules/core-js/modules/es.array.find-index.js": (__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {
        "use strict";
        var $ = __webpack_require__("./node_modules/core-js/internals/export.js");
        var $findIndex = __webpack_require__("./node_modules/core-js/internals/array-iteration.js").findIndex;
        var addToUnscopables = __webpack_require__("./node_modules/core-js/internals/add-to-unscopables.js");
        var FIND_INDEX = "findIndex";
        var SKIPS_HOLES = true;
        if (FIND_INDEX in []) Array(1)[FIND_INDEX]((function() {
            SKIPS_HOLES = false;
        }));
        $({
            target: "Array",
            proto: true,
            forced: SKIPS_HOLES
        }, {
            findIndex: function(callbackfn) {
                return $findIndex(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
            }
        });
        addToUnscopables(FIND_INDEX);
    },
    "./node_modules/dayjs/dayjs.min.js": function(module) {
        !function(t, e) {
            true ? module.exports = e() : 0;
        }(0, (function() {
            "use strict";
            var t = 1e3, e = 6e4, n = 36e5, r = "millisecond", i = "second", s = "minute", u = "hour", a = "day", o = "week", f = "month", h = "quarter", c = "year", d = "date", $ = "Invalid Date", l = /^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/, y = /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g, M = {
                name: "en",
                weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
                months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_")
            }, m = function(t, e, n) {
                var r = String(t);
                return !r || r.length >= e ? t : "" + Array(e + 1 - r.length).join(n) + t;
            }, g = {
                s: m,
                z: function(t) {
                    var e = -t.utcOffset(), n = Math.abs(e), r = Math.floor(n / 60), i = n % 60;
                    return (e <= 0 ? "+" : "-") + m(r, 2, "0") + ":" + m(i, 2, "0");
                },
                m: function t(e, n) {
                    if (e.date() < n.date()) return -t(n, e);
                    var r = 12 * (n.year() - e.year()) + (n.month() - e.month()), i = e.clone().add(r, f), s = n - i < 0, u = e.clone().add(r + (s ? -1 : 1), f);
                    return +(-(r + (n - i) / (s ? i - u : u - i)) || 0);
                },
                a: function(t) {
                    return t < 0 ? Math.ceil(t) || 0 : Math.floor(t);
                },
                p: function(t) {
                    return {
                        M: f,
                        y: c,
                        w: o,
                        d: a,
                        D: d,
                        h: u,
                        m: s,
                        s: i,
                        ms: r,
                        Q: h
                    }[t] || String(t || "").toLowerCase().replace(/s$/, "");
                },
                u: function(t) {
                    return void 0 === t;
                }
            }, v = "en", D = {};
            D[v] = M;
            var p = function(t) {
                return t instanceof _;
            }, S = function t(e, n, r) {
                var i;
                if (!e) return v;
                if ("string" == typeof e) {
                    var s = e.toLowerCase();
                    D[s] && (i = s), n && (D[s] = n, i = s);
                    var u = e.split("-");
                    if (!i && u.length > 1) return t(u[0]);
                } else {
                    var a = e.name;
                    D[a] = e, i = a;
                }
                return !r && i && (v = i), i || !r && v;
            }, w = function(t, e) {
                if (p(t)) return t.clone();
                var n = "object" == typeof e ? e : {};
                return n.date = t, n.args = arguments, new _(n);
            }, O = g;
            O.l = S, O.i = p, O.w = function(t, e) {
                return w(t, {
                    locale: e.$L,
                    utc: e.$u,
                    x: e.$x,
                    $offset: e.$offset
                });
            };
            var _ = function() {
                function M(t) {
                    this.$L = S(t.locale, null, !0), this.parse(t);
                }
                var m = M.prototype;
                return m.parse = function(t) {
                    this.$d = function(t) {
                        var e = t.date, n = t.utc;
                        if (null === e) return new Date(NaN);
                        if (O.u(e)) return new Date;
                        if (e instanceof Date) return new Date(e);
                        if ("string" == typeof e && !/Z$/i.test(e)) {
                            var r = e.match(l);
                            if (r) {
                                var i = r[2] - 1 || 0, s = (r[7] || "0").substring(0, 3);
                                return n ? new Date(Date.UTC(r[1], i, r[3] || 1, r[4] || 0, r[5] || 0, r[6] || 0, s)) : new Date(r[1], i, r[3] || 1, r[4] || 0, r[5] || 0, r[6] || 0, s);
                            }
                        }
                        return new Date(e);
                    }(t), this.$x = t.x || {}, this.init();
                }, m.init = function() {
                    var t = this.$d;
                    this.$y = t.getFullYear(), this.$M = t.getMonth(), this.$D = t.getDate(), this.$W = t.getDay(), 
                    this.$H = t.getHours(), this.$m = t.getMinutes(), this.$s = t.getSeconds(), this.$ms = t.getMilliseconds();
                }, m.$utils = function() {
                    return O;
                }, m.isValid = function() {
                    return !(this.$d.toString() === $);
                }, m.isSame = function(t, e) {
                    var n = w(t);
                    return this.startOf(e) <= n && n <= this.endOf(e);
                }, m.isAfter = function(t, e) {
                    return w(t) < this.startOf(e);
                }, m.isBefore = function(t, e) {
                    return this.endOf(e) < w(t);
                }, m.$g = function(t, e, n) {
                    return O.u(t) ? this[e] : this.set(n, t);
                }, m.unix = function() {
                    return Math.floor(this.valueOf() / 1e3);
                }, m.valueOf = function() {
                    return this.$d.getTime();
                }, m.startOf = function(t, e) {
                    var n = this, r = !!O.u(e) || e, h = O.p(t), $ = function(t, e) {
                        var i = O.w(n.$u ? Date.UTC(n.$y, e, t) : new Date(n.$y, e, t), n);
                        return r ? i : i.endOf(a);
                    }, l = function(t, e) {
                        return O.w(n.toDate()[t].apply(n.toDate("s"), (r ? [ 0, 0, 0, 0 ] : [ 23, 59, 59, 999 ]).slice(e)), n);
                    }, y = this.$W, M = this.$M, m = this.$D, g = "set" + (this.$u ? "UTC" : "");
                    switch (h) {
                      case c:
                        return r ? $(1, 0) : $(31, 11);

                      case f:
                        return r ? $(1, M) : $(0, M + 1);

                      case o:
                        var v = this.$locale().weekStart || 0, D = (y < v ? y + 7 : y) - v;
                        return $(r ? m - D : m + (6 - D), M);

                      case a:
                      case d:
                        return l(g + "Hours", 0);

                      case u:
                        return l(g + "Minutes", 1);

                      case s:
                        return l(g + "Seconds", 2);

                      case i:
                        return l(g + "Milliseconds", 3);

                      default:
                        return this.clone();
                    }
                }, m.endOf = function(t) {
                    return this.startOf(t, !1);
                }, m.$set = function(t, e) {
                    var n, o = O.p(t), h = "set" + (this.$u ? "UTC" : ""), $ = (n = {}, n[a] = h + "Date", 
                    n[d] = h + "Date", n[f] = h + "Month", n[c] = h + "FullYear", n[u] = h + "Hours", 
                    n[s] = h + "Minutes", n[i] = h + "Seconds", n[r] = h + "Milliseconds", n)[o], l = o === a ? this.$D + (e - this.$W) : e;
                    if (o === f || o === c) {
                        var y = this.clone().set(d, 1);
                        y.$d[$](l), y.init(), this.$d = y.set(d, Math.min(this.$D, y.daysInMonth())).$d;
                    } else $ && this.$d[$](l);
                    return this.init(), this;
                }, m.set = function(t, e) {
                    return this.clone().$set(t, e);
                }, m.get = function(t) {
                    return this[O.p(t)]();
                }, m.add = function(r, h) {
                    var d, $ = this;
                    r = Number(r);
                    var l = O.p(h), y = function(t) {
                        var e = w($);
                        return O.w(e.date(e.date() + Math.round(t * r)), $);
                    };
                    if (l === f) return this.set(f, this.$M + r);
                    if (l === c) return this.set(c, this.$y + r);
                    if (l === a) return y(1);
                    if (l === o) return y(7);
                    var M = (d = {}, d[s] = e, d[u] = n, d[i] = t, d)[l] || 1, m = this.$d.getTime() + r * M;
                    return O.w(m, this);
                }, m.subtract = function(t, e) {
                    return this.add(-1 * t, e);
                }, m.format = function(t) {
                    var e = this, n = this.$locale();
                    if (!this.isValid()) return n.invalidDate || $;
                    var r = t || "YYYY-MM-DDTHH:mm:ssZ", i = O.z(this), s = this.$H, u = this.$m, a = this.$M, o = n.weekdays, f = n.months, h = function(t, n, i, s) {
                        return t && (t[n] || t(e, r)) || i[n].slice(0, s);
                    }, c = function(t) {
                        return O.s(s % 12 || 12, t, "0");
                    }, d = n.meridiem || function(t, e, n) {
                        var r = t < 12 ? "AM" : "PM";
                        return n ? r.toLowerCase() : r;
                    }, l = {
                        YY: String(this.$y).slice(-2),
                        YYYY: this.$y,
                        M: a + 1,
                        MM: O.s(a + 1, 2, "0"),
                        MMM: h(n.monthsShort, a, f, 3),
                        MMMM: h(f, a),
                        D: this.$D,
                        DD: O.s(this.$D, 2, "0"),
                        d: String(this.$W),
                        dd: h(n.weekdaysMin, this.$W, o, 2),
                        ddd: h(n.weekdaysShort, this.$W, o, 3),
                        dddd: o[this.$W],
                        H: String(s),
                        HH: O.s(s, 2, "0"),
                        h: c(1),
                        hh: c(2),
                        a: d(s, u, !0),
                        A: d(s, u, !1),
                        m: String(u),
                        mm: O.s(u, 2, "0"),
                        s: String(this.$s),
                        ss: O.s(this.$s, 2, "0"),
                        SSS: O.s(this.$ms, 3, "0"),
                        Z: i
                    };
                    return r.replace(y, (function(t, e) {
                        return e || l[t] || i.replace(":", "");
                    }));
                }, m.utcOffset = function() {
                    return 15 * -Math.round(this.$d.getTimezoneOffset() / 15);
                }, m.diff = function(r, d, $) {
                    var l, y = O.p(d), M = w(r), m = (M.utcOffset() - this.utcOffset()) * e, g = this - M, v = O.m(this, M);
                    return v = (l = {}, l[c] = v / 12, l[f] = v, l[h] = v / 3, l[o] = (g - m) / 6048e5, 
                    l[a] = (g - m) / 864e5, l[u] = g / n, l[s] = g / e, l[i] = g / t, l)[y] || g, $ ? v : O.a(v);
                }, m.daysInMonth = function() {
                    return this.endOf(f).$D;
                }, m.$locale = function() {
                    return D[this.$L];
                }, m.locale = function(t, e) {
                    if (!t) return this.$L;
                    var n = this.clone(), r = S(t, e, !0);
                    return r && (n.$L = r), n;
                }, m.clone = function() {
                    return O.w(this.$d, this);
                }, m.toDate = function() {
                    return new Date(this.valueOf());
                }, m.toJSON = function() {
                    return this.isValid() ? this.toISOString() : null;
                }, m.toISOString = function() {
                    return this.$d.toISOString();
                }, m.toString = function() {
                    return this.$d.toUTCString();
                }, M;
            }(), T = _.prototype;
            return w.prototype = T, [ [ "$ms", r ], [ "$s", i ], [ "$m", s ], [ "$H", u ], [ "$W", a ], [ "$M", f ], [ "$y", c ], [ "$D", d ] ].forEach((function(t) {
                T[t[1]] = function(e) {
                    return this.$g(e, t[0], t[1]);
                };
            })), w.extend = function(t, e) {
                return t.$i || (t(e, _, w), t.$i = !0), w;
            }, w.locale = S, w.isDayjs = p, w.unix = function(t) {
                return w(1e3 * t);
            }, w.en = D[v], w.Ls = D, w.p = {}, w;
        }));
    },
    "./node_modules/toggle-selection/index.js": module => {
        module.exports = function() {
            var selection = document.getSelection();
            if (!selection.rangeCount) return function() {};
            var active = document.activeElement;
            var ranges = [];
            for (var i = 0; i < selection.rangeCount; i++) ranges.push(selection.getRangeAt(i));
            switch (active.tagName.toUpperCase()) {
              case "INPUT":
              case "TEXTAREA":
                active.blur();
                break;

              default:
                active = null;
            }
            selection.removeAllRanges();
            return function() {
                "Caret" === selection.type && selection.removeAllRanges();
                if (!selection.rangeCount) ranges.forEach((function(range) {
                    selection.addRange(range);
                }));
                active && active.focus();
            };
        };
    },
    "./src/assets/activity/main.js": (__unused_webpack_module, __unused_webpack___webpack_exports__, __webpack_require__) => {
        "use strict";
        __webpack_require__("./node_modules/core-js/modules/es.string.trim.js");
        __webpack_require__("./node_modules/core-js/modules/es.array.find.js");
        __webpack_require__("./node_modules/core-js/modules/es.date.now.js");
        __webpack_require__("./node_modules/core-js/modules/es.date.to-string.js");
        __webpack_require__("./node_modules/core-js/modules/web.timers.js");
        __webpack_require__("./node_modules/core-js/modules/es.array.is-array.js");
        __webpack_require__("./node_modules/core-js/modules/es.symbol.js");
        __webpack_require__("./node_modules/core-js/modules/es.symbol.description.js");
        __webpack_require__("./node_modules/core-js/modules/es.object.to-string.js");
        __webpack_require__("./node_modules/core-js/modules/es.symbol.iterator.js");
        __webpack_require__("./node_modules/core-js/modules/es.array.iterator.js");
        __webpack_require__("./node_modules/core-js/modules/es.string.iterator.js");
        __webpack_require__("./node_modules/core-js/modules/web.dom-collections.iterator.js");
        __webpack_require__("./node_modules/core-js/modules/es.array.slice.js");
        __webpack_require__("./node_modules/core-js/modules/es.function.name.js");
        __webpack_require__("./node_modules/core-js/modules/es.array.from.js");
        var dayjs_min = __webpack_require__("./node_modules/dayjs/dayjs.min.js");
        var dayjs_min_default = __webpack_require__.n(dayjs_min);
        var copy_to_clipboard = __webpack_require__("./node_modules/copy-to-clipboard/index.js");
        var copy_to_clipboard_default = __webpack_require__.n(copy_to_clipboard);
        var CurrencyConvert = __webpack_require__("../shared/browser/utils/newCurrency/CurrencyConvert.js");
        var state_selector = __webpack_require__("../shared/browser/utils/state-selector.js");
        var i18n = __webpack_require__("../shared/browser/utils/i18n.js");
        var components_toast = __webpack_require__("../shared/browser/components/hbs/shared/components/toast/index.js");
        __webpack_require__("./node_modules/core-js/modules/es.array.find-index.js");
        __webpack_require__("./node_modules/core-js/modules/es.array.reduce.js");
        var request = __webpack_require__("../shared/browser/utils/request.js");
        var getPromotionReminder = __webpack_require__("../shared/browser/components/hbs/cartSalesPromotion/js/content/reminder/getPromotionReminder.js");
        var syntax_patch = __webpack_require__("../shared/browser/utils/syntax-patch.js");
        var template = __webpack_require__("../shared/browser/utils/template.js");
        __webpack_require__("./node_modules/core-js/modules/es.array.concat.js");
        __webpack_require__("./node_modules/core-js/modules/es.regexp.exec.js");
        __webpack_require__("./node_modules/core-js/modules/es.string.split.js");
        __webpack_require__("./node_modules/core-js/modules/es.array.map.js");
        __webpack_require__("./node_modules/core-js/modules/es.array.join.js");
        __webpack_require__("./node_modules/core-js/modules/es.array.for-each.js");
        __webpack_require__("./node_modules/core-js/modules/web.dom-collections.for-each.js");
        __webpack_require__("./node_modules/core-js/modules/es.object.define-property.js");
        function _toConsumableArray(arr) {
            return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
        }
        function _nonIterableSpread() {
            throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        function _unsupportedIterableToArray(o, minLen) {
            if (!o) return;
            if ("string" === typeof o) return _arrayLikeToArray(o, minLen);
            var n = Object.prototype.toString.call(o).slice(8, -1);
            if ("Object" === n && o.constructor) n = o.constructor.name;
            if ("Map" === n || "Set" === n) return Array.from(o);
            if ("Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
        }
        function _iterableToArray(iter) {
            if ("undefined" !== typeof Symbol && null != iter[Symbol.iterator] || null != iter["@@iterator"]) return Array.from(iter);
        }
        function _arrayWithoutHoles(arr) {
            if (Array.isArray(arr)) return _arrayLikeToArray(arr);
        }
        function _arrayLikeToArray(arr, len) {
            if (null == len || len > arr.length) len = arr.length;
            for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
            return arr2;
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
        }
        function _defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }
        function _createClass(Constructor, protoProps, staticProps) {
            if (protoProps) _defineProperties(Constructor.prototype, protoProps);
            if (staticProps) _defineProperties(Constructor, staticProps);
            return Constructor;
        }
        function _defineProperty(obj, key, value) {
            if (key in obj) Object.defineProperty(obj, key, {
                value,
                enumerable: true,
                configurable: true,
                writable: true
            }); else obj[key] = value;
            return obj;
        }
        function getPathByString(pathString) {
            var path = [];
            if (pathString instanceof Array) path = pathString.reduce((function(o, p) {
                if ("string" === typeof p) return o.concat(p.split(/\[?\.|\]?\.|\[/));
                return o;
            }), []); else if ("string" === typeof pathString) path = pathString.split(/\[?\.|\]?\.|\[/);
            return path;
        }
        function getJsonByPath(path, obj) {
            if (obj instanceof Object) {
                var key = path.shift();
                if (path.length) return getJsonByPath(path, obj[key]);
                return obj[key];
            }
            return obj;
        }
        var Render = function() {
            function Render(dependencies) {
                var _this = this;
                _classCallCheck(this, Render);
                _defineProperty(this, "dependencies", []);
                this.dependencies = dependencies.map((function(_ref, index) {
                    var defualtValue = _ref.defualtValue, path = _ref.path, selector = _ref.selector, _action = _ref.action;
                    var selectorString = getPathByString(selector).join(" ");
                    return {
                        value: void 0,
                        path: getPathByString(path),
                        selector: selectorString,
                        node: document.querySelector(selectorString),
                        action: function() {
                            var that = _this.dependencies[index];
                            if (!that.node || !that.node.isConnected) that.node = document.querySelector(selectorString);
                            if (that.node) if (_action) try {
                                var _that$value;
                                _action(that.node, null !== (_that$value = that.value) && void 0 !== _that$value ? _that$value : defualtValue);
                            } catch (err) {
                                throw err;
                            } else {
                                var _that$value2;
                                that.node.innerHTML = null !== (_that$value2 = that.value) && void 0 !== _that$value2 ? _that$value2 : defualtValue;
                            }
                        }
                    };
                }));
            }
            _createClass(Render, [ {
                key: "run",
                value: function(obj) {
                    this.dependencies.forEach((function(dependency) {
                        var path = dependency.path, value = dependency.value, action = dependency.action;
                        var newValue = getJsonByPath(_toConsumableArray(path), obj);
                        if (value !== newValue) {
                            dependency.value = newValue;
                            action();
                        }
                    }));
                }
            }, {
                key: "force",
                value: function() {
                    this.dependencies.forEach((function(_ref2) {
                        var action = _ref2.action;
                        action();
                    }));
                }
            } ]);
            return Render;
        }();
        const simpleRender = Render;
        var CartInfoKey = "cartInfo";
        var GIFT_PLUGIN_TYPE = 7;
        var init = function() {
            var cartNode = __SL_$__("#activity-cart");
            if (!cartNode.length) return;
            var activity = state_selector.SL_State.get("activity");
            function getDefualtPromotion() {
                var benefitType = activity.benefitType, benefitConditions = activity.benefitConditions, cartBannerText = activity.cartBannerText;
                var condition = benefitConditions[0];
                if (condition) {
                    var benefitEvent = condition.benefitEvent, benefit = condition.benefit;
                    return {
                        benefitType,
                        promotionBenefitList: [ {
                            type: condition.benefitEvent.type,
                            hit: false,
                            benefit: 1 === benefitEvent.type ? benefit.discount : benefit.benefitAmount,
                            amount: benefitEvent.minThreshold,
                            benefitCount: benefit.benefitCount,
                            extMap: {
                                bannerText: (0, syntax_patch.get)(cartBannerText, "hitNone")
                            }
                        } ]
                    };
                }
            }
            var render = new simpleRender([ {
                path: "activeItems",
                selector: "#activity-cartTotal",
                action: function(node, activeItems) {
                    var activeItem = null === activeItems || void 0 === activeItems ? void 0 : activeItems.find((function(_ref) {
                        var promotion = _ref.promotion;
                        return (null === promotion || void 0 === promotion ? void 0 : promotion.activitySeq) === (null === activity || void 0 === activity ? void 0 : activity.activitySeq);
                    }));
                    var hasGiftPlugin = (null === activeItems || void 0 === activeItems ? void 0 : activeItems.findIndex((function(_ref2) {
                        var promotion = _ref2.promotion;
                        return (null === promotion || void 0 === promotion ? void 0 : promotion.benefitType) === GIFT_PLUGIN_TYPE;
                    }))) > -1;
                    if (!hasGiftPlugin) node.innerHTML = (0, CurrencyConvert.convertFormat)((null === activeItem || void 0 === activeItem ? void 0 : activeItem.totalAmount) || 0);
                }
            }, {
                path: "activeItems",
                selector: "#activity-cartNum",
                action: function(node, activeItems) {
                    var _activeItem$itemList;
                    var activeItem = null === activeItems || void 0 === activeItems ? void 0 : activeItems.find((function(_ref3) {
                        var promotion = _ref3.promotion;
                        return (null === promotion || void 0 === promotion ? void 0 : promotion.activitySeq) === (null === activity || void 0 === activity ? void 0 : activity.activitySeq);
                    }));
                    var hasGiftPlugin = (null === activeItems || void 0 === activeItems ? void 0 : activeItems.findIndex((function(_ref4) {
                        var promotion = _ref4.promotion;
                        return (null === promotion || void 0 === promotion ? void 0 : promotion.benefitType) === GIFT_PLUGIN_TYPE;
                    }))) > -1;
                    if (hasGiftPlugin) return;
                    if (null !== activeItem && void 0 !== activeItem && null !== (_activeItem$itemList = activeItem.itemList) && void 0 !== _activeItem$itemList && _activeItem$itemList.length) node.innerHTML = activeItem.itemList.reduce((function(p, c) {
                        return p + c.num;
                    }), 0); else node.innerHTML = 0;
                }
            }, {
                path: "activeItems",
                selector: "#activity-salesTip",
                action: function(node, activeItems) {
                    var activeItem = null === activeItems || void 0 === activeItems ? void 0 : activeItems.find((function(_ref5) {
                        var promotion = _ref5.promotion;
                        return (null === promotion || void 0 === promotion ? void 0 : promotion.activitySeq) === (null === activity || void 0 === activity ? void 0 : activity.activitySeq);
                    }));
                    var hasGiftPlugin = (null === activeItems || void 0 === activeItems ? void 0 : activeItems.findIndex((function(_ref6) {
                        var promotion = _ref6.promotion;
                        return (null === promotion || void 0 === promotion ? void 0 : promotion.benefitType) === GIFT_PLUGIN_TYPE;
                    }))) > -1;
                    if (!hasGiftPlugin) {
                        var promotion = (0, syntax_patch.get)(activeItem, "promotion") || getDefualtPromotion();
                        var extMap = promotion.promotionBenefitList[0].extMap;
                        if (extMap && extMap.bannerText) {
                            var config = (0, getPromotionReminder["default"])(promotion);
                            node.innerHTML = (0, template["default"])(extMap.bannerText, config.params, {
                                prefix: "{"
                            });
                            __SL_$__(node).parents().removeClass("d-none");
                        }
                    }
                }
            }, {
                path: "activeItems",
                selector: "#activity-cart",
                action: function(node) {
                    __SL_$__(node).removeClass("d-none");
                    __SL_$__(document.body).css({
                        paddingBottom: "104px"
                    });
                }
            } ]);
            var cartInfo = state_selector.SL_State.get(CartInfoKey);
            if (!cartInfo) (0, request["default"])({
                url: "carts/cart",
                method: "GET"
            }).then((function(res) {
                if (res.data) state_selector.SL_State.set(CartInfoKey, res.data);
            })); else {
                render.run(cartInfo);
                __SL_$__(document.body).css({
                    paddingBottom: "104px"
                });
            }
            state_selector.SL_State.on(CartInfoKey, (function(value) {
                render.run(value);
            }));
        };
        const cart = init;
        var countdown = __webpack_require__("./src/assets/commons/utils/countdown.js");
        __webpack_require__("./src/assets/product/commons/js/product-item.js");
        var common = __webpack_require__("../shared/browser/components/hbs/shared/components/modal/common.js");
        var event_bus = __webpack_require__("../shared/browser/utils/event-bus.js");
        var helper = __webpack_require__("./src/assets/commons/utils/helper.js");
        var effectFc = __webpack_require__("./src/assets/commons/utils/effectFc.js");
        var isMobile = __webpack_require__("./src/assets/commons/utils/isMobile.js");
        function handleTagsShow() {
            var $tags = __SL_$__(".sales__promotion-tags-tag-hook");
            if (!$tags[0]) return;
            if ((0, isMobile["default"])()) $tags.css("display", "none").eq(0).css("display", "inline-block"); else $tags.css("display", "inline-block");
        }
        const promotion_tags = (0, effectFc["default"])((function(parent) {
            var useEffect = this.useEffect;
            var container = __SL_$__(parent || document.body);
            var promotionTags = container.find(".sales__promotionTags");
            if (!promotionTags.length) return;
            handleTagsShow();
            if (promotionTags.hasClass("pdp")) {
                var lock = false;
                var timer = null;
                useEffect(__SL_$__(document.body), "on,off", "click", (function(e) {
                    var target = e.target;
                    var containerDom = promotionTags.get(0);
                    if (__SL_$__.contains(containerDom, target) || containerDom === target) return;
                    if (promotionTags.hasClass("active")) {
                        promotionTags.removeClass("active");
                        if ("mobile" === helper["default"].getPlatform() && lock) {
                            (0, common.enablePageScroll)();
                            lock = false;
                        }
                    }
                }));
                useEffect(promotionTags, "on,off", "click", (function() {
                    promotionTags.toggleClass("active");
                    if ("mobile" === helper["default"].getPlatform()) {
                        if (promotionTags.hasClass("active") && !lock) {
                            (0, common.disablePageScroll)();
                            lock = true;
                        }
                        if (!promotionTags.hasClass("active") && lock) {
                            lock = false;
                            (0, common.enablePageScroll)();
                        }
                    }
                    if (!(0, isMobile["default"])()) if (timer) clearTimeout(timer);
                }));
                useEffect(promotionTags.find(".sales__promotionTags-items-close-hook"), "on,off", "click", (function(e) {
                    e.stopPropagation();
                    promotionTags.removeClass("active");
                    lock = false;
                    (0, common.enablePageScroll)();
                }));
                useEffect(promotionTags.find(".sales__promotionTags-items"), "on,off", "click", (function(e) {
                    e.stopPropagation();
                }));
                useEffect(event_bus.SL_EventBus, "on,off", "global:platformChange", (function() {
                    if ((0, isMobile["default"])() && promotionTags.hasClass("active") && !lock) {
                        (0, common.disablePageScroll)();
                        lock = true;
                    } else if (lock) {
                        (0, common.enablePageScroll)();
                        lock = false;
                    }
                    handleTagsShow();
                }));
            } else useEffect(promotionTags.find(".sales__promotionTags-switchIcon"), "on,off", "click", (function() {
                promotionTags.toggleClass("active");
            }));
            window.SL_EventBus.on("global:currency:format", (function() {
                var amountNode = promotionTags.find("[data-amount]");
                amountNode.each((function() {
                    __SL_$__(this).text((0, CurrencyConvert.convertFormat)(__SL_$__(this).data("amount")));
                }));
            }));
        }));
        var components_tooltip = __webpack_require__("../shared/browser/components/hbs/shared/components/tooltip/index.js");
        var productTabs_CartInfoKey = "cartInfo";
        var TooltipSelector = ".activity__productTabs .tab2";
        const productTabs = function() {
            var activity = state_selector.SL_State.get("activity");
            var request = state_selector.SL_State.get("request");
            if (12 === (null === activity || void 0 === activity ? void 0 : activity.benefitType) && 0 === activity.promotionSubType) {
                var tooltip;
                if ("2" !== request.uri.query.query_product_type) {
                    var colorTooltip = __SL_$__(TooltipSelector).data("color_tooltip");
                    tooltip = new components_tooltip["default"]({
                        selector: TooltipSelector,
                        title: '<span class="activity__productTabs-tooltip" >'.concat((0, i18n.t)("sales.general.product_tabs_benefit_unlocked_tip"), '<i><svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">\n          <path fill-rule="evenodd" clip-rule="evenodd" d="M14.4395 15.5607L4.43945 5.56066L5.50011 4.5L15.5001 14.5L14.4395 15.5607Z" fill="currentColor"/>\n          <path fill-rule="evenodd" clip-rule="evenodd" d="M5.56055 15.5607L15.5605 5.56066L14.4999 4.5L4.49989 14.5L5.56055 15.5607Z" fill="currentColor"/>\n          </svg></i></span>'),
                        trigger: "none",
                        color: colorTooltip || "#D22D24",
                        zIndex: 98
                    });
                }
                var resetTooltip = function(init) {
                    var _tooltip, _tooltip$destroy, _tooltip2, _tooltip2$init;
                    if (!tooltip) return;
                    null === (_tooltip = tooltip) || void 0 === _tooltip ? void 0 : null === (_tooltip$destroy = _tooltip.destroy) || void 0 === _tooltip$destroy ? void 0 : _tooltip$destroy.call(_tooltip);
                    if (false === init) return;
                    null === (_tooltip2 = tooltip) || void 0 === _tooltip2 ? void 0 : null === (_tooltip2$init = _tooltip2.init) || void 0 === _tooltip2$init ? void 0 : _tooltip2$init.call(_tooltip2);
                    tooltip.show();
                    var $tooltip = tooltip.$tooltips[tooltip.$tooltips.length - 1];
                    if (tooltip) tooltip.setPosition($tooltip, tooltip.$target);
                };
                var updateCartInfo = function(cartInfo) {
                    var _cartInfo$activeItems, _cartInfo$activeItems2, _cartInfo$activeItems3, _promotion$promotionB, _promotion$promotionB2, _promotion$promotionB3, _promotion$promotionB4, _promotion$promotionB5;
                    var promotion = null === (_cartInfo$activeItems = cartInfo.activeItems) || void 0 === _cartInfo$activeItems ? void 0 : null === (_cartInfo$activeItems2 = _cartInfo$activeItems.find) || void 0 === _cartInfo$activeItems2 ? void 0 : null === (_cartInfo$activeItems3 = _cartInfo$activeItems2.call(_cartInfo$activeItems, (function(item) {
                        var _item$promotion;
                        return (null === item || void 0 === item ? void 0 : null === (_item$promotion = item.promotion) || void 0 === _item$promotion ? void 0 : _item$promotion.activitySeq) === activity.activitySeq;
                    }))) || void 0 === _cartInfo$activeItems3 ? void 0 : _cartInfo$activeItems3.promotion;
                    if (null !== promotion && void 0 !== promotion && null !== (_promotion$promotionB = promotion.promotionBenefitList) && void 0 !== _promotion$promotionB && null !== (_promotion$promotionB2 = _promotion$promotionB[0]) && void 0 !== _promotion$promotionB2 && _promotion$promotionB2.hit || "true" === (null === promotion || void 0 === promotion ? void 0 : null === (_promotion$promotionB3 = promotion.promotionBenefitList) || void 0 === _promotion$promotionB3 ? void 0 : null === (_promotion$promotionB4 = _promotion$promotionB3[0]) || void 0 === _promotion$promotionB4 ? void 0 : null === (_promotion$promotionB5 = _promotion$promotionB4.extMap) || void 0 === _promotion$promotionB5 ? void 0 : _promotion$promotionB5.meetThreshold)) {
                        var _promotion$promotionB6, _promotion$promotionB7;
                        __SL_$__(".activity__productTabs .tab2").addClass("unlocked");
                        if (!(null !== promotion && void 0 !== promotion && null !== (_promotion$promotionB6 = promotion.promotionBenefitList) && void 0 !== _promotion$promotionB6 && null !== (_promotion$promotionB7 = _promotion$promotionB6[0]) && void 0 !== _promotion$promotionB7 && _promotion$promotionB7.hit)) resetTooltip(true); else resetTooltip(false);
                    } else {
                        __SL_$__(".activity__productTabs .tab2").removeClass("unlocked");
                        resetTooltip(false);
                    }
                };
                __SL_$__(document.body).on("click", ".activity__productTabs-tooltip i", (function() {
                    resetTooltip(false);
                }));
                var cartInfo = state_selector.SL_State.get(productTabs_CartInfoKey);
                updateCartInfo(cartInfo);
                state_selector.SL_State.on(productTabs_CartInfoKey, updateCartInfo);
            }
        };
        __webpack_require__("./node_modules/core-js/modules/es.string.replace.js");
        __webpack_require__("./node_modules/core-js/modules/es.string.search.js");
        var querystring = __webpack_require__("./node_modules/querystring/index.js");
        var initSortSelector = function() {
            __SL_$__(".sales__activity-sort-selector-hook").on("change", (function() {
                var query = querystring.parse(decodeURIComponent(window.location.search).replace(/^\?/, ""));
                var sortBy = __SL_$__(this).val();
                if ("1" === sortBy) delete query.sort_by; else query.sort_by = sortBy;
                var queryStr = querystring.stringify(query);
                window.location.href = "".concat(window.location.origin).concat(window.location.pathname).concat(queryStr ? "?".concat(queryStr) : "");
            }));
        };
        const sort_selector = initSortSelector;
        function _slicedToArray(arr, i) {
            return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || script_unsupportedIterableToArray(arr, i) || _nonIterableRest();
        }
        function _nonIterableRest() {
            throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        function script_unsupportedIterableToArray(o, minLen) {
            if (!o) return;
            if ("string" === typeof o) return script_arrayLikeToArray(o, minLen);
            var n = Object.prototype.toString.call(o).slice(8, -1);
            if ("Object" === n && o.constructor) n = o.constructor.name;
            if ("Map" === n || "Set" === n) return Array.from(o);
            if ("Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return script_arrayLikeToArray(o, minLen);
        }
        function script_arrayLikeToArray(arr, len) {
            if (null == len || len > arr.length) len = arr.length;
            for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
            return arr2;
        }
        function _iterableToArrayLimit(arr, i) {
            var _i = arr && ("undefined" !== typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]);
            if (null == _i) return;
            var _arr = [];
            var _n = true;
            var _d = false;
            var _s, _e;
            try {
                for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);
                    if (i && _arr.length === i) break;
                }
            } catch (err) {
                _d = true;
                _e = err;
            } finally {
                try {
                    if (!_n && null != _i["return"]) _i["return"]();
                } finally {
                    if (_d) throw _e;
                }
            }
            return _arr;
        }
        function _arrayWithHoles(arr) {
            if (Array.isArray(arr)) return arr;
        }
        var EVENT_ID = "60080000";
        function hdReport(options) {
            var _window$HdSdk, _window$HdSdk$shopTra, _window$HdSdk$shopTra2;
            null === (_window$HdSdk = window.HdSdk) || void 0 === _window$HdSdk ? void 0 : null === (_window$HdSdk$shopTra = _window$HdSdk.shopTracker) || void 0 === _window$HdSdk$shopTra ? void 0 : null === (_window$HdSdk$shopTra2 = _window$HdSdk$shopTra.report) || void 0 === _window$HdSdk$shopTra2 ? void 0 : _window$HdSdk$shopTra2.call(_window$HdSdk$shopTra, EVENT_ID, options);
        }
        function promotionTimeInit() {
            var _SL_$__;
            var node = null === (_SL_$__ = __SL_$__(".activity__limit-time-text")) || void 0 === _SL_$__ ? void 0 : _SL_$__[0];
            if (!node) return;
            var activity = state_selector.SL_State.get("activity");
            if (1 === (null === activity || void 0 === activity ? void 0 : activity.promotionSubType)) {
                var _SL_$__$html;
                var startTimeText = activity.startTime && dayjs_min_default()(activity.startTime).format("YYYY-MM-DD HH:mm");
                var endTimeText = activity.endTime && dayjs_min_default()(activity.endTime).format("YYYY-MM-DD HH:mm");
                var timeText = startTimeText + (endTimeText ? " - ".concat(endTimeText) : "");
                if ((null === (_SL_$__$html = __SL_$__(node).html()) || void 0 === _SL_$__$html ? void 0 : _SL_$__$html.trim()) !== timeText) __SL_$__(node).html(timeText);
            }
        }
        function countdownInit() {
            var _salesEnvCustomInfo$l;
            var activity = state_selector.SL_State.get("activity");
            var _ref = null !== activity && void 0 !== activity ? activity : {}, salesEnvCustomInfo = _ref.salesEnvCustomInfo, endTime = _ref.endTime, discountCodeList = _ref.discountCodeList;
            var _ref2 = null !== (_salesEnvCustomInfo$l = null === salesEnvCustomInfo || void 0 === salesEnvCustomInfo ? void 0 : salesEnvCustomInfo.landingPageConfig) && void 0 !== _salesEnvCustomInfo$l ? _salesEnvCustomInfo$l : {}, countDownUnit = _ref2.countDownUnit, showCountDown = _ref2.showCountDown, bannerActivated = _ref2.bannerActivated;
            var countDownCon = __SL_$__(".countdown-cells");
            var dayEle = countDownCon.find(".day");
            var daySplitEle = countDownCon.find(".daySplit");
            var hourEle = countDownCon.find(".hour");
            var minuteEle = countDownCon.find(".minute");
            var secondEle = countDownCon.find(".second");
            var copyEle = __SL_$__(".coupon_copy");
            var toast = new components_toast["default"];
            copyEle.on("click", (function() {
                copy_to_clipboard_default()(null === discountCodeList || void 0 === discountCodeList ? void 0 : discountCodeList[0]);
                toast.open((0, i18n.t)("sales.general.coupon_code_copied"));
            }));
            var now = Date.now();
            if (hourEle && minuteEle && secondEle && showCountDown && bannerActivated && endTime && now < endTime) (0, 
            countdown["default"])(endTime, (function(_ref3, interval) {
                var _ref4 = _slicedToArray(_ref3, 4), d = _ref4[0], h = _ref4[1], m = _ref4[2], s = _ref4[3];
                null === dayEle || void 0 === dayEle ? void 0 : dayEle.html(d);
                null === hourEle || void 0 === hourEle ? void 0 : hourEle.html(h);
                null === minuteEle || void 0 === minuteEle ? void 0 : minuteEle.html(m);
                null === secondEle || void 0 === secondEle ? void 0 : secondEle.html(s);
                if ("0" === d) {
                    null === dayEle || void 0 === dayEle ? void 0 : dayEle.hide();
                    null === daySplitEle || void 0 === daySplitEle ? void 0 : daySplitEle.hide();
                }
                if (interval <= 0) null === countDownCon || void 0 === countDownCon ? void 0 : countDownCon.hide();
            }), {
                id: "activityCount",
                hasDay: "mode1" === countDownUnit
            });
        }
        __SL_$__(document).ready((function() {
            var _window$HdSdk2, _window$HdSdk2$shopTr;
            cart();
            countdownInit();
            promotionTimeInit();
            promotion_tags();
            productTabs();
            sort_selector();
            window.SL_EventBus.on("global:currency:format", (function() {
                var amountNode = __SL_$__("[data-amount]");
                amountNode.each((function() {
                    var amount = __SL_$__(this).data("amount");
                    if (amount) __SL_$__(this).text((0, CurrencyConvert.convertFormat)(amount));
                }));
            }));
            hdReport({
                event_name: "view",
                page: "addon"
            });
            null === (_window$HdSdk2 = window.HdSdk) || void 0 === _window$HdSdk2 ? void 0 : null === (_window$HdSdk2$shopTr = _window$HdSdk2.shopTracker) || void 0 === _window$HdSdk2$shopTr ? void 0 : _window$HdSdk2$shopTr.collect({
                page: 115,
                module: -999,
                component: -999,
                action_type: 101,
                event_id: 1020
            });
        }));
        (function() {
            window.setInterval((function() {
                var _window$HdSdk3, _window$HdSdk3$shopTr;
                null === (_window$HdSdk3 = window.HdSdk) || void 0 === _window$HdSdk3 ? void 0 : null === (_window$HdSdk3$shopTr = _window$HdSdk3.shopTracker) || void 0 === _window$HdSdk3$shopTr ? void 0 : _window$HdSdk3$shopTr.collect({
                    page: 115,
                    module: -999,
                    component: -999,
                    action_type: 106,
                    event_id: 1021
                });
            }), 1e3);
        })();
    },
    "../shared/browser/components/hbs/cartSalesPromotion/js/content/reminder/getPromotionReminder.js": (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
        "use strict";
        __webpack_require__.d(__webpack_exports__, {
            default: () => __WEBPACK_DEFAULT_EXPORT__
        });
        __webpack_require__("../shared/browser/utils/i18n.js");
        var _yy_sl_theme_shared_utils_newCurrency_CurrencyConvert__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../shared/browser/utils/newCurrency/CurrencyConvert.js");
        var _sales_shoppingPromotionReminder__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../shared/browser/components/hbs/sales/shoppingPromotionReminder/index.js");
        var getPromotionReminder = (0, _sales_shoppingPromotionReminder__WEBPACK_IMPORTED_MODULE_2__["default"])(_yy_sl_theme_shared_utils_newCurrency_CurrencyConvert__WEBPACK_IMPORTED_MODULE_1__.convertFormat);
        const __WEBPACK_DEFAULT_EXPORT__ = getPromotionReminder;
    },
    "../shared/browser/components/hbs/sales/shoppingPromotionReminder/index.js": (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
        "use strict";
        __webpack_require__.d(__webpack_exports__, {
            default: () => __WEBPACK_DEFAULT_EXPORT__
        });
        __webpack_require__("../shared/browser/node_modules/core-js/modules/es.array.concat.js");
        __webpack_require__("../shared/browser/node_modules/core-js/modules/es.number.constructor.js");
        __webpack_require__("../shared/browser/node_modules/core-js/modules/es.object.define-property.js");
        __webpack_require__("../shared/browser/node_modules/core-js/modules/es.object.keys.js");
        __webpack_require__("../shared/browser/node_modules/core-js/modules/es.symbol.js");
        __webpack_require__("../shared/browser/node_modules/core-js/modules/es.array.filter.js");
        __webpack_require__("../shared/browser/node_modules/core-js/modules/es.object.get-own-property-descriptor.js");
        __webpack_require__("../shared/browser/node_modules/core-js/modules/es.array.for-each.js");
        __webpack_require__("../shared/browser/node_modules/core-js/modules/web.dom-collections.for-each.js");
        __webpack_require__("../shared/browser/node_modules/core-js/modules/es.object.get-own-property-descriptors.js");
        __webpack_require__("../shared/browser/node_modules/core-js/modules/es.object.define-properties.js");
        var _utils_syntax_patch__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__("../shared/browser/utils/syntax-patch.js");
        function ownKeys(object, enumerableOnly) {
            var keys = Object.keys(object);
            if (Object.getOwnPropertySymbols) {
                var symbols = Object.getOwnPropertySymbols(object);
                if (enumerableOnly) symbols = symbols.filter((function(sym) {
                    return Object.getOwnPropertyDescriptor(object, sym).enumerable;
                }));
                keys.push.apply(keys, symbols);
            }
            return keys;
        }
        function _objectSpread(target) {
            for (var i = 1; i < arguments.length; i++) {
                var source = null != arguments[i] ? arguments[i] : {};
                if (i % 2) ownKeys(Object(source), true).forEach((function(key) {
                    _defineProperty(target, key, source[key]);
                })); else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); else ownKeys(Object(source)).forEach((function(key) {
                    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
                }));
            }
            return target;
        }
        function _defineProperty(obj, key, value) {
            if (key in obj) Object.defineProperty(obj, key, {
                value,
                enumerable: true,
                configurable: true,
                writable: true
            }); else obj[key] = value;
            return obj;
        }
        var nc = _utils_syntax_patch__WEBPACK_IMPORTED_MODULE_11__.nullishCoalescingOperator;
        var BenefitTypeEnum = {
            PRICE: 1,
            DISCOUNT: 2,
            BUY_X_GET_Y: 12,
            NTH_PRICE: 11,
            FREELOWESTPRICE: 9,
            FREESHOPPING: 3,
            NTH_FIXED_PRICE: 14
        };
        var ThresholdTypeEnum = {
            PRICE: 0,
            NUMBER: 1
        };
        function defaultSafeString(str) {
            return str;
        }
        function getBenefitValue(benefitType, current) {
            var isNext = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : false;
            if (benefitType === BenefitTypeEnum.PRICE && !isNext) return (0, _utils_syntax_patch__WEBPACK_IMPORTED_MODULE_11__.get)(current, "amount");
            if (benefitType === BenefitTypeEnum.FREELOWESTPRICE) return (0, _utils_syntax_patch__WEBPACK_IMPORTED_MODULE_11__.get)(current, "benefitCount");
            if (benefitType === BenefitTypeEnum.NTH_FIXED_PRICE) {
                var extMap = (0, _utils_syntax_patch__WEBPACK_IMPORTED_MODULE_11__.get)(current, "extMap");
                return isNext ? (0, _utils_syntax_patch__WEBPACK_IMPORTED_MODULE_11__.get)(extMap, "nextFixedPrice") : (0, 
                _utils_syntax_patch__WEBPACK_IMPORTED_MODULE_11__.get)(extMap, "fixedPrice");
            }
            return (0, _utils_syntax_patch__WEBPACK_IMPORTED_MODULE_11__.get)(current, "benefit");
        }
        function shoppingPromotionReminder(currency) {
            var safeString = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : defaultSafeString;
            function setWrapper(value, warper) {
                return safeString(warper ? '<span class="notranslate '.concat(warper["class"], '" style="font-size: 14px; font-weight: bold;').concat(nc(warper.style, ""), '"> ').concat(value, " </span>") : value);
            }
            function formatThreshold(str, types) {
                var options = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
                if (void 0 === str) return "";
                var num = Number(str) || 0;
                var thresholdType = (0, _utils_syntax_patch__WEBPACK_IMPORTED_MODULE_11__.get)(types, "thresholdType");
                var benefitType = (0, _utils_syntax_patch__WEBPACK_IMPORTED_MODULE_11__.get)(types, "benefitType");
                if (benefitType === BenefitTypeEnum.BUY_X_GET_Y && num < 0) {
                    var minThreshold = (0, _utils_syntax_patch__WEBPACK_IMPORTED_MODULE_11__.get)(types, "minThreshold");
                    var distance = Math.abs(num) % minThreshold;
                    if (0 === distance) num = Number(minThreshold);
                    num = distance;
                }
                if (thresholdType === ThresholdTypeEnum.NUMBER) return num;
                if (thresholdType === ThresholdTypeEnum.PRICE) return '<span data-amount="'.concat(num, '">').concat(currency ? currency(num, options) : "", "</span>");
                return "";
            }
            function formatBenefitNum(str, types) {
                var options = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
                if (void 0 === str) return "";
                var num = Number(str) || 0;
                var benefitType = (0, _utils_syntax_patch__WEBPACK_IMPORTED_MODULE_11__.get)(types, "benefitType");
                if (benefitType === BenefitTypeEnum.DISCOUNT || benefitType === BenefitTypeEnum.BUY_X_GET_Y || benefitType === BenefitTypeEnum.NTH_PRICE) return "".concat(100 - num, "%");
                if (benefitType === BenefitTypeEnum.NTH_FIXED_PRICE || benefitType === BenefitTypeEnum.PRICE) return '<span data-amount="'.concat(num, '">').concat(currency ? currency(num, options) : "", "</span>");
                if (benefitType === BenefitTypeEnum.FREELOWESTPRICE) return num;
                return "";
            }
            function getShoppingReminderConfig(promotion) {
                var configs = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                var options = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
                var _configs$lineBreak = configs.lineBreak, lineBreak = void 0 === _configs$lineBreak ? false : _configs$lineBreak, warper = configs.warper;
                var _nc = nc(promotion, {}), benefitType = _nc.benefitType, _nc$promotionBenefitL = _nc.promotionBenefitList, promotionBenefitList = void 0 === _nc$promotionBenefitL ? [] : _nc$promotionBenefitL;
                if (promotionBenefitList.length) {
                    var current;
                    var next;
                    var step;
                    if (!(0, _utils_syntax_patch__WEBPACK_IMPORTED_MODULE_11__.get)(promotionBenefitList, [ 1 ])) if (promotionBenefitList[0].hit) {
                        step = 3;
                        current = (0, _utils_syntax_patch__WEBPACK_IMPORTED_MODULE_11__.get)(promotionBenefitList, [ 0 ]);
                    } else {
                        step = 1;
                        next = (0, _utils_syntax_patch__WEBPACK_IMPORTED_MODULE_11__.get)(promotionBenefitList, [ 0 ]);
                    } else if (promotionBenefitList[1].hit) {
                        step = 3;
                        current = (0, _utils_syntax_patch__WEBPACK_IMPORTED_MODULE_11__.get)(promotionBenefitList, [ 1 ]);
                    } else {
                        step = 2;
                        current = (0, _utils_syntax_patch__WEBPACK_IMPORTED_MODULE_11__.get)(promotionBenefitList, [ 0 ]);
                        next = (0, _utils_syntax_patch__WEBPACK_IMPORTED_MODULE_11__.get)(promotionBenefitList, [ 1 ]);
                    }
                    var _ref = current || next, _ref$extMap = _ref.extMap, extMap = void 0 === _ref$extMap ? {} : _ref$extMap, thresholdType = _ref.type;
                    var basePath = "sales.promotion.cart_reminder.b".concat(benefitType, "_t").concat(thresholdType, "_s").concat(step);
                    var completePath = basePath;
                    var meetThreshold = extMap.meetThreshold;
                    var extra = "";
                    if (benefitType === BenefitTypeEnum.BUY_X_GET_Y) if (1 === step && "true" === meetThreshold) if (0 === Number((0, 
                    _utils_syntax_patch__WEBPACK_IMPORTED_MODULE_11__.get)(next, "benefit"))) {
                        completePath = "".concat(basePath, "_achieve_free");
                        extra = "_achieve_free";
                    } else {
                        completePath = "".concat(basePath, "_achieve_normal");
                        extra = "_achieve_normal";
                    } else if (0 === Number((0, _utils_syntax_patch__WEBPACK_IMPORTED_MODULE_11__.get)(current, "benefit")) || 0 === Number((0, 
                    _utils_syntax_patch__WEBPACK_IMPORTED_MODULE_11__.get)(next, "benefit"))) {
                        completePath = "".concat(basePath, "_free");
                        extra = "_free";
                    } else {
                        completePath = "".concat(basePath, "_normal");
                        extra = "_normal";
                    }
                    if (benefitType === BenefitTypeEnum.NTH_PRICE) if (0 === Number((0, _utils_syntax_patch__WEBPACK_IMPORTED_MODULE_11__.get)(current, "benefit"))) {
                        completePath = "".concat(basePath, "_free");
                        extra = "_free";
                    } else if (0 === Number((0, _utils_syntax_patch__WEBPACK_IMPORTED_MODULE_11__.get)(next, "benefit"))) {
                        completePath = "".concat(basePath, "_next_free");
                        extra = "_next_free";
                    } else {
                        completePath = "".concat(basePath, "_normal");
                        extra = "_normal";
                    }
                    var prerequisiteShippingPriceRange = extMap.prerequisiteShippingPriceRange;
                    if (benefitType === BenefitTypeEnum.FREESHOPPING) if (prerequisiteShippingPriceRange) {
                        completePath = "".concat(basePath, "_upper_limit");
                        extra = "_upper_limit";
                    } else {
                        completePath = "".concat(basePath, "_unlimited");
                        extra = "_unlimited";
                    }
                    var saved = formatBenefitNum(getBenefitValue(benefitType, current), {
                        benefitType
                    }, options);
                    var willSave = formatBenefitNum(getBenefitValue(benefitType, next, true), {
                        benefitType
                    }, options);
                    var threshold = formatThreshold((0, _utils_syntax_patch__WEBPACK_IMPORTED_MODULE_11__.get)(next, "amount"), {
                        thresholdType,
                        benefitType,
                        minThreshold: Number((0, _utils_syntax_patch__WEBPACK_IMPORTED_MODULE_11__.get)(next, "minThreshold"))
                    }, options);
                    var savedCount = Number((0, _utils_syntax_patch__WEBPACK_IMPORTED_MODULE_11__.get)(current, "benefitCount"));
                    var willSaveCount = Number((0, _utils_syntax_patch__WEBPACK_IMPORTED_MODULE_11__.get)(next, "benefitCount"));
                    var fixedAmount;
                    var nextFixedAmount;
                    if (benefitType === BenefitTypeEnum.BUY_X_GET_Y) {
                        if (current) savedCount = Number(nc((0, _utils_syntax_patch__WEBPACK_IMPORTED_MODULE_11__.get)(current, "extMap.realBenefitValue"), savedCount));
                        if (next) willSaveCount = Number(nc((0, _utils_syntax_patch__WEBPACK_IMPORTED_MODULE_11__.get)(next, "extMap.realBenefitValue"), willSaveCount));
                    }
                    if (benefitType === BenefitTypeEnum.NTH_FIXED_PRICE) {
                        savedCount = Number((0, _utils_syntax_patch__WEBPACK_IMPORTED_MODULE_11__.get)(current, "minThreshold"));
                        willSaveCount = Number((0, _utils_syntax_patch__WEBPACK_IMPORTED_MODULE_11__.get)(next, "minThreshold"));
                        var benefit = current || next;
                        fixedAmount = formatBenefitNum(Number((0, _utils_syntax_patch__WEBPACK_IMPORTED_MODULE_11__.get)(benefit, "extMap.fixedPrice")), {
                            benefitType
                        }, options);
                        nextFixedAmount = formatBenefitNum(Number((0, _utils_syntax_patch__WEBPACK_IMPORTED_MODULE_11__.get)(benefit, "extMap.nextFixedPrice")), {
                            benefitType
                        }, options);
                    }
                    var benefitCount = Number(nc(savedCount, willSaveCount));
                    return {
                        path: thresholdType > -1 ? completePath : " ",
                        params: {
                            saved: setWrapper(saved, _objectSpread(_objectSpread({}, warper), {}, {
                                class: "sales__promotionReminder-saved custom-sale-color ".concat(nc((0, _utils_syntax_patch__WEBPACK_IMPORTED_MODULE_11__.get)(warper, "class"), ""))
                            })),
                            willSave: setWrapper(willSave, _objectSpread(_objectSpread({}, warper), {}, {
                                class: "sales__promotionReminder-willSave custom-sale-color ".concat(nc((0, _utils_syntax_patch__WEBPACK_IMPORTED_MODULE_11__.get)(warper, "class"), ""))
                            })),
                            threshold: setWrapper(threshold, _objectSpread(_objectSpread({}, warper), {}, {
                                class: "sales__promotionReminder-threshold custom-sale-color ".concat(nc((0, _utils_syntax_patch__WEBPACK_IMPORTED_MODULE_11__.get)(warper, "class"), ""))
                            })),
                            savedCount: setWrapper(savedCount, _objectSpread(_objectSpread({}, warper), {}, {
                                class: "sales__promotionReminder--benefitCount custom-sale-color ".concat(nc((0, 
                                _utils_syntax_patch__WEBPACK_IMPORTED_MODULE_11__.get)(warper, "class"), ""))
                            })),
                            willSaveCount: setWrapper(willSaveCount, _objectSpread(_objectSpread({}, warper), {}, {
                                class: "sales__promotionReminder--benefitCount custom-sale-color ".concat(nc((0, 
                                _utils_syntax_patch__WEBPACK_IMPORTED_MODULE_11__.get)(warper, "class"), ""))
                            })),
                            fixedAmount: setWrapper(fixedAmount, _objectSpread(_objectSpread({}, warper), {}, {
                                class: "sales__promotionReminder--benefitCount custom-sale-color ".concat(nc((0, 
                                _utils_syntax_patch__WEBPACK_IMPORTED_MODULE_11__.get)(warper, "class"), ""))
                            })),
                            nextFixedAmount: setWrapper(nextFixedAmount, _objectSpread(_objectSpread({}, warper), {}, {
                                class: "sales__promotionReminder--benefitCount custom-sale-color ".concat(nc((0, 
                                _utils_syntax_patch__WEBPACK_IMPORTED_MODULE_11__.get)(warper, "class"), ""))
                            })),
                            upperLimit: benefitType === BenefitTypeEnum.FREESHOPPING && prerequisiteShippingPriceRange ? currency && currency(prerequisiteShippingPriceRange, options) : void 0,
                            extMap,
                            br: lineBreak ? setWrapper("<br/>") : setWrapper("<i></i>"),
                            benefitCount: benefitCount >= 0 ? setWrapper(benefitCount, _objectSpread(_objectSpread({}, warper), {}, {
                                class: "sales__promotionReminder--benefitCount custom-sale-color ".concat(nc((0, 
                                _utils_syntax_patch__WEBPACK_IMPORTED_MODULE_11__.get)(warper, "class"), ""))
                            })) : "",
                            currentMinThreshold: setWrapper(savedCount, _objectSpread(_objectSpread({}, warper), {}, {
                                class: "sales__promotionReminder-threshold custom-sale-color ".concat(nc((0, _utils_syntax_patch__WEBPACK_IMPORTED_MODULE_11__.get)(warper, "class"), ""))
                            })),
                            nextMinThreshold: setWrapper(willSaveCount, _objectSpread(_objectSpread({}, warper), {}, {
                                class: "sales__promotionReminder-threshold custom-sale-color ".concat(nc((0, _utils_syntax_patch__WEBPACK_IMPORTED_MODULE_11__.get)(warper, "class"), ""))
                            }))
                        },
                        benefitType,
                        thresholdType,
                        step,
                        extra
                    };
                }
                return {
                    path: "",
                    params: {},
                    step: 0
                };
            }
            return getShoppingReminderConfig;
        }
        const __WEBPACK_DEFAULT_EXPORT__ = shoppingPromotionReminder;
    },
    "../shared/browser/node_modules/@sentry/tracing/esm/constants.js": (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
        "use strict";
        __webpack_require__.d(__webpack_exports__, {
            FINISH_REASON_TAG: () => FINISH_REASON_TAG,
            IDLE_TRANSACTION_FINISH_REASONS: () => IDLE_TRANSACTION_FINISH_REASONS
        });
        var FINISH_REASON_TAG = "finishReason";
        var IDLE_TRANSACTION_FINISH_REASONS = [ "heartbeatFailed", "idleTimeout", "documentHidden" ];
    },
    "../shared/browser/node_modules/@sentry/tracing/esm/flags.js": (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
        "use strict";
        __webpack_require__.d(__webpack_exports__, {
            IS_DEBUG_BUILD: () => IS_DEBUG_BUILD
        });
        var IS_DEBUG_BUILD = "undefined" === typeof __SENTRY_DEBUG__ ? true : __SENTRY_DEBUG__;
    },
    "../shared/browser/node_modules/@sentry/tracing/esm/hubextensions.js": (module, __webpack_exports__, __webpack_require__) => {
        "use strict";
        __webpack_require__.d(__webpack_exports__, {
            addExtensionMethods: () => addExtensionMethods,
            startIdleTransaction: () => startIdleTransaction
        });
        var tslib_es6 = __webpack_require__("../shared/browser/node_modules/tslib/tslib.es6.js");
        var hub = __webpack_require__("../shared/browser/node_modules/@sentry/hub/esm/hub.js");
        var logger = __webpack_require__("../shared/browser/node_modules/@sentry/utils/esm/logger.js");
        var is = __webpack_require__("../shared/browser/node_modules/@sentry/utils/esm/is.js");
        var node = __webpack_require__("../shared/browser/node_modules/@sentry/utils/esm/node.js");
        var instrument = __webpack_require__("../shared/browser/node_modules/@sentry/utils/esm/instrument.js");
        var flags = __webpack_require__("../shared/browser/node_modules/@sentry/tracing/esm/flags.js");
        var utils = __webpack_require__("../shared/browser/node_modules/@sentry/tracing/esm/utils.js");
        function registerErrorInstrumentation() {
            (0, instrument.addInstrumentationHandler)("error", errorCallback);
            (0, instrument.addInstrumentationHandler)("unhandledrejection", errorCallback);
        }
        function errorCallback() {
            var activeTransaction = (0, utils.getActiveTransaction)();
            if (activeTransaction) {
                var status_1 = "internal_error";
                flags.IS_DEBUG_BUILD && logger.logger.log("[Tracing] Transaction: " + status_1 + " -> Global error occured");
                activeTransaction.setStatus(status_1);
            }
        }
        var idletransaction = __webpack_require__("../shared/browser/node_modules/@sentry/tracing/esm/idletransaction.js");
        var esm_transaction = __webpack_require__("../shared/browser/node_modules/@sentry/tracing/esm/transaction.js");
        module = __webpack_require__.hmd(module);
        function traceHeaders() {
            var scope = this.getScope();
            if (scope) {
                var span = scope.getSpan();
                if (span) return {
                    "sentry-trace": span.toTraceparent()
                };
            }
            return {};
        }
        function sample(transaction, options, samplingContext) {
            if (!(0, utils.hasTracingEnabled)(options)) {
                transaction.sampled = false;
                return transaction;
            }
            if (void 0 !== transaction.sampled) {
                transaction.setMetadata({
                    transactionSampling: {
                        method: "explicitly_set"
                    }
                });
                return transaction;
            }
            var sampleRate;
            if ("function" === typeof options.tracesSampler) {
                sampleRate = options.tracesSampler(samplingContext);
                transaction.setMetadata({
                    transactionSampling: {
                        method: "client_sampler",
                        rate: Number(sampleRate)
                    }
                });
            } else if (void 0 !== samplingContext.parentSampled) {
                sampleRate = samplingContext.parentSampled;
                transaction.setMetadata({
                    transactionSampling: {
                        method: "inheritance"
                    }
                });
            } else {
                sampleRate = options.tracesSampleRate;
                transaction.setMetadata({
                    transactionSampling: {
                        method: "client_rate",
                        rate: Number(sampleRate)
                    }
                });
            }
            if (!isValidSampleRate(sampleRate)) {
                flags.IS_DEBUG_BUILD && logger.logger.warn("[Tracing] Discarding transaction because of invalid sample rate.");
                transaction.sampled = false;
                return transaction;
            }
            if (!sampleRate) {
                flags.IS_DEBUG_BUILD && logger.logger.log("[Tracing] Discarding transaction because " + ("function" === typeof options.tracesSampler ? "tracesSampler returned 0 or false" : "a negative sampling decision was inherited or tracesSampleRate is set to 0"));
                transaction.sampled = false;
                return transaction;
            }
            transaction.sampled = Math.random() < sampleRate;
            if (!transaction.sampled) {
                flags.IS_DEBUG_BUILD && logger.logger.log("[Tracing] Discarding transaction because it's not included in the random sample (sampling rate = " + Number(sampleRate) + ")");
                return transaction;
            }
            flags.IS_DEBUG_BUILD && logger.logger.log("[Tracing] starting " + transaction.op + " transaction - " + transaction.name);
            return transaction;
        }
        function isValidSampleRate(rate) {
            if ((0, is.isNaN)(rate) || !("number" === typeof rate || "boolean" === typeof rate)) {
                flags.IS_DEBUG_BUILD && logger.logger.warn("[Tracing] Given sample rate is invalid. Sample rate must be a boolean or a number between 0 and 1. Got " + JSON.stringify(rate) + " of type " + JSON.stringify(typeof rate) + ".");
                return false;
            }
            if (rate < 0 || rate > 1) {
                flags.IS_DEBUG_BUILD && logger.logger.warn("[Tracing] Given sample rate is invalid. Sample rate must be between 0 and 1. Got " + rate + ".");
                return false;
            }
            return true;
        }
        function _startTransaction(transactionContext, customSamplingContext) {
            var client = this.getClient();
            var options = client && client.getOptions() || {};
            var transaction = new esm_transaction.Transaction(transactionContext, this);
            transaction = sample(transaction, options, (0, tslib_es6.__assign)({
                parentSampled: transactionContext.parentSampled,
                transactionContext
            }, customSamplingContext));
            if (transaction.sampled) transaction.initSpanRecorder(options._experiments && options._experiments.maxSpans);
            return transaction;
        }
        function startIdleTransaction(hub, transactionContext, idleTimeout, onScope, customSamplingContext) {
            var client = hub.getClient();
            var options = client && client.getOptions() || {};
            var transaction = new idletransaction.IdleTransaction(transactionContext, hub, idleTimeout, onScope);
            transaction = sample(transaction, options, (0, tslib_es6.__assign)({
                parentSampled: transactionContext.parentSampled,
                transactionContext
            }, customSamplingContext));
            if (transaction.sampled) transaction.initSpanRecorder(options._experiments && options._experiments.maxSpans);
            return transaction;
        }
        function _addTracingExtensions() {
            var carrier = (0, hub.getMainCarrier)();
            if (!carrier.__SENTRY__) return;
            carrier.__SENTRY__.extensions = carrier.__SENTRY__.extensions || {};
            if (!carrier.__SENTRY__.extensions.startTransaction) carrier.__SENTRY__.extensions.startTransaction = _startTransaction;
            if (!carrier.__SENTRY__.extensions.traceHeaders) carrier.__SENTRY__.extensions.traceHeaders = traceHeaders;
        }
        function _autoloadDatabaseIntegrations() {
            var carrier = (0, hub.getMainCarrier)();
            if (!carrier.__SENTRY__) return;
            var packageToIntegrationMapping = {
                mongodb: function() {
                    var integration = (0, node.dynamicRequire)(module, "./integrations/node/mongo");
                    return new integration.Mongo;
                },
                mongoose: function() {
                    var integration = (0, node.dynamicRequire)(module, "./integrations/node/mongo");
                    return new integration.Mongo({
                        mongoose: true
                    });
                },
                mysql: function() {
                    var integration = (0, node.dynamicRequire)(module, "./integrations/node/mysql");
                    return new integration.Mysql;
                },
                pg: function() {
                    var integration = (0, node.dynamicRequire)(module, "./integrations/node/postgres");
                    return new integration.Postgres;
                }
            };
            var mappedPackages = Object.keys(packageToIntegrationMapping).filter((function(moduleName) {
                return !!(0, node.loadModule)(moduleName);
            })).map((function(pkg) {
                try {
                    return packageToIntegrationMapping[pkg]();
                } catch (e) {
                    return;
                }
            })).filter((function(p) {
                return p;
            }));
            if (mappedPackages.length > 0) carrier.__SENTRY__.integrations = (0, tslib_es6.__spread)(carrier.__SENTRY__.integrations || [], mappedPackages);
        }
        function addExtensionMethods() {
            _addTracingExtensions();
            if ((0, node.isNodeEnv)()) _autoloadDatabaseIntegrations();
            registerErrorInstrumentation();
        }
    },
    "../shared/browser/node_modules/@sentry/tracing/esm/idletransaction.js": (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
        "use strict";
        __webpack_require__.d(__webpack_exports__, {
            DEFAULT_IDLE_TIMEOUT: () => DEFAULT_IDLE_TIMEOUT,
            IdleTransaction: () => IdleTransaction
        });
        var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../shared/browser/node_modules/tslib/tslib.es6.js");
        var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../shared/browser/node_modules/@sentry/utils/esm/time.js");
        var _sentry_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../shared/browser/node_modules/@sentry/utils/esm/logger.js");
        var _constants__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../shared/browser/node_modules/@sentry/tracing/esm/constants.js");
        var _flags__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../shared/browser/node_modules/@sentry/tracing/esm/flags.js");
        var _span__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../shared/browser/node_modules/@sentry/tracing/esm/span.js");
        var _transaction__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("../shared/browser/node_modules/@sentry/tracing/esm/transaction.js");
        var DEFAULT_IDLE_TIMEOUT = 1e3;
        var HEARTBEAT_INTERVAL = 5e3;
        var IdleTransactionSpanRecorder = function(_super) {
            (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(IdleTransactionSpanRecorder, _super);
            function IdleTransactionSpanRecorder(_pushActivity, _popActivity, transactionSpanId, maxlen) {
                if (void 0 === transactionSpanId) transactionSpanId = "";
                var _this = _super.call(this, maxlen) || this;
                _this._pushActivity = _pushActivity;
                _this._popActivity = _popActivity;
                _this.transactionSpanId = transactionSpanId;
                return _this;
            }
            IdleTransactionSpanRecorder.prototype.add = function(span) {
                var _this = this;
                if (span.spanId !== this.transactionSpanId) {
                    span.finish = function(endTimestamp) {
                        span.endTimestamp = "number" === typeof endTimestamp ? endTimestamp : (0, _sentry_utils__WEBPACK_IMPORTED_MODULE_1__.timestampWithMs)();
                        _this._popActivity(span.spanId);
                    };
                    if (void 0 === span.endTimestamp) this._pushActivity(span.spanId);
                }
                _super.prototype.add.call(this, span);
            };
            return IdleTransactionSpanRecorder;
        }(_span__WEBPACK_IMPORTED_MODULE_2__.SpanRecorder);
        var IdleTransaction = function(_super) {
            (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(IdleTransaction, _super);
            function IdleTransaction(transactionContext, _idleHub, _idleTimeout, _onScope) {
                if (void 0 === _idleTimeout) _idleTimeout = DEFAULT_IDLE_TIMEOUT;
                if (void 0 === _onScope) _onScope = false;
                var _this = _super.call(this, transactionContext, _idleHub) || this;
                _this._idleHub = _idleHub;
                _this._idleTimeout = _idleTimeout;
                _this._onScope = _onScope;
                _this.activities = {};
                _this._heartbeatCounter = 0;
                _this._finished = false;
                _this._beforeFinishCallbacks = [];
                if (_idleHub && _onScope) {
                    clearActiveTransaction(_idleHub);
                    _flags__WEBPACK_IMPORTED_MODULE_3__.IS_DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_4__.logger.log("Setting idle transaction on scope. Span ID: " + _this.spanId);
                    _idleHub.configureScope((function(scope) {
                        return scope.setSpan(_this);
                    }));
                }
                _this._initTimeout = setTimeout((function() {
                    if (!_this._finished) _this.finish();
                }), _this._idleTimeout);
                return _this;
            }
            IdleTransaction.prototype.finish = function(endTimestamp) {
                var e_1, _a;
                var _this = this;
                if (void 0 === endTimestamp) endTimestamp = (0, _sentry_utils__WEBPACK_IMPORTED_MODULE_1__.timestampWithMs)();
                this._finished = true;
                this.activities = {};
                if (this.spanRecorder) {
                    _flags__WEBPACK_IMPORTED_MODULE_3__.IS_DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_4__.logger.log("[Tracing] finishing IdleTransaction", new Date(1e3 * endTimestamp).toISOString(), this.op);
                    try {
                        for (var _b = (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__values)(this._beforeFinishCallbacks), _c = _b.next(); !_c.done; _c = _b.next()) {
                            var callback = _c.value;
                            callback(this, endTimestamp);
                        }
                    } catch (e_1_1) {
                        e_1 = {
                            error: e_1_1
                        };
                    } finally {
                        try {
                            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                        } finally {
                            if (e_1) throw e_1.error;
                        }
                    }
                    this.spanRecorder.spans = this.spanRecorder.spans.filter((function(span) {
                        if (span.spanId === _this.spanId) return true;
                        if (!span.endTimestamp) {
                            span.endTimestamp = endTimestamp;
                            span.setStatus("cancelled");
                            _flags__WEBPACK_IMPORTED_MODULE_3__.IS_DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_4__.logger.log("[Tracing] cancelling span since transaction ended early", JSON.stringify(span, void 0, 2));
                        }
                        var keepSpan = span.startTimestamp < endTimestamp;
                        if (!keepSpan) _flags__WEBPACK_IMPORTED_MODULE_3__.IS_DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_4__.logger.log("[Tracing] discarding Span since it happened after Transaction was finished", JSON.stringify(span, void 0, 2));
                        return keepSpan;
                    }));
                    _flags__WEBPACK_IMPORTED_MODULE_3__.IS_DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_4__.logger.log("[Tracing] flushing IdleTransaction");
                } else _flags__WEBPACK_IMPORTED_MODULE_3__.IS_DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_4__.logger.log("[Tracing] No active IdleTransaction");
                if (this._onScope) clearActiveTransaction(this._idleHub);
                return _super.prototype.finish.call(this, endTimestamp);
            };
            IdleTransaction.prototype.registerBeforeFinishCallback = function(callback) {
                this._beforeFinishCallbacks.push(callback);
            };
            IdleTransaction.prototype.initSpanRecorder = function(maxlen) {
                var _this = this;
                if (!this.spanRecorder) {
                    var pushActivity = function(id) {
                        if (_this._finished) return;
                        _this._pushActivity(id);
                    };
                    var popActivity = function(id) {
                        if (_this._finished) return;
                        _this._popActivity(id);
                    };
                    this.spanRecorder = new IdleTransactionSpanRecorder(pushActivity, popActivity, this.spanId, maxlen);
                    _flags__WEBPACK_IMPORTED_MODULE_3__.IS_DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_4__.logger.log("Starting heartbeat");
                    this._pingHeartbeat();
                }
                this.spanRecorder.add(this);
            };
            IdleTransaction.prototype._pushActivity = function(spanId) {
                if (this._initTimeout) {
                    clearTimeout(this._initTimeout);
                    this._initTimeout = void 0;
                }
                _flags__WEBPACK_IMPORTED_MODULE_3__.IS_DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_4__.logger.log("[Tracing] pushActivity: " + spanId);
                this.activities[spanId] = true;
                _flags__WEBPACK_IMPORTED_MODULE_3__.IS_DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_4__.logger.log("[Tracing] new activities count", Object.keys(this.activities).length);
            };
            IdleTransaction.prototype._popActivity = function(spanId) {
                var _this = this;
                if (this.activities[spanId]) {
                    _flags__WEBPACK_IMPORTED_MODULE_3__.IS_DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_4__.logger.log("[Tracing] popActivity " + spanId);
                    delete this.activities[spanId];
                    _flags__WEBPACK_IMPORTED_MODULE_3__.IS_DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_4__.logger.log("[Tracing] new activities count", Object.keys(this.activities).length);
                }
                if (0 === Object.keys(this.activities).length) {
                    var timeout = this._idleTimeout;
                    var end_1 = (0, _sentry_utils__WEBPACK_IMPORTED_MODULE_1__.timestampWithMs)() + timeout / 1e3;
                    setTimeout((function() {
                        if (!_this._finished) {
                            _this.setTag(_constants__WEBPACK_IMPORTED_MODULE_5__.FINISH_REASON_TAG, _constants__WEBPACK_IMPORTED_MODULE_5__.IDLE_TRANSACTION_FINISH_REASONS[1]);
                            _this.finish(end_1);
                        }
                    }), timeout);
                }
            };
            IdleTransaction.prototype._beat = function() {
                if (this._finished) return;
                var heartbeatString = Object.keys(this.activities).join("");
                if (heartbeatString === this._prevHeartbeatString) this._heartbeatCounter += 1; else this._heartbeatCounter = 1;
                this._prevHeartbeatString = heartbeatString;
                if (this._heartbeatCounter >= 3) {
                    _flags__WEBPACK_IMPORTED_MODULE_3__.IS_DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_4__.logger.log("[Tracing] Transaction finished because of no change for 3 heart beats");
                    this.setStatus("deadline_exceeded");
                    this.setTag(_constants__WEBPACK_IMPORTED_MODULE_5__.FINISH_REASON_TAG, _constants__WEBPACK_IMPORTED_MODULE_5__.IDLE_TRANSACTION_FINISH_REASONS[0]);
                    this.finish();
                } else this._pingHeartbeat();
            };
            IdleTransaction.prototype._pingHeartbeat = function() {
                var _this = this;
                _flags__WEBPACK_IMPORTED_MODULE_3__.IS_DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_4__.logger.log("pinging Heartbeat -> current counter: " + this._heartbeatCounter);
                setTimeout((function() {
                    _this._beat();
                }), HEARTBEAT_INTERVAL);
            };
            return IdleTransaction;
        }(_transaction__WEBPACK_IMPORTED_MODULE_6__.Transaction);
        function clearActiveTransaction(hub) {
            if (hub) {
                var scope = hub.getScope();
                if (scope) {
                    var transaction = scope.getTransaction();
                    if (transaction) scope.setSpan(void 0);
                }
            }
        }
    },
    "../shared/browser/node_modules/@sentry/tracing/esm/span.js": (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
        "use strict";
        __webpack_require__.d(__webpack_exports__, {
            SpanRecorder: () => SpanRecorder,
            Span: () => Span
        });
        var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../shared/browser/node_modules/tslib/tslib.es6.js");
        var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../shared/browser/node_modules/@sentry/utils/esm/misc.js");
        var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../shared/browser/node_modules/@sentry/utils/esm/time.js");
        var _sentry_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../shared/browser/node_modules/@sentry/utils/esm/object.js");
        var SpanRecorder = function() {
            function SpanRecorder(maxlen) {
                if (void 0 === maxlen) maxlen = 1e3;
                this.spans = [];
                this._maxlen = maxlen;
            }
            SpanRecorder.prototype.add = function(span) {
                if (this.spans.length > this._maxlen) span.spanRecorder = void 0; else this.spans.push(span);
            };
            return SpanRecorder;
        }();
        var Span = function() {
            function Span(spanContext) {
                this.traceId = (0, _sentry_utils__WEBPACK_IMPORTED_MODULE_0__.uuid4)();
                this.spanId = (0, _sentry_utils__WEBPACK_IMPORTED_MODULE_0__.uuid4)().substring(16);
                this.startTimestamp = (0, _sentry_utils__WEBPACK_IMPORTED_MODULE_1__.timestampWithMs)();
                this.tags = {};
                this.data = {};
                if (!spanContext) return this;
                if (spanContext.traceId) this.traceId = spanContext.traceId;
                if (spanContext.spanId) this.spanId = spanContext.spanId;
                if (spanContext.parentSpanId) this.parentSpanId = spanContext.parentSpanId;
                if ("sampled" in spanContext) this.sampled = spanContext.sampled;
                if (spanContext.op) this.op = spanContext.op;
                if (spanContext.description) this.description = spanContext.description;
                if (spanContext.data) this.data = spanContext.data;
                if (spanContext.tags) this.tags = spanContext.tags;
                if (spanContext.status) this.status = spanContext.status;
                if (spanContext.startTimestamp) this.startTimestamp = spanContext.startTimestamp;
                if (spanContext.endTimestamp) this.endTimestamp = spanContext.endTimestamp;
            }
            Span.prototype.child = function(spanContext) {
                return this.startChild(spanContext);
            };
            Span.prototype.startChild = function(spanContext) {
                var childSpan = new Span((0, tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, spanContext), {
                    parentSpanId: this.spanId,
                    sampled: this.sampled,
                    traceId: this.traceId
                }));
                childSpan.spanRecorder = this.spanRecorder;
                if (childSpan.spanRecorder) childSpan.spanRecorder.add(childSpan);
                childSpan.transaction = this.transaction;
                return childSpan;
            };
            Span.prototype.setTag = function(key, value) {
                var _a;
                this.tags = (0, tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, this.tags), (_a = {}, 
                _a[key] = value, _a));
                return this;
            };
            Span.prototype.setData = function(key, value) {
                var _a;
                this.data = (0, tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, this.data), (_a = {}, 
                _a[key] = value, _a));
                return this;
            };
            Span.prototype.setStatus = function(value) {
                this.status = value;
                return this;
            };
            Span.prototype.setHttpStatus = function(httpStatus) {
                this.setTag("http.status_code", String(httpStatus));
                var spanStatus = spanStatusfromHttpCode(httpStatus);
                if ("unknown_error" !== spanStatus) this.setStatus(spanStatus);
                return this;
            };
            Span.prototype.isSuccess = function() {
                return "ok" === this.status;
            };
            Span.prototype.finish = function(endTimestamp) {
                this.endTimestamp = "number" === typeof endTimestamp ? endTimestamp : (0, _sentry_utils__WEBPACK_IMPORTED_MODULE_1__.timestampWithMs)();
            };
            Span.prototype.toTraceparent = function() {
                var sampledString = "";
                if (void 0 !== this.sampled) sampledString = this.sampled ? "-1" : "-0";
                return this.traceId + "-" + this.spanId + sampledString;
            };
            Span.prototype.toContext = function() {
                return (0, _sentry_utils__WEBPACK_IMPORTED_MODULE_3__.dropUndefinedKeys)({
                    data: this.data,
                    description: this.description,
                    endTimestamp: this.endTimestamp,
                    op: this.op,
                    parentSpanId: this.parentSpanId,
                    sampled: this.sampled,
                    spanId: this.spanId,
                    startTimestamp: this.startTimestamp,
                    status: this.status,
                    tags: this.tags,
                    traceId: this.traceId
                });
            };
            Span.prototype.updateWithContext = function(spanContext) {
                var _a, _b, _c, _d, _e;
                this.data = (_a = spanContext.data, null !== _a && void 0 !== _a ? _a : {});
                this.description = spanContext.description;
                this.endTimestamp = spanContext.endTimestamp;
                this.op = spanContext.op;
                this.parentSpanId = spanContext.parentSpanId;
                this.sampled = spanContext.sampled;
                this.spanId = (_b = spanContext.spanId, null !== _b && void 0 !== _b ? _b : this.spanId);
                this.startTimestamp = (_c = spanContext.startTimestamp, null !== _c && void 0 !== _c ? _c : this.startTimestamp);
                this.status = spanContext.status;
                this.tags = (_d = spanContext.tags, null !== _d && void 0 !== _d ? _d : {});
                this.traceId = (_e = spanContext.traceId, null !== _e && void 0 !== _e ? _e : this.traceId);
                return this;
            };
            Span.prototype.getTraceContext = function() {
                return (0, _sentry_utils__WEBPACK_IMPORTED_MODULE_3__.dropUndefinedKeys)({
                    data: Object.keys(this.data).length > 0 ? this.data : void 0,
                    description: this.description,
                    op: this.op,
                    parent_span_id: this.parentSpanId,
                    span_id: this.spanId,
                    status: this.status,
                    tags: Object.keys(this.tags).length > 0 ? this.tags : void 0,
                    trace_id: this.traceId
                });
            };
            Span.prototype.toJSON = function() {
                return (0, _sentry_utils__WEBPACK_IMPORTED_MODULE_3__.dropUndefinedKeys)({
                    data: Object.keys(this.data).length > 0 ? this.data : void 0,
                    description: this.description,
                    op: this.op,
                    parent_span_id: this.parentSpanId,
                    span_id: this.spanId,
                    start_timestamp: this.startTimestamp,
                    status: this.status,
                    tags: Object.keys(this.tags).length > 0 ? this.tags : void 0,
                    timestamp: this.endTimestamp,
                    trace_id: this.traceId
                });
            };
            return Span;
        }();
        function spanStatusfromHttpCode(httpStatus) {
            if (httpStatus < 400 && httpStatus >= 100) return "ok";
            if (httpStatus >= 400 && httpStatus < 500) switch (httpStatus) {
              case 401:
                return "unauthenticated";

              case 403:
                return "permission_denied";

              case 404:
                return "not_found";

              case 409:
                return "already_exists";

              case 413:
                return "failed_precondition";

              case 429:
                return "resource_exhausted";

              default:
                return "invalid_argument";
            }
            if (httpStatus >= 500 && httpStatus < 600) switch (httpStatus) {
              case 501:
                return "unimplemented";

              case 503:
                return "unavailable";

              case 504:
                return "deadline_exceeded";

              default:
                return "internal_error";
            }
            return "unknown_error";
        }
    },
    "../shared/browser/node_modules/@sentry/tracing/esm/transaction.js": (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
        "use strict";
        __webpack_require__.d(__webpack_exports__, {
            Transaction: () => Transaction
        });
        var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../shared/browser/node_modules/tslib/tslib.es6.js");
        var _sentry_hub__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../shared/browser/node_modules/@sentry/hub/esm/hub.js");
        var _sentry_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../shared/browser/node_modules/@sentry/utils/esm/is.js");
        var _sentry_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../shared/browser/node_modules/@sentry/utils/esm/logger.js");
        var _sentry_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("../shared/browser/node_modules/@sentry/utils/esm/object.js");
        var _flags__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../shared/browser/node_modules/@sentry/tracing/esm/flags.js");
        var _span__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../shared/browser/node_modules/@sentry/tracing/esm/span.js");
        var Transaction = function(_super) {
            (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(Transaction, _super);
            function Transaction(transactionContext, hub) {
                var _this = _super.call(this, transactionContext) || this;
                _this._measurements = {};
                _this._hub = (0, _sentry_hub__WEBPACK_IMPORTED_MODULE_1__.getCurrentHub)();
                if ((0, _sentry_utils__WEBPACK_IMPORTED_MODULE_2__.isInstanceOf)(hub, _sentry_hub__WEBPACK_IMPORTED_MODULE_1__.Hub)) _this._hub = hub;
                _this.name = transactionContext.name || "";
                _this.metadata = transactionContext.metadata || {};
                _this._trimEnd = transactionContext.trimEnd;
                _this.transaction = _this;
                return _this;
            }
            Transaction.prototype.setName = function(name) {
                this.name = name;
            };
            Transaction.prototype.initSpanRecorder = function(maxlen) {
                if (void 0 === maxlen) maxlen = 1e3;
                if (!this.spanRecorder) this.spanRecorder = new _span__WEBPACK_IMPORTED_MODULE_3__.SpanRecorder(maxlen);
                this.spanRecorder.add(this);
            };
            Transaction.prototype.setMeasurements = function(measurements) {
                this._measurements = (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, measurements);
            };
            Transaction.prototype.setMetadata = function(newMetadata) {
                this.metadata = (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, this.metadata), newMetadata);
            };
            Transaction.prototype.finish = function(endTimestamp) {
                var _this = this;
                if (void 0 !== this.endTimestamp) return;
                if (!this.name) {
                    _flags__WEBPACK_IMPORTED_MODULE_4__.IS_DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_5__.logger.warn("Transaction has no name, falling back to `<unlabeled transaction>`.");
                    this.name = "<unlabeled transaction>";
                }
                _super.prototype.finish.call(this, endTimestamp);
                if (true !== this.sampled) {
                    _flags__WEBPACK_IMPORTED_MODULE_4__.IS_DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_5__.logger.log("[Tracing] Discarding transaction because its trace was not chosen to be sampled.");
                    var client = this._hub.getClient();
                    var transport = client && client.getTransport && client.getTransport();
                    if (transport && transport.recordLostEvent) transport.recordLostEvent("sample_rate", "transaction");
                    return;
                }
                var finishedSpans = this.spanRecorder ? this.spanRecorder.spans.filter((function(s) {
                    return s !== _this && s.endTimestamp;
                })) : [];
                if (this._trimEnd && finishedSpans.length > 0) this.endTimestamp = finishedSpans.reduce((function(prev, current) {
                    if (prev.endTimestamp && current.endTimestamp) return prev.endTimestamp > current.endTimestamp ? prev : current;
                    return prev;
                })).endTimestamp;
                var transaction = {
                    contexts: {
                        trace: this.getTraceContext()
                    },
                    spans: finishedSpans,
                    start_timestamp: this.startTimestamp,
                    tags: this.tags,
                    timestamp: this.endTimestamp,
                    transaction: this.name,
                    type: "transaction",
                    sdkProcessingMetadata: this.metadata
                };
                var hasMeasurements = Object.keys(this._measurements).length > 0;
                if (hasMeasurements) {
                    _flags__WEBPACK_IMPORTED_MODULE_4__.IS_DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_5__.logger.log("[Measurements] Adding measurements to transaction", JSON.stringify(this._measurements, void 0, 2));
                    transaction.measurements = this._measurements;
                }
                _flags__WEBPACK_IMPORTED_MODULE_4__.IS_DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_5__.logger.log("[Tracing] Finishing " + this.op + " transaction: " + this.name + ".");
                return this._hub.captureEvent(transaction);
            };
            Transaction.prototype.toContext = function() {
                var spanContext = _super.prototype.toContext.call(this);
                return (0, _sentry_utils__WEBPACK_IMPORTED_MODULE_6__.dropUndefinedKeys)((0, tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0, 
                tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, spanContext), {
                    name: this.name,
                    trimEnd: this._trimEnd
                }));
            };
            Transaction.prototype.updateWithContext = function(transactionContext) {
                var _a;
                _super.prototype.updateWithContext.call(this, transactionContext);
                this.name = (_a = transactionContext.name, null !== _a && void 0 !== _a ? _a : "");
                this._trimEnd = transactionContext.trimEnd;
                return this;
            };
            return Transaction;
        }(_span__WEBPACK_IMPORTED_MODULE_3__.Span);
    },
    "../shared/browser/node_modules/@sentry/tracing/esm/utils.js": (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
        "use strict";
        __webpack_require__.d(__webpack_exports__, {
            hasTracingEnabled: () => hasTracingEnabled,
            getActiveTransaction: () => getActiveTransaction,
            msToSec: () => msToSec,
            secToMs: () => secToMs
        });
        var _sentry_hub__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../shared/browser/node_modules/@sentry/hub/esm/hub.js");
        function hasTracingEnabled(maybeOptions) {
            var client = (0, _sentry_hub__WEBPACK_IMPORTED_MODULE_0__.getCurrentHub)().getClient();
            var options = maybeOptions || client && client.getOptions();
            return !!options && ("tracesSampleRate" in options || "tracesSampler" in options);
        }
        function getActiveTransaction(maybeHub) {
            var hub = maybeHub || (0, _sentry_hub__WEBPACK_IMPORTED_MODULE_0__.getCurrentHub)();
            var scope = hub.getScope();
            return scope && scope.getTransaction();
        }
        function msToSec(time) {
            return time / 1e3;
        }
        function secToMs(time) {
            return 1e3 * time;
        }
    },
    "../shared/browser/node_modules/core-js/modules/es.number.is-nan.js": (__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {
        var $ = __webpack_require__("../shared/browser/node_modules/core-js/internals/export.js");
        $({
            target: "Number",
            stat: true
        }, {
            isNaN: function(number) {
                return number != number;
            }
        });
    },
    "../shared/browser/node_modules/core-js/modules/es.string.replace-all.js": (__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {
        "use strict";
        var $ = __webpack_require__("../shared/browser/node_modules/core-js/internals/export.js");
        var call = __webpack_require__("../shared/browser/node_modules/core-js/internals/function-call.js");
        var uncurryThis = __webpack_require__("../shared/browser/node_modules/core-js/internals/function-uncurry-this.js");
        var requireObjectCoercible = __webpack_require__("../shared/browser/node_modules/core-js/internals/require-object-coercible.js");
        var isCallable = __webpack_require__("../shared/browser/node_modules/core-js/internals/is-callable.js");
        var isNullOrUndefined = __webpack_require__("../shared/browser/node_modules/core-js/internals/is-null-or-undefined.js");
        var isRegExp = __webpack_require__("../shared/browser/node_modules/core-js/internals/is-regexp.js");
        var toString = __webpack_require__("../shared/browser/node_modules/core-js/internals/to-string.js");
        var getMethod = __webpack_require__("../shared/browser/node_modules/core-js/internals/get-method.js");
        var getRegExpFlags = __webpack_require__("../shared/browser/node_modules/core-js/internals/regexp-get-flags.js");
        var getSubstitution = __webpack_require__("../shared/browser/node_modules/core-js/internals/get-substitution.js");
        var wellKnownSymbol = __webpack_require__("../shared/browser/node_modules/core-js/internals/well-known-symbol.js");
        var IS_PURE = __webpack_require__("../shared/browser/node_modules/core-js/internals/is-pure.js");
        var REPLACE = wellKnownSymbol("replace");
        var $TypeError = TypeError;
        var indexOf = uncurryThis("".indexOf);
        var replace = uncurryThis("".replace);
        var stringSlice = uncurryThis("".slice);
        var max = Math.max;
        var stringIndexOf = function(string, searchValue, fromIndex) {
            if (fromIndex > string.length) return -1;
            if ("" === searchValue) return fromIndex;
            return indexOf(string, searchValue, fromIndex);
        };
        $({
            target: "String",
            proto: true
        }, {
            replaceAll: function(searchValue, replaceValue) {
                var O = requireObjectCoercible(this);
                var IS_REG_EXP, flags, replacer, string, searchString, functionalReplace, searchLength, advanceBy, replacement;
                var position = 0;
                var endOfLastMatch = 0;
                var result = "";
                if (!isNullOrUndefined(searchValue)) {
                    IS_REG_EXP = isRegExp(searchValue);
                    if (IS_REG_EXP) {
                        flags = toString(requireObjectCoercible(getRegExpFlags(searchValue)));
                        if (!~indexOf(flags, "g")) throw $TypeError("`.replaceAll` does not allow non-global regexes");
                    }
                    replacer = getMethod(searchValue, REPLACE);
                    if (replacer) return call(replacer, searchValue, O, replaceValue); else if (IS_PURE && IS_REG_EXP) return replace(toString(O), searchValue, replaceValue);
                }
                string = toString(O);
                searchString = toString(searchValue);
                functionalReplace = isCallable(replaceValue);
                if (!functionalReplace) replaceValue = toString(replaceValue);
                searchLength = searchString.length;
                advanceBy = max(1, searchLength);
                position = stringIndexOf(string, searchString, 0);
                while (-1 !== position) {
                    replacement = functionalReplace ? toString(replaceValue(searchString, position, string)) : getSubstitution(searchString, string, position, [], void 0, replaceValue);
                    result += stringSlice(string, endOfLastMatch, position) + replacement;
                    endOfLastMatch = position + searchLength;
                    position = stringIndexOf(string, searchString, position + advanceBy);
                }
                if (endOfLastMatch < string.length) result += stringSlice(string, endOfLastMatch);
                return result;
            }
        });
    },
    "../shared/browser/node_modules/core-js/modules/esnext.string.replace-all.js": (__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {
        __webpack_require__("../shared/browser/node_modules/core-js/modules/es.string.replace-all.js");
    },
    "../shared/browser/utils/sentry.js": (__unused_webpack_module, __unused_webpack___webpack_exports__, __webpack_require__) => {
        "use strict";
        __webpack_require__("../shared/browser/node_modules/core-js/modules/es.regexp.exec.js");
        __webpack_require__("../shared/browser/node_modules/core-js/modules/es.string.split.js");
        __webpack_require__("../shared/browser/node_modules/core-js/modules/es.date.to-string.js");
        __webpack_require__("../shared/browser/node_modules/core-js/modules/es.object.to-string.js");
        __webpack_require__("../shared/browser/node_modules/core-js/modules/es.regexp.to-string.js");
        __webpack_require__("../shared/browser/node_modules/core-js/modules/es.array.includes.js");
        __webpack_require__("../shared/browser/node_modules/core-js/modules/es.string.includes.js");
        __webpack_require__("../shared/browser/node_modules/core-js/modules/es.number.constructor.js");
        __webpack_require__("../shared/browser/node_modules/core-js/modules/es.number.is-nan.js");
        __webpack_require__("../shared/browser/node_modules/core-js/modules/es.array.concat.js");
        __webpack_require__("../shared/browser/node_modules/core-js/modules/es.array.iterator.js");
        __webpack_require__("../shared/browser/node_modules/core-js/modules/web.dom-collections.iterator.js");
        __webpack_require__("../shared/browser/node_modules/core-js/modules/es.array.find.js");
        __webpack_require__("../shared/browser/node_modules/core-js/modules/es.string.match.js");
        __webpack_require__("../shared/browser/node_modules/core-js/modules/es.object.define-property.js");
        __webpack_require__("../shared/browser/node_modules/core-js/modules/es.object.keys.js");
        __webpack_require__("../shared/browser/node_modules/core-js/modules/es.symbol.js");
        __webpack_require__("../shared/browser/node_modules/core-js/modules/es.array.filter.js");
        __webpack_require__("../shared/browser/node_modules/core-js/modules/es.object.get-own-property-descriptor.js");
        __webpack_require__("../shared/browser/node_modules/core-js/modules/es.array.for-each.js");
        __webpack_require__("../shared/browser/node_modules/core-js/modules/web.dom-collections.for-each.js");
        __webpack_require__("../shared/browser/node_modules/core-js/modules/es.object.get-own-property-descriptors.js");
        __webpack_require__("../shared/browser/node_modules/core-js/modules/es.object.define-properties.js");
        var esm = __webpack_require__("../shared/browser/node_modules/@sentry/browser/esm/index.js");
        var sdk = __webpack_require__("../shared/browser/node_modules/@sentry/browser/esm/sdk.js");
        var minimal_esm = __webpack_require__("../shared/browser/node_modules/@sentry/minimal/esm/index.js");
        var get = __webpack_require__("../shared/browser/node_modules/lodash/get.js");
        var get_default = __webpack_require__.n(get);
        var hubextensions = __webpack_require__("../shared/browser/node_modules/@sentry/tracing/esm/hubextensions.js");
        var tslib_es6 = __webpack_require__("../shared/browser/node_modules/tslib/tslib.es6.js");
        var logger = __webpack_require__("../shared/browser/node_modules/@sentry/utils/esm/logger.js");
        var global = __webpack_require__("../shared/browser/node_modules/@sentry/utils/esm/global.js");
        var flags = __webpack_require__("../shared/browser/node_modules/@sentry/tracing/esm/flags.js");
        var idletransaction = __webpack_require__("../shared/browser/node_modules/@sentry/tracing/esm/idletransaction.js");
        var utils = __webpack_require__("../shared/browser/node_modules/@sentry/tracing/esm/utils.js");
        var TRACEPARENT_REGEXP = new RegExp("^[ \\t]*" + "([0-9a-f]{32})?" + "-?([0-9a-f]{16})?" + "-?([01])?" + "[ \\t]*$");
        function extractTraceparentData(traceparent) {
            var matches = traceparent.match(TRACEPARENT_REGEXP);
            if (matches) {
                var parentSampled = void 0;
                if ("1" === matches[3]) parentSampled = true; else if ("0" === matches[3]) parentSampled = false;
                return {
                    traceId: matches[1],
                    parentSampled,
                    parentSpanId: matches[2]
                };
            }
            return;
        }
        var constants = __webpack_require__("../shared/browser/node_modules/@sentry/tracing/esm/constants.js");
        var backgroundtab_global = (0, global.getGlobalObject)();
        function registerBackgroundTabDetection() {
            if (backgroundtab_global && backgroundtab_global.document) backgroundtab_global.document.addEventListener("visibilitychange", (function() {
                var activeTransaction = (0, utils.getActiveTransaction)();
                if (backgroundtab_global.document.hidden && activeTransaction) {
                    var statusType = "cancelled";
                    flags.IS_DEBUG_BUILD && logger.logger.log("[Tracing] Transaction: " + statusType + " -> since tab moved to the background, op: " + activeTransaction.op);
                    if (!activeTransaction.status) activeTransaction.setStatus(statusType);
                    activeTransaction.setTag("visibilitychange", "document.hidden");
                    activeTransaction.setTag(constants.FINISH_REASON_TAG, constants.IDLE_TRANSACTION_FINISH_REASONS[2]);
                    activeTransaction.finish();
                }
            })); else flags.IS_DEBUG_BUILD && logger.logger.warn("[Tracing] Could not set up background tab detection due to lack of global document");
        }
        var node = __webpack_require__("../shared/browser/node_modules/@sentry/utils/esm/node.js");
        var time = __webpack_require__("../shared/browser/node_modules/@sentry/utils/esm/time.js");
        var browser = __webpack_require__("../shared/browser/node_modules/@sentry/utils/esm/browser.js");
        var bindReporter = function(callback, metric, reportAllChanges) {
            var prevValue;
            return function(forceReport) {
                if (metric.value >= 0) if (forceReport || reportAllChanges) {
                    metric.delta = metric.value - (prevValue || 0);
                    if (metric.delta || void 0 === prevValue) {
                        prevValue = metric.value;
                        callback(metric);
                    }
                }
            };
        };
        var generateUniqueID = function() {
            return "v2-" + Date.now() + "-" + (Math.floor(Math.random() * (9e12 - 1)) + 1e12);
        };
        var initMetric = function(name, value) {
            return {
                name,
                value: null !== value && void 0 !== value ? value : -1,
                delta: 0,
                entries: [],
                id: generateUniqueID()
            };
        };
        var observe = function(type, callback) {
            try {
                if (PerformanceObserver.supportedEntryTypes.includes(type)) {
                    if ("first-input" === type && !("PerformanceEventTiming" in self)) return;
                    var po = new PerformanceObserver((function(l) {
                        return l.getEntries().map(callback);
                    }));
                    po.observe({
                        type,
                        buffered: true
                    });
                    return po;
                }
            } catch (e) {}
            return;
        };
        var onHidden = function(cb, once) {
            var onHiddenOrPageHide = function(event) {
                if ("pagehide" === event.type || "hidden" === (0, global.getGlobalObject)().document.visibilityState) {
                    cb(event);
                    if (once) {
                        removeEventListener("visibilitychange", onHiddenOrPageHide, true);
                        removeEventListener("pagehide", onHiddenOrPageHide, true);
                    }
                }
            };
            addEventListener("visibilitychange", onHiddenOrPageHide, true);
            addEventListener("pagehide", onHiddenOrPageHide, true);
        };
        var getCLS = function(onReport, reportAllChanges) {
            var metric = initMetric("CLS", 0);
            var report;
            var sessionValue = 0;
            var sessionEntries = [];
            var entryHandler = function(entry) {
                if (entry && !entry.hadRecentInput) {
                    var firstSessionEntry = sessionEntries[0];
                    var lastSessionEntry = sessionEntries[sessionEntries.length - 1];
                    if (sessionValue && 0 !== sessionEntries.length && entry.startTime - lastSessionEntry.startTime < 1e3 && entry.startTime - firstSessionEntry.startTime < 5e3) {
                        sessionValue += entry.value;
                        sessionEntries.push(entry);
                    } else {
                        sessionValue = entry.value;
                        sessionEntries = [ entry ];
                    }
                    if (sessionValue > metric.value) {
                        metric.value = sessionValue;
                        metric.entries = sessionEntries;
                        if (report) report();
                    }
                }
            };
            var po = observe("layout-shift", entryHandler);
            if (po) {
                report = bindReporter(onReport, metric, reportAllChanges);
                onHidden((function() {
                    po.takeRecords().map(entryHandler);
                    report(true);
                }));
            }
        };
        var firstHiddenTime = -1;
        var initHiddenTime = function() {
            return "hidden" === (0, global.getGlobalObject)().document.visibilityState ? 0 : 1 / 0;
        };
        var trackChanges = function() {
            onHidden((function(_a) {
                var timeStamp = _a.timeStamp;
                firstHiddenTime = timeStamp;
            }), true);
        };
        var getVisibilityWatcher = function() {
            if (firstHiddenTime < 0) {
                firstHiddenTime = initHiddenTime();
                trackChanges();
            }
            return {
                get firstHiddenTime() {
                    return firstHiddenTime;
                }
            };
        };
        var getFID = function(onReport, reportAllChanges) {
            var visibilityWatcher = getVisibilityWatcher();
            var metric = initMetric("FID");
            var report;
            var entryHandler = function(entry) {
                if (report && entry.startTime < visibilityWatcher.firstHiddenTime) {
                    metric.value = entry.processingStart - entry.startTime;
                    metric.entries.push(entry);
                    report(true);
                }
            };
            var po = observe("first-input", entryHandler);
            if (po) {
                report = bindReporter(onReport, metric, reportAllChanges);
                onHidden((function() {
                    po.takeRecords().map(entryHandler);
                    po.disconnect();
                }), true);
            }
        };
        var reportedMetricIDs = {};
        var getLCP = function(onReport, reportAllChanges) {
            var visibilityWatcher = getVisibilityWatcher();
            var metric = initMetric("LCP");
            var report;
            var entryHandler = function(entry) {
                var value = entry.startTime;
                if (value < visibilityWatcher.firstHiddenTime) {
                    metric.value = value;
                    metric.entries.push(entry);
                }
                if (report) report();
            };
            var po = observe("largest-contentful-paint", entryHandler);
            if (po) {
                report = bindReporter(onReport, metric, reportAllChanges);
                var stopListening_1 = function() {
                    if (!reportedMetricIDs[metric.id]) {
                        po.takeRecords().map(entryHandler);
                        po.disconnect();
                        reportedMetricIDs[metric.id] = true;
                        report(true);
                    }
                };
                [ "keydown", "click" ].forEach((function(type) {
                    addEventListener(type, stopListening_1, {
                        once: true,
                        capture: true
                    });
                }));
                onHidden(stopListening_1, true);
            }
        };
        var metrics_global = (0, global.getGlobalObject)();
        var MetricsInstrumentation = function() {
            function MetricsInstrumentation(_reportAllChanges) {
                if (void 0 === _reportAllChanges) _reportAllChanges = false;
                this._reportAllChanges = _reportAllChanges;
                this._measurements = {};
                this._performanceCursor = 0;
                if (!(0, node.isNodeEnv)() && metrics_global && metrics_global.performance && metrics_global.document) {
                    if (metrics_global.performance.mark) metrics_global.performance.mark("sentry-tracing-init");
                    this._trackCLS();
                    this._trackLCP();
                    this._trackFID();
                }
            }
            MetricsInstrumentation.prototype.addPerformanceEntries = function(transaction) {
                var _this = this;
                if (!metrics_global || !metrics_global.performance || !metrics_global.performance.getEntries || !time.browserPerformanceTimeOrigin) return;
                flags.IS_DEBUG_BUILD && logger.logger.log("[Tracing] Adding & adjusting spans using Performance API");
                var timeOrigin = (0, utils.msToSec)(time.browserPerformanceTimeOrigin);
                var responseStartTimestamp;
                var requestStartTimestamp;
                metrics_global.performance.getEntries().slice(this._performanceCursor).forEach((function(entry) {
                    var startTime = (0, utils.msToSec)(entry.startTime);
                    var duration = (0, utils.msToSec)(entry.duration);
                    if ("navigation" === transaction.op && timeOrigin + startTime < transaction.startTimestamp) return;
                    switch (entry.entryType) {
                      case "navigation":
                        addNavigationSpans(transaction, entry, timeOrigin);
                        responseStartTimestamp = timeOrigin + (0, utils.msToSec)(entry.responseStart);
                        requestStartTimestamp = timeOrigin + (0, utils.msToSec)(entry.requestStart);
                        break;

                      case "mark":
                      case "paint":
                      case "measure":
                        var startTimestamp = addMeasureSpans(transaction, entry, startTime, duration, timeOrigin);
                        var firstHidden = getVisibilityWatcher();
                        var shouldRecord = entry.startTime < firstHidden.firstHiddenTime;
                        if ("first-paint" === entry.name && shouldRecord) {
                            flags.IS_DEBUG_BUILD && logger.logger.log("[Measurements] Adding FP");
                            _this._measurements["fp"] = {
                                value: entry.startTime
                            };
                            _this._measurements["mark.fp"] = {
                                value: startTimestamp
                            };
                        }
                        if ("first-contentful-paint" === entry.name && shouldRecord) {
                            flags.IS_DEBUG_BUILD && logger.logger.log("[Measurements] Adding FCP");
                            _this._measurements["fcp"] = {
                                value: entry.startTime
                            };
                            _this._measurements["mark.fcp"] = {
                                value: startTimestamp
                            };
                        }
                        break;

                      case "resource":
                        var resourceName = entry.name.replace(metrics_global.location.origin, "");
                        addResourceSpans(transaction, entry, resourceName, startTime, duration, timeOrigin);
                    }
                }));
                this._performanceCursor = Math.max(performance.getEntries().length - 1, 0);
                this._trackNavigator(transaction);
                if ("pageload" === transaction.op) {
                    var timeOrigin_1 = (0, utils.msToSec)(time.browserPerformanceTimeOrigin);
                    if ("number" === typeof responseStartTimestamp) {
                        flags.IS_DEBUG_BUILD && logger.logger.log("[Measurements] Adding TTFB");
                        this._measurements["ttfb"] = {
                            value: 1e3 * (responseStartTimestamp - transaction.startTimestamp)
                        };
                        if ("number" === typeof requestStartTimestamp && requestStartTimestamp <= responseStartTimestamp) this._measurements["ttfb.requestTime"] = {
                            value: 1e3 * (responseStartTimestamp - requestStartTimestamp)
                        };
                    }
                    [ "fcp", "fp", "lcp" ].forEach((function(name) {
                        if (!_this._measurements[name] || timeOrigin_1 >= transaction.startTimestamp) return;
                        var oldValue = _this._measurements[name].value;
                        var measurementTimestamp = timeOrigin_1 + (0, utils.msToSec)(oldValue);
                        var normalizedValue = Math.abs(1e3 * (measurementTimestamp - transaction.startTimestamp));
                        var delta = normalizedValue - oldValue;
                        flags.IS_DEBUG_BUILD && logger.logger.log("[Measurements] Normalized " + name + " from " + oldValue + " to " + normalizedValue + " (" + delta + ")");
                        _this._measurements[name].value = normalizedValue;
                    }));
                    if (this._measurements["mark.fid"] && this._measurements["fid"]) _startChild(transaction, {
                        description: "first input delay",
                        endTimestamp: this._measurements["mark.fid"].value + (0, utils.msToSec)(this._measurements["fid"].value),
                        op: "web.vitals",
                        startTimestamp: this._measurements["mark.fid"].value
                    });
                    if (!("fcp" in this._measurements)) delete this._measurements.cls;
                    transaction.setMeasurements(this._measurements);
                    tagMetricInfo(transaction, this._lcpEntry, this._clsEntry);
                    transaction.setTag("sentry_reportAllChanges", this._reportAllChanges);
                }
            };
            MetricsInstrumentation.prototype._trackNavigator = function(transaction) {
                var navigator = metrics_global.navigator;
                if (!navigator) return;
                var connection = navigator.connection;
                if (connection) {
                    if (connection.effectiveType) transaction.setTag("effectiveConnectionType", connection.effectiveType);
                    if (connection.type) transaction.setTag("connectionType", connection.type);
                    if (isMeasurementValue(connection.rtt)) this._measurements["connection.rtt"] = {
                        value: connection.rtt
                    };
                    if (isMeasurementValue(connection.downlink)) this._measurements["connection.downlink"] = {
                        value: connection.downlink
                    };
                }
                if (isMeasurementValue(navigator.deviceMemory)) transaction.setTag("deviceMemory", String(navigator.deviceMemory));
                if (isMeasurementValue(navigator.hardwareConcurrency)) transaction.setTag("hardwareConcurrency", String(navigator.hardwareConcurrency));
            };
            MetricsInstrumentation.prototype._trackCLS = function() {
                var _this = this;
                getCLS((function(metric) {
                    var entry = metric.entries.pop();
                    if (!entry) return;
                    flags.IS_DEBUG_BUILD && logger.logger.log("[Measurements] Adding CLS");
                    _this._measurements["cls"] = {
                        value: metric.value
                    };
                    _this._clsEntry = entry;
                }));
            };
            MetricsInstrumentation.prototype._trackLCP = function() {
                var _this = this;
                getLCP((function(metric) {
                    var entry = metric.entries.pop();
                    if (!entry) return;
                    var timeOrigin = (0, utils.msToSec)(time.browserPerformanceTimeOrigin);
                    var startTime = (0, utils.msToSec)(entry.startTime);
                    flags.IS_DEBUG_BUILD && logger.logger.log("[Measurements] Adding LCP");
                    _this._measurements["lcp"] = {
                        value: metric.value
                    };
                    _this._measurements["mark.lcp"] = {
                        value: timeOrigin + startTime
                    };
                    _this._lcpEntry = entry;
                }), this._reportAllChanges);
            };
            MetricsInstrumentation.prototype._trackFID = function() {
                var _this = this;
                getFID((function(metric) {
                    var entry = metric.entries.pop();
                    if (!entry) return;
                    var timeOrigin = (0, utils.msToSec)(time.browserPerformanceTimeOrigin);
                    var startTime = (0, utils.msToSec)(entry.startTime);
                    flags.IS_DEBUG_BUILD && logger.logger.log("[Measurements] Adding FID");
                    _this._measurements["fid"] = {
                        value: metric.value
                    };
                    _this._measurements["mark.fid"] = {
                        value: timeOrigin + startTime
                    };
                }));
            };
            return MetricsInstrumentation;
        }();
        function addNavigationSpans(transaction, entry, timeOrigin) {
            [ "unloadEvent", "redirect", "domContentLoadedEvent", "loadEvent", "connect" ].forEach((function(event) {
                addPerformanceNavigationTiming(transaction, entry, event, timeOrigin);
            }));
            addPerformanceNavigationTiming(transaction, entry, "secureConnection", timeOrigin, "TLS/SSL", "connectEnd");
            addPerformanceNavigationTiming(transaction, entry, "fetch", timeOrigin, "cache", "domainLookupStart");
            addPerformanceNavigationTiming(transaction, entry, "domainLookup", timeOrigin, "DNS");
            addRequest(transaction, entry, timeOrigin);
        }
        function addMeasureSpans(transaction, entry, startTime, duration, timeOrigin) {
            var measureStartTimestamp = timeOrigin + startTime;
            var measureEndTimestamp = measureStartTimestamp + duration;
            _startChild(transaction, {
                description: entry.name,
                endTimestamp: measureEndTimestamp,
                op: entry.entryType,
                startTimestamp: measureStartTimestamp
            });
            return measureStartTimestamp;
        }
        function addResourceSpans(transaction, entry, resourceName, startTime, duration, timeOrigin) {
            if ("xmlhttprequest" === entry.initiatorType || "fetch" === entry.initiatorType) return;
            var data = {};
            if ("transferSize" in entry) data["Transfer Size"] = entry.transferSize;
            if ("encodedBodySize" in entry) data["Encoded Body Size"] = entry.encodedBodySize;
            if ("decodedBodySize" in entry) data["Decoded Body Size"] = entry.decodedBodySize;
            var startTimestamp = timeOrigin + startTime;
            var endTimestamp = startTimestamp + duration;
            _startChild(transaction, {
                description: resourceName,
                endTimestamp,
                op: entry.initiatorType ? "resource." + entry.initiatorType : "resource",
                startTimestamp,
                data
            });
        }
        function addPerformanceNavigationTiming(transaction, entry, event, timeOrigin, description, eventEnd) {
            var end = eventEnd ? entry[eventEnd] : entry[event + "End"];
            var start = entry[event + "Start"];
            if (!start || !end) return;
            _startChild(transaction, {
                op: "browser",
                description: null !== description && void 0 !== description ? description : event,
                startTimestamp: timeOrigin + (0, utils.msToSec)(start),
                endTimestamp: timeOrigin + (0, utils.msToSec)(end)
            });
        }
        function addRequest(transaction, entry, timeOrigin) {
            _startChild(transaction, {
                op: "browser",
                description: "request",
                startTimestamp: timeOrigin + (0, utils.msToSec)(entry.requestStart),
                endTimestamp: timeOrigin + (0, utils.msToSec)(entry.responseEnd)
            });
            _startChild(transaction, {
                op: "browser",
                description: "response",
                startTimestamp: timeOrigin + (0, utils.msToSec)(entry.responseStart),
                endTimestamp: timeOrigin + (0, utils.msToSec)(entry.responseEnd)
            });
        }
        function _startChild(transaction, _a) {
            var startTimestamp = _a.startTimestamp, ctx = (0, tslib_es6.__rest)(_a, [ "startTimestamp" ]);
            if (startTimestamp && transaction.startTimestamp > startTimestamp) transaction.startTimestamp = startTimestamp;
            return transaction.startChild((0, tslib_es6.__assign)({
                startTimestamp
            }, ctx));
        }
        function isMeasurementValue(value) {
            return "number" === typeof value && isFinite(value);
        }
        function tagMetricInfo(transaction, lcpEntry, clsEntry) {
            if (lcpEntry) {
                flags.IS_DEBUG_BUILD && logger.logger.log("[Measurements] Adding LCP Data");
                if (lcpEntry.element) transaction.setTag("lcp.element", (0, browser.htmlTreeAsString)(lcpEntry.element));
                if (lcpEntry.id) transaction.setTag("lcp.id", lcpEntry.id);
                if (lcpEntry.url) transaction.setTag("lcp.url", lcpEntry.url.trim().slice(0, 200));
                transaction.setTag("lcp.size", lcpEntry.size);
            }
            if (clsEntry && clsEntry.sources) {
                flags.IS_DEBUG_BUILD && logger.logger.log("[Measurements] Adding CLS Data");
                clsEntry.sources.forEach((function(source, index) {
                    return transaction.setTag("cls.source." + (index + 1), (0, browser.htmlTreeAsString)(source.node));
                }));
            }
        }
        var string = __webpack_require__("../shared/browser/node_modules/@sentry/utils/esm/string.js");
        var instrument = __webpack_require__("../shared/browser/node_modules/@sentry/utils/esm/instrument.js");
        var is = __webpack_require__("../shared/browser/node_modules/@sentry/utils/esm/is.js");
        var DEFAULT_TRACING_ORIGINS = [ "localhost", /^\// ];
        var defaultRequestInstrumentationOptions = {
            traceFetch: true,
            traceXHR: true,
            tracingOrigins: DEFAULT_TRACING_ORIGINS
        };
        function instrumentOutgoingRequests(_options) {
            var _a = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, defaultRequestInstrumentationOptions), _options), traceFetch = _a.traceFetch, traceXHR = _a.traceXHR, tracingOrigins = _a.tracingOrigins, shouldCreateSpanForRequest = _a.shouldCreateSpanForRequest;
            var urlMap = {};
            var defaultShouldCreateSpan = function(url) {
                if (urlMap[url]) return urlMap[url];
                var origins = tracingOrigins;
                urlMap[url] = origins.some((function(origin) {
                    return (0, string.isMatchingPattern)(url, origin);
                })) && !(0, string.isMatchingPattern)(url, "sentry_key");
                return urlMap[url];
            };
            var shouldCreateSpan = defaultShouldCreateSpan;
            if ("function" === typeof shouldCreateSpanForRequest) shouldCreateSpan = function(url) {
                return defaultShouldCreateSpan(url) && shouldCreateSpanForRequest(url);
            };
            var spans = {};
            if (traceFetch) (0, instrument.addInstrumentationHandler)("fetch", (function(handlerData) {
                fetchCallback(handlerData, shouldCreateSpan, spans);
            }));
            if (traceXHR) (0, instrument.addInstrumentationHandler)("xhr", (function(handlerData) {
                xhrCallback(handlerData, shouldCreateSpan, spans);
            }));
        }
        function fetchCallback(handlerData, shouldCreateSpan, spans) {
            if (!(0, utils.hasTracingEnabled)() || !(handlerData.fetchData && shouldCreateSpan(handlerData.fetchData.url))) return;
            if (handlerData.endTimestamp) {
                var spanId = handlerData.fetchData.__span;
                if (!spanId) return;
                var span = spans[spanId];
                if (span) {
                    if (handlerData.response) span.setHttpStatus(handlerData.response.status); else if (handlerData.error) span.setStatus("internal_error");
                    span.finish();
                    delete spans[spanId];
                }
                return;
            }
            var activeTransaction = (0, utils.getActiveTransaction)();
            if (activeTransaction) {
                span = activeTransaction.startChild({
                    data: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, handlerData.fetchData), {
                        type: "fetch"
                    }),
                    description: handlerData.fetchData.method + " " + handlerData.fetchData.url,
                    op: "http.client"
                });
                handlerData.fetchData.__span = span.spanId;
                spans[span.spanId] = span;
                var request = handlerData.args[0] = handlerData.args[0];
                var options = handlerData.args[1] = handlerData.args[1] || {};
                var headers = options.headers;
                if ((0, is.isInstanceOf)(request, Request)) headers = request.headers;
                if (headers) if ("function" === typeof headers.append) headers.append("sentry-trace", span.toTraceparent()); else if (Array.isArray(headers)) headers = (0, 
                tslib_es6.__spread)(headers, [ [ "sentry-trace", span.toTraceparent() ] ]); else headers = (0, 
                tslib_es6.__assign)((0, tslib_es6.__assign)({}, headers), {
                    "sentry-trace": span.toTraceparent()
                }); else headers = {
                    "sentry-trace": span.toTraceparent()
                };
                options.headers = headers;
            }
        }
        function xhrCallback(handlerData, shouldCreateSpan, spans) {
            if (!(0, utils.hasTracingEnabled)() || handlerData.xhr && handlerData.xhr.__sentry_own_request__ || !(handlerData.xhr && handlerData.xhr.__sentry_xhr__ && shouldCreateSpan(handlerData.xhr.__sentry_xhr__.url))) return;
            var xhr = handlerData.xhr.__sentry_xhr__;
            if (handlerData.endTimestamp) {
                var spanId = handlerData.xhr.__sentry_xhr_span_id__;
                if (!spanId) return;
                var span = spans[spanId];
                if (span) {
                    span.setHttpStatus(xhr.status_code);
                    span.finish();
                    delete spans[spanId];
                }
                return;
            }
            var activeTransaction = (0, utils.getActiveTransaction)();
            if (activeTransaction) {
                span = activeTransaction.startChild({
                    data: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, xhr.data), {
                        type: "xhr",
                        method: xhr.method,
                        url: xhr.url
                    }),
                    description: xhr.method + " " + xhr.url,
                    op: "http.client"
                });
                handlerData.xhr.__sentry_xhr_span_id__ = span.spanId;
                spans[handlerData.xhr.__sentry_xhr_span_id__] = span;
                if (handlerData.xhr.setRequestHeader) try {
                    handlerData.xhr.setRequestHeader("sentry-trace", span.toTraceparent());
                } catch (_) {}
            }
        }
        var router_global = (0, global.getGlobalObject)();
        function instrumentRoutingWithDefaults(customStartTransaction, startTransactionOnPageLoad, startTransactionOnLocationChange) {
            if (void 0 === startTransactionOnPageLoad) startTransactionOnPageLoad = true;
            if (void 0 === startTransactionOnLocationChange) startTransactionOnLocationChange = true;
            if (!router_global || !router_global.location) {
                flags.IS_DEBUG_BUILD && logger.logger.warn("Could not initialize routing instrumentation due to invalid location");
                return;
            }
            var startingUrl = router_global.location.href;
            var activeTransaction;
            if (startTransactionOnPageLoad) activeTransaction = customStartTransaction({
                name: router_global.location.pathname,
                op: "pageload"
            });
            if (startTransactionOnLocationChange) (0, instrument.addInstrumentationHandler)("history", (function(_a) {
                var to = _a.to, from = _a.from;
                if (void 0 === from && startingUrl && -1 !== startingUrl.indexOf(to)) {
                    startingUrl = void 0;
                    return;
                }
                if (from !== to) {
                    startingUrl = void 0;
                    if (activeTransaction) {
                        flags.IS_DEBUG_BUILD && logger.logger.log("[Tracing] Finishing current transaction with op: " + activeTransaction.op);
                        activeTransaction.finish();
                    }
                    activeTransaction = customStartTransaction({
                        name: router_global.location.pathname,
                        op: "navigation"
                    });
                }
            }));
        }
        var DEFAULT_MAX_TRANSACTION_DURATION_SECONDS = 600;
        var DEFAULT_BROWSER_TRACING_OPTIONS = (0, tslib_es6.__assign)({
            idleTimeout: idletransaction.DEFAULT_IDLE_TIMEOUT,
            markBackgroundTransactions: true,
            maxTransactionDuration: DEFAULT_MAX_TRANSACTION_DURATION_SECONDS,
            routingInstrumentation: instrumentRoutingWithDefaults,
            startTransactionOnLocationChange: true,
            startTransactionOnPageLoad: true
        }, defaultRequestInstrumentationOptions);
        var BrowserTracing = function() {
            function BrowserTracing(_options) {
                this.name = BrowserTracing.id;
                this._configuredIdleTimeout = void 0;
                var tracingOrigins = defaultRequestInstrumentationOptions.tracingOrigins;
                if (_options) {
                    this._configuredIdleTimeout = _options.idleTimeout;
                    if (_options.tracingOrigins && Array.isArray(_options.tracingOrigins) && 0 !== _options.tracingOrigins.length) tracingOrigins = _options.tracingOrigins; else flags.IS_DEBUG_BUILD && (this._emitOptionsWarning = true);
                }
                this.options = (0, tslib_es6.__assign)((0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, DEFAULT_BROWSER_TRACING_OPTIONS), _options), {
                    tracingOrigins
                });
                var _metricOptions = this.options._metricOptions;
                this._metrics = new MetricsInstrumentation(_metricOptions && _metricOptions._reportAllChanges);
            }
            BrowserTracing.prototype.setupOnce = function(_, getCurrentHub) {
                var _this = this;
                this._getCurrentHub = getCurrentHub;
                if (this._emitOptionsWarning) {
                    flags.IS_DEBUG_BUILD && logger.logger.warn("[Tracing] You need to define `tracingOrigins` in the options. Set an array of urls or patterns to trace.");
                    flags.IS_DEBUG_BUILD && logger.logger.warn("[Tracing] We added a reasonable default for you: " + defaultRequestInstrumentationOptions.tracingOrigins);
                }
                var _a = this.options, instrumentRouting = _a.routingInstrumentation, startTransactionOnLocationChange = _a.startTransactionOnLocationChange, startTransactionOnPageLoad = _a.startTransactionOnPageLoad, markBackgroundTransactions = _a.markBackgroundTransactions, traceFetch = _a.traceFetch, traceXHR = _a.traceXHR, tracingOrigins = _a.tracingOrigins, shouldCreateSpanForRequest = _a.shouldCreateSpanForRequest;
                instrumentRouting((function(context) {
                    return _this._createRouteTransaction(context);
                }), startTransactionOnPageLoad, startTransactionOnLocationChange);
                if (markBackgroundTransactions) registerBackgroundTabDetection();
                instrumentOutgoingRequests({
                    traceFetch,
                    traceXHR,
                    tracingOrigins,
                    shouldCreateSpanForRequest
                });
            };
            BrowserTracing.prototype._createRouteTransaction = function(context) {
                var _this = this;
                if (!this._getCurrentHub) {
                    flags.IS_DEBUG_BUILD && logger.logger.warn("[Tracing] Did not create " + context.op + " transaction because _getCurrentHub is invalid.");
                    return;
                }
                var _a = this.options, beforeNavigate = _a.beforeNavigate, idleTimeout = _a.idleTimeout, maxTransactionDuration = _a.maxTransactionDuration;
                var parentContextFromHeader = "pageload" === context.op ? getHeaderContext() : void 0;
                var expandedContext = (0, tslib_es6.__assign)((0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, context), parentContextFromHeader), {
                    trimEnd: true
                });
                var modifiedContext = "function" === typeof beforeNavigate ? beforeNavigate(expandedContext) : expandedContext;
                var finalContext = void 0 === modifiedContext ? (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, expandedContext), {
                    sampled: false
                }) : modifiedContext;
                if (false === finalContext.sampled) flags.IS_DEBUG_BUILD && logger.logger.log("[Tracing] Will not send " + finalContext.op + " transaction because of beforeNavigate.");
                flags.IS_DEBUG_BUILD && logger.logger.log("[Tracing] Starting " + finalContext.op + " transaction on scope");
                var hub = this._getCurrentHub();
                var location = (0, global.getGlobalObject)().location;
                var idleTransaction = (0, hubextensions.startIdleTransaction)(hub, finalContext, idleTimeout, true, {
                    location
                });
                idleTransaction.registerBeforeFinishCallback((function(transaction, endTimestamp) {
                    _this._metrics.addPerformanceEntries(transaction);
                    adjustTransactionDuration((0, utils.secToMs)(maxTransactionDuration), transaction, endTimestamp);
                }));
                idleTransaction.setTag("idleTimeout", this._configuredIdleTimeout);
                return idleTransaction;
            };
            BrowserTracing.id = "BrowserTracing";
            return BrowserTracing;
        }();
        function getHeaderContext() {
            var header = getMetaContent("sentry-trace");
            if (header) return extractTraceparentData(header);
            return;
        }
        function getMetaContent(metaName) {
            var el = (0, global.getGlobalObject)().document.querySelector("meta[name=" + metaName + "]");
            return el ? el.getAttribute("content") : null;
        }
        function adjustTransactionDuration(maxDuration, transaction, endTimestamp) {
            var diff = endTimestamp - transaction.startTimestamp;
            var isOutdatedTransaction = endTimestamp && (diff > maxDuration || diff < 0);
            if (isOutdatedTransaction) {
                transaction.setStatus("deadline_exceeded");
                transaction.setTag("maxTransactionDurationExceeded", "true");
            }
        }
        (0, hubextensions.addExtensionMethods)();
        var get_env = __webpack_require__("../shared/browser/utils/get-env.js");
        function ownKeys(object, enumerableOnly) {
            var keys = Object.keys(object);
            if (Object.getOwnPropertySymbols) {
                var symbols = Object.getOwnPropertySymbols(object);
                if (enumerableOnly) symbols = symbols.filter((function(sym) {
                    return Object.getOwnPropertyDescriptor(object, sym).enumerable;
                }));
                keys.push.apply(keys, symbols);
            }
            return keys;
        }
        function _objectSpread(target) {
            for (var i = 1; i < arguments.length; i++) {
                var source = null != arguments[i] ? arguments[i] : {};
                if (i % 2) ownKeys(Object(source), true).forEach((function(key) {
                    _defineProperty(target, key, source[key]);
                })); else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); else ownKeys(Object(source)).forEach((function(key) {
                    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
                }));
            }
            return target;
        }
        function _defineProperty(obj, key, value) {
            if (key in obj) Object.defineProperty(obj, key, {
                value,
                enumerable: true,
                configurable: true,
                writable: true
            }); else obj[key] = value;
            return obj;
        }
        var errorTypesEnum = {
            CUSTOM_CODES: "CUSTOM_CODES"
        };
        var errorPositionEnum = {
            TOP: "top",
            BOTTOM: "bottom"
        };
        function getErrorLine(error) {
            if (!(error && error.stack)) return;
            var stack = error.stack.toString().split(/\r\n|\n/);
            var frameRE = /:(\d+):(?:\d+)[^\d]*$/;
            var firstTrace;
            var frame;
            do {
                frame = stack.shift();
                firstTrace = frameRE.exec(frame);
                if (!frame) break;
            } while (!frameRE.exec(frame) || frame.includes("at <anonymous>") || 1 === +(firstTrace && firstTrace[1]));
            var causeTrace = +(firstTrace && firstTrace[1] || "0");
            return causeTrace;
        }
        function setEventErrorInfo(event, position) {
            if (!event.contexts) event.contexts = {};
            event.contexts.error_info = {
                position,
                error_type: errorTypesEnum.CUSTOM_CODES
            };
        }
        try {
            var _getEnv = (0, get_env["default"])(), APP_ENV = _getEnv.APP_ENV, SENTRY_TRACES_SAMPLE_RATE = _getEnv.SENTRY_TRACES_SAMPLE_RATE;
            var sampleRate = Number(SENTRY_TRACES_SAMPLE_RATE);
            if (Number.isNaN(sampleRate)) sampleRate = 0;
            var options = {
                debug: false,
                environment: APP_ENV,
                release: "".concat(APP_ENV, "@").concat("undefined_theme_Arise_1.0.0_0fb375dfb"),
                dsn: (0, get_env["default"])(void 0 || "SENTRY_DSN") || "",
                autoSessionTracking: false,
                ignoreErrors: [ "ReportingObserver [deprecation]" ],
                blacklistUrls: [ /^localhost/, /extensions\//i, /^chrome:\/\//i, /^chrome-extensions:\/\//i, /^safari-extension:\/\//i, /^file:\/\//i ],
                tracesSampleRate: sampleRate,
                integrations: [ new BrowserTracing ],
                beforeSend: function(event, hint) {
                    var error = hint.originalException;
                    var frames = event && event.exception && event.exception.values && event.exception.values[0] && event.exception.values[0].stacktrace && event.exception.values[0].stacktrace.frames;
                    var traceFrames = frames || [];
                    var errorLine = getErrorLine(error) || traceFrames[0] && traceFrames[0].lineno;
                    var file = traceFrames.find((function(frame) {
                        return frame.lineno === errorLine;
                    }));
                    var errorFile = get_default()(file, "filename", void 0) || get_default()(traceFrames[0], "filename", void 0);
                    if (errorFile === window.location.href) {
                        if ("undefined" !== typeof window.__CUSTOM_HEADER_START__ && "undefined" !== typeof window.__CUSTOM_HEADER_END__) {
                            var isHeadError = errorLine >= +window.__CUSTOM_HEADER_START__ && errorLine <= +window.__CUSTOM_HEADER_END__;
                            if (isHeadError) setEventErrorInfo(event, errorPositionEnum.TOP);
                        }
                        if ("undefined" !== typeof window.__CUSTOM_FOOTER_START__) {
                            var isFootError = errorLine >= +window.__CUSTOM_FOOTER_START__ && ("undefined" !== typeof window.__CUSTOM_FOOTER_END__ ? errorLine <= +window.__CUSTOM_FOOTER_END__ : true);
                            if (isFootError) setEventErrorInfo(event, errorPositionEnum.BOTTOM);
                        }
                    }
                    return event;
                },
                beforeBreadcrumb: function(breadcrumb, hint) {
                    var response = get_default()(hint, "xhr.response", void 0);
                    if ("xhr" === breadcrumb.category && response) try {
                        var trace_id = response.match(/trace_id":"(\S*?)"/)[1] || "";
                        return _objectSpread(_objectSpread({}, breadcrumb), {}, {
                            data: _objectSpread(_objectSpread({}, breadcrumb.data), {}, {
                                trace_id
                            })
                        });
                    } catch (err) {
                        return breadcrumb;
                    }
                    return breadcrumb;
                }
            };
            if (-1 === sampleRate) delete options.tracesSampleRate;
            sdk.init(options);
            var eventOn = get_default()(window, "Shopline.event", void 0);
            if (eventOn) eventOn.on("Sentry::CaptureMessage", (function() {
                minimal_esm.captureMessage.apply(esm, arguments);
            }));
        } catch (e) {
            console.error(e);
        }
    },
    "../shared/browser/utils/template.js": (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
        "use strict";
        __webpack_require__.d(__webpack_exports__, {
            default: () => __WEBPACK_DEFAULT_EXPORT__
        });
        __webpack_require__("../shared/browser/node_modules/core-js/modules/es.regexp.exec.js");
        __webpack_require__("../shared/browser/node_modules/core-js/modules/es.string.replace.js");
        __webpack_require__("../shared/browser/node_modules/core-js/modules/esnext.string.replace-all.js");
        __webpack_require__("../shared/browser/node_modules/core-js/modules/es.regexp.constructor.js");
        __webpack_require__("../shared/browser/node_modules/core-js/modules/es.regexp.to-string.js");
        __webpack_require__("../shared/browser/node_modules/core-js/modules/es.array.concat.js");
        __webpack_require__("../shared/browser/node_modules/core-js/modules/es.object.keys.js");
        var lodash_get__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("../shared/browser/node_modules/lodash/get.js");
        var lodash_get__WEBPACK_IMPORTED_MODULE_7___default = __webpack_require__.n(lodash_get__WEBPACK_IMPORTED_MODULE_7__);
        var regStrFormat = function(regStr) {
            return regStr.replace(/([\^\$\{\}\[\]\.\?\+\*\(\)\\])/g, "\\$1");
        };
        var template = function(text, data) {
            var options = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
            var _ref = options || {}, _ref$prefix = _ref.prefix, prefix = void 0 === _ref$prefix ? "${" : _ref$prefix, _ref$suffix = _ref.suffix, suffix = void 0 === _ref$suffix ? "}" : _ref$suffix, replaceAll = _ref.replaceAll;
            var reg = new RegExp("".concat(regStrFormat(prefix), "\\s*(\\w+)\\s*").concat(regStrFormat(suffix)), "g");
            if ("string" === typeof text) {
                if (data && Object.keys(data).length) return text.replace(reg, (function(o, p) {
                    var val = lodash_get__WEBPACK_IMPORTED_MODULE_7___default()(data, p);
                    return !replaceAll && ("string" === typeof val || "number" === typeof val) ? val : o;
                }));
                return text;
            }
            return "";
        };
        const __WEBPACK_DEFAULT_EXPORT__ = template;
    }
}, __webpack_require__ => {
    var __webpack_exec__ = moduleId => __webpack_require__(__webpack_require__.s = moduleId);
    __webpack_require__.O(0, [ "vendor" ], (() => (__webpack_exec__("../shared/browser/utils/sentry.js"), 
    __webpack_exec__("./src/assets/activity/main.js"))));
    __webpack_require__.O();
} ]);